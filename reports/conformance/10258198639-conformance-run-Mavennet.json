{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5eec915c-827a-424d-b10c-dcc6350f46aa",
        "name": "Clear Cache",
        "item": [
          {
            "id": "386ebdbf-e726-4f14-a931-2e4c5901b70f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f162588-1a85-43ea-b1f9-c86438703c15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6420d039-1515-4e07-a1ed-7ec501708ded"
                }
              }
            ]
          },
          {
            "id": "8f03ecdb-82fd-4145-bfcd-a61cb6cd64b8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e485626-1ace-45eb-b882-5efd1db8cd9b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e0df74e7-7273-49c5-9cbb-749a30623fda"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "21cb9528-4fd6-48bd-88d5-15382e5ecdf8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cb396055-17c8-4f65-b3df-156ef061c6c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3507768a-a997-408d-87fb-5e3e4022bffc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "815bba5c-6838-4ecc-b111-09bd6acea668",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edeae0f4-a6b8-4cce-8b35-5526bfbec847"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49283515-618e-4e25-be29-1fa7638816b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5cd5f7f8-52fb-424f-88ae-513175a9ef43"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d99c3b2-ba28-4c23-870d-d259b666d363",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4b4da6a-e58a-4041-b708-3ea033ba91a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cff089a-90b3-411f-967d-d0260587d3f5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cdb5077a-61b8-4e84-bd6b-ac60117c0a8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4848631d-b924-4ef6-91f6-71a19af87e06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6bec3e3-42cc-4ebd-887c-d46901f48ec1"
            }
          }
        ]
      },
      {
        "id": "484ffd74-2080-4b0b-8466-026f5f8ec315",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "22de8234-3ff5-4b35-8477-957ed88489be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65fb1908-937f-48dc-8f35-07b6e84af54f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ac94f38f-72d0-4fda-a4bc-8596872930c3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2ce17a-7dda-4d59-aeb9-c0997f2d76e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b7d127b-d3c4-4b67-aa16-8df9b6574984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c393fa19-1542-4ddb-b74f-4e429343ccec",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6124ec6-b47b-42d3-8847-0c68bdfd42f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4ab9175-7adc-4276-8be8-57b84a96d9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d64395d-9aa1-4be7-850b-95e6080bd53e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67a8cc1-a381-4f7e-bec4-45e76dafdb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e69ce09-c2e1-46eb-a009-04867f1a11fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "550257ea-de3d-4611-b983-112382c786f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05f50055-5de1-4ed0-a9fc-52d921d17acb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0d8ebc-57f4-4e5d-ad83-cb286a273a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96764d11-6542-498d-a893-ac2ff208bf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6921c897-8655-405e-8515-87a70847d60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c800e8d-a480-4bfc-b312-14bcbe83ce6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "618ca3d3-4df1-4143-a7be-a99811073fa2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc6dae2f-1087-45c9-8b62-e0648e75cef5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9403d1ab-56f2-4a13-828f-85772b8b5123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d32b3d66-7e61-4389-a1e2-ab1e64de8551"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62078351-43f1-4454-97e6-c2cc829ea2f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "dea7e3c8-193e-421b-ba5a-4cdeec75a043"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c8dcfd4-714a-46c3-b04f-d80280216314",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4ecee31-91ef-4f25-a1d8-59a3885c2496"
            }
          }
        ]
      },
      {
        "id": "988324a9-88f1-4837-88b8-3a9d6d9fca23",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8b5b3d63-3bbc-477a-8e9e-247880af7ec5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5b9d4ec-499d-4ea4-99a4-bb1f42740bea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fcfdc106-8cbf-427b-bd36-2986c97be076",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee049c7-ffd3-4545-a4d8-1ac60827c54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1872866b-882d-4b8d-9b26-4a34892d9ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350b3d56-8358-407c-94e8-b5b53138dd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50cea232-b507-4fff-9bb1-0707253d40f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cfd599-2a6b-4d8a-bac3-bd1ff8dc3157",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73256f33-6ea7-4453-afa5-3bdce4538d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679f06f8-df64-465c-8b74-7595ef0b052f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b71132-d8c0-41cb-a01c-4c669e5dbfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "667c76e0-ac6e-4518-999b-0178c7ed2255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f53b761-963b-43ff-8361-137bf4a8c7f7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169c2f52-58b9-4f7e-867f-9971d3463eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af93717-9b82-47d0-8067-2982c1deac88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66b30d1-00f8-4832-b2d2-ac40b2633053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cd312b6-2199-488a-b778-605f52546bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d34af02-05e1-46af-aa55-096f24e1d4c1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52532079-ed74-40ce-8708-2aead0b2228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c0c61d-02ad-442a-8f14-44420607cff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6f2152-0157-4185-9147-d798811abf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adad259e-7fa6-4af2-ac9a-9d82e74f4074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e476b8-0637-4532-ba32-3f46ebd87c58",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ae3c7b-5200-4023-b10c-45870c4ab599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1391890-277a-4c7e-8524-5177ff096cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e2faa-7c9a-4649-b577-cad5f6ec4d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6bf9a41-f4b7-467e-b2fe-411ecce4404d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f6e7ac-8a9c-4c3f-889e-78b51552b04e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57adcbf3-b6b5-4ea1-b8bf-878304e6c2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c2bcfd-6ca9-4fd9-9c70-0690902ce05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6107a2b9-935f-451a-9b30-f9c0c5bfabfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "268c1ead-5e56-4c2c-abb1-ea44c10e82c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d912e82a-4138-424a-b943-bf3126f34b58",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfeca1f-2f84-456b-8f09-7347ca6afcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdb0113-9967-441b-81ca-437e2979767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ad11a2-2980-47bb-b959-d49d97823938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a37af7c3-c80c-4fa1-8383-928cb16fa898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158d7567-aee6-44ec-97f3-5c5b18263938",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fe93e4-7546-4f6d-802b-3ba84e54214c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c815749-450a-4877-9792-f500ae805aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e67084-865e-425a-94cc-1717b521803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3a0ed97-c011-4854-b5b3-1942e46f6515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e63bfc-a55c-477a-9f17-f2858a6eb6ea",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ba0bc4-6c43-4e2c-9c40-f8ae37cc7723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42aa75f4-ce62-4f05-8db9-99352e5178de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77adaa0-c510-4ce8-8e50-ea6c28bae369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93511019-7e5d-466f-b27a-43d220e43f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3cfff1-ad38-4517-9605-791952c78b03",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af5f893-0eb5-45e7-a214-19084d29b60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dc6cb0-030c-47f4-86d2-e804ce98a6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b2a800-a1e3-40cb-9390-5e010f16d41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e82964b4-dd2e-4df9-beea-d62040d1bef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6bc76c-4fe4-4f92-9098-c6fabdd93a56",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03636eed-fd1b-4d1b-a1e7-6c2b97d79d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961c1e2d-7b1e-41f1-90a0-717dc848d419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374fbb66-b224-4b79-82e2-fa104560f4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dea29a7f-838d-4fae-9eb9-6ef9e76480cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd431eeb-cdb6-4c52-9b2c-8ba2092231cd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecd4ef9-3274-4d69-a80c-d4955b08478c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5313f134-5633-4775-94e8-149e3b08eb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e726e578-cfca-440f-a438-6e31c88fc353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d98a403-1033-4f33-8704-d2f3e73e85b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0ea3ec-2310-4a18-82c8-cbdf6186690e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64663444-009f-4d29-8542-6a2a088046d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb1631d-8a36-406d-8458-66f23d2cf4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc06f4-a770-4211-8f1e-81fddb728112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0993128-94f2-4e69-8bd0-6961ffdf28fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405d8575-7245-419a-9721-594649953a4b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b465f0e7-8bce-4f7e-8051-a6e3d2699206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428d29b0-e24a-47e4-b6f1-304bb2f25d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45c118-1901-4639-8eda-f476e1bba7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e5d2b60-770b-4ef5-bc2a-1caad2c56022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d87976-f6e8-497e-a52d-9e30ea13595d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17485f8d-c209-4710-8952-9af27c4e0c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946d2e33-314e-4cf2-8467-4bc5606532f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8258b78a-4803-4d1f-8821-0deabc06d84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f5c6991-42a9-4ba1-b8e5-d2323f05353f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5903739-337d-47a0-bffe-bf8dc6a8541a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbc02c0-db8b-49f9-940c-83f1528c3f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65802bef-d0f1-435c-9242-5bdaaed9faa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8077d20f-3d9e-44f7-bb7d-d811266258cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4b327a3-8c63-4bfe-bb1b-54d9e8f62b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925816e8-21a0-49a5-8ecf-de2d1dcdfd33",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445a6748-44da-4a47-a43a-8a1e2df38197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5769df78-3906-4bd1-9184-7b9e31194602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3339274-f6af-4aa2-8750-58cdced0ba33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce08467b-38c4-4eb2-a56d-1bdb51f0bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae43b2f-7a61-4a31-94f6-18620277c9fb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432519ae-edcb-44df-8f1d-de2db064e9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f392dd-ae34-49fd-9379-f4b9fe658e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c2dcac-6459-4f85-8a30-8246c2a30530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6462e95-c3de-4a5e-ad9d-854ea8ff1430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669adeeb-e5e8-4d3f-94b6-1a75af2e90c7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa550fd-7bb9-4ab7-af89-405232df650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617b73be-e2f1-4946-9877-9e5642659dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6e944a-dc09-4741-be4f-675517329418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e055007c-6aab-434f-8c3c-4988520aefdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6687045a-400d-47c8-a995-7c4ee974a490",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7e1165-b034-413d-875e-832f96fd12f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71411524-646d-48cc-a3c5-73ae3fc8fd94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5611bcc-e617-4203-bfcb-668a397a8e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa27a4f6-b30e-4f59-8d7b-b840ebf5d28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f0ea0c-8fab-49c3-860c-fd4a585d1cb0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86521037-6b3f-47db-ad95-9d252a5a19b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831df63e-a736-4520-8067-5b8c281ffa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a293683f-d9f0-4e9a-9db1-9695dd1d4dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c12bab9d-8021-4ecc-9843-28717e157987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac111bbf-5a2f-44a7-8fed-6253501aa853",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334e5aa8-91c4-4ef5-a05b-339289dcb4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca8d3fa-64a3-4ced-8931-f48d568d4c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0101e2f-2bc6-4093-af00-78b9ad8c72d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "374b9ad4-bc27-442d-8e21-cdaaa3c534bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645742af-161b-4f2a-8f7f-c8a026845cae",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1655b154-a4df-4339-a256-2046851a573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a8d0d89-ff3b-4120-a07d-777e27aac5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5362b6-82d2-49d9-b169-9453c7db0ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "def9c4bb-dee1-4623-aa83-083a93858c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27826a1e-4bd0-492c-a005-883ba41d782a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe5230f-0f77-4105-a32f-eda10b98b0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d736849-a0d7-4cbb-be2b-3a85f50a0f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42ddec4-1918-4276-b9c0-3d4e282faff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1308ff30-a05d-47cb-a275-574a2e901db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f2b4ff-35e0-41ec-bb26-b7415c6b28fd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df346809-75c3-412f-863c-c0666b838df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9931adc-f38a-4c5c-93fc-d65aad32f6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48eff607-1540-4e68-8391-8830e1640357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0e1e95-8e83-495a-8bf7-e0bd6f29fa3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c01650-25e8-4a67-9587-218e0ca4b977",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8423e6-32e8-4843-baa8-9d8238a2ebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823efca9-bb02-4eac-9b79-cdd6c805866a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5a368a-da73-4cfb-b9a6-5858d8485aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5493c55-07fb-4e35-ab37-b7992ab9f465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7500df53-3091-4dca-8a9c-0cac4be3014d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e85c1-b7ac-40eb-a215-e9a4c6a7a1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e275848-2b1b-4e52-9677-2742fc2f312b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1cc008-eb80-4aba-bb9c-056d83bf757a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c86046d-a460-4b2b-8f0c-10df7c451096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7619d2-205e-43c7-a39f-32486884dfe7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dfb3fc-7fa0-409b-a858-36c79548bfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0702fd94-8dd6-489a-bfa4-cb4e49c9ebca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab21376b-2c7e-4aa0-bc3b-c9c56b1640a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff228b3c-93d7-4ef6-9eae-7553795ec376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db309835-10c1-45d4-9cab-99f737b84afa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e231c783-627d-439c-9164-0d768f5a2042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7561c10-39d1-4eeb-b642-8c6d6aea16b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f485489b-e9a2-4a1d-b34b-b9289e456b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8516c766-b518-4f8e-9290-56dfdb32cc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da96f0d-2ca9-4e44-b039-3312c7da0c62",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02913ed-8931-4f40-8bb6-16a1e253a7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ac8bf0-4358-4ce3-872d-c6ab16e0ced8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528b50c7-6f98-4ca7-be2b-fa3c6e8a574b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "749da53b-5db5-42a8-9862-108e4cf7a163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0492f7-f3c9-43dc-a881-670a43674f3a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f073cd4-59ee-44f4-aea2-deee7002d181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35577044-535c-4440-8f0e-5463f2711fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd57fd3-d91e-47cc-a34e-53dd4ce0532d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c750c3-f49f-47b0-a5bc-3c3b1a4bac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcae74c-078c-4bac-a208-dd78b7fc05d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dc1ea5-3e6e-441f-ab31-b198416aaef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a57f5aa2-dfc3-43fd-b000-f84acd9d5cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ff32cc-57f3-4fcb-aaf5-5ca10019517f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7e4106-70b6-4135-9d08-421453f24b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bab21eb-86a9-4a89-9589-ed78fbc15c60",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbdbe41-324e-48ba-a669-8ef0f018e3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bde711-ba83-453b-bd01-c1c3e4b613df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98224a67-e2ed-4eaf-b86c-67ab804b8a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4399be78-037c-49f9-bae7-0840470961c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84022cd3-c674-45d0-b811-43b6f62d5da8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf5f943-2e10-48e0-af10-5034965f8bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ced5af-1b3b-469d-93f6-ec4bbe30812c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a3c6f1-932c-4b2c-bde0-881563689918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc785dd8-db3d-4443-9a5a-4f7bbee6a94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16db2ed8-44db-4584-8052-726f93763f30",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a47d3e9-ff45-495d-8086-b85bbe52626a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b236e50-db6c-429d-9c19-ea035c096a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d40cb2-7492-4ee8-a260-2c9f57064d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6edbc470-cd52-4d3f-b592-faab714eb325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a8e3cb-ea5d-49f4-be00-e4e558fb1456",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404e1ab8-b232-4e44-acd0-78c86b26b75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39c3c39e-c5bf-4c8d-bdfc-df78445b0fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48c1749-7596-4511-8c54-b56531612e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "567c0b84-5377-48a8-b995-3a1a723020da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098dccdb-7076-431f-81eb-f614a741b16a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f3f1a-8e51-4106-8e4f-145fb3e99873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7e83a1-82a3-4d1f-bb31-be5e7a351140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e154952a-8e74-4f5c-a592-cdb8b608f570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "964d20a3-0dea-497d-ad0c-ee55b6b53c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881e1c23-496c-4b2d-b4ff-0017cf749231",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3498473-d4b2-4e69-9c08-d952d431f103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a8c6e88-22c9-4b10-911d-e30f2aef54a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47777e91-98ac-4042-9d3c-83dccd9cc038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c02a9ce-8a07-4100-9dad-be35fe68f238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ca724b-e3e6-4124-b94a-5150a0cd7d02",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276cb838-b566-433c-9c7b-b9662e6af12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819e558b-00dd-4453-a660-a5bac0a4978c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937df431-cec6-488a-ab3c-fae30e6e2d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4da9cf-8b14-4d66-ac4c-e474cccaf5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c2e475-fd59-4354-9583-cfe32da4408d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bd5f67-7b2a-48d6-a894-f9527f0e10aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fc5225-fbd4-43f9-add3-8cccb1c630cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ae81c5-381c-4ff6-8cf0-fcbcdaa1ef08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2dcbb87-6035-4cf9-87e9-441905cd082f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a364a6d-7b37-48f9-8360-b9376c577cde",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd26e590-c3ae-41d2-a53e-d58ead9327f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe9edeb-b68a-4210-9242-cbc62cace2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f646c80-16ff-49be-a531-aa6f5af850d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a59ed7c-2ef6-443e-b9ea-6451f1c72865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ceaf09-05bc-41ff-8a9c-98d0d5a94d59",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434387bf-100a-43f1-b7cf-207152603439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fd9fe1-3f33-47fa-b373-ee0b65086e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b42993a-975f-477c-af69-f39c1121f832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e1529384-a817-419d-b518-f2af1c7c09cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e72acd9-8a02-4c8f-8fdb-ba2756e69bb9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeca75b0-9513-4594-8ec3-37da2f8ff58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eabd5713-5019-4343-aad4-7400eb765d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff902f1-aa44-4811-b097-ac38547efd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "21dc8549-c770-4d1c-a83b-13d7c011169f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6347a67c-b477-4428-8018-a9eb510eabe8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b26cd8-ee4d-4074-b6b6-9c2ce8bea48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f59be9ec-fccd-4b09-a561-a0e8d7b7efc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f510057d-18e7-4829-861f-8a9d6cae9b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc73a3aa-44af-4bce-98ba-14333c9196ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96503464-3298-47be-a3ca-eae94ccca3f9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101c8b4b-ceb6-42e2-a04d-59ecf4fb3054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7358c10d-f56f-4604-8514-6f8e45595217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b979c6e-cf9a-45ac-933f-3c4d691bc84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "882f6cf5-f65e-4353-8548-1ca26d6223d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0e0af1-69d1-44b8-975f-c94e27e15b21",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b053dbf-93bf-4b27-81db-fb7733fb320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdffe6b-0d3b-4ff9-8c8e-7d6eeb93a41d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58df0927-b427-48b1-b7bd-95befdd10aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "708f84ed-2c80-4e4d-a2f6-40a9e600aead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4507ad4c-765e-4d8c-b869-597e70be772d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666c9df3-45eb-439f-9320-13c82ef91516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a30496-81d7-4e46-b8aa-1e4f4c27d414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbe8eb1-7c18-48d0-a0b5-f5366c46cc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06737455-f520-4989-8d14-b768bc363616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cee2042-7e21-4f83-90bc-49401cd5421d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c151764-0689-483d-a0f8-64198179b480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4022480-b332-49a9-871b-7855c4a7bfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e924a48e-7c32-4ae4-8c9d-509a06f142c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b91adf6-2392-4e37-a2f6-27e7815a4756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1419897-4479-4015-99af-740d328a41fe",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67e706-7292-45d8-9897-e53ba3f9d6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2d8619-f045-48b7-a3dc-263689198ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5bdf35-2f67-4f04-a07f-5c0acaeb945f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de1c372e-6a4a-446a-978e-2ca7408d8347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24930a33-7fc9-4a5b-bd00-083240f07a5e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2834592e-6e5c-4933-baa1-cff0f4815651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bb6657-6ac3-4a4d-adb3-3adb1121baf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef25d43-a186-4b3b-a4ce-f337d69842b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "837bdbdb-969c-452e-b4a5-9828e0bb3d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8a3c8a-e4e7-49f0-8591-da442f7084ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e601ffe-2bdf-4e47-9f41-f031b1b4e596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3ae75d-dff9-4f35-9318-fc5bdfe2c3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe10984-da70-4d97-8341-bdcf08983f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ea2fe2-356a-43c2-8ac3-38ebff502fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69889ca8-4cb5-411a-8b97-c9c272b235cf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0955389-8ec0-4a2e-81d8-412be6b919ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94276b8f-4df0-48e5-824a-0f6bb4f4a3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42478e6-19f5-4056-a54d-260941181e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a66971-0266-413c-ade3-93344f1389f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6880a64-fbd9-4876-afe8-6b8a4a082cf1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8c1fa4-401d-4585-9eaf-a02b7544aa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1fc1b7-3f1a-4a3a-8e73-918861f23b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c312a852-0966-4aa2-a252-549877f48cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6892e27-915b-48c5-a033-77fee1956063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815161d9-4d1e-45d2-aea5-68f6db877351",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce729389-e6af-45f4-8702-0ba4cb932133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f2ee85-fc84-4edd-87cc-440072299a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a26a5a-504b-40d7-ad4b-a287519d67cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7929d51-11ff-4aa1-b305-9d75a003598e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a966d505-20ab-4c67-bfac-b0416de0489e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2d2833-920a-4bf7-852b-11e20309e32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee4a200-7890-4781-9f11-af652c85dcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918d6939-3520-4257-a887-e2118e0ae7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "657c9c11-02b2-40a0-84bd-47fde181f263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93de101f-7668-4e0d-b07d-b7878cf60a64",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297c344c-01d6-4995-8f7f-607085398617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650f5ec7-119e-459f-b867-5238a2098a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec30c0da-2b7e-4a8f-91d6-346c6240d1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "81caa511-9254-43c2-b82d-232fd9a394e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a78c31-5dda-4144-998d-392b509f5ceb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f36881-5a96-4f63-b63b-fcb70df3cc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61dcce5d-a182-4f26-9fb4-e871f9f5e999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b7d7cc-7ae6-48c4-8442-b06d7242be49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe58664-6a16-4607-992e-1eb296cb9f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c4eb1f-baba-47a3-85dd-0905fa14e763",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbebc8b5-9a0a-4b2d-aad0-15c44fe4a8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7799c9-b22f-4024-b92e-361d3fa95590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5aeb0ec-9011-45da-a2f7-70bb1613b5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "47772b80-0679-43b1-8734-c15994135426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ce6226-1d40-455d-9977-8e3f2b150ecc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d88066-3717-45f2-a853-5efe120789a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730872cb-c252-462f-99ee-352749502a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938e6b03-f7f6-489c-b25d-d4ed6067fedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "36f24d3c-5177-4821-bcd8-9c57aa519a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06162875-e6fb-4650-9682-f4ac987757be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43ff64c-258a-4944-a68d-f72c7bf8a12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96f1a20-3b45-4673-8d59-fa7100df056b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7acc2c-1049-4532-9a0c-a59ccb6b0070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d24e5c-0b6c-4cfa-b993-dad083e1836e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684113b8-1c94-4962-ba09-16fd346361b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159797d9-85db-43e8-ac03-6230028c058e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f657b8d0-3123-4dbd-91da-5e52a27998f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e661cc-5572-4e4e-8429-af34b5631220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e75de923-cc42-4b23-8903-fd1783f2dcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289fca9a-e455-433d-8bda-34651b248a55",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45becb8b-d464-43f5-afc2-0871e44d6400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc089f0c-3b6f-41d2-a358-4f75795c82fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e1432b-4bd9-4bb1-a1ac-3e78777e5ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6b24c3-d120-4678-aaf3-96c296561b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92702974-62f8-46a4-9ffd-6d5e43aaa88e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46ae04d-8b8e-41e5-9a2d-20ca20a11842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde7a774-ef58-4162-a9d8-14938ac57c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb48206-a142-479f-8cd7-e0a553a56a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1212a5-ca6d-42a8-b6e1-e252bee1104a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68aecf9b-10a6-4655-8f6e-85eed7291ebd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da5bf79-b7cd-48f8-8847-11be400240f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b807ba33-49aa-4490-bba4-147275a51cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3874c55b-08f0-467b-9000-f2999633224e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4c8c66-e70a-4ba9-abd8-fe454a3b0465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cadc90-35f9-4dfb-92a5-400ee6d8ff9f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd1e17c-1c4f-475e-85f8-42cf5d47fc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf91437-ad75-412b-b970-4f272e56fb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2540b7f4-9bcd-4658-a972-3ba4aa0f1370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b863b4b4-d543-45b1-b070-a3866e0649f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af8b490-ed63-449c-862c-c7c8d5dcbe85",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd19a0f6-fba4-4fb7-91fd-24e3d0554e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978e188a-a660-4a20-bfc8-3041379be414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9147cb-9504-4c2e-8cd0-78c58cbbcd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "432177de-bead-4ae1-a7e5-eff9929bbfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789ef7e0-4ce3-4d7c-a499-cb125215b30f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ae5c3e-aaff-4557-82d5-1824d2e74fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3acac1fc-2770-496a-a311-e39e144cd90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ebcc61-55f8-4803-aa12-b05ed3de679a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "034e971d-003b-4419-a3ee-a3181c237dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888b9a19-d364-4057-887e-51e3c7ea8719",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d63c7e-ea9f-4353-83b8-550b4aafeda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f80506-6d76-4b2f-90c2-c3ea265bb2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c9309b-8459-431e-935f-da2bc294f6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aef20023-2cf3-4ca4-88ec-c92a82f1066e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde0aa7e-63a2-4543-b7a9-4b102cf5e4b8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2203b8-8831-4fbe-b76d-3c6aaeb83e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20855ce3-56af-491b-8662-cac775057f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c023a463-741e-4184-873c-6fa6d1670227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebaee961-b96f-49f8-ba4b-62b12dc0c222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bd17f-29a1-4cdb-8a47-63ea3a2c1670",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199d7063-9b83-4097-a5e9-431d47860e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df321420-55b8-400d-b447-1a0f496aff95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921b686a-bc63-4be7-b937-d1445befc92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5157a70-af75-4c41-936f-13ba4c11a709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d67af88-0ac6-40df-ab02-6844816a94e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a3022a-243a-4247-bd16-ac77abb52fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b683d0b7-f5c2-45b0-8ebc-80552ab0f99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4a7ed0-c25f-4585-a593-4c411946a0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15a05dbb-b271-41ce-9baa-d04b5e498a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c7f25b-7488-438a-ab23-2f0522e166b0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e824e7b-4dc3-4c4a-a04e-03f88d745c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d3c3cf-b9eb-4fcf-8e39-c221694801b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc999d0-ebf8-4e8e-861c-e6b3187641e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1f5a36-b801-4b7c-b72d-aee46423e900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fc4158-252f-49c3-8d07-6019f10fb587",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f9da6e-49d0-4c87-98c9-fc648fb94d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af322df-441f-44e4-a5f3-648995e82154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61039003-aef4-4ee3-933b-793ca93c1ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4749553f-37d1-4058-abb2-26acde0007ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435c5c0b-72e2-4766-8d5b-26f102b82557",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ab966-829a-4e64-b5d1-14f2f3e643ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7c3e8d-7d1d-4da4-a4d4-2b566543a6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e219d4-228c-45b9-889b-deba553a6ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7dc137-1c90-45a6-94ad-aa3cab3bf2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b950653-db28-41e0-a77c-43c5197ee75d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb63a991-c9eb-44df-87ff-255fc950f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a13aba-4156-4a14-a986-989b584e84d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f60e2f-d697-4110-8f7a-88359f8b872d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddaf3231-5068-48a1-8a11-3764d3e0dea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69b1cdc-edbd-4d9c-80bf-d19400e9c709",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79286053-beb4-4c20-aaf0-cb01dad7782e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9394574-156b-42b5-adfb-5859abd1e140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f317f0f-e626-462c-81f7-2697a8502ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21592340-973c-4b36-9a1b-f34320b5e447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110bd154-8323-4f9e-9d54-961e946efbbc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b3d78f-cbb7-4573-a9e1-0550a35178cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f562d2c-6ea8-4fb7-8156-49697472bfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b75256-f0db-45dc-987f-ee21497a85c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5143127-2312-4c27-ab35-0be2cf3c125c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ae94c9-90a9-4bd9-9b50-41868a4ebd59",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e157ea3a-75c3-4321-badc-813cdf648f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dc1156-ff07-425d-8c27-e23da029b4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5eda7ff-8eb5-4809-af52-2d8ea6a3ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59087193-e076-455b-8134-3afa6e5c69c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7260a751-14c6-48b9-a7b2-f5d5cec8f49b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187f3cfb-894c-4452-96da-d1552b34af9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17528f6f-67d0-459d-9635-844bf86d5c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a53e4d-9d28-4d80-9c6d-746d780481d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02fd010f-be6c-4785-b948-c71942824377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372517cd-521e-459c-a41c-41c5064f3155",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597670c5-bdd2-4c79-b27c-1d45c08604ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f955ec-4d92-48ab-8498-f417c3d28f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecb3c09-301e-4489-83c2-d4ce52bcc041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7683346-5de6-4f74-9327-12ccf610e040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57292bbd-6434-415e-8be0-1fb8fb6aed4a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd8072c-fd49-4bb7-923c-0e3cec6fd84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33af514-baa3-485c-9451-8ce0035be3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2d84a8-c3e7-47d4-985f-c8a29c2ab2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc76b8ff-99ec-4181-8b0c-b9ece63669ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9fe529-c332-44eb-bc21-064614f5ae82",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaff450-817a-401d-adc2-7042b259a47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f334e4-9fe1-4a85-a667-286d12f4e2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f2020e-87ff-4e6d-aeb2-fb141df60cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2c0210-bc0a-4c2a-9236-4ca6f6de83cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6de1d4-2770-42a2-a422-ab91317ed328",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c03603-4c28-449a-9173-30557a2833d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bf7ac9-e3c4-46a2-ba3f-3d68acee6342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883b9e53-7bad-4013-a1d7-919219c1b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88991d24-4d0b-425a-a81c-0a81da05fb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c5d02e-9c1f-4c63-96cc-a001d190e357",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd0efe7-9460-4041-8d43-aebad707492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c21cf38-1af9-4752-9fce-ae7e4f01d879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc56a300-7663-49c1-8804-c47acf1e675a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a99366bc-dca5-4524-991a-4ecc75370c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cbec64-57eb-42f1-8c74-49ec8e4a72d6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baea3f3-e555-45c1-9dbb-a689d50778b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1c3841-b72a-47a2-a813-37833a89b633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d9e7f8-2ee5-4e2d-ae2d-d2098ac1119c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4901495b-6a6c-4697-8429-f5190977ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db830c8-4aea-48d4-a011-c24a1444cf99",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c4b68d-7377-412a-a216-791debff12c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987406b1-a603-4af3-9365-38f39837ec91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146051da-4439-4252-af7d-c488e298f579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "984f8b2b-92ed-4e9c-bf8a-5bb7c16c5e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d454448-882a-4c53-814d-163123a88992",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f191f6-131c-422e-b70f-2b6842822dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a49693d-1709-4c83-9bf1-54b3725494bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ce074d-643c-4baf-927a-351ab688e71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f649175-cf39-4584-a21e-2c95245f2b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95483587-d052-4979-99ca-50748b9473f7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370d9fbf-04dd-423c-8389-bc519e8cb50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1400c71-fad5-4e91-bf55-468d32fe628c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10243a6a-ffd7-49b5-9237-e3cc9c5ab061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d157c2c4-49c3-4a98-bd82-301da2c7b866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca12db95-5400-4dca-a92c-330393f977ef",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488e2d0c-53ea-4bf8-b20e-c1d59c950e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f070ad33-64d1-4d64-a566-af9f135d33f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343c1805-abf8-49ef-b6ac-6cc999eafa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4677f2-a646-4a01-a54f-35f42e043d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb259322-6f9d-488c-8ce3-7165fd570634",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7814272-0015-4738-b586-8528db26f87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9bdf5c-055a-415e-99d5-fb6c463ba27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a774c378-51b1-42fb-8d89-31d7b93eebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3561f563-0cd1-49c9-8c14-843ce6aff147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8d4742-dee6-4383-947d-640585c26f4b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f08a53-b512-49fb-81aa-bfd4985f6a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee5bd8f-5624-4376-aa6a-b9ca3f0c3407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd08e5a-e51d-4e4c-bdc6-c5ab8c1fd425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef3f131-6db1-40f6-b569-020b0513e4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b10526b-05cb-4bea-bd06-6e3574b18d97",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47ee68d-320d-4b32-b7d9-63fa0e9dfa28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d3fc75b8-ebdf-4fe9-a40a-ed54c8a70f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbab0619-2f0a-4014-9c97-a616def98687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "58586817-ea8a-41ca-8029-2c0801060317"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf2fce9d-4109-4795-ae43-3a2536bcd479",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd3d1604-74e0-4103-9ec6-a8265c44e702",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20bba27-3f38-42fa-aa74-f0bbf0a8651e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d175667-f251-470b-8c6c-906562df386d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817ac3f1-c6a2-4790-829b-27211fc955b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4582036c-b677-43cc-a0c8-d23a19a7a78e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7176bc37-dcb1-4f5c-9200-9162c5564ca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93f73263-f005-43a7-861c-a8b73bd89edf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea5170d0-06ff-4070-bf21-9db88dfba5e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fa4dc7c-2c55-44bf-ab29-0a5275b8071c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8401b4c9-5c10-4927-b090-c0a73c5d7800",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4c2479b-195c-4ab8-bc0b-19cd68fd8fd2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01261370-2ce0-4e37-8242-d51d76f98462",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99bfed2b-0b90-4419-9df5-3b2e11fc54ed"
                }
              }
            ]
          },
          {
            "id": "42359602-5bc7-48fc-91b8-5854f650d0c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08c7570f-b7bf-4609-942c-9d344e460fd5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "abc42df7-0ac6-4ab9-94ac-902c2abfa0de",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64b5470-765f-4f2b-900b-e63fb0ad4f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "26cb17fe-1916-4d7b-aafe-8ae9c53fa8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53381f2-2690-472c-bbfe-4aefb444e510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68687bc1-c1fc-444a-8074-8a8ccd88de09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "280f476d-5b08-4d76-899d-6863943b1044",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43adcec8-7f44-45f9-84c0-780c90451f45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3f7394c-0a5b-43dd-bd33-3d61a43b43cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4db70ec7-ae38-49db-8e8a-fe4b0cd80de8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59690e2d-33d2-4a9f-a817-6e5917625fa0"
                    }
                  }
                ]
              },
              {
                "id": "6e06daf0-71c8-442c-b75c-fdee1c97865c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ee4b949-db1c-40f8-9535-3360ce35fcf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "416ae0d8-97fe-4c85-ae0f-adf4b5b2c154"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2ddd390-d5a7-467f-b455-8f039035f641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ee1ae9b-360d-4b6e-8a06-a1f7580b684b"
                    }
                  }
                ]
              },
              {
                "id": "61052015-d2a1-4ff2-9ba4-9a027a20a823",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbe0f773-9a74-479c-9ee4-ab744c33fa7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95fbcd86-d282-4699-8cdc-cd907402aeb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e8ea050-7e29-4a09-9146-f062e3603361",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8051ce1d-1b8d-4d8e-8830-3164ccdd3e12"
                    }
                  }
                ]
              },
              {
                "id": "21e7ba91-59fb-480b-a3e0-e9110930e3c3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf38419-20cd-4e0e-8e7f-65712f29477b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9ba2799-bbe4-4eb2-a81a-3eb8d91f631f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d33be4a0-130c-418a-bae9-3501fc72a7dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a2b8cba8-3568-4f7f-afdb-a83d50994957"
                    }
                  }
                ]
              },
              {
                "id": "b40a0c7b-0429-460d-afec-917b21e16a1d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64627e7b-a915-4d9d-ac09-d03a14056416",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c47f655a-e878-4115-9dd2-a603d13e6056"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4387ed4f-6475-4589-b361-a8a51ebbda14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "38580a0a-1467-4ab3-9393-16459b95bcf2"
                    }
                  }
                ]
              },
              {
                "id": "be7d5fbb-ac58-4036-a122-5880f4b8e8f4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d638d0-d4be-4595-8c55-0eba4b9d6bee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61a91a8a-38af-426a-94a1-06fddb2de5ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a762c8a1-dfa7-4d40-8375-ff3ddde73798",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aab805f7-8a5a-47b7-b165-9f2d3b4a3449"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dcac4622-03db-495d-8fad-30672db84a2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12213507-71a3-4276-a3c0-0253ef3bbd31"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d9acfdb7-a33d-4a64-9c6c-58a39f724f37",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "215c90c4-7b98-42ce-899b-a1fd6e4df784"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a8d288-8c72-4fdd-a595-a84c77a2a37b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "11624025-a15a-43d7-ae58-8357065e0b38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db86aff1-b82a-455a-8e10-86e49f9859fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b8c395d-d186-484f-a246-ae4367c06cb0"
            }
          }
        ]
      },
      {
        "id": "e389a58c-d5f8-4ec0-a45c-12be4b11dd9c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "08b70bf3-745b-4861-b34c-fa6fc594339d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5743f31c-e9e2-4120-980d-34617a6baf94",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3bb714f7-e9f6-4c97-bcce-f86ba81af9f1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9e1510-3391-4abc-970c-a4a602a2a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faa5468-87fb-478c-8965-ec69cc38150e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c4aa2c-5cc9-4f13-afe8-2941e984892f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31aeef4-f8cb-4911-9be2-4e17ca99ed98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4223cb1-1fac-4954-8323-935efdeb9df3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f6ef11-e8b4-400c-80f6-f8ab0e7f7a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d67520a-5d0d-4dcf-acce-70f6a5e25de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c3d4bd-c503-46a3-916d-8f4f8ab3a982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3933b954-113f-4ee8-9d9d-0d5f4238174a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc073a98-6c04-4f4c-8ad5-34fe1bea042c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636d3611-4f3d-4822-9e2d-290c10d7e8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cde48aa-7cfe-46d8-930f-63d57af7eb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04b1682-752d-4fba-8ab9-0cab99868475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b83fd9-b039-4c79-82d3-bd6cdc191b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae901cff-da36-4234-9a1f-74fcd212f17f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9421e4-7d32-4bcd-905d-637b833bcd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87aa374-6d59-4483-901c-2308b5b13af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716b72c5-c219-4a1c-8b1e-0817d7382541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f6cade-2d6f-4ec7-bc5a-3458fd497c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfca03f2-23bc-4b01-9a86-a2e1c36d57a0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22be0a1-f13a-4d9d-910b-b13542a139f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51533e0d-48fa-4475-aea9-340ccc7e31e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83640d3b-7f26-4cc0-9f81-3ec9e09c81d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a368202-b4cb-4a0e-9be8-9f174a06d9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b6b1d6-11f4-45c1-80e2-e756585d5ae2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a65908-7829-409a-822e-381d961600c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f4004f-c9eb-4435-9f9b-e7eddf9889e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce16021c-78e4-49de-a822-d24d4129234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64fc3f5-1e16-44bb-a3a4-f5766f65bae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ed824a-02e2-492f-90f4-14eda004640f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fbdcd7-0c53-4c1a-855c-abcb948c9d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a65493-7d23-4113-8645-3c50c62e8e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e551d18b-53f5-48d0-982f-5cb3f60ca02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "12bd1700-fc70-4ca4-9a71-ecb28232f954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6716b625-6f52-47c2-8510-6f49dfc8f4df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3a210d-1afa-4b8f-a473-00bc645ce41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573ba167-5b0a-45fd-9cd0-222b814582a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db25dc1-a87d-407c-aec8-ed7392a97928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9519d1-647a-4b98-8aa4-f76029b94f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26825451-79a1-4ded-9512-6d258ce2be2b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e782572-11ea-4946-be46-5017355b2330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925f01a9-68b0-4eff-a9c5-94f9b2422931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb5b3b4-3dca-4a6c-aea6-fe0bad823712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5799887c-5732-4a84-8b7d-d569ea395b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40600ce7-7e47-4a6e-9b5f-6449b079ff62",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e28e83-cdf9-4623-a336-8129fe850d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85652db1-2295-4942-86bd-8553f5e89ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63682b4-7be6-44d4-a63e-10860298b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50f72319-c3d4-4c0f-b8fd-8f6f0dcd6aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d136c92e-ef59-446e-ab1d-5e0b2303898b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdac33d-736b-4c93-ad14-83a95df10aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae78b1f2-aa22-4a71-b78f-30cdf7cdcdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c47c6f-49e3-4807-ad38-f7ac60efb5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6b15561c-d13d-494a-851d-fe1c7db1f691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcff1adc-1f22-4d1c-a018-95ac716e8637",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4b3e44-2274-4738-a1b8-00a8a1033ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14acd133-b111-4169-8c33-a14aef05ab65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c124ab-9782-4b92-8e1e-d787f8970235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b66ddc23-5204-44f6-8350-4653afc81746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca538672-a97a-41ab-834b-d43620cea3ce",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710f10b2-0571-4a2b-8f16-69756cfa4a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c36378-fd61-4f35-ad37-4d47e0fbe183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41758ac2-6b93-4683-b5e6-909489d850ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbaea8e3-0318-4819-a465-467df0256a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c740504-20f4-4cb8-90c2-cd0fff00f5c3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9944263a-c725-4174-ba59-791bf26f38aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823499ff-c8f6-40d4-ab19-141df645d407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e354bd17-3ffc-4741-8ad5-6ff7e1285775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2297b973-79fb-4e24-976a-f0502093c95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3626f15b-8c4b-40f7-96b6-ddd49b7a83a9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f153f7-171c-4af7-87a0-ce9062653cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7475f78-c333-456a-8c9b-4b964c70e638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ad2e08-f76f-4d0e-914f-754ab2a7fcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d88a7d-7a09-4a95-95bf-b32dc44d927d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1535aec-d0c4-44bb-b825-11656865331c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07770a0-9bb0-403f-96d8-128830b97973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3da688f-595c-4e9a-b498-bb45ed9aa9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7bdb8e-a12e-4c1b-9e6a-66844417a99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "43656da6-bb78-48ac-bf98-36bbed614528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cdec45-b654-4a13-b9fc-1d28970c71dd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1697b39a-73da-47de-965d-3bcda930d214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef17aaa4-a789-43a1-9828-f662ecbb37a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bb484b-4466-4e84-af49-6450f264fc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b5415e-e090-4e86-a3fa-9c8530aacfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89882df9-4241-48ab-bf7e-522673abc6d7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0aa774-7fa6-4f61-a139-567671b411c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0697f6-852a-4a4b-a227-eda1e0a5c72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56caa3fe-faa0-446d-a41c-375f08fbd3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60d8d61c-142f-44a7-813b-f79be1fedf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0c7688-597c-48cb-a632-33d0237e9337",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e89ac7-e917-46a8-8748-f71a0d676110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a1aba8-fb92-4016-b452-68dd58aa5a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbf8d50-e25c-47de-892f-05ab81a10633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e3149f-f4d1-439c-bbe3-939792302228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bb9c59-eec2-49fb-b293-544ad9c0d85e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0c14a6-e928-4bd8-82a0-5f7918d4fb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7686decc-568d-4618-9f6d-378a348b96bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47e131b-c593-435e-8671-21d0bdb70fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "362dce1b-b9e1-4312-b0f4-61652ea321d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2cec54-b555-4ff3-89a5-4800049d39f0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716b3666-134e-4c6c-abe2-96e52c58c499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab48a011-8175-4508-ae27-cf5b6f1e6a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea19a53a-eaff-4410-96f1-5747e4c35564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c174022e-89b8-40a6-ad07-6d420ccc84cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c076ff1-cea3-4430-a005-99349eebba05",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02139ab-169b-4f38-a96a-c8b9b206906c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26862708-108b-4304-8b03-b5fb0c8fa8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef14810c-d642-4db9-b1e1-70cc4cd82d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61a1ddc5-cce3-4062-af15-8499cf9109c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8949d8-5f76-4af5-aa61-2a3142a799c7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32150729-94a8-453a-b329-52c5c212520f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b07f02-13fb-4a2d-9f10-a01eaa2408b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169c895e-13e3-4a21-901b-a03e3be147e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be0f22f6-88d3-47b2-a376-7d59d6086fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63926ab7-d5e2-4f15-8a0b-4f84dc97cf66",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50edcf2c-1881-4576-be79-ac4c3e5b8b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f658d272-97ff-4bde-af77-c7dc18cd99d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c085e856-d655-4656-a682-af120f9453e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55520769-325f-4e91-8619-cf0a84590779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94db438c-cdc6-4e40-aec2-11b4ead934e7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26215fa-b0eb-4b3f-899e-49deab8cbf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73add8eb-7688-4c7c-84ea-9f54116d1097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6634f4-84b3-4a40-8b80-7d272c97f391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "968eaa14-55b0-4432-aef6-51f2a6fd6fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f42d4c-1226-4c88-bf58-87cb92bd63d0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477613be-8e6d-4050-bcc6-5b7a2ea49925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404261dd-119a-4e9a-8526-021cc561cb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0b3875-6fd7-443c-81a3-3f19f6a9dd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50929bfc-d5a4-4e72-a573-8e2d8a2e6bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c00cc9-56bb-43ac-b901-5c21ad7a8da0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa43beb-b6d5-44f0-a339-addd0ac7b478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6b7b73-c6e7-4b3c-bd2d-d3e0a6766363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e989e0a2-10e8-4090-a383-caa668e536e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fde926-87a3-4d16-929a-451d97046a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4713b1d-9532-40de-aefb-3e6472e16e7b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0beab2-c636-4891-86cf-6f692c69a65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51691daf-986b-4977-9b09-a0979650ff94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0937134a-97e9-412a-af49-0dd7228a0af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c94a4eb-8222-4b90-b497-e3f2eaa612b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43572306-a9d0-425d-bc82-3a323eb84020",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cb143a-e115-4c19-88b5-2950007a65e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0906f6f-22f5-42d4-b49d-3f7e362a4340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcbff6c-a70b-49f5-9830-ee0433f01c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9200e20f-202d-44d6-b43c-1a98241373d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60025d6a-9fb4-4bbc-baf5-8ebb81739032",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9ecf16-ec10-4bb0-86d3-b6fbe0a60dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1d82b2-8792-453c-a6cc-7121e2b051c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6da2767-29b0-4ae7-8ae8-e7cd55abe019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ebc643-8a87-4caf-9977-f56bdd71e4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e28fff-2092-4b91-9d5e-bdb958afa733",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437ff157-afe0-4b9e-9ab1-a50adf59e9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68ee3fc-45d4-425b-ad64-c3f18c6b13fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8380770c-de57-4e8a-b489-75e22e81bd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3a4702-60ca-4478-920b-0eecd90fc1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c73504-bf3d-4dc4-b003-379354389ae5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedab9de-d343-4568-a62a-93b9da3de359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4335890-b26a-45ac-83b7-7a3dde507bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b4b09a-84bf-428e-9401-ac60c649f781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c520be2-95e7-4927-8fe2-21cb8177dea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a816ac3-576d-40cc-85c9-948804c5c5d6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5632f1-88d9-4ce6-aa99-1680d00a9821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d17392-d764-4792-91e6-d3e6b0eb7d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02c544b-969b-48b3-bf1d-ffaf056714d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f0349f-c95b-4483-83a3-ea3061271f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc74015f-72c5-4bdc-9ccd-9279a3096588",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d19359-527f-400d-add4-eec7a04678bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b8b683-8ecb-4c01-8b91-4e0f5486b403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2aba4d-0465-4c5f-ada5-ecfd26b0ac5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7279f1cd-81d4-4923-8110-4d665c952f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318826b6-ae0d-4bea-85b7-20370407dad0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e318e720-be36-4a9b-8087-29d3b57d74fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f816ba-eef1-4441-90a8-d9e3f73a0d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bbd367-74d3-42c2-abe3-2cdc407f97f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9b76c4-5a00-4f95-a7ec-252056182a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0338e7d3-6963-4873-940d-22a1f0992363",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33d4dbd-242a-4ef7-9a14-15432fb8fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963c0db4-eb5c-44e7-8c16-4079cb996a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f552d34-cdb9-4468-9bf7-95b19981ecf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86ef1894-936f-4ba4-865a-ee6201e51c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3ec65c-ecd7-47e7-aa14-6c76c5781476",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29c3362-27b3-46b0-868f-7ded8016eec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aadbd144-1cf0-49bd-a5bc-0ae2a1c7a313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaafc629-f419-46ee-9bfa-8d4fee6b3658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dcc679-3be7-455b-95a7-609674cad751"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "664c542d-c4c8-4d97-a597-fa36b28d7880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69306a9b-f511-4543-92f3-697bb83841f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ec8b88-cc13-46db-9b0f-bf6699a2cffb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6e847e7d-a4d9-4a81-a0f6-4bebf6682ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4dcb4e-7de4-4887-b63e-e98b8400c400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6af76a50-5a2d-426e-8bf9-50e04cb53767"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "639c53a9-cdd1-484b-aaf1-64bb409a97e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7265dbea-7ce6-4390-9d42-a9b1c9d1b949"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a96b62a-34c9-4aad-be79-e220f6513dbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "151be9f4-8ae7-4c75-bd39-c032defcf5c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a42e4510-ff01-40bf-9e1b-75954b39dfb0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9eddac5f-fcf3-49e6-83d3-9503ecad8717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "310a5355-6849-4dbf-81cf-8b98ce825aec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70a14204-8c70-49cc-a072-b924e9025287"
            }
          }
        ]
      },
      {
        "id": "639d21e8-3138-447e-86c0-95f9a3aad315",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eeb25998-a2c8-412f-a870-6a203446ed35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51ce716a-0080-41f4-9088-d8cbabbc3020",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30ff313f-0e84-4faf-91fe-5b8ebaee71a8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80707171-7ef6-4613-83c6-8d415d7d1f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b967bf0-0f3e-4161-a036-787012eba831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f861c1d5-b923-4ec1-96f4-7f288da94145",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8832da69-cd2c-499f-8c13-96dc933c927f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0cdbd3-c9aa-48cb-b1bc-a4f4ecd1c644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266191e7-44d4-4e4a-a20a-e9de5ef09971",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33d7dc6-f397-41d7-9d09-9535c0922f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bf50f9-6169-4c85-855b-814931a0ac0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dd1f87-ef8f-4795-ba98-39693e7822b8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14e70db-ac1a-4577-9910-3e06655706a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed0accd-00e3-4e0c-aced-3b59d149a0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb1df1d-20d3-4187-87cf-fe12945a52c7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d29149-994d-4adc-adb7-ad68bb53238a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fdd5cd-a865-4ae0-92ec-bfc1f3b289db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f1fdd2-b5e9-4bd8-98c5-c5d093401539",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6490c86-87f3-481e-b3f1-e3c0a251ff3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f815274-91a6-42eb-b9d4-7abb17428559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958dfa8-8450-44d7-a9cc-697599f9a855",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720bc264-f184-4cdf-ae39-3ad5da95402a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7d0f6e-7726-4a12-b412-303154d111a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeb2e73-46e6-41d3-8a1b-c5651ae0ea3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c2dfda-9a2d-40f5-b30b-ca3a0b6641e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9108b5ee-812b-4830-98f1-a770599e560b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bbcf4a-290e-4df1-83aa-ba8c85a9032c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64197f40-7c64-47d3-b2f8-fd5923285995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dae92d-2219-4fa9-8e1b-8b9ebd149454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f634b1-5b65-43ba-92bc-89a22d53a2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754cb752-5bcd-4406-beb9-7cb4b4ddcad2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf4eaf4-19d8-43fb-8669-06d3f8329cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f0b060c-81c6-47b8-a630-aa67172c0433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e62fd7-2f72-4a6c-a6e5-1d91ab6fb6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5c6fd4-f9d0-4e4e-8a88-7101c48216ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d7eef7-6b89-45d7-b97b-efa715f9ce86",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488cb5a7-5510-4503-a203-03d8c5229dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df8ebaf-64ae-4f89-89ea-89ee86b30fc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b65032-0cb0-42ea-8e2d-57a77946cd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf84077-7677-445e-9afe-26750f51d325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77907bfe-335c-459e-8b7b-2c6e02691290",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0387741d-cebd-4e41-87c6-ffe82a05bbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2aa89e-3755-4f3b-b724-fd6b9616410f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea2fbd8-2ca7-4a86-8f80-91323514dc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22406941-3bd7-4e65-a5bf-50bc5ef1a3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd6634b-aa8c-40b3-803e-085162e08cfd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fe6fe6-4756-44bc-bdcc-310f9598402f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7496db06-fc09-4be2-ac6b-20bff7067faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c199a60-fc2f-45f3-906f-e2ceaf945f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ac137b-1cba-426d-b17d-59c36aa36930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93619e1-c4e8-4985-bc39-8073e89403d0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836ad08f-90e1-4108-8b46-72e35b2015c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90103e6a-137c-4e96-bdd9-26aa52227e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceef9a0c-9af5-4f76-8ad4-cbe1a51c3779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4989bce-e7da-425b-9504-e250ac3867a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b52d47-e4d2-4e2c-807b-c5dc239df6bd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9c8eab-2b9b-46f7-abc1-2fccd5c384d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fc41776-0b27-4ca5-a194-7b653a78ff71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddccc3a-537b-440f-9ba5-554309cd57ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5228bcf-eef8-4505-bade-ff85e5f4ae59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d58f75-c2fc-4e84-ad6f-222662ff5a5c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b47c12-6741-4537-bbaa-d4b08ce8a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3160fa-1bfe-4111-ac0a-4ae43a830910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a192944-949a-4a36-b2fe-326a94f72f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f966b2-29b5-4947-913e-cb74e9f73a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1a6610-2248-42fd-a109-ff9e5ec0167c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc424d5-05ba-431e-8735-56f724802985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b9fb2d4-5c3f-4b3c-a107-4ab81859ad97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a79d85-690c-41b3-a246-fd5fde4ab616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24985b09-d622-4a92-b3ea-6ee2aa2e9a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beaca25-0c90-468a-976d-114e2cfb8fd6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eefd1d1-3c28-4b27-9c89-62c0f90d2504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d01edf-a383-4179-ad5e-6cf8368e433a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60def125-27f0-4dab-9378-7c77b298e972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2f9fec-95fd-4b49-a3bb-bd5c975c2876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cafd19-a5f3-4517-9768-b1473dc30ff2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b05a10a-8399-4437-9cce-f4d3a7e99987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2023a4c-6131-4b9b-8a20-4cc48704f383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f024769-81d4-49ee-b498-31d368609b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f42599-8bd1-4047-bc81-839ef2167921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a5f622-faa2-471b-9e5a-6142f255e1fb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02faec52-85fd-4f15-a6f7-b028f61b8521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bdea26-6524-4ab2-bfdf-6548d8b0de75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40148aed-40c8-400a-a157-9781f0229eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04325e6-a02a-4933-8fd7-4a8b712b39db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb95187-5896-4a6f-8b89-12171e04ce08",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704d13c8-813c-46e3-96bb-acd88c1cde57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80b8961-8180-4f42-8689-7632a3091329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f177150-e321-48d3-b731-7b3dbc5838c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07234bdf-bfe1-4b6b-9aa7-a2ccfafc524a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cec1a6e-0caa-4574-8fc8-4af9512e7ae7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0f92b6-4e79-4768-ad04-f2534a587005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c159d138-36c6-4b60-a514-ad0f365e544e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84fd855-68a0-46bd-be58-f152273bd8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9896376-e399-4666-9a89-65713af382c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06ee073-f9cc-4e30-8ec5-04bb9ff9f93f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35dd4d1-ff17-4daf-9407-d9666ec6adbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8232c75a-8bb4-46f2-aeca-cb8beb5ec6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dedca26-83de-42b7-983d-aeb27f55a718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd36b50-cefa-4a21-90aa-03856c216e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e74533d-d398-47f0-a05e-0c7eb7d1bc49",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f775002-90dc-4d3a-89ba-56146a9176a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed526a1-8f71-4809-9940-b902171b68f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7e547f-6baf-41f2-a2b4-65153e775c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1138be08-0767-486a-8b86-e4dae2f8ee38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e1e80d-1e8c-4af8-9adb-2ad741a7156a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32604470-e2ee-434e-88f9-19ca8029109c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a9d013d-c119-49af-9257-d8a0b10b577b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23a5b6d-b7db-41c5-a88f-6494ed309698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5fceef-5730-4cca-9763-4cd8775ed682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b94a99-4fb7-46f0-94e0-e625c4f9eaad",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65cd96a-cbed-4dbd-a8d4-860a8a936782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fae121-6cda-4ba8-ac24-9fcaf6e33f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521e391a-64f5-4648-af0e-dbdb57c9f961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef432070-54c9-4ea2-ba16-1f725a0ff3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d113b1d-9f05-4926-a731-692e355da361",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993ee5b1-d359-4549-8d1c-4aa2bccea8d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3c695a-e9d7-4334-9ca7-14b35284cd13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb398fc-5ffe-4e25-9124-b8fb656784b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd23fe5d-16be-43db-beb7-2e9729c9a62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e5380e-cab5-47da-8e88-c75aa94d75e2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09988b9e-157e-4323-bdb0-ef2676dcceac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40d03b99-d4d7-415e-b46b-d7efd76b1230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24266702-1d18-4d8b-87d8-28ae48c18046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e63fcad-6bdb-484b-af0a-2d4a7658d7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4664c846-45bb-4786-ad5e-c95b453ae3f7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3d69ee-e497-443e-9aee-af6e84e807bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3c0da9-b513-4dee-9a31-a43b3d249fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb09ea0-ed82-49cc-8565-b1adceaf5439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf27702-1ecf-493d-9d45-2650a8ef18af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa61a54-f014-49ff-b53c-5bb7ab62b1d3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1bd5bf-98c1-4831-a71f-34cbb90fe316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f312767d-30d5-4b61-b901-986634f404ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b83222-128f-45b1-aa31-8f9f3d324807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bd31d8-2e52-4551-8956-e4690b9c3b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454f9db3-fe8b-42d7-9505-a9ff5c974b40",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d290bf-3afa-465c-a01a-f0a2b4d913e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c17bf5-844f-498d-9a04-a44bf5f8ec39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bcef77-d5d9-4e6c-bd23-6a4ad8cea76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01d5a3f-39a0-4857-abc6-03531306e8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72baebe2-b0b5-47d3-8b66-8033646fca34",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ad8438-0f0b-4d09-823f-d923293519aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af81cf4-ad13-4853-882f-d0aea5332f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c1c94a-3b66-491c-8179-90f6a5afae24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715d847d-d2d9-4682-aaa2-80b243725803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969a5f91-cecf-4def-8022-03d9d95c6147",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e04e0d6-2dce-42d0-a4a0-38d97c587417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a0ebf2-d494-41a2-8714-9a320fed1456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6abc413-ca5a-44ea-a34b-4aee51de2d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c80766-1efb-4ceb-b1c3-780dc96d488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ea1f08-8fb2-4d29-a06d-153ae74f0555",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15a0779-bf64-4740-9093-6120c8e40cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c0a2e0-471b-4f21-ac45-40471d7f6741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc93b655-44a5-418b-bad0-6b28dbc318f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b477f1a2-a461-401c-a00e-f6e74d0c6699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6fcf9a-349d-4ac8-87fc-64a2d9817194",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680b3e11-f6ff-4471-9f12-7855a2a10d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43adcfa1-02f3-43a4-bc9d-48012cd80568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3255226d-f60b-456f-933a-0f88d40f5111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee48bdc8-be55-41f3-aaab-b8e4b1674490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1281e3b-8254-4c26-8a51-860b81d8b3cb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93214778-ac26-4386-a7d7-5d281a326626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837e3c27-fcb8-4ec3-9155-e45cc27c20a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721c5b18-c714-4dc5-b038-754da6e01728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081578cb-f7e0-4020-92bf-ea291a86ef73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a7ec04-4a55-4d77-861a-389b39a7ccae",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1710fe6e-e0c8-4a97-b2e5-bfef8d9928f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58aea109-d047-485d-9210-30a13eea3939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d3dc5d-9a26-40a6-8db0-583b4549e1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f717de12-767b-459b-b085-8148d4a53058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5122f60-3d49-4b61-95bb-4278474dbac2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cc0aa6-e718-479d-9a1b-48c2fb37a319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0f75ed-701d-4216-96a0-c9b009759492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9400d251-1de9-42c3-9467-2d0caa383810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a05be2c-f054-45e5-bae0-d5aec3a21b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e8a709-1fdf-4341-9e93-3216227e801f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf5c155-e3f9-462b-92ba-b2dd71f71fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8385ec8e-5a1f-4ada-8743-7a67589d214d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8f6972-ae10-4a07-8c99-ebf5d29d73ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87beaf7-8bcd-4a39-bcaa-9de6428df34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e3f0a5-616a-453d-b230-c096e3281720",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8312967c-d4f0-4a18-b9d1-4b3505ec1a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a2a7d4-9ed2-487f-b137-7a14dd4bc23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d23c22e-3776-45b9-aa60-26a1020b7972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcee48d5-3a78-4ca5-a96b-e548b9fcb55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68d94c9-efac-4519-a64b-f8aacf4bf960",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd90109-1bbe-4d55-93d6-a1bdd34f9bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136e31f0-5b7c-437a-b728-24fb1f9de326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216ff76a-88ed-409d-be2f-48289ebde5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff8566b-b9c7-4769-8dea-bb0aaf6dc4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afc3694-9b75-4b05-a760-de86331d13d6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194270ec-350c-4b15-b013-987308e73ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90e03fc-8285-4ee4-80d7-a8437c9daaea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e949e780-f570-4495-96d1-646476f80513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a104a42a-1bb2-472c-87cb-9eeb3c6970cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1da1f5c-a5b9-4f97-be7b-65d3329b5c40",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ed547e-d2b5-4d6c-9550-5f9960ef6b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab16857-20e4-4cd9-a23a-ebc4d92481ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c864505e-2167-4e67-9834-19bc931ad890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd78d882-dbf7-400c-8fdc-cc4f727c2cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f9c773-bfd3-4d32-8941-04b0ccd40813",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4867df-6363-4755-a789-420eb91c4992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90678d3-fb91-40c5-bcd3-6c1a0aea6c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f617a73-5287-41bc-8e8c-14c20a5549cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf90acf-4e51-4021-83dc-dbb8ba82f5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df730282-794a-4bde-960c-af41fd68fba0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a9560d-4f8a-48de-a6d0-24f94468783f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2669c73-cf22-48e9-b7af-323627eeb1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08da6d91-c63c-4609-9e72-186a204fb00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfcddda-1b9e-494c-b409-756962de88e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc7b06a-43be-4b4a-8340-7f721ab82d55",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1090a3f1-f4e7-4bf2-8ea5-63698be6d29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d997470-1cca-4c31-8bd9-0ce54a8283d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01922eda-293d-425e-81c4-a37808cab946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac7e065-5dab-4509-8244-b469c01f58d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3428422-bc2c-4bc7-a701-dc9acbd91f55",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a288f1d-0c4f-45dc-87d9-57097fac8d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b775b3-30d8-4dc1-a9c7-01724133278f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0014c190-a6db-44b0-b993-2631a36d8c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00531bf8-cc88-4460-ac7f-38154751da65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f5f4e9-7384-46e1-999d-8734435e3cc8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adad83d1-1d26-4b9d-bef3-3bb533a74814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e53191-f189-437a-98a5-ae526f39294c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efce4b2-f38c-4bc9-9629-ddacd61c04fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81825bcf-2bea-4510-ae40-5d34b451ed87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d6318f-21f1-4cd2-9373-931ca281c070",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e52c28-aa50-4caa-b022-a0eb04722f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03c8cb5-d095-4f15-92fa-a24e5546e538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f636adf-e1a5-4af5-8529-e360ade735bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf8e8b1-8009-4752-b7f9-3483d1ce1536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000923c0-e3c6-4efd-8e24-d014cd922027",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b25f82-1cad-41c6-91f4-652832ed16db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e5e3fd-5586-46f2-aaf8-e3f42a3ed9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f40886-d59a-409c-83d9-0efbdcba740e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5db752-e854-4aea-80c0-2aac84fcf8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd8dc1c-b616-42ad-a82e-de8665b07c50",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc29791-2e63-423f-94f9-3c5f1d25d54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e72ace3-34e9-48de-aed8-16c980af63b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bac933-a172-450f-b698-44a9089843c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acb3cba-eb7b-4a04-b188-939debaed2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2689d71b-2de4-4683-bdda-16821d891818",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a64a0e-cd23-4a52-8785-5ee33f97aa7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526a194e-0392-4bad-ab09-0d2a66375270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73cd924-4e93-4688-8d0d-58921713f172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea7298e-9355-4d53-82d4-2f4ed318a2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57275c19-9934-4313-b5e9-4b9dfedc9d7d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce016a5-84ae-4d40-bbfe-3dd0162da01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61842fe7-7dae-47de-9ada-a90ad1373c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb7fb97-3be6-4c9a-bfe0-8c6c4c09b0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728e37b4-059b-491d-b969-cdd73c222eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61692c65-5300-4288-ae29-1d02cd42a6d0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81784293-9baf-4baa-adec-f9ded73b9439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51001856-bba2-4ca1-980b-9c88deb0ff99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ed6d87-aaa9-4f51-b630-052874e0ce27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dbf7c6-cc13-40fb-8fe2-bd9ad719ddc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99810085-23a1-418e-9dee-253b2d0f0e17",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bae989-0f34-4492-86b9-9aad2c5cf527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4594b423-1f49-43ed-a48d-e9540fc214c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de32aea-0362-4f75-9289-f78a9e750415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15617de9-8a33-4639-b78c-73e2e25d816f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd5a87d-4126-4f9b-9746-5244daf93529",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d4d5bf-a394-4e5a-a244-489d83030b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f25382-4482-4bd9-a85e-84bfa1b02a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe3a1f1-bcb7-4488-8f2d-8b1ae707e605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659ab42e-da21-41f7-a17c-1ec2201d7923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9a2dfa-d69b-461e-aff8-7beb4df6c9c1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a707afc-6aff-4774-84e0-24960d4c21f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd52154-0fd1-47cc-ac28-674644191de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f54578-58d6-43b8-b98d-71ee08381fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd95c834-b068-41c3-bdf1-87070b2909cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ba161e-0cca-4a45-95bb-2a547d7ee007",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7235913-364d-4592-9dd4-db5a3732fc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc8c6df-c8a4-4c16-bfaf-81fbca565ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203b64d3-90b5-422b-8146-57140e8ee3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44551d2d-917c-4a40-b151-888a9aa0aa42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc9347e-6bac-4af9-a881-a43ca86180e2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be641e03-f05c-4045-a79a-28b49d79f8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d975207-aeed-4139-8a0d-d8f7d197eb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f844e952-781e-48da-80c8-5fe45d2e9541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2b24c4-a0c4-472b-b1b5-daa04ac9ed64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b13f9ea-f6db-477b-b623-1f3109acbb2e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f582e22-d162-4a7a-ad95-b4c62431b2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a69fed1-d282-4efd-a8ac-878340ae68d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7f5115-463e-461e-bb26-be78f4f8a51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11443ab0-11ec-4db3-aaba-13faa0423601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8292a4c-71da-4005-9bd8-dcd464ddad4a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51be7297-3f52-43c9-a86b-34118498d869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224ef311-8105-4539-b094-d9cb14cc814a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1808b1cf-6bd1-4429-ba80-f491bcd1056f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d17635-c137-4155-bfd4-e09b1de33306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be80051-c360-4fee-a238-94b96cfa3eb1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b83abd-cb6e-4165-b539-dd14bddbff12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfac671c-cdf8-4ed5-ae67-f5de0940ac2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fe8239-2af9-43e6-8c6d-55c2176fa900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc09937-3636-4443-9675-2fbd62d8b28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57f0d4c-ca1f-42d9-82bb-b0671e7cfe66",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c2da48-a734-4889-8636-91d606c2ebd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5778f435-6d5a-4a18-8f77-b33ce6dbe7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3682b9-933e-43ca-8196-4ed4495aec28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b492aa3-81e9-473d-ac1a-f36f44a54834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1216db79-ecb0-4870-ab44-793265197efa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb14d46e-ec42-40ac-bfb4-1851430ed8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a05a44-ca41-491c-9040-86de65a2a20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17f1288-3ca1-4e69-80c8-a06f571c2de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc92b2c-4091-456a-9efa-c7a56bace407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3684da88-dbb2-4309-93ca-d823429e4867",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20db8e60-bb75-4a58-8ead-ab84b160ea42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54f48f4-699f-4327-b0be-2e3f5710823d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d445255a-3c78-40d5-aac7-76f8cda1487b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec284e8-d62c-416c-844b-ab32a8eba6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5efabd1-8a82-41e3-8e69-e75ed24a3fc3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55246f7b-afcb-42ae-836a-6cc405455a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8717fd9d-5f99-4705-a7ba-7a7bb54970b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ae3d7a-9cf9-4ecc-9cb4-d42327c0f8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a24ba6-006a-4fae-8f87-0fae471b317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bd3702-dee5-49da-91e3-9430980e9907",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce07d460-6982-43e9-a075-2835f21cdab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e37a63fd-25d4-43c4-8d4e-9baf8638449b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd96040b-0f12-4020-a2ae-a249ba402183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915fd765-ca17-4131-93ea-5234723f45ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a635cc-efef-48df-9a9e-070097b51bf2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0477f6-ba88-4bd4-aecf-28e77088c80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da1b0d3-b017-4e66-9009-977bd5cde493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7859a59-7fab-49eb-8149-31b3f42bac6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1bbb3d-2ac4-4d4f-8be7-f45a0d905f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13bb1cd-73e8-46fd-a8a4-878773c836b7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204b9622-0ccf-4790-8dbc-50a43698bb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46951c3-477e-4f87-b060-16a4dbb6352e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629b4db0-a5be-4bba-b9a2-191752e8cd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080b7b5c-0d0d-4923-8578-60f0aabf035c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631ba61c-9417-42c3-bcfd-321cea6386e1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a20b6cd-026f-4bdd-8995-aa6e9ba3d071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85433359-5c9e-4d9c-a791-7303b2bb645c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8d635e-42be-495e-b8e1-dbcbad290084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89d1600-4e66-4bdc-bdfe-7cd3a010ef5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c571e4ea-9420-4e52-90df-7ebc3551b641",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a631ff8-59e7-4a84-b615-4af69404518f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ee4cf0-1c52-4800-82a9-f6d469e7ce63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5b7348-fb80-49af-b8bd-bcdcfff4f605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46311c95-5b9d-4c1a-a1d8-c2afe5ed8589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce329e0d-1a1e-4b91-8a14-ef4643d47571",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001dfe9f-52f3-4a5d-9652-9d63a6931070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b28b5d4a-7e5f-48e7-aeb0-9ed9efb674c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f3bf1f-d507-47c9-a1fa-9caae60849f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c65e8e-e29b-40e3-83cb-8b2549ad6e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09600269-63b6-4e14-8645-8fc6bac316d3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b5b497-f583-4300-9379-85b250b31362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d4ac07c-50b8-463f-8df8-be1d002d8c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fed4ec9-77d9-4bfd-b554-b4cd7b31183d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a13c6a-378f-486a-92cb-ca530fb2c18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305f60fa-eebb-45d3-adc5-e18e047b6565",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8348c5f0-1788-475c-aa23-7f9336a8b7d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8d1034-786e-4141-9742-db7e17a64c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6566bd-d494-4f24-bb04-6e93fc15c2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229dec85-54dd-4b8a-aafc-1e8bc7459cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b94d57d-42fd-46a5-b33c-9c52f87fd3b0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1e50a4-93b7-41b2-a0c3-dc417aee1aca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68daf450-e459-4529-a98e-8781c37a1eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fa6241-2822-40eb-bc40-a7b30bcfba01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f959e1b-1a7e-4a67-a3ba-320b57da8526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98d6af8-4cd6-4e93-938f-7ed4092cb2e6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7185a37-3233-471a-be4e-6ad694d1c653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c1722e-e746-49fe-8498-8e4e0e9b4321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c352f615-18d2-46cc-9282-399384c6462b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31ad64c-8753-45d0-895e-5739681b89cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e48206-d73b-4dd6-a26e-a1f175660430",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e1b259-2123-4441-a603-e6bd0cebcec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a38257-532e-4ad8-a03c-2225be35d08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c03715-0ac9-4ca0-ad79-54f14ced4973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc84755-1bea-48bd-a613-ee5b2ba7f58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47bbbd4-de19-4a1a-b0fc-c2255a12c02f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b49539-78bb-4c17-9c39-32c7f1e1ef0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ece053-1f8c-49ae-9988-85928da3f582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e0eafb-c7a7-4944-8936-ad3a8af1ca95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bc4c13-fcd0-4f19-b8a7-d6ebce1f725b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ac90bc-a524-450c-9d21-908036493d15",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d95936-3d04-4626-846a-080b1fe0d5a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a92feb-7450-43f1-a56e-0a136fe0cc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad99860-da6e-4385-af00-f6060bce57b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160536f5-998d-457b-b7e9-fb580a20113d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869bd0eb-ac9b-4190-979f-1796a0c6f5b9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff9bb5a-ba7e-4bc1-9f82-aa2361996ff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a2a99a-7623-41a3-9ac2-43e08c1aa533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c190a6-b73c-4088-96c6-d5db2b57f200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7cb249-123e-4222-af3b-703d2198af1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80707740-a03a-4a5e-8495-67378e0a588b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136e42f4-91ae-4ee3-9bc1-7e7037ad1986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb3525e-3cd7-42c3-a909-e68054cc2057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b8acf3-4b0a-4bbe-8550-30924a9564a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6d8224-fcae-44b4-8a47-23501bd128ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be87f46-e4fc-4da5-8d4f-a299fde1f90a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a4c59d-ce6d-41ef-9a40-2696f5b09d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6de412c-b69a-440a-84fe-578dc2a19872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5351a74a-29ed-4624-81e6-f603206d6b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc135688-c8be-43a1-8e8c-e6173ad978b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8691bf7-bddd-4825-abd3-a574ccc5693d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74a9806-16ac-4d7b-b829-2a6399bba358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed061ccb-0c4b-4c45-b87d-baf158a7f488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8381c4b4-72e7-45ec-a806-eee59acc3e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e4e044-696b-48b0-9eef-6e4d215ff160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da7249a-3e4f-4809-8324-504d00af6c2e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0814963c-d93b-4842-b416-ac2c39d61161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21ef2f4-75ff-4195-a7d9-dc31467b1a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf56194-e9e2-4211-b4f5-d17b368d0521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58361606-bd08-4387-8cba-656b645a79e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d625469b-3b31-499e-9c56-e66e8934c915",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd72128a-aeb5-408a-9689-c20b912778b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "305dd6ce-0784-4b69-ae62-3bcffd05e15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e790b9-b655-4628-b741-40018121ab60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6207e5-7f22-4e2b-8398-a1cc080bd068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df66b3f-e1a3-4ac5-baf3-984cfba7ec84",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42233764-f68f-42ac-8948-6e6e321d5a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96d01898-ac67-405f-9e35-9b08c111664a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c60ddfb-0152-4f36-abe2-62c033f215fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0c3f33-907a-4b05-981d-c151990a8ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99e6d2f-534d-4f22-956c-4a6bb4614e9f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df864d3-c91e-4d82-b3a4-fac71dd10523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65ab12f-11e3-498e-97cd-2d9bb0286acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73ba521-db7d-4ad7-bcf9-60e6f99b3098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65138e43-9b9e-4cc2-be4a-7c18c5e8e009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220259f5-6888-473e-ba45-cb9d1a82ec7d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a3caac-5cbb-4776-b4ac-f06d42427916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a9a244c-f488-486d-b0ef-1a98743ba895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42b8837-307e-43f0-af56-eb2154c99fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe1e570-70eb-43be-81e9-ec150f1f2e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8143bc5e-43b1-4ff8-abbd-3176105cb367",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0662a391-bd53-4db3-8f67-3bdbfb8a708f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d74625-839c-45b6-8dcf-1b48b84bcd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5364979-87b0-471f-9111-7e9f9e5efb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1078d4a3-f0d3-4165-b3b1-b4c279f1ea2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab23a6c-6ceb-46b6-830f-5e2e69b354c5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19147b66-a4ea-49de-a1a4-9d4a1c9496ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5113d58c-5004-4216-8d27-a4f935c33ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587398ca-2334-482d-8daf-478f90a4a39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d113089b-857e-44de-9b8d-a286020f4a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ff0a51-b230-4e05-9a0e-215d8ff41db7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924acc42-1ab3-44d1-9912-0654ffbb4d4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec3c4ee-fe8d-4426-aab9-f602d2178c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214f1b22-f9b8-4f4a-a1ab-631029949323",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c6d9c5-ebd0-4da1-837d-5078d1a73686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c06c03-56a3-403f-aeb5-fb1c36661bc6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886db34e-3307-46f1-98db-76fa13c848af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1529adef-b83b-427e-aff5-bcfdbe3b61b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c13f07e-440f-450e-88ae-b7f1fde0c6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9811b1-78db-4edb-bc85-ca94079f83e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140d74c1-4f05-4ee0-b930-baa4e4ef7029",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bc0319-3111-482c-a4f6-7448c887da95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04829c2-9769-469a-b5d7-57a9ba1ae767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0211aebd-d72f-4459-ab8f-22c4db73c5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a8f895-bac7-4ee5-9ab2-47b2e8ccd70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fe3601-6b77-48bb-9cdf-52de26ae351d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169aa00f-3456-4a56-88d8-002bab77ee43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e88a7f58-12bb-4d27-a8bb-6b6670a11283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78298c67-4114-4bd5-b722-a6fa8d7d6179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4c8143-d6c8-42c0-8004-9df4ef021d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c64f192-48fc-4c62-9467-77bf50146b68",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f99bc7-37a0-4024-bca1-b19004cd0d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86d4170f-250e-4b67-9d19-5fd49bd55fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1728fa44-9d36-48a8-85bc-e0b2bd7f4422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f32b34-db58-48d1-984d-cd2a01c59101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed2b577-003b-47e8-90cd-1ba9ae9eda7b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72824eae-a50e-4d76-a9b9-d05a53b00f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b7eb8b-0834-428d-b0e7-13c94fed02a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c3cca3-d2a9-42a9-95a8-cb95a1ee6e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc9963e-e6ec-41d7-a949-a472cb8e0327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9590672-f3e7-4640-9f7f-1af030f25ad8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915f07ca-f40a-490e-bde0-57f00fd461cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "128e7c32-09eb-4f90-9245-b63fc14a085b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3470168-78cd-4b2a-81c6-ec65d47a50b0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920e9d7a-90a7-4e5f-ba33-14144ab0ea53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1ca854-850a-4334-a48a-f07bdf88b0d6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204034d6-5f70-49a3-84c5-b223a728605d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d59219-9e8f-4b2e-8600-fe359015b5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222c5862-d69c-4bbe-ba9b-2a1ebfab3f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c270cf93-f069-41c7-82e4-c15d7f14181b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa1e1d59-74bf-4918-88b8-eb349ee0eda7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbbf1b8a-d644-4271-83d3-88b9d3ee10d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b570b275-c396-4502-8592-f9f71c441329",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e28ce46-666e-4f74-9ee2-bf10c6893e4d"
                    }
                  }
                ]
              },
              {
                "id": "f601106c-ae38-42c6-ac0c-89990590b2a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee0f5d22-4720-427c-b145-99b9bdd92f8b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456857a1-551a-4909-86b5-39762bfc7767",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2f012722-9b48-4b9a-9582-c1f9ff679620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f1a311-1117-4fdb-8c0c-4944419692f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae9fe461-22a1-4a13-92ab-1a3dd77027d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c8649aa-d680-45f6-9b5f-66e18424be6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00822238-b7ba-4e95-a885-ed586a0e1a97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a361433e-43a6-4c6c-9944-f4cef85fbe74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f26c3123-a487-42dd-83a9-42414f515458"
                    }
                  }
                ]
              },
              {
                "id": "fb1ccaf0-22c4-4dae-963a-ddb9c8c36dc1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1fc7ddc5-c51a-4d6d-baa5-8ee39f4dc19b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a48b81-1f08-4803-a30e-5a6310f4fc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0cadbe3c-1707-439f-a02f-769faa4bf0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509ab4fc-ad9c-4ea6-b3bd-70ddf91c7de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd4e514-36d5-4507-abad-9657090b8c8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "217d2932-f953-45a1-a4ef-52b1097580ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a934119-a909-4938-a81a-62ec0e480825",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b14e571a-528b-4358-840e-b517f0a1d27f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "76a712c3-0b58-4907-bf97-d73d9f6a3da7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ad0a80a-f0b0-408c-bc59-ddf6f21ec263",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fca342f-d207-4848-869f-9ebaa6edcfe9"
                    }
                  }
                ]
              },
              {
                "id": "dfeddc6b-36bc-4393-98b3-36f0d6b8fa32",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "007de90e-f40d-43ab-9079-08149dfeae35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a137d2fe-e740-4c49-9bd6-2a267ec1fb09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7969e598-5ab6-47d8-b4b6-6477cc610092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb67aca2-4289-4a72-96fa-f74257f7b83c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "051e59cf-305b-40c7-8b75-e861e2e5b90e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a5e25f2d-4420-45fb-b775-879ba924e700"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c16353f-2386-4f92-90bb-ddc7c2aac483",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c232f099-f3ce-47f2-956a-f45e94a6c049"
            }
          }
        ]
      },
      {
        "id": "34277919-9e88-442d-8ddb-eb1c4e705802",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "060cf57c-ca05-4eaa-b144-aa951b8ceaec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59b4aeaa-1af2-466f-8a21-471338af57da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1dae035-de89-484e-93e4-86b125fa3bcd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c060968-14e7-43ff-9114-2df65dc6bb79",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8e2603aa-4838-4f11-8850-c41ded7ff84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a6a3a4-cbc9-40b4-af4b-4d126a2f1380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb54a182-911c-4d72-8c5c-fa10242f11a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "676e5f33-fa70-44c4-9057-9c15d2959714",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9e7214c-d22f-4991-8db0-45166d2a1a04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ffd001e-6a7e-41d8-b53b-8fe96858244e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3ddc6a2-1f94-44fa-ae4e-296ee335936c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb7e6dd0-c2d1-4be6-9227-34fb9a9261d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "93559741-d985-44f1-afae-ad45192e5d31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fd537d1-564a-4834-9717-96e189932c4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba6e2457-c7f4-4c45-845b-5da47a7026ac"
            }
          }
        ]
      },
      {
        "id": "a262d645-707c-4b68-92ee-f7c81ed48130",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6e4cac01-7735-4d65-9dfa-48819a630466",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c18ead8-3716-4e35-9844-8f66fafe7b83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d395154e-45a3-4cbf-98ab-bd838bc03bf5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59f1e42-0c39-4f98-8e91-1d967eeb9ca1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50db77f3-30b6-4927-b453-88f69d9539f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4804e0-c332-4324-a0e4-3729038237b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e67edca6-956f-4e7e-9b20-3ff5f311ef4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33835ab5-52ce-4180-8306-d231518b4a4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93c79485-d0d5-459e-a387-779ba489b562"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1604d356-dbb4-4661-8b48-d6a1f465ba02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06c793a2-ccdf-451f-beb2-375247109b35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45b9e4e1-d70c-4021-b1ab-2c92ad0f7f0d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05b9be05-922a-498f-a19d-af8d4aa42f62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22def266-1e80-4a25-aad9-1455fdd1bfb0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08a456d6-9f7f-4277-a297-ab26ba63f9a1"
            }
          }
        ]
      },
      {
        "id": "8f8d5ad7-67b5-4505-82e6-9e841c793958",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f69a1ef2-5ffd-4bc0-bbfe-153a5bf67ac6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7572c869-f028-48ee-a01c-4bdcae59a28d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85986414-bbc0-40ec-8544-a7adaf82a2cf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc3f61b-987c-49d5-b1e3-e1801c3ac4f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da03150-2ba5-4cd4-a28d-4311e101ed83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bd3aba-c511-4ca3-80d3-bfb9b3461347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b9062fe-3389-4eaa-8eb8-d3cbae81188b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0795f1d-11fc-4c43-91e4-d65bf984481a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "637f3aa9-2288-4619-ba5a-8fde5839e58c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc095d8-3fd2-42d3-91a1-95418bfc43d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ee3f5e9-720f-4e7e-8bc8-de571b25e837"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98e4a52a-3197-4e33-8b7a-79ea01a02714",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4eb3f986-1e3b-4864-ac73-7a1eff36867a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4942a7b-9891-4045-ae06-397a66259dbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb80f586-cfca-428b-af8d-4c80e166eede"
            }
          }
        ]
      },
      {
        "id": "f29745fe-e20c-4141-b916-876911c59dd6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27b25c3c-f893-4833-b549-481782ed5f93",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64ccf3a0-254c-43ca-8a63-8f1a1502a302",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8e295ce5-342e-4a31-87b5-64f469d95716",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a7728c8-1f1e-455a-846c-713a8451d65f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f1bfe28-100c-4858-ab69-a9c4996afd6d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 127.99603174603189,
      "responseMin": 7,
      "responseMax": 845,
      "responseSd": 89.52619985481029,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722904816613,
      "completed": 1722904857250
    },
    "executions": [
      {
        "id": "386ebdbf-e726-4f14-a931-2e4c5901b70f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bc94d368-9c1f-4732-9558-c03fc3d1dfca",
          "httpRequestId": "02303c4f-9112-433c-9da1-ac3e0457dd04"
        },
        "item": {
          "id": "386ebdbf-e726-4f14-a931-2e4c5901b70f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "847b2044-7a39-45d8-9b0b-9df10546745c",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "8f03ecdb-82fd-4145-bfcd-a61cb6cd64b8",
        "cursor": {
          "ref": "d7838aa3-dd56-4fc9-b654-33954c0d0685",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3d2653da-850f-46a1-9203-beaf53cfeac8"
        },
        "item": {
          "id": "8f03ecdb-82fd-4145-bfcd-a61cb6cd64b8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "171bbf04-bc6e-4ebf-b2b0-3d46bc562700",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "3507768a-a997-408d-87fb-5e3e4022bffc",
        "cursor": {
          "ref": "ed2048b6-b46c-4811-95e7-85f9c26fe251",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9bf6a918-56de-4c90-936b-4dcaefd183d7"
        },
        "item": {
          "id": "3507768a-a997-408d-87fb-5e3e4022bffc",
          "name": "did_json"
        },
        "response": {
          "id": "e29964c5-8a89-478d-8a01-70e9125ab6f3",
          "status": "OK",
          "code": 200,
          "responseTime": 652,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac94f38f-72d0-4fda-a4bc-8596872930c3",
        "cursor": {
          "ref": "e61830f5-af69-4864-92a1-44166c0b0947",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5f7c717c-2699-423e-a53e-a9f675982cd3"
        },
        "item": {
          "id": "ac94f38f-72d0-4fda-a4bc-8596872930c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "297b5191-c81d-4e0d-9ab0-898bbaa3859f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac94f38f-72d0-4fda-a4bc-8596872930c3",
        "cursor": {
          "ref": "e61830f5-af69-4864-92a1-44166c0b0947",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5f7c717c-2699-423e-a53e-a9f675982cd3"
        },
        "item": {
          "id": "ac94f38f-72d0-4fda-a4bc-8596872930c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "297b5191-c81d-4e0d-9ab0-898bbaa3859f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c393fa19-1542-4ddb-b74f-4e429343ccec",
        "cursor": {
          "ref": "b90d498f-381c-4b7a-aeec-875ee05b17d6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b85592ad-d558-4b13-bd08-7e9a2df1feff"
        },
        "item": {
          "id": "c393fa19-1542-4ddb-b74f-4e429343ccec",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "646db3b3-3d0c-475c-9f9b-8ac8cc17ade6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 173,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d64395d-9aa1-4be7-850b-95e6080bd53e",
        "cursor": {
          "ref": "a4116545-6f71-4d7d-b376-f34ef67c987a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dceb56e2-d298-4b1f-8dc5-fa5e39b03540"
        },
        "item": {
          "id": "3d64395d-9aa1-4be7-850b-95e6080bd53e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9ba4c020-00bc-4bd3-adde-ff8d294645ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f50055-5de1-4ed0-a9fc-52d921d17acb",
        "cursor": {
          "ref": "c97704fe-1f8b-416d-95e1-061d495ff9fc",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3b2a7367-f20c-42ce-bdfe-f55654feef07"
        },
        "item": {
          "id": "05f50055-5de1-4ed0-a9fc-52d921d17acb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6fc576fc-2999-47b0-a23d-94647f12c89d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6dae2f-1087-45c9-8b62-e0648e75cef5",
        "cursor": {
          "ref": "962e352f-10b0-4aab-b3ad-102aa1bff5fd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee39ef2c-df4d-4607-96b8-4785a0026909"
        },
        "item": {
          "id": "dc6dae2f-1087-45c9-8b62-e0648e75cef5",
          "name": "identifiers"
        },
        "response": {
          "id": "5538cc0c-755b-4cc7-97c9-0fa1467f41a3",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfdc106-8cbf-427b-bd36-2986c97be076",
        "cursor": {
          "ref": "3f7bb193-c2dd-4e9b-bf01-19b06291f683",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6bf33af3-5049-48d0-8f35-74a006db118f"
        },
        "item": {
          "id": "fcfdc106-8cbf-427b-bd36-2986c97be076",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1af4169d-89ec-4a47-985c-09edf879608d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d0cfd599-2a6b-4d8a-bac3-bd1ff8dc3157",
        "cursor": {
          "ref": "3c572e3a-5d77-4c3f-b6dd-38a52fbc70ff",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca0b8183-6a01-4ed3-affb-581060150c53"
        },
        "item": {
          "id": "d0cfd599-2a6b-4d8a-bac3-bd1ff8dc3157",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bcd6d062-147f-45e9-b303-3aa3b95e66f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3f53b761-963b-43ff-8361-137bf4a8c7f7",
        "cursor": {
          "ref": "efdcbfb1-e24b-437a-822c-1799e0177a95",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5a0ba266-642e-46e3-aa33-0b67b9af6641"
        },
        "item": {
          "id": "3f53b761-963b-43ff-8361-137bf4a8c7f7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "af216653-36af-4a44-b393-beec13802a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2d34af02-05e1-46af-aa55-096f24e1d4c1",
        "cursor": {
          "ref": "1dc5d037-6142-4d24-ab56-ed1b7e038bc9",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "27ab5233-6d3b-44ac-8f00-7aad88dd118b"
        },
        "item": {
          "id": "2d34af02-05e1-46af-aa55-096f24e1d4c1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "572c60ed-63bb-47c8-a72c-c708e2f56a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "03e476b8-0637-4532-ba32-3f46ebd87c58",
        "cursor": {
          "ref": "835898de-4d10-4b17-8a7f-b5058a91d38e",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7b2ac515-2ea0-4cbf-b5eb-8375fa57f6ae"
        },
        "item": {
          "id": "03e476b8-0637-4532-ba32-3f46ebd87c58",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "860e9ef0-2fb7-4e6f-b955-7ce63c447915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "04f6e7ac-8a9c-4c3f-889e-78b51552b04e",
        "cursor": {
          "ref": "2aa1c196-276d-4aa0-b5b9-25cebb23fcd2",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10b9b8d1-c775-4561-ac16-8f295aee11ed"
        },
        "item": {
          "id": "04f6e7ac-8a9c-4c3f-889e-78b51552b04e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0b589fb2-b812-4b98-aeee-e508292ecf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d912e82a-4138-424a-b943-bf3126f34b58",
        "cursor": {
          "ref": "198a4acb-4755-4809-ab92-eae4eb956ea2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "68c93540-3db5-42ee-a4ce-0d4eb070c9d9"
        },
        "item": {
          "id": "d912e82a-4138-424a-b943-bf3126f34b58",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4d3c6ebb-9719-43ae-b722-8e92d7ff8e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "158d7567-aee6-44ec-97f3-5c5b18263938",
        "cursor": {
          "ref": "b33cf38f-3553-4ed8-924a-15d8880cfbe0",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "924d0f86-fffa-4a49-b40c-5557b2c89467"
        },
        "item": {
          "id": "158d7567-aee6-44ec-97f3-5c5b18263938",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "85a43697-0731-41c5-b243-3f4a36c90cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a6e63bfc-a55c-477a-9f17-f2858a6eb6ea",
        "cursor": {
          "ref": "40140a7e-1fba-483b-b663-477dc22ab1cc",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "606e4a9b-4db8-4cf5-9aec-9e9990dbb77f"
        },
        "item": {
          "id": "a6e63bfc-a55c-477a-9f17-f2858a6eb6ea",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "056f56ad-aba2-455d-bd26-730c4ed691f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "6a3cfff1-ad38-4517-9605-791952c78b03",
        "cursor": {
          "ref": "c14b8db8-b2be-48e3-a804-42d2dd537b47",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e0a74086-e4a7-4a7a-84ec-3fb0b14c8fc9"
        },
        "item": {
          "id": "6a3cfff1-ad38-4517-9605-791952c78b03",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d77bb759-bc0a-419a-aa6e-ab2144fc260a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "3a6bc76c-4fe4-4f92-9098-c6fabdd93a56",
        "cursor": {
          "ref": "f5a054dc-d5bf-4aef-bb79-e25fabace9b8",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "659a1fd1-9c5c-4880-9161-9a30bdbf284f"
        },
        "item": {
          "id": "3a6bc76c-4fe4-4f92-9098-c6fabdd93a56",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "23f64190-026f-462c-a8c7-398e364f6598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "cd431eeb-cdb6-4c52-9b2c-8ba2092231cd",
        "cursor": {
          "ref": "43ca3547-0bc8-4165-8b4a-03572f6963d1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27596e66-b74f-4420-803c-19ffcb6bbdb8"
        },
        "item": {
          "id": "cd431eeb-cdb6-4c52-9b2c-8ba2092231cd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a42757a5-5370-4792-823a-f50760fa0ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0c0ea3ec-2310-4a18-82c8-cbdf6186690e",
        "cursor": {
          "ref": "96f9b8ba-ef36-4dc5-8ae9-095debc4b60f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "25cba587-67bb-479f-96de-a0c3665db63a"
        },
        "item": {
          "id": "0c0ea3ec-2310-4a18-82c8-cbdf6186690e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "01dfbfdc-4fa3-45b2-b103-3bf2790c75da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "405d8575-7245-419a-9721-594649953a4b",
        "cursor": {
          "ref": "8bf3355d-4ee2-4339-8ee8-b1ab9484d615",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b29f90c2-3a17-4ea3-851f-adf28c09ce78"
        },
        "item": {
          "id": "405d8575-7245-419a-9721-594649953a4b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9735400b-dffe-4528-af93-2b13e9c700ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "42d87976-f6e8-497e-a52d-9e30ea13595d",
        "cursor": {
          "ref": "83794220-8dd2-4aa9-8eea-014aa9f4caf7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cb447ee4-e013-41e2-ace6-0debb6a83722"
        },
        "item": {
          "id": "42d87976-f6e8-497e-a52d-9e30ea13595d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "71edb3f3-b068-4118-af6b-e7ce7b50f929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a5903739-337d-47a0-bffe-bf8dc6a8541a",
        "cursor": {
          "ref": "7b473932-d107-4585-8f74-b16503545a7e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ab7359a7-2418-40cc-8c89-4d75ffb3c61c"
        },
        "item": {
          "id": "a5903739-337d-47a0-bffe-bf8dc6a8541a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a6a25900-b939-457a-b080-32ec5cc4fcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "925816e8-21a0-49a5-8ecf-de2d1dcdfd33",
        "cursor": {
          "ref": "9bfe1f6b-9e7c-40dd-b10b-a6db8b231154",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6eed248e-826d-413a-b5a0-4ac81f0d8dda"
        },
        "item": {
          "id": "925816e8-21a0-49a5-8ecf-de2d1dcdfd33",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "78e99c33-1d36-43aa-b96b-ac9dc6e746e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1ae43b2f-7a61-4a31-94f6-18620277c9fb",
        "cursor": {
          "ref": "5a9ac69c-31f2-4c3d-b4fb-b0b541d609b5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f69c4107-7809-44ad-acbd-6ef726370be8"
        },
        "item": {
          "id": "1ae43b2f-7a61-4a31-94f6-18620277c9fb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c7bdaf0e-2c2f-47f8-a209-4c4164fcce68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "669adeeb-e5e8-4d3f-94b6-1a75af2e90c7",
        "cursor": {
          "ref": "4151719b-5966-41df-9a3b-1adddea766f2",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "23471c6e-d6f1-4b12-b488-cb9abfd5013b"
        },
        "item": {
          "id": "669adeeb-e5e8-4d3f-94b6-1a75af2e90c7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0d9a97dd-5eb9-48ae-88c5-7433c7c44c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6687045a-400d-47c8-a995-7c4ee974a490",
        "cursor": {
          "ref": "6adb54ae-354d-4c43-8481-88b4ddec68d9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a0e6fdbe-585b-4b81-a08f-04fd947227ad"
        },
        "item": {
          "id": "6687045a-400d-47c8-a995-7c4ee974a490",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c40cfbf2-6ec6-47cb-bf42-e45a415dc96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "13f0ea0c-8fab-49c3-860c-fd4a585d1cb0",
        "cursor": {
          "ref": "987af9aa-c91b-435c-9ae1-2ac60189cf41",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3c052f70-e66f-4b8c-a153-b5eed1e43047"
        },
        "item": {
          "id": "13f0ea0c-8fab-49c3-860c-fd4a585d1cb0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "02fb0b86-bb4c-4df1-9228-89e5b59427cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ac111bbf-5a2f-44a7-8fed-6253501aa853",
        "cursor": {
          "ref": "74685a7c-ffc3-4675-95cd-ad670256417d",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a5d2b88c-7317-48e0-8fbe-3be42ad0cf89"
        },
        "item": {
          "id": "ac111bbf-5a2f-44a7-8fed-6253501aa853",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a9dbd066-1458-44d5-9df9-1da92e7087d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "645742af-161b-4f2a-8f7f-c8a026845cae",
        "cursor": {
          "ref": "9e96b974-1c09-4ecd-a0d0-f5d279c6d1e1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f8b8440a-53ac-4a53-a621-685322da6517"
        },
        "item": {
          "id": "645742af-161b-4f2a-8f7f-c8a026845cae",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "05ebd591-40c3-4402-a2eb-fc7ba1d48f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "27826a1e-4bd0-492c-a005-883ba41d782a",
        "cursor": {
          "ref": "e0a9e7b3-5630-4d43-ae62-5352d1e1ee14",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d965308-66c2-46df-a626-9095b88993a5"
        },
        "item": {
          "id": "27826a1e-4bd0-492c-a005-883ba41d782a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "46216b30-e6ce-4bf6-9d70-bf38b067acc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "12f2b4ff-35e0-41ec-bb26-b7415c6b28fd",
        "cursor": {
          "ref": "9ec02b76-083b-484d-92eb-5e2d8c71ef81",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3accca4b-ebb4-4ab6-b421-8e928360c34a"
        },
        "item": {
          "id": "12f2b4ff-35e0-41ec-bb26-b7415c6b28fd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91ffbc24-76a5-442b-8234-80b4147bc705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "51c01650-25e8-4a67-9587-218e0ca4b977",
        "cursor": {
          "ref": "63de1bbd-9a0a-4ea4-b202-5f3018dbe290",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "535ddc8e-11d6-4a47-9de0-0321458a92cd"
        },
        "item": {
          "id": "51c01650-25e8-4a67-9587-218e0ca4b977",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3ea1dbc0-ab83-4a8c-aa26-1426bed74d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7500df53-3091-4dca-8a9c-0cac4be3014d",
        "cursor": {
          "ref": "292a6d8f-eff4-4be1-b692-64d4fbf47aba",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1556cc07-2564-4010-ba5e-954a734e96b7"
        },
        "item": {
          "id": "7500df53-3091-4dca-8a9c-0cac4be3014d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8b4ec226-8ef5-4a4e-a358-b04391df6424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "4c7619d2-205e-43c7-a39f-32486884dfe7",
        "cursor": {
          "ref": "27da1923-8fc8-4126-abff-355686039535",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "61937e1a-6f94-4366-8148-833aa2a5e77f"
        },
        "item": {
          "id": "4c7619d2-205e-43c7-a39f-32486884dfe7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "71d57b30-d707-4479-8cba-2a856a0feaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "db309835-10c1-45d4-9cab-99f737b84afa",
        "cursor": {
          "ref": "c66bf41f-7b4e-4ca7-ade9-fc46ced11f6c",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ed56e6e9-fcbc-4619-aca0-a51266ed3be9"
        },
        "item": {
          "id": "db309835-10c1-45d4-9cab-99f737b84afa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "de9acf05-bdab-421f-8725-c534cd887aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9da96f0d-2ca9-4e44-b039-3312c7da0c62",
        "cursor": {
          "ref": "d0a53791-9232-4ca3-8843-71eab72b6972",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d10977a-0dbe-419a-8d6c-aebe8ad5a0c6"
        },
        "item": {
          "id": "9da96f0d-2ca9-4e44-b039-3312c7da0c62",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b4e49b2d-647d-4c42-b7bb-39854e2e569a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "5f0492f7-f3c9-43dc-a881-670a43674f3a",
        "cursor": {
          "ref": "75b8600f-ea22-42d5-aa5d-500f17a43c81",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fdb1959d-0710-4042-bfb1-1d55f996e6d5"
        },
        "item": {
          "id": "5f0492f7-f3c9-43dc-a881-670a43674f3a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4b4b24a9-6cac-4865-b2a5-564cfa272a27",
          "status": "Created",
          "code": 201,
          "responseTime": 845,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dfcae74c-078c-4bac-a208-dd78b7fc05d1",
        "cursor": {
          "ref": "893169bd-82f6-41ca-9731-d9fc14506aaa",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "173667fc-db0c-443f-902a-ca18e4de5a70"
        },
        "item": {
          "id": "dfcae74c-078c-4bac-a208-dd78b7fc05d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7c170d2c-007f-4246-94c3-df94f0301e54",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8bab21eb-86a9-4a89-9589-ed78fbc15c60",
        "cursor": {
          "ref": "7a257964-da20-470f-b422-ec2515f17c72",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf0e2aac-ed45-4a46-9467-5cf4c5ebc315"
        },
        "item": {
          "id": "8bab21eb-86a9-4a89-9589-ed78fbc15c60",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "da51bcb2-aec3-4a92-8912-55ffc63b0da1",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "84022cd3-c674-45d0-b811-43b6f62d5da8",
        "cursor": {
          "ref": "9350aa7c-09f7-4652-aebb-0b9661e8a816",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "df9f8e6b-6671-415d-a7a5-2eb8d24ca55d"
        },
        "item": {
          "id": "84022cd3-c674-45d0-b811-43b6f62d5da8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1d9d4d39-10b2-497c-a80f-fb07c0ca35df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "16db2ed8-44db-4584-8052-726f93763f30",
        "cursor": {
          "ref": "1b4dd195-daee-4cf9-b735-b32053cd4749",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "42f107b4-bf12-488b-9139-526b885de800"
        },
        "item": {
          "id": "16db2ed8-44db-4584-8052-726f93763f30",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5c7cf3de-e0e6-4181-8f88-8398570eb38b",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "15a8e3cb-ea5d-49f4-be00-e4e558fb1456",
        "cursor": {
          "ref": "5813b9cc-12ec-43e2-8cf3-562b37186085",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "54b780fc-0e0a-4d2a-bb69-72e7bc29fffc"
        },
        "item": {
          "id": "15a8e3cb-ea5d-49f4-be00-e4e558fb1456",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5c618c90-4aed-41f3-a824-c1f11ee6c93c",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "098dccdb-7076-431f-81eb-f614a741b16a",
        "cursor": {
          "ref": "2c792829-cebb-47a0-9cc3-1be2d3b8309d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "19d21013-b41b-4de6-a633-0d87b2a724a2"
        },
        "item": {
          "id": "098dccdb-7076-431f-81eb-f614a741b16a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "841a0e7e-752a-4dc1-ac22-4a625aa39470",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "881e1c23-496c-4b2d-b4ff-0017cf749231",
        "cursor": {
          "ref": "11d814c0-5d7f-4097-a946-8440e892cbf8",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5c3d9eb4-5812-4d1e-83fc-32973c8c06a7"
        },
        "item": {
          "id": "881e1c23-496c-4b2d-b4ff-0017cf749231",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6b1efb13-501d-4bf8-9731-e3fa1b4cb44d",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "90ca724b-e3e6-4124-b94a-5150a0cd7d02",
        "cursor": {
          "ref": "e4e33d35-3993-4164-ad86-86a0ea940cc7",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1b3deedd-a60c-4736-8eb9-824179f50b63"
        },
        "item": {
          "id": "90ca724b-e3e6-4124-b94a-5150a0cd7d02",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0802eaa1-57ba-40f8-b790-ff9c5c796ea5",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d6c2e475-fd59-4354-9583-cfe32da4408d",
        "cursor": {
          "ref": "6d32c385-1e34-44ca-8fa1-fd7d833bd677",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ac3efafc-03ee-4298-8121-e5d3c7bb0e6b"
        },
        "item": {
          "id": "d6c2e475-fd59-4354-9583-cfe32da4408d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d13b96f4-5432-4e49-ba1b-853df11c7d68",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4a364a6d-7b37-48f9-8360-b9376c577cde",
        "cursor": {
          "ref": "3f9f47c9-6911-45d4-888b-e0d554028186",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c71c0a20-ebc6-47cc-ba48-9cbf4ac2f4d4"
        },
        "item": {
          "id": "4a364a6d-7b37-48f9-8360-b9376c577cde",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d7a66c97-2f51-48a3-9b68-15dc7b6104cb",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "17ceaf09-05bc-41ff-8a9c-98d0d5a94d59",
        "cursor": {
          "ref": "2d573d72-26b5-4f5e-9ad7-00dbbbca1d3b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ce2f2da4-9d50-4972-80d3-5ed6bafcffff"
        },
        "item": {
          "id": "17ceaf09-05bc-41ff-8a9c-98d0d5a94d59",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "eccbe1c2-5275-4dc9-b4bc-bfbd4c6f9469",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5e72acd9-8a02-4c8f-8fdb-ba2756e69bb9",
        "cursor": {
          "ref": "8bb3b8b5-8834-4e9a-9b55-b27f36a11459",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9259aa04-39d8-4cbe-be04-8e34fc6336a9"
        },
        "item": {
          "id": "5e72acd9-8a02-4c8f-8fdb-ba2756e69bb9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a0ec287f-0a65-4dd5-9b7c-3a072f7fcebf",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6347a67c-b477-4428-8018-a9eb510eabe8",
        "cursor": {
          "ref": "efa2a9f5-dca5-4e67-b752-ee22a486e4ff",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "03ed3f13-b95e-4b83-a64c-7cb418a55faf"
        },
        "item": {
          "id": "6347a67c-b477-4428-8018-a9eb510eabe8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e888a2f8-bd7e-41ed-ab02-503246fe8bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "96503464-3298-47be-a3ca-eae94ccca3f9",
        "cursor": {
          "ref": "971fdd6d-9b2a-4a3d-9e0a-93b3a06a6e36",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1ddae1d6-4e4f-46cc-8a2a-e9ecb1fb2f95"
        },
        "item": {
          "id": "96503464-3298-47be-a3ca-eae94ccca3f9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "82f7a3c2-bf91-4f95-9380-3ff2eadb8ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "be0e0af1-69d1-44b8-975f-c94e27e15b21",
        "cursor": {
          "ref": "34d6fb85-e895-4f55-ae78-345b8a97022f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0903d7ca-321c-447c-a78e-7fc864aedba3"
        },
        "item": {
          "id": "be0e0af1-69d1-44b8-975f-c94e27e15b21",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "501b2474-99ec-4922-8db7-e84b15354e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4507ad4c-765e-4d8c-b869-597e70be772d",
        "cursor": {
          "ref": "bb829e63-880d-4a7c-88c4-3864c698ce28",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "239f4588-3a90-418b-b744-ef382353bd59"
        },
        "item": {
          "id": "4507ad4c-765e-4d8c-b869-597e70be772d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9027d3ea-6152-44f4-bb36-56cfd554d650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0cee2042-7e21-4f83-90bc-49401cd5421d",
        "cursor": {
          "ref": "d6ff5e1c-92cd-4eac-a3d2-219f6d165d9b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c1f98095-30fb-422a-a427-80872c9aeb2e"
        },
        "item": {
          "id": "0cee2042-7e21-4f83-90bc-49401cd5421d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7bf3117f-1472-49e7-a2af-14be6140bc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f1419897-4479-4015-99af-740d328a41fe",
        "cursor": {
          "ref": "7748d0d4-3e3f-4478-8a4d-6f9c049f995a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "49a81714-b515-47e7-8c08-1b1b6e01059d"
        },
        "item": {
          "id": "f1419897-4479-4015-99af-740d328a41fe",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "538b0162-56e3-4d2c-ace6-1cadf260175e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "24930a33-7fc9-4a5b-bd00-083240f07a5e",
        "cursor": {
          "ref": "48e7dc44-27de-450b-8041-28f9a3598776",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "357faead-b6fd-4170-b4f4-4a5eb0d9a7ff"
        },
        "item": {
          "id": "24930a33-7fc9-4a5b-bd00-083240f07a5e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3fbbc49a-7cd2-421a-b5fd-40e3de10afb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4a8a3c8a-e4e7-49f0-8591-da442f7084ff",
        "cursor": {
          "ref": "7741be39-1768-49c5-8cd3-746f9c8e4bcc",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "15297900-7c6a-467f-ae07-fab8b2cf60db"
        },
        "item": {
          "id": "4a8a3c8a-e4e7-49f0-8591-da442f7084ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f2acec18-7e60-4bf7-aada-6e49e77d55a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "69889ca8-4cb5-411a-8b97-c9c272b235cf",
        "cursor": {
          "ref": "7ab3a82f-4ee6-43d1-83e7-c8363157f318",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2524eb14-67d8-44f1-89be-7b73196a134a"
        },
        "item": {
          "id": "69889ca8-4cb5-411a-8b97-c9c272b235cf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7b94eb71-3735-4f72-aa99-a03259f14dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c6880a64-fbd9-4876-afe8-6b8a4a082cf1",
        "cursor": {
          "ref": "438798ec-2bd0-4a0f-ae2f-70c61a15fec2",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "332e528d-fc90-4799-bccd-fb68c9d62fc0"
        },
        "item": {
          "id": "c6880a64-fbd9-4876-afe8-6b8a4a082cf1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4541004f-52a7-491b-b9d1-a4af3fc25378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "815161d9-4d1e-45d2-aea5-68f6db877351",
        "cursor": {
          "ref": "2ce025e7-82ce-4859-a648-26bc3681eb92",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4349bd92-b7f3-44ec-a668-9fde0a546090"
        },
        "item": {
          "id": "815161d9-4d1e-45d2-aea5-68f6db877351",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "246afbe6-33cd-4f32-8217-31ef73a9c0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "a966d505-20ab-4c67-bfac-b0416de0489e",
        "cursor": {
          "ref": "793f0101-6da3-4a8e-bfc0-9e5ea9e6eb25",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1bcfcd9f-5d50-41ec-acbb-a901a7b69181"
        },
        "item": {
          "id": "a966d505-20ab-4c67-bfac-b0416de0489e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ff5122b4-923e-4e00-9d0a-cd58819adfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "93de101f-7668-4e0d-b07d-b7878cf60a64",
        "cursor": {
          "ref": "56aa7583-9804-4f72-8f17-857e23c80887",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "759b1abd-af3c-459f-9284-50d1c9d2f6ec"
        },
        "item": {
          "id": "93de101f-7668-4e0d-b07d-b7878cf60a64",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b52c106e-2d15-4e70-aecc-fe94e2086d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "31a78c31-5dda-4144-998d-392b509f5ceb",
        "cursor": {
          "ref": "1cd00ff8-92a3-4ed1-ac14-771d5bd13484",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "03191cbd-3800-4619-a447-92e1d5ab939e"
        },
        "item": {
          "id": "31a78c31-5dda-4144-998d-392b509f5ceb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ec70e4c2-3245-4b2e-969b-491222674389",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "85c4eb1f-baba-47a3-85dd-0905fa14e763",
        "cursor": {
          "ref": "bd566575-6d79-4357-a852-9b59ec04f72f",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e9f90090-fc20-4f76-8edb-1fab3a7ec7e5"
        },
        "item": {
          "id": "85c4eb1f-baba-47a3-85dd-0905fa14e763",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b20de807-a5f8-47b6-aa98-68041f306c6f",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "27ce6226-1d40-455d-9977-8e3f2b150ecc",
        "cursor": {
          "ref": "4868cfa4-cc4b-4799-8b6e-5384b70d15bc",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e34a3364-ba3b-43b8-9070-619686ac2ba7"
        },
        "item": {
          "id": "27ce6226-1d40-455d-9977-8e3f2b150ecc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a0963028-1aa8-4c72-b226-4c5369a7cfce",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "06162875-e6fb-4650-9682-f4ac987757be",
        "cursor": {
          "ref": "e37ed44a-a68c-476c-b3c0-2fb1d8c44b88",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f967cf09-09b1-4e51-b34c-5c4007c79878"
        },
        "item": {
          "id": "06162875-e6fb-4650-9682-f4ac987757be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ea5db84-b9ae-4c4b-8ea6-aef95d83eb72",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "684113b8-1c94-4962-ba09-16fd346361b9",
        "cursor": {
          "ref": "7c1e5569-85fd-49a9-8bbe-f08c7690a3e7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a7012368-de72-43ca-9e9c-2a76b8a8672a"
        },
        "item": {
          "id": "684113b8-1c94-4962-ba09-16fd346361b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ca23de65-12c6-4ea7-a3a7-3b6d21a4d9bd",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "289fca9a-e455-433d-8bda-34651b248a55",
        "cursor": {
          "ref": "04ea9010-be44-429f-9576-740eb19e507e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "61c22352-b0e2-4bf6-a09e-af86f7682198"
        },
        "item": {
          "id": "289fca9a-e455-433d-8bda-34651b248a55",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f32649c6-f1ec-47b7-888c-c3b7825db00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "92702974-62f8-46a4-9ffd-6d5e43aaa88e",
        "cursor": {
          "ref": "2ef18505-a05a-4708-bd85-bf3fe704ac8e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b7736960-691d-4ca2-ac23-e9330fa1293d"
        },
        "item": {
          "id": "92702974-62f8-46a4-9ffd-6d5e43aaa88e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e938c225-67fc-4699-9e85-6d853f0f5b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "68aecf9b-10a6-4655-8f6e-85eed7291ebd",
        "cursor": {
          "ref": "b4c05817-eb38-40fe-9d4a-dd3b7c112a2b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "60998926-f13e-4b6a-b449-4c48c8569c69"
        },
        "item": {
          "id": "68aecf9b-10a6-4655-8f6e-85eed7291ebd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "af91abae-bd77-4d47-9f8f-dd192ddc8d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "64cadc90-35f9-4dfb-92a5-400ee6d8ff9f",
        "cursor": {
          "ref": "63325644-fa66-437d-8ed7-4822ed08675a",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5a429346-f05b-4494-8027-38f07eba0e11"
        },
        "item": {
          "id": "64cadc90-35f9-4dfb-92a5-400ee6d8ff9f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d126ef78-7153-4241-a718-93a378b7554f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "7af8b490-ed63-449c-862c-c7c8d5dcbe85",
        "cursor": {
          "ref": "105f5f30-b2c7-4658-a3d6-0f5a7eaef0f9",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5e3ce7b7-2319-4427-a217-d3eefdfc0e62"
        },
        "item": {
          "id": "7af8b490-ed63-449c-862c-c7c8d5dcbe85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "596140d7-c7ef-4ab8-815b-14715a97bdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "789ef7e0-4ce3-4d7c-a499-cb125215b30f",
        "cursor": {
          "ref": "ae606337-ab98-482b-9c88-e8336864ff75",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ea7e919e-8e4c-4fae-bb60-03dd5d3bd6b5"
        },
        "item": {
          "id": "789ef7e0-4ce3-4d7c-a499-cb125215b30f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8890488c-23f7-445f-b90d-c4cf858341bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "888b9a19-d364-4057-887e-51e3c7ea8719",
        "cursor": {
          "ref": "2f68a10e-2a11-4b02-805a-dc312d2fb918",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1fc9e3b8-9b24-4f6c-b7f4-8b9fec55a56c"
        },
        "item": {
          "id": "888b9a19-d364-4057-887e-51e3c7ea8719",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "441deb95-9b35-4706-b81e-f748ad9cebb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "bde0aa7e-63a2-4543-b7a9-4b102cf5e4b8",
        "cursor": {
          "ref": "0664e1c8-8141-4b0e-a82e-56f7bafea2f5",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c95bd41d-9842-495b-87e6-958582d5aab8"
        },
        "item": {
          "id": "bde0aa7e-63a2-4543-b7a9-4b102cf5e4b8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "12c1333a-d513-4178-97bb-4e141b8ea8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "2c9bd17f-29a1-4cdb-8a47-63ea3a2c1670",
        "cursor": {
          "ref": "f17450f6-a5fc-46a0-a065-e0e73a331016",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2c5c4ce2-939f-4441-8d60-e412c96ca295"
        },
        "item": {
          "id": "2c9bd17f-29a1-4cdb-8a47-63ea3a2c1670",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6ba7d6f3-714e-4596-9232-af2c356afe18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "4d67af88-0ac6-40df-ab02-6844816a94e0",
        "cursor": {
          "ref": "9d084136-a06c-42a8-80e6-274a3a89c917",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5795e18d-f4d2-4ee6-9d73-3c8108b7696c"
        },
        "item": {
          "id": "4d67af88-0ac6-40df-ab02-6844816a94e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fe6b8d29-a8d6-4751-acef-1e8b193f78b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "d4c7f25b-7488-438a-ab23-2f0522e166b0",
        "cursor": {
          "ref": "89502fb8-c69a-40ad-8b44-0458af36f043",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b50c7b41-1786-494e-904f-9a2f4bdbdefd"
        },
        "item": {
          "id": "d4c7f25b-7488-438a-ab23-2f0522e166b0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4127d050-6c26-4ae2-b6c4-23f4eb7dc30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "00fc4158-252f-49c3-8d07-6019f10fb587",
        "cursor": {
          "ref": "3c30e077-3d6c-4c58-a81e-0156bd104853",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "31a60a72-944d-4d8c-af47-fb7e7c2c857e"
        },
        "item": {
          "id": "00fc4158-252f-49c3-8d07-6019f10fb587",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f8baa085-f20c-4800-b424-7bc2a841d5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "435c5c0b-72e2-4766-8d5b-26f102b82557",
        "cursor": {
          "ref": "7f899228-0b00-415f-b1d5-c36ff206e54c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e6b0d59f-24d8-492b-b5c5-a0c5daa8ebb4"
        },
        "item": {
          "id": "435c5c0b-72e2-4766-8d5b-26f102b82557",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "86ef122d-d3c5-47d7-bc1a-09fba3c77082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "4b950653-db28-41e0-a77c-43c5197ee75d",
        "cursor": {
          "ref": "9d413d1f-2dd5-4039-b652-8b66bbde1172",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "673055ac-b9c6-4809-b435-ddb81cb337ae"
        },
        "item": {
          "id": "4b950653-db28-41e0-a77c-43c5197ee75d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "413b62fe-9d91-4221-b588-fac49d672f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "b69b1cdc-edbd-4d9c-80bf-d19400e9c709",
        "cursor": {
          "ref": "f7acf511-86cd-4f02-95fd-64862cfdffd2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8806d7c1-6ac4-4cec-ad3a-192bd7128ffb"
        },
        "item": {
          "id": "b69b1cdc-edbd-4d9c-80bf-d19400e9c709",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "365c5705-7e8d-4028-ac58-13643c2ebdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "110bd154-8323-4f9e-9d54-961e946efbbc",
        "cursor": {
          "ref": "a19d2169-7b94-4e23-b1d4-90ac4c68bb6e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9c2d3c81-d0b9-429f-a56d-944ef57ae6e6"
        },
        "item": {
          "id": "110bd154-8323-4f9e-9d54-961e946efbbc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5d0ea8eb-1cc2-4762-9a59-1418f7be29de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "10ae94c9-90a9-4bd9-9b50-41868a4ebd59",
        "cursor": {
          "ref": "e1347348-bb4c-4b21-8f18-122bb5c6cd72",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5b193f7-551b-483c-8803-ea011b5e109c"
        },
        "item": {
          "id": "10ae94c9-90a9-4bd9-9b50-41868a4ebd59",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3f1b035e-84b6-41b4-8520-9e286513ce9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7260a751-14c6-48b9-a7b2-f5d5cec8f49b",
        "cursor": {
          "ref": "b198565c-f154-4b4c-91ea-8cb6a9a30c22",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3aeea6e7-7615-4eea-8e53-03d32354e793"
        },
        "item": {
          "id": "7260a751-14c6-48b9-a7b2-f5d5cec8f49b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fae40d01-5acd-49ec-b7d5-0ddbb84e3a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "372517cd-521e-459c-a41c-41c5064f3155",
        "cursor": {
          "ref": "9ffb5b88-00e9-4b7e-ae9b-cf53d77f6f5c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "92a240e7-bfad-4d1a-8207-74e3b9b929cb"
        },
        "item": {
          "id": "372517cd-521e-459c-a41c-41c5064f3155",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b2927fee-1188-4840-85ba-688f2ff60129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "57292bbd-6434-415e-8be0-1fb8fb6aed4a",
        "cursor": {
          "ref": "49e3a58d-a1d5-491d-8cb9-87d90b737a1c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "96e919ac-e0b2-4c48-9f54-c02908e4df68"
        },
        "item": {
          "id": "57292bbd-6434-415e-8be0-1fb8fb6aed4a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2f5420b8-b902-42a5-b213-a880b89308fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1e9fe529-c332-44eb-bc21-064614f5ae82",
        "cursor": {
          "ref": "0ef53b16-09b8-4d51-8e32-e7273215d58a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b704f583-f772-41e9-bceb-2530761abf88"
        },
        "item": {
          "id": "1e9fe529-c332-44eb-bc21-064614f5ae82",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "42a41a50-8e6e-447e-b120-90bb24218f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "fa6de1d4-2770-42a2-a422-ab91317ed328",
        "cursor": {
          "ref": "466186a9-cf8f-42bb-adac-dea156411e1f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "39b778d0-ccab-4ed2-b16b-73848f28fbc7"
        },
        "item": {
          "id": "fa6de1d4-2770-42a2-a422-ab91317ed328",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c16cbb7e-71cc-4299-bb1a-867049dc0747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "83c5d02e-9c1f-4c63-96cc-a001d190e357",
        "cursor": {
          "ref": "92042a5a-99d5-4315-a100-4ccf3058294f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5d1099a6-1441-4f47-bec7-5819663be2b9"
        },
        "item": {
          "id": "83c5d02e-9c1f-4c63-96cc-a001d190e357",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "07a74722-21cc-471d-b658-d1685dc334df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "c8cbec64-57eb-42f1-8c74-49ec8e4a72d6",
        "cursor": {
          "ref": "5bad455b-96e3-4942-b29f-16473af0e001",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bfacf7e0-8855-4cf1-af81-295e0a99f6b0"
        },
        "item": {
          "id": "c8cbec64-57eb-42f1-8c74-49ec8e4a72d6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0c61db29-89b4-48d5-b543-1c2b200955ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "2db830c8-4aea-48d4-a011-c24a1444cf99",
        "cursor": {
          "ref": "633fc0d9-c9e9-4b05-a391-8bcef40cf3a4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d504e60b-b8de-4bdc-85b8-645076f00ae9"
        },
        "item": {
          "id": "2db830c8-4aea-48d4-a011-c24a1444cf99",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56f14a0e-4593-40df-8291-985ff5d68786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "6d454448-882a-4c53-814d-163123a88992",
        "cursor": {
          "ref": "657b0fa8-40c4-4f1c-b42a-ad81cc85fc6f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1b6218a4-812b-4deb-9872-256351b9bc3f"
        },
        "item": {
          "id": "6d454448-882a-4c53-814d-163123a88992",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4eae9ff4-c52d-40d6-aa0b-c97e7121c5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "95483587-d052-4979-99ca-50748b9473f7",
        "cursor": {
          "ref": "eceea79f-663b-4679-aff1-f123984834fc",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "313689c9-c0a9-4528-9851-6395cbdb4cad"
        },
        "item": {
          "id": "95483587-d052-4979-99ca-50748b9473f7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8463d72a-639b-4e9c-9d7f-fa9ae16693b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "ca12db95-5400-4dca-a92c-330393f977ef",
        "cursor": {
          "ref": "17e919e9-d747-41ea-abc8-b388442acdb6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c9d51288-c763-42c1-b000-df1cf04e6994"
        },
        "item": {
          "id": "ca12db95-5400-4dca-a92c-330393f977ef",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "09b95529-c813-4e6e-a2c4-771cbbf7b08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "fb259322-6f9d-488c-8ce3-7165fd570634",
        "cursor": {
          "ref": "c59c0a09-5554-4208-96cf-b92d6a90f047",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9cf6f6ab-d246-41bd-9a7c-1e9c1de171ac"
        },
        "item": {
          "id": "fb259322-6f9d-488c-8ce3-7165fd570634",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "521252c0-f6c6-4e7a-89a9-b800cb00622f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "6a8d4742-dee6-4383-947d-640585c26f4b",
        "cursor": {
          "ref": "9246b6f8-c438-4df1-845e-2b4a517c456e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "925d0328-5879-43e6-be77-fba8af746c24"
        },
        "item": {
          "id": "6a8d4742-dee6-4383-947d-640585c26f4b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "141ed2e5-43bd-45fd-9476-8e06fde99a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "6b10526b-05cb-4bea-bd06-6e3574b18d97",
        "cursor": {
          "ref": "5590041b-f14d-4f2c-b588-622e227ccd69",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "51c6fd16-b1d6-4bca-944f-8371903bd5c3"
        },
        "item": {
          "id": "6b10526b-05cb-4bea-bd06-6e3574b18d97",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "751c190e-8fbe-474c-b98d-4a5bd492a46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "dd3d1604-74e0-4103-9ec6-a8265c44e702",
        "cursor": {
          "ref": "6a06f660-1017-4841-9a94-87d039a68888",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8f686bf5-7dd4-4064-a3b8-91204ec3704c"
        },
        "item": {
          "id": "dd3d1604-74e0-4103-9ec6-a8265c44e702",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "83a800b1-d635-4055-8754-5634f18efede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc42df7-0ac6-4ab9-94ac-902c2abfa0de",
        "cursor": {
          "ref": "55266042-a052-4979-8a51-1a7df83fca65",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ce8698d6-bd09-4ae1-92cf-3ad616bd27e1"
        },
        "item": {
          "id": "abc42df7-0ac6-4ab9-94ac-902c2abfa0de",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "969ee031-5518-45f2-a94c-c9cb9eab1b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "280f476d-5b08-4d76-899d-6863943b1044",
        "cursor": {
          "ref": "d8dc3827-5e74-47d4-b992-eca1083172bd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eebb6aa4-47b8-452c-aca0-266c07c1187c"
        },
        "item": {
          "id": "280f476d-5b08-4d76-899d-6863943b1044",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6900844f-8f2e-4bb5-9e99-ff3275764047",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e06daf0-71c8-442c-b75c-fdee1c97865c",
        "cursor": {
          "ref": "8dbf4241-0e0f-467a-9dd8-e9e91536bca2",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d5fc3062-5e33-49a9-b9c7-d237fcece2af"
        },
        "item": {
          "id": "6e06daf0-71c8-442c-b75c-fdee1c97865c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "84bebc5e-d7b6-411b-955b-dfabf79df306",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61052015-d2a1-4ff2-9ba4-9a027a20a823",
        "cursor": {
          "ref": "4ba86bb5-eb3f-4576-b220-d73ad409865c",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "53d4b75c-fd27-48b0-ab65-d5971f6fd1bc"
        },
        "item": {
          "id": "61052015-d2a1-4ff2-9ba4-9a027a20a823",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "287efa23-825b-4e8a-99ed-410a68fd527f",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e7ba91-59fb-480b-a3e0-e9110930e3c3",
        "cursor": {
          "ref": "9b600aef-67f9-4312-9437-a5c1c294b569",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2a8e7816-e618-4ec6-8f06-081b5cbdeb09"
        },
        "item": {
          "id": "21e7ba91-59fb-480b-a3e0-e9110930e3c3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "07922977-bd6e-4bd3-9384-59437082368d",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40a0c7b-0429-460d-afec-917b21e16a1d",
        "cursor": {
          "ref": "22f71d5c-cc24-4986-81ed-5c5b7d857d84",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7631622c-af7d-4913-8fb6-9c3f0ce3ab3b"
        },
        "item": {
          "id": "b40a0c7b-0429-460d-afec-917b21e16a1d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3d965506-3522-465c-b1b8-6baa73ae0702",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-06T00:40:37.416Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-06T00:40:37.416Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "be7d5fbb-ac58-4036-a122-5880f4b8e8f4",
        "cursor": {
          "ref": "06a6d6c3-da5c-4a4e-8122-d0503218aac3",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4d720d01-363e-4fc9-b544-01995ac8162e"
        },
        "item": {
          "id": "be7d5fbb-ac58-4036-a122-5880f4b8e8f4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ce751138-a5aa-49e3-b1d9-88adf74f0e7d",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb714f7-e9f6-4c97-bcce-f86ba81af9f1",
        "cursor": {
          "ref": "11e881b0-036d-4549-b450-45512d068570",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "389a77f3-388c-4bec-b517-8552e329f06b"
        },
        "item": {
          "id": "3bb714f7-e9f6-4c97-bcce-f86ba81af9f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1705f270-fe9d-4d93-a099-516aa3311f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b4223cb1-1fac-4954-8323-935efdeb9df3",
        "cursor": {
          "ref": "f4cb92bf-c5b2-41cd-9436-7a3061ef8673",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6810577b-4156-4002-a00f-45312209fc51"
        },
        "item": {
          "id": "b4223cb1-1fac-4954-8323-935efdeb9df3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "17dc1f6f-e5a0-4f22-ab1b-a70fad0df98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "cc073a98-6c04-4f4c-8ad5-34fe1bea042c",
        "cursor": {
          "ref": "46a5cc7d-ae35-4f70-8a79-a80009a89809",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1c4c15a3-5e5b-4d72-9260-b1661a30812f"
        },
        "item": {
          "id": "cc073a98-6c04-4f4c-8ad5-34fe1bea042c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0e23e0be-62f4-4556-9932-d27fcb41dd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ae901cff-da36-4234-9a1f-74fcd212f17f",
        "cursor": {
          "ref": "54e06112-adb3-4f10-b575-ef24313750d7",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "203de4b4-34d6-492e-85df-50b65f56cdb4"
        },
        "item": {
          "id": "ae901cff-da36-4234-9a1f-74fcd212f17f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7887d576-e9d1-4eaf-8780-651e70858632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "bfca03f2-23bc-4b01-9a86-a2e1c36d57a0",
        "cursor": {
          "ref": "6c7321b6-1ed1-4760-ae0c-6180d919cfa2",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "198bd55b-ab87-4136-ad6a-e664d6ab72fc"
        },
        "item": {
          "id": "bfca03f2-23bc-4b01-9a86-a2e1c36d57a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ef7e38bd-7a95-43b1-8f1d-df28c2a99895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c1b6b1d6-11f4-45c1-80e2-e756585d5ae2",
        "cursor": {
          "ref": "2c62aeba-19d9-4f4c-85e4-ce48aa924a55",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0fb55ca4-9645-4a78-bc66-17b0f6b436b6"
        },
        "item": {
          "id": "c1b6b1d6-11f4-45c1-80e2-e756585d5ae2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "249946a6-51a5-40ff-bd9e-41f66656d816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e5ed824a-02e2-492f-90f4-14eda004640f",
        "cursor": {
          "ref": "88c4c32c-65b5-42cc-973a-455f1d59409f",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3cebb64e-cdc0-46a4-8cfa-30878b717e82"
        },
        "item": {
          "id": "e5ed824a-02e2-492f-90f4-14eda004640f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cee38d76-a006-4f19-8a49-5c24cc8b988c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6716b625-6f52-47c2-8510-6f49dfc8f4df",
        "cursor": {
          "ref": "54654520-84bb-4f11-9650-82bdc70509e3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3cb2c709-5d38-48be-8ab8-3910cbc200bc"
        },
        "item": {
          "id": "6716b625-6f52-47c2-8510-6f49dfc8f4df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cb79cff1-b2c7-4bd6-814d-a3c03f158ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "26825451-79a1-4ded-9512-6d258ce2be2b",
        "cursor": {
          "ref": "1467110e-65f2-456a-a3a9-f0dd34bf4537",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3baf4bdd-f47e-408b-abf3-00abdd456118"
        },
        "item": {
          "id": "26825451-79a1-4ded-9512-6d258ce2be2b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "020a0c1d-b447-469c-87f8-53303256155e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "40600ce7-7e47-4a6e-9b5f-6449b079ff62",
        "cursor": {
          "ref": "56e35f57-fb59-4b0a-ae6f-5efe2a327716",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a6c8d691-6991-4d30-9836-7e7a8e98d081"
        },
        "item": {
          "id": "40600ce7-7e47-4a6e-9b5f-6449b079ff62",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "170a79f8-4f64-454c-8507-52591d08aba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d136c92e-ef59-446e-ab1d-5e0b2303898b",
        "cursor": {
          "ref": "bf15d999-0af5-40e2-91ff-597ff0de9547",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8034b5d8-e36b-404c-b40e-fcdcb6039730"
        },
        "item": {
          "id": "d136c92e-ef59-446e-ab1d-5e0b2303898b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eeafc28b-8e2e-4d37-8b84-8580e954b9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "dcff1adc-1f22-4d1c-a018-95ac716e8637",
        "cursor": {
          "ref": "9e016bd5-464d-45ff-a0e6-8f8f7a5b4aba",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d1381c17-3219-44aa-8147-0dec01ec6c3d"
        },
        "item": {
          "id": "dcff1adc-1f22-4d1c-a018-95ac716e8637",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e0fb5765-8858-45be-9264-d21dbe7ff53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ca538672-a97a-41ab-834b-d43620cea3ce",
        "cursor": {
          "ref": "ae121a27-fa88-47cf-aebe-c35d6f5903fc",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8757d825-80b6-476d-824e-cfd23b09301b"
        },
        "item": {
          "id": "ca538672-a97a-41ab-834b-d43620cea3ce",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ca56a48-98fc-402b-ad9f-599a02cc32bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9c740504-20f4-4cb8-90c2-cd0fff00f5c3",
        "cursor": {
          "ref": "9058126f-1c45-48cc-bc23-6a6d35237484",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8de2f5e9-0246-480c-bb40-b311004e9b36"
        },
        "item": {
          "id": "9c740504-20f4-4cb8-90c2-cd0fff00f5c3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1eaca02a-13a5-4e62-8de9-e11594270269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3626f15b-8c4b-40f7-96b6-ddd49b7a83a9",
        "cursor": {
          "ref": "dcdce81e-d296-45ae-9c76-88e28fa592fa",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "59eed899-7c81-42d9-b7f7-c9dab1931901"
        },
        "item": {
          "id": "3626f15b-8c4b-40f7-96b6-ddd49b7a83a9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d1993f2-eb94-4986-87a1-d8d57893ba36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c1535aec-d0c4-44bb-b825-11656865331c",
        "cursor": {
          "ref": "3b5913e8-b18a-4e37-9e23-c276cc8351d0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "94b57bdc-468c-44f5-8887-53740d6489ef"
        },
        "item": {
          "id": "c1535aec-d0c4-44bb-b825-11656865331c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "14ac281f-342f-455e-8cf6-3a69900cac47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f3cdec45-b654-4a13-b9fc-1d28970c71dd",
        "cursor": {
          "ref": "b7450477-6e50-49ac-9570-5fe82088953f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "541b0baa-693d-4d84-8125-93b502987438"
        },
        "item": {
          "id": "f3cdec45-b654-4a13-b9fc-1d28970c71dd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "295663bb-ab8b-4a21-9ada-b75d7d21c1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "89882df9-4241-48ab-bf7e-522673abc6d7",
        "cursor": {
          "ref": "a7676ab7-870a-49a1-8e4e-4d030894dec6",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "045c7cd4-c830-4d10-af0c-99282466c99c"
        },
        "item": {
          "id": "89882df9-4241-48ab-bf7e-522673abc6d7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "09688b38-0e0b-42a0-b04c-ac00e2bb0a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0a0c7688-597c-48cb-a632-33d0237e9337",
        "cursor": {
          "ref": "0b9ca6a4-9312-4431-8090-881c21e6d1a9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0481e9ea-95a8-4fb3-9f23-2a5386b16558"
        },
        "item": {
          "id": "0a0c7688-597c-48cb-a632-33d0237e9337",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bbe7db8c-5090-4078-b54b-564b603b8092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "11bb9c59-eec2-49fb-b293-544ad9c0d85e",
        "cursor": {
          "ref": "c981d405-49be-4b88-a405-7e031bb7104c",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b06ab516-067c-4c5a-92a3-154cf5437318"
        },
        "item": {
          "id": "11bb9c59-eec2-49fb-b293-544ad9c0d85e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "56e1c186-c88a-4f51-bedb-60bf091eefbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0c2cec54-b555-4ff3-89a5-4800049d39f0",
        "cursor": {
          "ref": "ae8e3384-0b67-4255-828b-5f086f7f47e3",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c3922246-15d3-4c62-bdab-84444d27deb8"
        },
        "item": {
          "id": "0c2cec54-b555-4ff3-89a5-4800049d39f0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "834ce44b-050a-461e-b601-9008cb4cd999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6c076ff1-cea3-4430-a005-99349eebba05",
        "cursor": {
          "ref": "7977b9bc-3f12-4e20-806b-474cbe03cc0b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e968de04-8bdb-40f9-b8e7-24924e62551f"
        },
        "item": {
          "id": "6c076ff1-cea3-4430-a005-99349eebba05",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bcdaf611-f20f-4e97-aaec-70f7b6fdd99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "4c8949d8-5f76-4af5-aa61-2a3142a799c7",
        "cursor": {
          "ref": "a63d81a1-22d1-4221-8fc0-86eef4e4c10b",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "23eaa8dc-ef75-47c9-917a-f3a000ab06e1"
        },
        "item": {
          "id": "4c8949d8-5f76-4af5-aa61-2a3142a799c7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "47789331-f1cb-455d-b3d8-ba00c650ac6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "63926ab7-d5e2-4f15-8a0b-4f84dc97cf66",
        "cursor": {
          "ref": "69bf7a7a-1983-4b76-b2fb-ca5dc9d97bdf",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b7fa727f-7202-4e50-a02a-61bed4436894"
        },
        "item": {
          "id": "63926ab7-d5e2-4f15-8a0b-4f84dc97cf66",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "089ac27e-08dd-4937-a3ad-5bcdc60e45a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "94db438c-cdc6-4e40-aec2-11b4ead934e7",
        "cursor": {
          "ref": "8971b691-7eeb-43e1-b110-4f6d6a2a06e5",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5d222182-2734-4bd4-9265-4a9f0c843650"
        },
        "item": {
          "id": "94db438c-cdc6-4e40-aec2-11b4ead934e7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5153444e-33ec-413d-a92d-ab669e1a5cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c0f42d4c-1226-4c88-bf58-87cb92bd63d0",
        "cursor": {
          "ref": "fe4f87ad-d376-4fb5-97d7-47658438dbc6",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c76066eb-6862-486a-86c8-0fcab23a3825"
        },
        "item": {
          "id": "c0f42d4c-1226-4c88-bf58-87cb92bd63d0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d634f3d4-5cf9-447d-9311-38c5574b2dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "82c00cc9-56bb-43ac-b901-5c21ad7a8da0",
        "cursor": {
          "ref": "e29e20ef-6dd7-4d94-959b-69d5a1fdb5e8",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6e452080-2483-4182-ae4f-613e4d539df4"
        },
        "item": {
          "id": "82c00cc9-56bb-43ac-b901-5c21ad7a8da0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a6bcd1e0-1643-4dc4-af1e-b2b36650504c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b4713b1d-9532-40de-aefb-3e6472e16e7b",
        "cursor": {
          "ref": "75a2aace-0bf1-4af3-a91c-c8e3992b8ca8",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4d75cc98-d5e4-46fd-be7a-6bdb967622c8"
        },
        "item": {
          "id": "b4713b1d-9532-40de-aefb-3e6472e16e7b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "39025e62-6221-447c-b161-607abca560f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "43572306-a9d0-425d-bc82-3a323eb84020",
        "cursor": {
          "ref": "46fcdd5e-c33d-49f4-90a9-ecad6805fbfe",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3329be00-7e72-43f8-af9f-12ef7a08b9f5"
        },
        "item": {
          "id": "43572306-a9d0-425d-bc82-3a323eb84020",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e6aef926-47d9-456d-b6db-24be3bd763d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "60025d6a-9fb4-4bbc-baf5-8ebb81739032",
        "cursor": {
          "ref": "9d77af15-1ba3-4932-80eb-96a09ddccae1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ce9348f9-5817-4c0c-9174-3a2fae0c9f18"
        },
        "item": {
          "id": "60025d6a-9fb4-4bbc-baf5-8ebb81739032",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d8a5de97-19a6-43f0-977e-c50314d011f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "13e28fff-2092-4b91-9d5e-bdb958afa733",
        "cursor": {
          "ref": "9e78e761-9eb0-47dd-8661-9775d4f2bfa0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "14f146e1-903b-49d8-9a95-0eea48bff078"
        },
        "item": {
          "id": "13e28fff-2092-4b91-9d5e-bdb958afa733",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0ff83757-1b91-48ac-aa81-193dbe152349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "45c73504-bf3d-4dc4-b003-379354389ae5",
        "cursor": {
          "ref": "10c7fcf9-2fc7-4184-8315-cca345919865",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b4d59ddd-dd93-4a61-9784-9584c318b4b1"
        },
        "item": {
          "id": "45c73504-bf3d-4dc4-b003-379354389ae5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e56e6eef-546d-4c41-8552-55a9c84b6d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0a816ac3-576d-40cc-85c9-948804c5c5d6",
        "cursor": {
          "ref": "a5f547b0-a05a-4de0-8e44-94ff3c9d9974",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c11d469a-b7bc-4343-a448-031123604348"
        },
        "item": {
          "id": "0a816ac3-576d-40cc-85c9-948804c5c5d6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "911aa953-89b1-4327-a17e-c862a2b73b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "cc74015f-72c5-4bdc-9ccd-9279a3096588",
        "cursor": {
          "ref": "404c0fc8-b414-4634-8ccf-336b7dd72d82",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "197f66d2-12b0-44a1-ae93-4a8c1ef7c00b"
        },
        "item": {
          "id": "cc74015f-72c5-4bdc-9ccd-9279a3096588",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "25d0e1f6-7f56-4df6-89d1-5721a2a4012a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "318826b6-ae0d-4bea-85b7-20370407dad0",
        "cursor": {
          "ref": "417048a2-9f08-44bc-befe-a2c78c6e5464",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6991db03-9b19-4a66-b334-f2e4c51f8341"
        },
        "item": {
          "id": "318826b6-ae0d-4bea-85b7-20370407dad0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c1d7fd95-0573-407f-8f98-d28e904ba7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0338e7d3-6963-4873-940d-22a1f0992363",
        "cursor": {
          "ref": "57ed6772-fac0-40c3-a5e4-86c2aea9baca",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "268230d8-343d-4e40-8708-c21bec77a740"
        },
        "item": {
          "id": "0338e7d3-6963-4873-940d-22a1f0992363",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "be54ce0d-7710-42e3-a215-aa78543bdc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "5a3ec65c-ecd7-47e7-aa14-6c76c5781476",
        "cursor": {
          "ref": "7a7e478a-e9d9-4d01-b4b6-bef53e7c8db1",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3c2b9ff0-79a1-4060-87b1-3b7d16a7eaf0"
        },
        "item": {
          "id": "5a3ec65c-ecd7-47e7-aa14-6c76c5781476",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fcc28827-3ed6-4801-a103-828baa4c91e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "69306a9b-f511-4543-92f3-697bb83841f1",
        "cursor": {
          "ref": "4efc23f7-2ee1-430f-9ac5-4de19d9f5bf0",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "75ef75b5-20dc-4617-b19c-2269e6cb52be"
        },
        "item": {
          "id": "69306a9b-f511-4543-92f3-697bb83841f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "79ae01a7-ada8-49ff-9978-d36e2aa19247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ff313f-0e84-4faf-91fe-5b8ebaee71a8",
        "cursor": {
          "ref": "6f089138-ad64-42f1-a70a-244b890cc984",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "62ab83b0-9114-431d-81bd-8de2a6c23c85"
        },
        "item": {
          "id": "30ff313f-0e84-4faf-91fe-5b8ebaee71a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f7c8079e-0a10-476e-912a-da032467c8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f861c1d5-b923-4ec1-96f4-7f288da94145",
        "cursor": {
          "ref": "45f19cc7-f0c3-4f84-ab76-dc5af605e6a2",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bad95556-6364-4fe1-9af9-237b7b06b81d"
        },
        "item": {
          "id": "f861c1d5-b923-4ec1-96f4-7f288da94145",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fbb45ed6-706b-4116-a118-fababa0b075c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "266191e7-44d4-4e4a-a20a-e9de5ef09971",
        "cursor": {
          "ref": "ca405604-a874-4cbf-8856-33c613c66445",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9d79ab85-a5ce-49e4-9351-cc9987bd8c35"
        },
        "item": {
          "id": "266191e7-44d4-4e4a-a20a-e9de5ef09971",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0e098fb4-b32d-4816-a03a-cfc14876cfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "b4dd1f87-ef8f-4795-ba98-39693e7822b8",
        "cursor": {
          "ref": "80779a7d-7ac8-448d-9f51-8b35c254cad5",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c1eadd2-d59f-4505-8da3-e1efd439fc21"
        },
        "item": {
          "id": "b4dd1f87-ef8f-4795-ba98-39693e7822b8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "08462e52-2316-4ea3-9fb1-2f4f00fa4387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "4bb1df1d-20d3-4187-87cf-fe12945a52c7",
        "cursor": {
          "ref": "59bb4ec4-3697-48c6-8389-7dc929ec50b4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "00d50a53-bc10-41fe-b71f-48e874198067"
        },
        "item": {
          "id": "4bb1df1d-20d3-4187-87cf-fe12945a52c7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dd38c25d-aa08-4965-a659-ccf28a15007f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b5f1fdd2-b5e9-4bd8-98c5-c5d093401539",
        "cursor": {
          "ref": "77fb2f57-f367-4c98-85b2-9913eca6c9c7",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "997fdab7-324f-4690-be8e-41ba0b14636f"
        },
        "item": {
          "id": "b5f1fdd2-b5e9-4bd8-98c5-c5d093401539",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e3c2b685-7972-45e4-9f7d-14b284447d27",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "1958dfa8-8450-44d7-a9cc-697599f9a855",
        "cursor": {
          "ref": "7d429ce3-eec6-48cd-9d5d-fb17ad8756d0",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b3e5f9a6-2adb-4d60-a79b-44ff0a70b46a"
        },
        "item": {
          "id": "1958dfa8-8450-44d7-a9cc-697599f9a855",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c8c331e6-e1c9-4008-a63b-2832aced89e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "9108b5ee-812b-4830-98f1-a770599e560b",
        "cursor": {
          "ref": "daf2a59e-cdcd-4fe3-845b-389327090fb3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d1907e02-4525-4812-800f-8f4720fe75c7"
        },
        "item": {
          "id": "9108b5ee-812b-4830-98f1-a770599e560b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "63d7a41b-5122-4eac-bfd8-7b74129f05b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "754cb752-5bcd-4406-beb9-7cb4b4ddcad2",
        "cursor": {
          "ref": "40f15b5a-de70-45e6-bc4d-5dc65169c8b6",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9c8a4a87-a05e-4016-b452-927fb5138811"
        },
        "item": {
          "id": "754cb752-5bcd-4406-beb9-7cb4b4ddcad2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "97375151-10fe-46ca-b932-3c96350acc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c8d7eef7-6b89-45d7-b97b-efa715f9ce86",
        "cursor": {
          "ref": "847b3478-5c9d-47ab-8449-7502e3ccb7c8",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f21be21e-d751-44d4-87eb-6775be2c8b9e"
        },
        "item": {
          "id": "c8d7eef7-6b89-45d7-b97b-efa715f9ce86",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f2f83b18-d610-43b5-8062-d559f6cc7854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "77907bfe-335c-459e-8b7b-2c6e02691290",
        "cursor": {
          "ref": "36d7ccc6-ed10-4102-b990-d5c205d49278",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d5f800aa-e019-4943-8660-f9f138626b88"
        },
        "item": {
          "id": "77907bfe-335c-459e-8b7b-2c6e02691290",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b8368497-c26f-45ba-bd1d-86734d8a7e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "edd6634b-aa8c-40b3-803e-085162e08cfd",
        "cursor": {
          "ref": "eac6bd0d-8e4b-4a55-b245-b2cb0ca369df",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1a4d71f1-a4e6-4693-9f1c-ed29c5c3e627"
        },
        "item": {
          "id": "edd6634b-aa8c-40b3-803e-085162e08cfd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1bc68e58-25de-4228-a7d8-61a6ea5a21bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d93619e1-c4e8-4985-bc39-8073e89403d0",
        "cursor": {
          "ref": "cd6522d6-4e49-416d-8404-e9bf4ba8a8b6",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6de8cf28-f343-4b88-bad2-2db6e7281061"
        },
        "item": {
          "id": "d93619e1-c4e8-4985-bc39-8073e89403d0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "88ac1671-681c-4bd3-ba5d-2cc926de6207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d6b52d47-e4d2-4e2c-807b-c5dc239df6bd",
        "cursor": {
          "ref": "129af8e5-bc05-43ca-bfd5-65173b778850",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fb4e4525-6bde-4d85-9050-0b8b6fa99ed8"
        },
        "item": {
          "id": "d6b52d47-e4d2-4e2c-807b-c5dc239df6bd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2f3d5671-30df-4af6-b6fa-4c0ceff8af05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "09d58f75-c2fc-4e84-ad6f-222662ff5a5c",
        "cursor": {
          "ref": "7ad2fa71-17d8-4e5c-ba33-f5ef9869d693",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9204f498-57a3-4889-9990-26b31d008796"
        },
        "item": {
          "id": "09d58f75-c2fc-4e84-ad6f-222662ff5a5c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "54f85b26-9fde-4f3d-be3d-e1dcfeaa9406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ca1a6610-2248-42fd-a109-ff9e5ec0167c",
        "cursor": {
          "ref": "77d872d0-17b0-43be-b38b-0a62c1b65ff4",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eba0293f-2ed3-47b7-9ddf-7acb707e2067"
        },
        "item": {
          "id": "ca1a6610-2248-42fd-a109-ff9e5ec0167c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7fa17982-4f24-4857-b476-140de8d85bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "8beaca25-0c90-468a-976d-114e2cfb8fd6",
        "cursor": {
          "ref": "113a90cb-bb24-4aae-a593-4e8f0d976c34",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "846e70e1-b94d-437d-bfdb-f99b338e0e18"
        },
        "item": {
          "id": "8beaca25-0c90-468a-976d-114e2cfb8fd6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a6d6deaf-6761-4455-b9b4-51d39d395e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "29cafd19-a5f3-4517-9768-b1473dc30ff2",
        "cursor": {
          "ref": "9904ebc6-67f6-40ed-8c26-d8b7742c4938",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cb3e99e9-71dc-4684-9e33-947491e15fc0"
        },
        "item": {
          "id": "29cafd19-a5f3-4517-9768-b1473dc30ff2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "27c7eaca-f5b2-4102-a6d6-f87647a05f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "10a5f622-faa2-471b-9e5a-6142f255e1fb",
        "cursor": {
          "ref": "8f615096-a78a-409f-baf7-ccb0d3c479bd",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "90b88187-7547-47c9-954e-28fa4692e0ef"
        },
        "item": {
          "id": "10a5f622-faa2-471b-9e5a-6142f255e1fb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae9b1554-20d8-4231-9815-761c82db5f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "1fb95187-5896-4a6f-8b89-12171e04ce08",
        "cursor": {
          "ref": "2acb44e9-e227-4958-b643-7706afcd7365",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4cf035be-c8c1-437b-98ee-cc9c575dc1fc"
        },
        "item": {
          "id": "1fb95187-5896-4a6f-8b89-12171e04ce08",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8cd61dd1-d553-4cc0-8899-58c6feef8d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "9cec1a6e-0caa-4574-8fc8-4af9512e7ae7",
        "cursor": {
          "ref": "8d7c9db2-d568-403c-846e-63e9b3f9961f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b45d4345-624f-474c-a7d4-8413f15b1324"
        },
        "item": {
          "id": "9cec1a6e-0caa-4574-8fc8-4af9512e7ae7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b284932d-5bc7-40df-b8f3-68670b57735d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e06ee073-f9cc-4e30-8ec5-04bb9ff9f93f",
        "cursor": {
          "ref": "b9c95e57-1bd6-4060-b519-e709c1ebd03f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2b44f922-8ec8-4c79-bec1-4243674076c5"
        },
        "item": {
          "id": "e06ee073-f9cc-4e30-8ec5-04bb9ff9f93f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a9bbb4f7-a2c7-4d43-a5dd-6fcb80790162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "2e74533d-d398-47f0-a05e-0c7eb7d1bc49",
        "cursor": {
          "ref": "32ca3603-8139-4927-86db-f7b4d70c52ea",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b4a831b6-eafa-46b1-ad6c-e3859db4886a"
        },
        "item": {
          "id": "2e74533d-d398-47f0-a05e-0c7eb7d1bc49",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2c3c895e-e234-4488-bdba-e9fd0bc0d00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "98e1e80d-1e8c-4af8-9adb-2ad741a7156a",
        "cursor": {
          "ref": "a36c44b6-b79d-46fb-ad3c-8ea1e8094fd6",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e5b2a55b-b6e7-4115-aeba-20925c933d29"
        },
        "item": {
          "id": "98e1e80d-1e8c-4af8-9adb-2ad741a7156a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "600f0c7d-e9f1-4766-a79c-3d027d9e5f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "c7b94a99-4fb7-46f0-94e0-e625c4f9eaad",
        "cursor": {
          "ref": "a3d2f23c-cf94-4f36-a226-13c1d25acc84",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b816acaa-f8cc-48d2-93d8-a8e727093afe"
        },
        "item": {
          "id": "c7b94a99-4fb7-46f0-94e0-e625c4f9eaad",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "593ac748-8fda-4b1a-8434-01afeaf148d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "6d113b1d-9f05-4926-a731-692e355da361",
        "cursor": {
          "ref": "53aa45f3-3fd8-4161-ad7d-b1ea30b93a5b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fc4ea6a6-7480-40c2-967f-967a634e8b0c"
        },
        "item": {
          "id": "6d113b1d-9f05-4926-a731-692e355da361",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bc4a9200-a3fb-47ff-ab42-e27f6e87f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "85e5380e-cab5-47da-8e88-c75aa94d75e2",
        "cursor": {
          "ref": "6baa0bb6-bf81-4527-b11e-557b5c32c01b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a3251171-ed44-4486-9e92-caee97d3aa98"
        },
        "item": {
          "id": "85e5380e-cab5-47da-8e88-c75aa94d75e2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "68bb1a4d-f5ac-4d8e-9166-576f6b4262db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "4664c846-45bb-4786-ad5e-c95b453ae3f7",
        "cursor": {
          "ref": "90c502f3-cc07-42d3-ad68-c670010f9969",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2e326e7a-18be-4e8d-a25b-59bd3c3b3a4c"
        },
        "item": {
          "id": "4664c846-45bb-4786-ad5e-c95b453ae3f7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7dd85f5a-020e-4931-ab94-7460dbc4968b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "caa61a54-f014-49ff-b53c-5bb7ab62b1d3",
        "cursor": {
          "ref": "42c708f6-4bbc-4123-b25f-0acd7e10e685",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7855e540-e39f-41f6-811e-f064a968bdc6"
        },
        "item": {
          "id": "caa61a54-f014-49ff-b53c-5bb7ab62b1d3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "21f97372-2237-4fe7-8ad4-ee790cd887cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "454f9db3-fe8b-42d7-9505-a9ff5c974b40",
        "cursor": {
          "ref": "1a26f95a-42bb-4792-ab6a-d713f1e736b6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fe565a71-005d-47aa-927f-13d6f7bebef3"
        },
        "item": {
          "id": "454f9db3-fe8b-42d7-9505-a9ff5c974b40",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "956fdb3c-5a0d-471e-ade8-24257c3848e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "72baebe2-b0b5-47d3-8b66-8033646fca34",
        "cursor": {
          "ref": "f985a7aa-3b88-4616-a687-0445de8e419b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6fec88de-4128-45f8-b689-20746654a3f0"
        },
        "item": {
          "id": "72baebe2-b0b5-47d3-8b66-8033646fca34",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "542fd86c-a859-4366-98d2-2f8112cd2a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "969a5f91-cecf-4def-8022-03d9d95c6147",
        "cursor": {
          "ref": "4affb3fc-84ce-4c5e-9b18-8a219b3d1728",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a00f08a8-c24c-4926-b09f-683dc8de1e77"
        },
        "item": {
          "id": "969a5f91-cecf-4def-8022-03d9d95c6147",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0dab74b4-abfe-41e4-8d6f-fb4f2a61c185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "09ea1f08-8fb2-4d29-a06d-153ae74f0555",
        "cursor": {
          "ref": "823c18ff-28a7-486a-a8a2-629ffab11179",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bb539b76-f506-4795-aa70-d0962fb62062"
        },
        "item": {
          "id": "09ea1f08-8fb2-4d29-a06d-153ae74f0555",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "377a4049-3f7a-4f6a-9881-a6be7bd4d018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "6c6fcf9a-349d-4ac8-87fc-64a2d9817194",
        "cursor": {
          "ref": "a6ae565f-38e6-4e05-b31b-98786a5896bb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "16832f5b-fc69-4ed5-b1e2-79af3c0ca754"
        },
        "item": {
          "id": "6c6fcf9a-349d-4ac8-87fc-64a2d9817194",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e59455af-151c-43c4-a8da-cbefa7cd1387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "b1281e3b-8254-4c26-8a51-860b81d8b3cb",
        "cursor": {
          "ref": "26c9bd10-1baa-4eb4-9467-1acf3e15be3a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7d491f2d-c626-49b0-b8e6-c508356c7842"
        },
        "item": {
          "id": "b1281e3b-8254-4c26-8a51-860b81d8b3cb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2ded5a31-38c4-475f-846a-9aefb7b584d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "43a7ec04-4a55-4d77-861a-389b39a7ccae",
        "cursor": {
          "ref": "4f74395d-0758-4bf4-8e4e-99177b0bb547",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "698e60bd-5570-42ac-be58-51116f36f551"
        },
        "item": {
          "id": "43a7ec04-4a55-4d77-861a-389b39a7ccae",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "af454be5-fe30-4a0e-9e18-6833ae6e5ca5",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c5122f60-3d49-4b61-95bb-4278474dbac2",
        "cursor": {
          "ref": "473ce476-8b35-4820-8451-bece0ef1d5b1",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6f28cdb1-444a-4de8-8df6-9f3f16135f1e"
        },
        "item": {
          "id": "c5122f60-3d49-4b61-95bb-4278474dbac2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4792d1ed-dfcc-4a57-bd71-bfde7501c355",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "78e8a709-1fdf-4341-9e93-3216227e801f",
        "cursor": {
          "ref": "277a536a-862f-4071-801a-9eb36d34ad5f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e8179225-a0a2-48ea-8048-6750c550f091"
        },
        "item": {
          "id": "78e8a709-1fdf-4341-9e93-3216227e801f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "90061e96-1d2c-41fd-9d1f-e99bfef431c0",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "35e3f0a5-616a-453d-b230-c096e3281720",
        "cursor": {
          "ref": "b152c422-20cc-4d04-8a91-0b92ac786bff",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e85975e7-7b2c-44c8-b4c3-3c577ad0b4a0"
        },
        "item": {
          "id": "35e3f0a5-616a-453d-b230-c096e3281720",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "40b586b5-dbb5-44f2-a1fa-3715a206e929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c68d94c9-efac-4519-a64b-f8aacf4bf960",
        "cursor": {
          "ref": "ee9a34b3-6e07-4029-a5e7-a20b653e654c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3ce5c9fa-3c1d-4121-b22f-fd78ad45adbf"
        },
        "item": {
          "id": "c68d94c9-efac-4519-a64b-f8aacf4bf960",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "73bee15d-5b1f-43aa-a3c7-8dd7968e28d4",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2afc3694-9b75-4b05-a760-de86331d13d6",
        "cursor": {
          "ref": "62b5b064-d04b-4061-b298-2cec95668d62",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1e05c966-410d-495d-8873-ae3cf48ebc37"
        },
        "item": {
          "id": "2afc3694-9b75-4b05-a760-de86331d13d6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "96fa39c7-10f9-4887-858c-8fc5b6468fee",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b1da1f5c-a5b9-4f97-be7b-65d3329b5c40",
        "cursor": {
          "ref": "2faee3a0-6063-40a5-8df8-83cf59756651",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "212a4c43-29c1-4e62-9e21-d03490e4d4bf"
        },
        "item": {
          "id": "b1da1f5c-a5b9-4f97-be7b-65d3329b5c40",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "112092cf-cb00-4a8d-a7cb-5f9dfd21ab86",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "73f9c773-bfd3-4d32-8941-04b0ccd40813",
        "cursor": {
          "ref": "a7046796-53b1-4094-b226-b01d4c98f85b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8c8c0c38-1b51-40ff-8a08-f5ff6a007759"
        },
        "item": {
          "id": "73f9c773-bfd3-4d32-8941-04b0ccd40813",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4b7a90ac-0e05-4d65-8137-0534a2f3a89a",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "df730282-794a-4bde-960c-af41fd68fba0",
        "cursor": {
          "ref": "183bc457-c950-4ec3-9727-e55797e30fe3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f1a71e79-d913-460a-a13f-5728b800891b"
        },
        "item": {
          "id": "df730282-794a-4bde-960c-af41fd68fba0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a62fdd5e-9cab-4412-b497-4afe6459ffd3",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2dc7b06a-43be-4b4a-8340-7f721ab82d55",
        "cursor": {
          "ref": "843d4521-75f6-4625-8fa0-a57c4dfc21b2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1c81c0b7-4c78-47e0-a255-a46ab0a503b2"
        },
        "item": {
          "id": "2dc7b06a-43be-4b4a-8340-7f721ab82d55",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8e95d03e-c50d-462d-a2d5-64e70b5cf907",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "e3428422-bc2c-4bc7-a701-dc9acbd91f55",
        "cursor": {
          "ref": "c6b5513e-480b-4219-967a-fe933e877a07",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f89ffc30-105e-4016-a8df-a0b014fc246f"
        },
        "item": {
          "id": "e3428422-bc2c-4bc7-a701-dc9acbd91f55",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "956f1ca8-39a4-4b2d-8d16-0fac0401e01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "71f5f4e9-7384-46e1-999d-8734435e3cc8",
        "cursor": {
          "ref": "3aa61484-d4a6-4c7a-a165-507454eab96c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e699ac96-bec4-425a-8b3e-c9fcba84e733"
        },
        "item": {
          "id": "71f5f4e9-7384-46e1-999d-8734435e3cc8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b9ab8b69-e5fa-41b4-bc7c-db4cce24051b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "40d6318f-21f1-4cd2-9373-931ca281c070",
        "cursor": {
          "ref": "42a69cc6-cda7-4896-bc3a-0fbcb24c1264",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "47d7abc0-257f-41e7-a465-78fc38d14c68"
        },
        "item": {
          "id": "40d6318f-21f1-4cd2-9373-931ca281c070",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cec56898-9ef7-48e1-b7d7-51441aa3fbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "000923c0-e3c6-4efd-8e24-d014cd922027",
        "cursor": {
          "ref": "8e3c1f37-d191-4203-ae02-ca755fb44d99",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1d1f0fb8-bc1b-4194-a934-a112d964874b"
        },
        "item": {
          "id": "000923c0-e3c6-4efd-8e24-d014cd922027",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d89a1daa-2975-43df-a3b4-2079a670d950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "0dd8dc1c-b616-42ad-a82e-de8665b07c50",
        "cursor": {
          "ref": "42f7899f-c5b5-404f-bce7-ef0656543953",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2229400d-11a0-45ac-96bc-7600e9004e44"
        },
        "item": {
          "id": "0dd8dc1c-b616-42ad-a82e-de8665b07c50",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cc1ddc0c-d808-462b-84b1-e9031f3e7016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2689d71b-2de4-4683-bdda-16821d891818",
        "cursor": {
          "ref": "181de112-d0a6-4e2e-902a-c713387d6cd4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b1568581-29f2-4775-8bfb-c063079190ac"
        },
        "item": {
          "id": "2689d71b-2de4-4683-bdda-16821d891818",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "eb31c3e6-3ee9-47e9-bac6-1eb0fa7a6a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "57275c19-9934-4313-b5e9-4b9dfedc9d7d",
        "cursor": {
          "ref": "c5e5ea0e-7ada-4dc2-9aa2-4308b3b3acb5",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dc52a981-3ad0-4ac5-a78d-575713d85c71"
        },
        "item": {
          "id": "57275c19-9934-4313-b5e9-4b9dfedc9d7d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "15bdd15b-6e5f-4660-8590-f5f8a001bcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "61692c65-5300-4288-ae29-1d02cd42a6d0",
        "cursor": {
          "ref": "56027901-14b4-42a3-98b3-5632f8d1ce4d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1c961277-7fc9-4fc3-9784-7c159efd9bec"
        },
        "item": {
          "id": "61692c65-5300-4288-ae29-1d02cd42a6d0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6ecff3b1-2f15-4664-87ce-479e996acbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "99810085-23a1-418e-9dee-253b2d0f0e17",
        "cursor": {
          "ref": "176ac3e4-16e7-4369-9a2e-5ca14fbd89d0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "84686536-949f-418a-9136-969fae42a375"
        },
        "item": {
          "id": "99810085-23a1-418e-9dee-253b2d0f0e17",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a4f283c3-9135-42d0-bcf5-db19059dc47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "cbd5a87d-4126-4f9b-9746-5244daf93529",
        "cursor": {
          "ref": "5f355974-b30b-40ec-ae1f-6a9048730243",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "81602fba-1339-4046-b32f-0493c0e6e643"
        },
        "item": {
          "id": "cbd5a87d-4126-4f9b-9746-5244daf93529",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6a94462b-3a69-4e5b-abf6-bf9e06eedbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "8f9a2dfa-d69b-461e-aff8-7beb4df6c9c1",
        "cursor": {
          "ref": "161e7b2c-4cdf-4058-b81d-3a4ad76d5717",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "31f00b45-84d0-4216-9bad-9383618a8d9f"
        },
        "item": {
          "id": "8f9a2dfa-d69b-461e-aff8-7beb4df6c9c1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d7898a04-9fe0-4005-ae8d-7f4157444696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f3ba161e-0cca-4a45-95bb-2a547d7ee007",
        "cursor": {
          "ref": "bf089560-9f26-465d-bac5-738ead1d5b3b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ba87258c-edf2-4d64-864b-eb7155c4dd0a"
        },
        "item": {
          "id": "f3ba161e-0cca-4a45-95bb-2a547d7ee007",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "112a0382-ff53-47d1-9bd2-630817b7f22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "3fc9347e-6bac-4af9-a881-a43ca86180e2",
        "cursor": {
          "ref": "d55300f1-f185-4162-852e-ba284fa44889",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a82615b4-5e8f-434d-b936-07f2c752cdd9"
        },
        "item": {
          "id": "3fc9347e-6bac-4af9-a881-a43ca86180e2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bcdb3589-2247-4aaf-b3f7-348ffb7a2b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "4b13f9ea-f6db-477b-b623-1f3109acbb2e",
        "cursor": {
          "ref": "6302f143-c9b7-4f10-a2e9-f9210863cb1e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "39a64cb5-cc11-4327-87bf-f24399a09c83"
        },
        "item": {
          "id": "4b13f9ea-f6db-477b-b623-1f3109acbb2e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5ed8b4b7-a0bb-4d68-8cfa-16c00b1aabf4",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c8292a4c-71da-4005-9bd8-dcd464ddad4a",
        "cursor": {
          "ref": "f0f874a1-06d8-4e68-ab84-4a07fce8e962",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "37bbbb82-797e-4875-809a-5b80d56fa810"
        },
        "item": {
          "id": "c8292a4c-71da-4005-9bd8-dcd464ddad4a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "50c5c4f7-a963-4734-9344-bf217b7d807d",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2be80051-c360-4fee-a238-94b96cfa3eb1",
        "cursor": {
          "ref": "d5269342-ed44-4764-b74d-3a2dcb67bbd2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e2f050ff-ac33-4409-8ac7-d1e5a4f52fb5"
        },
        "item": {
          "id": "2be80051-c360-4fee-a238-94b96cfa3eb1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c69e8c22-c616-4d27-9e04-d4dc9f748950",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d57f0d4c-ca1f-42d9-82bb-b0671e7cfe66",
        "cursor": {
          "ref": "c86000e2-677c-4c68-a917-debcc455535f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2eb8e85f-5c18-4d35-a41c-077a750848fe"
        },
        "item": {
          "id": "d57f0d4c-ca1f-42d9-82bb-b0671e7cfe66",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "966d18b4-99a9-4ba1-9746-b58b7b787889",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1216db79-ecb0-4870-ab44-793265197efa",
        "cursor": {
          "ref": "37e9e139-24da-442c-bfc8-286852f2027f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "101cfb86-5307-4ab1-a92f-74760e2d01ef"
        },
        "item": {
          "id": "1216db79-ecb0-4870-ab44-793265197efa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "95e343b7-f45e-4e99-8803-605b0c0bc5d5",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3684da88-dbb2-4309-93ca-d823429e4867",
        "cursor": {
          "ref": "89299a29-45a4-4aea-8efa-d2584ce9bc34",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e78ce975-1468-4153-a7c5-605a36922fda"
        },
        "item": {
          "id": "3684da88-dbb2-4309-93ca-d823429e4867",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bd366804-77b5-4699-a7f0-ecd7468ec90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b5efabd1-8a82-41e3-8e69-e75ed24a3fc3",
        "cursor": {
          "ref": "1afd5cec-eedb-43db-b885-d01f464e0a60",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "165d100b-9e1e-466c-8249-b9e4ba0cdc24"
        },
        "item": {
          "id": "b5efabd1-8a82-41e3-8e69-e75ed24a3fc3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81cbe990-5838-46dd-b4c6-d3cba6a60e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "09bd3702-dee5-49da-91e3-9430980e9907",
        "cursor": {
          "ref": "2d746bf4-b53f-42b3-90a4-5d8d4fa6e7b3",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9bc87538-ec6f-4e9a-930c-3efd2133d8cc"
        },
        "item": {
          "id": "09bd3702-dee5-49da-91e3-9430980e9907",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2d774379-ce8c-45fa-b275-77faed7ff587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "e7a635cc-efef-48df-9a9e-070097b51bf2",
        "cursor": {
          "ref": "69925ba2-e765-4186-9e77-33837606ce06",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f9a0c00b-306a-4c8f-a931-1ab0d7afedab"
        },
        "item": {
          "id": "e7a635cc-efef-48df-9a9e-070097b51bf2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cb6f642b-1ef7-498f-9fb9-d16cc93acfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e13bb1cd-73e8-46fd-a8a4-878773c836b7",
        "cursor": {
          "ref": "027c1920-2c1d-4540-bf7d-55ee521d7ba4",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a9e6ffce-f0c5-472f-90d6-9bc774f27ad1"
        },
        "item": {
          "id": "e13bb1cd-73e8-46fd-a8a4-878773c836b7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a12b3467-aebf-45a9-a252-770a6f722aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "631ba61c-9417-42c3-bcfd-321cea6386e1",
        "cursor": {
          "ref": "cfc065d2-b347-47fc-b49e-a8a4bb24421e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "de24adc6-a2ed-47f6-8485-b5e29a6719dc"
        },
        "item": {
          "id": "631ba61c-9417-42c3-bcfd-321cea6386e1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cff889e5-1892-4272-adda-800efeb410b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c571e4ea-9420-4e52-90df-7ebc3551b641",
        "cursor": {
          "ref": "b64aafa4-a742-48e7-883b-e7e3b7a71015",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "96cf55f2-5fd7-41b1-a0f0-cad2a9329d9d"
        },
        "item": {
          "id": "c571e4ea-9420-4e52-90df-7ebc3551b641",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d42bebe6-a4c7-4d69-9ee4-bbd5ec430ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ce329e0d-1a1e-4b91-8a14-ef4643d47571",
        "cursor": {
          "ref": "e2d2d005-620e-4104-bbbb-813e089200c5",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e8d96c69-941e-49e9-8e24-06813146ee41"
        },
        "item": {
          "id": "ce329e0d-1a1e-4b91-8a14-ef4643d47571",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3a892bef-8304-4541-b83c-5d9dea1db7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "09600269-63b6-4e14-8645-8fc6bac316d3",
        "cursor": {
          "ref": "8f9efd99-e4cc-47c7-ba07-ff65bbf92ad9",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "319af72d-c6b6-462d-b49a-7682046773e7"
        },
        "item": {
          "id": "09600269-63b6-4e14-8645-8fc6bac316d3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cda8e0ae-d97d-4bcc-b28d-01fafcd9f570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "305f60fa-eebb-45d3-adc5-e18e047b6565",
        "cursor": {
          "ref": "41272b76-b0ae-4d2b-bb24-dfc7ee9507fa",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fdeea878-3f34-4b2d-b71f-f28fd807fae4"
        },
        "item": {
          "id": "305f60fa-eebb-45d3-adc5-e18e047b6565",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a4360460-6026-49ca-9793-82d592bc1add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6b94d57d-42fd-46a5-b33c-9c52f87fd3b0",
        "cursor": {
          "ref": "aac981dd-2180-4e98-92d4-8d7a77af0374",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6ef2b9c4-78db-4708-b979-93f34ef1ef0e"
        },
        "item": {
          "id": "6b94d57d-42fd-46a5-b33c-9c52f87fd3b0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "90036269-c7bc-4882-9ae9-b9535feded94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d98d6af8-4cd6-4e93-938f-7ed4092cb2e6",
        "cursor": {
          "ref": "80e22d66-95c3-420b-802f-e52f202f169c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0a5986b6-82f5-481f-819d-6be4814b2c74"
        },
        "item": {
          "id": "d98d6af8-4cd6-4e93-938f-7ed4092cb2e6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a637f98c-579f-44c7-80ae-f4ff19183572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f9e48206-d73b-4dd6-a26e-a1f175660430",
        "cursor": {
          "ref": "20cb3b2d-a296-4c1a-b9b4-eabc9d68b1a9",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "42f1d18f-e4ce-4f11-ab42-c9023062eae9"
        },
        "item": {
          "id": "f9e48206-d73b-4dd6-a26e-a1f175660430",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2d073f02-7974-476f-a4d9-c566ccea2c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c47bbbd4-de19-4a1a-b0fc-c2255a12c02f",
        "cursor": {
          "ref": "043628f8-6fb3-4d33-8ab6-29d137d39c27",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "720b6581-ccb1-44af-b114-e39648caa8b8"
        },
        "item": {
          "id": "c47bbbd4-de19-4a1a-b0fc-c2255a12c02f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c87a2886-1e2c-4b07-b143-1e68481b03e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "94ac90bc-a524-450c-9d21-908036493d15",
        "cursor": {
          "ref": "9b7532d5-5bf1-4582-bfc2-397d9ef8d56e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "eb9c32f0-fcf4-45cc-a3b9-4d16fdd1f97e"
        },
        "item": {
          "id": "94ac90bc-a524-450c-9d21-908036493d15",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "674b234f-b614-49d7-9deb-8518dba09276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "869bd0eb-ac9b-4190-979f-1796a0c6f5b9",
        "cursor": {
          "ref": "81ac2d96-0a7c-4bdd-b094-7f4fabebfad9",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2199e60e-488c-45fb-aa5b-786f2dfd6839"
        },
        "item": {
          "id": "869bd0eb-ac9b-4190-979f-1796a0c6f5b9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1d2c0532-b30b-4335-b104-e610fb976915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "80707740-a03a-4a5e-8495-67378e0a588b",
        "cursor": {
          "ref": "bb39763f-5f6f-4478-9290-32fa076d18c0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "515a9740-ae66-4972-9959-d43894356ee2"
        },
        "item": {
          "id": "80707740-a03a-4a5e-8495-67378e0a588b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6b191904-26c1-4448-857e-96995d43f17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9be87f46-e4fc-4da5-8d4f-a299fde1f90a",
        "cursor": {
          "ref": "df109863-529a-447c-9ff6-a6dd7e21fc00",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8d8dde30-a4ef-4d3c-9740-c60b9ee8effb"
        },
        "item": {
          "id": "9be87f46-e4fc-4da5-8d4f-a299fde1f90a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "527f8a41-1679-4d88-983c-9206d3f9bffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c8691bf7-bddd-4825-abd3-a574ccc5693d",
        "cursor": {
          "ref": "df4e4d1b-6873-45ac-8e08-a3048841b7d5",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8cf4fe76-b2ac-4317-9c47-5f860f1ba95e"
        },
        "item": {
          "id": "c8691bf7-bddd-4825-abd3-a574ccc5693d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "17339743-0eb9-431e-9649-053c024036a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "3da7249a-3e4f-4809-8324-504d00af6c2e",
        "cursor": {
          "ref": "a7949716-cf31-41fe-9c57-2e0a99912001",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "af0d6116-da1e-4965-9f71-5ab7e2a7a3b7"
        },
        "item": {
          "id": "3da7249a-3e4f-4809-8324-504d00af6c2e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "11b850ca-59b6-44ae-a80a-1b7cca4b2a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d625469b-3b31-499e-9c56-e66e8934c915",
        "cursor": {
          "ref": "744b2b98-850d-43ef-9e76-bc48948043ba",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d72232be-4528-48f4-a72c-ec6a7e6d22bc"
        },
        "item": {
          "id": "d625469b-3b31-499e-9c56-e66e8934c915",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9e496507-fe52-40a3-b490-6c5ba591010b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "8df66b3f-e1a3-4ac5-baf3-984cfba7ec84",
        "cursor": {
          "ref": "7c0b1ca4-a6f7-4872-886e-6407aba286ea",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6ed38cfd-1149-409d-a310-508e5cf080a8"
        },
        "item": {
          "id": "8df66b3f-e1a3-4ac5-baf3-984cfba7ec84",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "674991ae-79f2-44a1-b301-0dee77c00488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a99e6d2f-534d-4f22-956c-4a6bb4614e9f",
        "cursor": {
          "ref": "855dca2d-01a0-4e09-9909-5887ebeb0a62",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef8f143d-3d75-4ba8-80bd-2758bce08a18"
        },
        "item": {
          "id": "a99e6d2f-534d-4f22-956c-4a6bb4614e9f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dca4d11c-694d-4a11-ac9e-70db4d4d2c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "220259f5-6888-473e-ba45-cb9d1a82ec7d",
        "cursor": {
          "ref": "dd537a2e-1a64-43bd-93e8-f03e300b5cc3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a9eb7b67-7d00-4492-b14e-0cc896bcd2db"
        },
        "item": {
          "id": "220259f5-6888-473e-ba45-cb9d1a82ec7d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "176efd54-c049-4303-b594-d5d130d4b3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "8143bc5e-43b1-4ff8-abbd-3176105cb367",
        "cursor": {
          "ref": "24aa1a9a-ef18-4180-86fe-c5836dcddc83",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5592e23c-17c2-4935-bf8f-e81c083092af"
        },
        "item": {
          "id": "8143bc5e-43b1-4ff8-abbd-3176105cb367",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5d173b87-6366-4306-89ea-d01cc5a851c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "5ab23a6c-6ceb-46b6-830f-5e2e69b354c5",
        "cursor": {
          "ref": "c94d42cd-2d04-44d5-8065-925265793de4",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5ed590a1-6550-4cbe-b359-92ece32e8239"
        },
        "item": {
          "id": "5ab23a6c-6ceb-46b6-830f-5e2e69b354c5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "92df3df7-91d9-415d-abe1-d1f71c18f7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "c7ff0a51-b230-4e05-9a0e-215d8ff41db7",
        "cursor": {
          "ref": "2d0f9f67-603d-43ef-afc3-8223ed8e1050",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "80bf7281-3806-4689-a5ff-5a445529f1c9"
        },
        "item": {
          "id": "c7ff0a51-b230-4e05-9a0e-215d8ff41db7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "27a6d6e8-9384-497e-9ea9-e8f6e1ea9885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "47c06c03-56a3-403f-aeb5-fb1c36661bc6",
        "cursor": {
          "ref": "cbcbf736-07ca-41e0-8838-a2ab6beacdfc",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c23b62ef-fad7-4e27-85d6-95d8e41751bd"
        },
        "item": {
          "id": "47c06c03-56a3-403f-aeb5-fb1c36661bc6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c320401c-2544-418d-9b8d-d23cfcfd1368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "140d74c1-4f05-4ee0-b930-baa4e4ef7029",
        "cursor": {
          "ref": "15bc27fe-27be-4e75-8268-0940736da1b9",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e238ed47-d791-414f-b5e0-bddbe4753581"
        },
        "item": {
          "id": "140d74c1-4f05-4ee0-b930-baa4e4ef7029",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "01060684-312e-4978-9a88-1af8c18db89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "33fe3601-6b77-48bb-9cdf-52de26ae351d",
        "cursor": {
          "ref": "25c4cbad-ec76-40b7-8869-8dbe8a350c25",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6a655ad8-cbf4-4abb-8588-944ff761f8e3"
        },
        "item": {
          "id": "33fe3601-6b77-48bb-9cdf-52de26ae351d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c7b2037f-e24b-41db-938a-762cefe3f854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6c64f192-48fc-4c62-9467-77bf50146b68",
        "cursor": {
          "ref": "8dc8a144-f788-4bb7-938e-354ce2a5e4f2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7f982fc2-95c7-48fa-a4a3-90c22daa9eff"
        },
        "item": {
          "id": "6c64f192-48fc-4c62-9467-77bf50146b68",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c0053e7b-5921-48a4-84b9-b87e262962cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5ed2b577-003b-47e8-90cd-1ba9ae9eda7b",
        "cursor": {
          "ref": "65001562-e552-4153-8ef7-46ef3ded87d0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b787b7c9-c959-42d6-84de-715d8b2e518c"
        },
        "item": {
          "id": "5ed2b577-003b-47e8-90cd-1ba9ae9eda7b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a1e6b9b8-de6a-4d6b-b492-8dbe5b64de7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e9590672-f3e7-4640-9f7f-1af030f25ad8",
        "cursor": {
          "ref": "765b332e-8bbd-4c9e-bceb-0e0dc7e7f7d0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "319286f7-1cda-450f-af9a-837e7f93e9ad"
        },
        "item": {
          "id": "e9590672-f3e7-4640-9f7f-1af030f25ad8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6917b6a9-dd5b-49b3-a2be-d16101abfed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5c1ca854-850a-4334-a48a-f07bdf88b0d6",
        "cursor": {
          "ref": "1d30b692-04c7-43ce-a755-82748af6a4c5",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c80bf4a4-af68-4d21-85a4-1710786f6248"
        },
        "item": {
          "id": "5c1ca854-850a-4334-a48a-f07bdf88b0d6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0c8fb4bb-d504-404f-8774-681409b89356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ee0f5d22-4720-427c-b145-99b9bdd92f8b",
        "cursor": {
          "ref": "ea702f61-e6d3-4a12-9b1c-ec2814f05c4e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "53e93117-6db3-45ba-a30e-136edc5ed8e4"
        },
        "item": {
          "id": "ee0f5d22-4720-427c-b145-99b9bdd92f8b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "61238c77-9f23-40ff-b2f4-1caaec069668",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc7ddc5-c51a-4d6d-baa5-8ee39f4dc19b",
        "cursor": {
          "ref": "e29bb54e-1d15-439f-804c-134555de597c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7f1cd20a-4628-4738-8371-645909d7c4e8"
        },
        "item": {
          "id": "1fc7ddc5-c51a-4d6d-baa5-8ee39f4dc19b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f8924552-3453-4277-9cb8-c0036ede6d19",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0a934119-a909-4938-a81a-62ec0e480825",
        "cursor": {
          "ref": "03e25abb-7792-4ea5-b330-2146dfa1421d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "41229ee6-26ef-4994-971d-bded1a336561"
        },
        "item": {
          "id": "0a934119-a909-4938-a81a-62ec0e480825",
          "name": "credentials_verify"
        },
        "response": {
          "id": "22657cb6-1260-4a9e-9dba-3ac0f48ab9f8",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeddc6b-36bc-4393-98b3-36f0d6b8fa32",
        "cursor": {
          "ref": "7cd88418-fa07-4b0a-b201-43600fad75d6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "700a8929-aeae-4399-a25b-1fa35a40722c"
        },
        "item": {
          "id": "dfeddc6b-36bc-4393-98b3-36f0d6b8fa32",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ec024166-17c9-4191-8bbc-2f1cef12d3aa",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dae035-de89-484e-93e4-86b125fa3bcd",
        "cursor": {
          "ref": "b5e7ae57-2748-41e6-be85-5f9701ae3b8c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2bdca9e0-6538-41b7-a6f3-393641e268da"
        },
        "item": {
          "id": "a1dae035-de89-484e-93e4-86b125fa3bcd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "734672fb-1d1f-4d44-9390-875585ac9b7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dae035-de89-484e-93e4-86b125fa3bcd",
        "cursor": {
          "ref": "b5e7ae57-2748-41e6-be85-5f9701ae3b8c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2bdca9e0-6538-41b7-a6f3-393641e268da"
        },
        "item": {
          "id": "a1dae035-de89-484e-93e4-86b125fa3bcd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "734672fb-1d1f-4d44-9390-875585ac9b7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d395154e-45a3-4cbf-98ab-bd838bc03bf5",
        "cursor": {
          "ref": "58e025ef-332b-441c-8e6a-294bf0998a07",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9365ff0e-6863-4ac4-a037-0d018efd33cb"
        },
        "item": {
          "id": "d395154e-45a3-4cbf-98ab-bd838bc03bf5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec2f3bbb-5add-4404-975d-2a12affc3f63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85986414-bbc0-40ec-8544-a7adaf82a2cf",
        "cursor": {
          "ref": "47a7912e-2a4f-4ee7-9cc8-7abcbf021e23",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "481448b5-2941-460c-aae3-ad21491cc2e2"
        },
        "item": {
          "id": "85986414-bbc0-40ec-8544-a7adaf82a2cf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7865c97d-0c7a-46dc-a868-116e7a32fff7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}