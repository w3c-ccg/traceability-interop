{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4d451a90-12bc-4277-a630-b49523877216",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8eb7099e-d307-49e2-a9ab-8fb8a8f76798",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e492a791-00de-4595-8963-c267e5679646",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1cd38402-c3d0-4bc8-bee6-e2c25969217b"
                }
              }
            ]
          },
          {
            "id": "f76a5597-8d67-4e18-9cbd-10afa2a468e2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6accfee9-24df-4f81-8b6d-48db035be38e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "54e0ce57-c89f-44d3-b0c1-c309125325dc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cffc2c16-267d-4f4d-857e-036b93f5f7f6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65776bad-bc9d-49b8-8722-63d69a73e081",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c027f43-71cf-4ad4-9447-ee38e3ba3d26",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bebe396e-2943-4f22-b3ff-b7be68eb7432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b3a9f3a-c856-4c48-a975-2f587015a148"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83cffffd-7ce6-4d17-8a07-4fac5e46ef9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f557d81-aa9d-45b0-904f-0bb15d100ed9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ea284e48-5591-45d4-8d58-bc7d00b070c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8d5fd36-9a66-4dc5-9b30-eb82ca208440"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e17cbff3-e653-4d06-8b70-1a76554a57d1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a5a4f2a1-a42f-4641-8ac5-9cb328810b07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "930ddceb-6918-4ff3-813b-260e3ac96af3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2ef6d73-7553-4793-82ec-c211454643df"
            }
          }
        ]
      },
      {
        "id": "2cbf5030-2f26-48da-add7-5d923abc9ca7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ffd9b0dd-b504-4d57-929e-c1310ab05a64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f767f24-40e2-4f24-b833-240ef6f163d9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "48852a16-5ed0-45e3-bee5-d110fc3279bb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1273dd45-a2de-44a9-9c54-cea01eacc769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3be87f37-7a94-4561-aaa4-e77eab2158a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05ef1e5-bab3-4b0d-8839-8c8c7ddc649b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ea03e4-12b0-464b-b59c-c6ed7c826afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79e90987-a36a-46e3-8dc1-522e86f1309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf7a12b-e597-45e9-b0b4-ce7d14bb71af",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e096d388-3629-4492-9e53-aef807e061d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8509247f-aa12-4a8f-b384-1ed6bbfd4f8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea81e822-590a-40eb-8e43-681e668ab51c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "835c6699-4eac-48e5-bfda-c5ba993cb064",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e857280-01b0-4d15-a483-a49e87bcdba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e78075f-10ef-4133-8085-0e27528a1897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d2b14f-e7bb-408c-9543-0960932abf23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e2d862-b201-4b40-a1fa-d6389cc991d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f9b44528-bf8f-4662-8065-321e52795a52",
            "name": "Positive Testing",
            "item": [
              {
                "id": "952749fa-8b03-4aa3-ba10-3483c7f10b69",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76ad5be9-b28b-442b-b01d-1ca63b24e413",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f80690cf-0a17-49e0-b8a1-cc1ea8066fb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10798543-967b-4a7b-adef-631db96ece95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "dd2de156-d814-471b-a6f8-7f1ad1f5dcfb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16436ac4-2061-49d1-b101-1fe535280921",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ecee471-a179-4a94-88d2-249c6b655a11"
            }
          }
        ]
      },
      {
        "id": "9662768a-9b92-4955-a903-fc07c60a265a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fd2fb322-a7b5-4dcf-87cc-159743b64cb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bbc7e26-6105-48c4-b0b0-4698c274cf3e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6343922d-4d02-4561-bb29-35ed13357b6e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0a6a07-320c-40c0-89c0-9f6fa4db2b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c51bb6-08fb-4a3e-8755-a598d8739f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303a388b-a1c8-477d-a7b2-c09318d97d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f3d8c33-0695-4257-8953-0f3f40b91a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c8d24f-7088-4e17-b7a0-eb662033c598",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eff8cc9-78f8-4491-b2ac-e5dc1ccdcb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835c3d17-e449-4726-8b1f-e015af3add2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3476bc-de8b-4f88-aedc-3167ac8fd9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cd4e7f1-3191-473c-9319-94e9a0a745c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aa52d4-18a7-4c12-87c1-0badd8613ed2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa53b2b-d03b-47aa-89c1-621d91c3b331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643161e9-c229-4654-9db1-09f890cfd62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e3a7a9-bba9-417a-9bf8-0c831962b9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd0c4fd2-705f-490a-85b3-cd5b679bb361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55b76c8-476c-4c2b-809b-877edd23216d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3eb7be-c0c2-4a80-b263-065da6182031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc602f9-e318-4712-b8a7-414b8a554356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365b60e7-6685-4e19-ad7c-6ce6ea6ae4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92fd823f-e640-4d83-9297-4c9e1ed244a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6c6661-e7e5-46dc-97f4-2d5fc5a1a810",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeca612-b956-46a2-9575-756b943f4b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ce5b34-49f1-4570-8ed5-2c998b4cc60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f93f14b-6700-44a7-94e8-0a96731641af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d292678-33d6-45d2-85a2-710a2aa14899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9361a2be-4a27-4317-b0d5-cfbf5c7da5b6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c376d6b-a780-4d12-94b8-1d0ac7da13c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe473188-27a9-438a-8608-9540b377f3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be59eb82-ae26-49dc-badf-6d3a4dd31783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d73dc31e-6102-47c4-b1e5-a3a2722d8d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b695d8-d016-436f-ba2c-f17c53b1df57",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bb86a6-eff7-4e6a-a52a-f4dab0ae3c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511bc172-3751-4071-ab7f-e8ed985b867f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1620e97e-43d3-4667-b59b-55738ed27881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbdd3284-81bd-477f-be60-064df7f268e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011daa55-1444-4854-933e-cfc7c2346eac",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcf5de4-da0e-4fdf-8130-7c08a22ea68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309969e7-5096-4d57-aa16-e54930ed3ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd9fdd8-51d1-4349-9805-9463d4124c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2ee782e-ee30-4c24-8cca-159f1bb58bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04636c31-44b4-4b14-8a51-fcb087a2c0ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715777c4-2f8f-43d8-ac6b-2f1c73d48480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c069ed-f0f3-4053-a78e-5e1f00c7ffec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd97a403-94bc-48db-bfb7-97bf1adbc481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bc8cdc7-488f-4919-b250-ec5dedffda35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f4805c-c4fd-4ab0-92cf-3afb48a5ced8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b66f06-416d-42f5-943d-dd90ff44a6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb2c50a-75ab-43d6-9a67-40549c5a579c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01b0970-21d6-4ee4-b698-3fcf97eeb8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26e71335-cbb7-49c3-aaed-b30dcedcf8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3f05ed-fce3-4510-b274-9e51551e1191",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21cde3d-0ace-4697-8e7f-afd36270b4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89f78a3-dace-45b5-8ad8-7f824c95b999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be8a08f-9812-40da-9e9c-54e8613749ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bbc27c7-da32-4cda-a763-d690893f3e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb962cf-81ca-4dcf-96f6-5605518d9161",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b4d262-d89e-4953-a812-5bb6dace5d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f7e6de-83d4-4f42-8885-4a7bcfe985ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bf9798-86b6-461d-b103-25ead813229d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d50d3cd-2b01-4382-93c4-9cb3b425833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d5f0d2-6bc1-4697-b578-dfb6ebff3857",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeff5391-ab5e-4e64-b2d7-df096861d9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c730be4f-a1dc-42e5-b36e-1b2ceabe0615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad49a9e3-1b8f-4fba-83ac-9ec4635710b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b61cb115-8a10-4ef4-ace1-f09db62b0a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede1babd-a787-4685-987a-fdeab9104d0b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee7f96d-7119-4860-a012-d93005a97ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e17cda-e4da-410d-a4a1-22d1fee2e6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9f3d09-684a-4215-b73c-a03c0a308732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b6c87f5-5e70-4f0f-9680-bda8411f61b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ded3ba-1fcc-4881-a071-7cec56fcbf43",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e037c3-2688-4278-888d-fbed8c09cdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a107e6-bde5-49ee-8257-e4ead1118419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c344336c-e93d-4cb0-8ea3-5402aaf6b039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50482a4c-a47c-4050-a7ba-e83db395dde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb944df3-7537-4e58-8d94-e8eb8176fb50",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640dc98f-008c-4b4d-a4a6-fc79d15be708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1f449e-3cb7-464d-900e-832a8fe70f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b915dce-31b7-4489-b26f-aee38245c566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0c49fda-a164-4978-9f0a-51e50ba552ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786f08e4-474f-47aa-8343-36446efbef68",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47788fd-9fea-40db-b904-cdf112d8a790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c97f72a-b7f8-442f-9177-cc34e6295a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7b7ffc-ee17-49a4-b781-bcfd5ef99c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44207d25-2bc5-4079-b126-161d3edd4a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c5f439-c67c-4304-ad5a-e293e481c620",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b254622a-1872-4132-aad8-2b107e129beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d9d0d5-e0e5-4e36-a95c-454b1d5fa49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6226e1-3943-49df-9010-596b1fad69bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6233c7-8ed5-4e47-a2bb-d95f5ad6c7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e5f5b5-96b0-457a-b455-1438d08bab9f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f476b026-9a44-40a0-a6da-c8cdd6e8f13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598d4314-9c23-41c9-8e58-e492217d92ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792cb2b8-eed2-4050-b994-f05327bd1292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bebfc812-0401-42f8-868a-c81e98cedda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce63faf-1bcd-4bcf-bece-abe3bc932e4e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3cc6e5-e1bf-44b9-9e48-a0a1c5721b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a85b489-dcbd-402b-97ea-521124d31efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8407ff9-0b0a-438d-aecd-fa91dc7522a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76a6bd07-d2b0-40c9-87f6-f88c30f88d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47d8824-0083-450b-b3cd-07d4e2ca24b8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb2964e-8229-493d-af82-8b0f52b047f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab685a3a-bc9c-4b5f-bb4d-3601e5422df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2d3ce9-1e48-417e-b462-8bf9ba8d35ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a61b3d-1e65-4b7d-b032-7a5def982f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3159ea-d501-41e1-937d-81799030827b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc557155-4591-4fcf-bd99-1c226f64db71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510ba261-d8c8-4bec-8940-6b91e5ebf6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0ce480-fdae-4105-9ed6-3e752593e4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "659d0efd-4a53-4182-ba86-aaa4ee90e520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778edd1c-ccb9-4b5b-b89a-40f29e43b463",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a1900d-346d-4686-a25b-21574a2da495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab0f21b-693b-4a35-b28f-2aceb248ea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a150f88d-6cca-4294-a267-5a7106d05dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65a4d97f-b794-47c8-a304-07b7fd71fbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5faab0c0-e5b2-4d6b-acde-18f2b50339ea",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ead772-fe38-4f2a-b6a5-694eb6835765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06daff44-6c79-4d8a-bada-6e1b1dfd01ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec2ce5-4404-45ac-9174-023139684d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "560b4388-3421-4f1f-abbd-d5e6e10c04dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ba83c1-5734-433c-9b28-c706c06b93ff",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b55c69-ea60-415f-8678-df020458878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b98b9e6-9950-4902-b174-27f58a3d0c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11b432c-d918-4b66-892c-b07d0a9b0e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93a78f7-2bf3-4704-be07-2ddb809a471a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66245bd-5d0d-4236-bc67-a01442392b3f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713699f0-57c3-45c1-8cb5-432415600414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a8a356-4215-44fc-8570-da001f7699f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d69240e-0223-416b-8433-c18d49066415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f63821-1016-4578-ba70-038c1321e43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e8a6ff-4a5d-40b7-9215-06136e128520",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8c5f68-824d-4b61-8c9b-fa3f31cc1020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd47c32-8ac9-4158-917e-372d3f1fe2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04857cba-8d9b-4405-9076-bdd7db1f8090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "426977f5-8353-4374-b1ae-b608ee10efa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f816fb-d997-4349-afae-1c70d1ce5dc0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ce334b-b8d4-453d-a755-b9d4c3d9e143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5df256-c4b9-4844-878d-8ff9f5edc575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ce62e2-c624-4c61-a26d-269d2fc1e862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eddeb6b3-3acc-4a85-b774-389767802c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e70d8fb-179b-4318-b73f-cf081e865d5c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67abd65-8805-4e4e-b102-6157f02c1260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf4b687-4227-4a0c-af16-13f629afd626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df54e3d7-125b-4259-a005-78893f4b3efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d9b98c-11fe-49e4-8b98-12d283614592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb86854-3f3f-4f0c-aca6-e0aa4c597320",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f9a17b-71df-4ce1-87b9-8be0d15ad693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af9a685-d909-40ae-9896-138a960d3a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cb7198-b257-4eba-9a40-e6bace5972ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "59928d62-7681-4563-b3f3-5083edb4799c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5fda98-0a1d-45f5-8af4-9a5e77c7728a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0a2d68-25c5-4c55-9424-219ac27b142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e276ad-19fe-4e0a-a6bb-4493d8c7fd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f61ecb1-daab-492c-8c2b-47d06c49db08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b551877-ccae-4abd-a200-98bca45f7f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760276e8-701e-44af-8f34-256788eb28fd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c81ac9-496a-4210-979c-5607710b7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedf8dac-e062-4130-b679-92f7801fe057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246def4c-abfc-4762-aa4a-c4b0ebdb9f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5d88ee-6f2a-43e0-bf9a-fe150eb58222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f754a-f59b-417c-a985-7a0706f47195",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408b08f2-5db6-4f31-b245-ca50395ed65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c424a7f-e47b-49d1-83ac-4cc23fc3be48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db51802a-5920-428b-b50c-30d8430cfa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d77b010c-0593-4a4f-bf58-4f08cd91a745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58acdc5a-376d-40be-ab63-b77d0aa5d153",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3688ad-d3ce-4dec-b65a-6d8f5fcd9cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00cba26-9dd3-4042-bdf4-6e0108d0fac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189b6952-1237-4da1-9ae8-7c12649f0460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "521a6abd-52dd-45d3-aeda-4e50f90c54a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b886b39f-b14a-48ad-ad72-a3e0d1f22bbb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35a1eb5-d004-4412-964a-913d16608de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492ef0c1-fac5-4079-9a17-f2e403f52baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b116fb-da37-41a2-b8ab-1b60d14222be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "38c5a694-8804-4270-9d57-3a260bedff29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863db7ca-e433-43b4-a3bd-14f3520ba0eb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd77646-b273-4e38-894c-54573db4abf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82be3c04-ba2a-40b0-87a1-571653bc5325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439f31df-416f-4374-afba-14526645f3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b484df-6615-4a90-987b-514ed0329b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed360bb-033d-446b-9454-47fd10a8b2a4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ecc861-0e7a-43d7-b6c3-ac097bd82f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47e93d4-2e61-47c4-bca7-bd4194e6becf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0888a7f-67b2-4c0b-b0c9-6f0716f210e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c750aae-aff7-4a1f-b3a5-b8939dee0e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fb42ab-3ab2-4126-84a0-36da55aa101f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0116e2-72f4-4c33-bae1-69db943eaa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e67db3c-b7e2-4aa3-a601-978e77b190b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a16356b-3d14-432a-8418-56d6515b51bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc644ebf-7e7a-45c5-ae74-6293c064e20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5f9659-6071-4d73-9ff7-691d22041135",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd856bc4-9ad3-4569-bcbc-d081480db926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64651919-d2eb-41ec-a0a2-77d8a083781f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6138b9d6-ad53-433c-a429-6b07aa1428d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "53347098-4c76-499a-be25-01d917dca473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bda2825-fa66-4b8b-ab51-7d7703612260",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290262f8-5603-41f5-b9bf-98caa5f4d5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acfc9df-584d-446a-9eb7-579cbef023fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9258f08-0dd1-4f2e-a0f4-fcbce72aacb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6f6b5e-bad5-4189-93f5-8f5850291074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736f205b-b80f-4c0c-934b-9d596d847c63",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a95ead-3ea3-4f57-a855-ed2e304c1970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd17a0b-5f0f-45ae-ab2f-68b3893e0791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbd477e-c85b-41ba-9773-d1e24cd942ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "171a5240-3f42-4164-8c29-109a780b6735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a2e05c-4a5b-4bc4-9206-5a1cafe3328b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a08198-783d-4268-b060-b9057e116c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c26ae4-fb4e-42b3-89a8-b47052ff600f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5a99f0-ee96-47f2-949f-557d7c60e893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "42496bfe-2756-4277-a3fc-19dfad21e00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d49d78-9ee1-42dc-800b-8b455770f441",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23317a44-4bd7-43be-9d27-ebe26cc9ca71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323c3dad-6315-4c3c-8a5e-0c3c6097d825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75487b8-7e32-4b36-baf5-70b7e7c1b8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "142f934b-1853-4b3a-a418-52ce514ff218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58c8d64-990b-4eba-88c2-36431de7f999",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024efaa4-ff82-406a-8435-da7484862825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f810d13c-7371-4d37-847e-00ea65ba2154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7430b587-daf7-48fa-abfc-ba388da2b9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8512bbdb-1b1e-40ee-845d-ad7e21c9d3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d48efd-5d9f-499f-9435-616ef5fecb27",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9e785b-3ddf-479f-b25e-22a563125963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fa85e7-4e0b-484f-915e-ed2ab44ab321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078d2c02-868e-4a05-b091-e2213bf68e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37397eed-f23d-40ac-853f-c80059331be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b732eae5-8c1b-4064-b61e-b881f90e482e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7d0af-dd8d-4950-8ff3-df26e2242760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4e43bf-a632-41cf-a461-80b75f153b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d206a9-32bd-4df7-b48e-4cda097064d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f55d126-f55a-43e4-a8f4-a531d409d2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435940f7-a127-4ab6-9473-080abf61b0f6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ad7bc-729d-4aac-b436-2dda22475303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef3fec1-d8e3-4e71-9a5c-b49aea240544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024d8fa4-336f-44d8-a210-f62460533661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a72c200-4090-4518-83d7-4df98e3e9cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbcdae6-b05b-4d12-8976-0f492d7a7fde",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2301cb23-fe31-44ba-9abe-80a4eaa4c862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e24af9e-e1d0-4dab-96ec-f8ced709f35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96079040-48be-46f6-85fd-7c0cffce7e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45dff89-e8c8-48e3-bdfa-248d63c8a7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6cca0f-67c3-40b4-b81b-53b1b6fbb68a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8ad78b-dc53-4c20-9d9b-2e18cc1f24d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab07a6b-5711-4987-8776-7aefec585f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13ee0f3-7169-4c42-a14a-bc30e592c0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "817897ea-0487-4e25-936b-db9611fd05b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ac83da-bbfe-47f6-9e91-00414b398f71",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8490022-fca9-487a-8328-0b504ce7fb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dddb0e7-0953-4634-80b0-e699bd206afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d191964-cc79-4f8f-96df-28020327b8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3ca25e-6f55-4e56-bdf9-d14c6439ef72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cda649-7fcc-4c23-8bed-f795c6689798",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba42ba6-dc4b-4f0c-8e16-c2d4cbae6c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a611e35-7918-4586-ae99-eadc4c01a007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96f4987-88fc-4fb3-a15b-06028f8668b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1efda6-c85e-4661-874d-0bdb15b2ed34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f07ecad-5285-4e23-a492-30b4073c3395",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880dc1db-fe0b-4cb8-9e91-022ed93de0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6de2c8-b245-4b7f-8588-faf7e221165a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a74d737-c68b-4c47-b50c-f7eb6bcb0723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7aee0f1-1d4c-4d95-b32e-e2eff9d43ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81ffc1f-4201-48d2-9a20-b66e40a27eaa",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37e5a62-5f3b-4757-b6b3-d87bdd11056f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7107c9bc-77e0-4eaa-b844-3dd049616952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d07895e-feaf-415f-b1f6-508e3805ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f405ad3-fc68-4dd2-b2fa-9fed523f22cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6452cd-fb5d-4dbd-8915-641ddc9a7fff",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ed73bd-f4dc-4a79-b02f-af478b344ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8852fdde-c278-4911-84d9-b9f09d1ea6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a465b5-31bb-4957-a2b7-81a1ad51d852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6a9deb-9b20-4d98-9065-86f556ff819a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ec732-1180-4d63-a927-b3db31572fc4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166b01c1-d295-4641-ae2d-45ba3bbd9d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b189728-fc01-451c-8fd6-ea4fc5cfda69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8e71f1-2f74-44e5-95f2-5e05b126c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20da36d4-10a6-4966-b8da-cbff5b77d5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b1f922-8f3d-4295-8065-272eef5614fe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c202d4-c1e5-4ec8-b61b-f242a2b27c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10ef907-2697-446d-beff-349374141710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b627b4-e371-412c-8d59-7554edc653c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee88dd3-46e3-4a27-a311-4db9044c5b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4032e8-087b-4718-a990-44bb4cf078a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5321a7-680a-4d4b-80f0-40ec00ac6cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316bfb8f-e137-43c7-8491-2e19fb6f4633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f37851a-a71c-4117-9d68-d77e606f03cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5515b13-615a-4d3a-bd8a-19c319c0e804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8fbe41-d482-4850-b1b9-c386095e2ada",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4ebb47-1445-486c-bfb1-45195a0fc199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912f4ce8-6178-45ef-a08f-067b8adc84f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6563f2c-42df-408f-8b2e-4e62c7553f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a77b5d34-8f3f-44d9-ac32-ad271d889972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085045e8-b154-4ff5-b0ee-b13726dab314",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea68468-fa0f-4ab2-a980-86346252011d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76338aa6-8e28-4013-94dc-c768dc5e7bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3979b38d-f2ab-4638-8208-44e25d6e4258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e43899d2-18a9-4160-844e-1971abaa5de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f966057c-50e6-4199-b311-1a766f67d4ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f475effc-817e-4228-a0d8-37fab3254fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930b22c8-73b9-4dd6-891e-b16e5ff7072e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f517cc03-5d63-4849-b3ed-9cf9ba1412b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "506085a6-e274-46c0-b4d6-0a74e19af637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6759430d-5b2c-47fa-8b93-4e9c2281c5f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c149f70-2ab7-403d-94e3-f3f185bafd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dde110-8fb9-4afc-8088-67681eb24bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd34534-8408-484f-b55f-09f9de1cb697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed30c7d-6fbc-4bbd-915b-5855d134e042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc3d296-c079-4e6f-bd90-23b694d8c5c1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc5195f-4a04-440c-8167-16e73c4077c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13217f8-518d-4c0b-a5b5-60f46bf112c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1a61aa-0e3b-41a3-95ee-e6539d28f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a32547d-3917-4c3c-a92e-d3167471dbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b714b89-8c90-4b30-99a7-25315b9d1a5d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac0ccf9-4b6e-48a2-b762-967826e811e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42c4370-111d-496e-b66e-8474cc4cdfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438562e7-26f5-4bc7-aca1-7fa9692dd365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b286721-dac5-4c3f-9cb2-bb96b5696bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef05b3fa-e4f0-4d2f-a616-060e496dc68b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc69f4e5-0931-4f89-95f9-57188782c2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d73a56-7715-4d7a-bdb0-fd02f19ca7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15300091-11c4-4961-a828-52dc56381e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad45d6eb-462e-4e2c-8a12-15cbd0d974a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76549cdc-7197-48d2-9fbd-cd9d238f3f88",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5125ee86-d9ea-4938-8bf8-812196b81a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c242515-49a4-4cf6-ad5a-05b5a0bf94d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6bf70d-1652-44c6-98d0-70ae4c30f043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d95a1b7-473b-4527-97eb-bcb4199f4e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1b5f0c-72eb-4d2f-be86-28a06aa9c520",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2a6974-16a3-41e3-adc5-8eedfed33ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5386037d-1072-4b9f-a2bb-60593b0acd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc32e43-a6f4-4f9c-b71b-ed123c272409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "936e676c-d2c3-44c3-b8bb-e5fb32800faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123007c6-6aee-4109-a511-2fef7eda5666",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecbab4f-8f68-40d3-9903-eb27540d3af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3d5b53-9496-4178-b20a-6fd69febc375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4981dfe8-def4-4dc2-8f21-424913cad259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e82f75-732e-4180-9859-9d278c145e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331b9a65-c6c8-4c2d-9791-6fa9754e0fae",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af32d25a-046e-4443-9c01-0fba95197e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcf406b-fcc7-455d-9bfa-211538fdec69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e60aa3-5b5a-4490-b8e5-143d39e531b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7775b7-464d-43b3-8563-3d5361d36c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86777a8e-0af9-4dfa-9d9a-7023caecfad1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951fcc07-2d1f-4dad-8ce3-6b38359d7bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fed500-5d59-401b-a78f-7cab4e60a17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755de949-c19e-4964-b6e3-130241df72d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbb9cb2-a5e2-454f-8cc4-f5bb117c36f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61da206a-b59f-49db-a5e8-3bc1d01a9763",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f1cdf5-101a-4000-8c1b-7b680ee8bd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51506474-f646-45f2-ab6f-4ba583c92d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729a4c04-343a-450d-a77f-ab371679a269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31a05f25-f618-48bc-882a-c4490c9776cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8267db62-83fe-468e-90bf-89079f001421",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f92234-6ee4-44bb-81fb-7bd00a8f1647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d5b5cb-3eb6-481f-bfa2-a6b5aa3d7054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86c1e39-5c0f-400f-b09c-00a6a4da0a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b372640-1bac-46a5-b1e6-e6aba6cab487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2eb4cc2-2ee1-40ec-ae93-3011681f77de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77b59e8-aa09-4491-9c3f-5c42bf2412a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd872255-8a8d-420f-940c-ea7fc7a4cce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c26bc2-7ac5-4d4c-8ea7-7af9f6615dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab24b95c-c4f8-4a79-8c26-65222e4024f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66481d64-f7e1-4871-886e-7b847883f0b3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d128544-1972-4a43-994f-f010939ed259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d1b6c1-ecdc-470f-b7c3-305d43b431f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73567f5a-1a48-46fc-a4d3-2a9481fbb36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c098bb-698b-42c9-9b02-5273086defc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadee3d2-8123-44ee-9f06-dc6607495dd7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b73e79-0dd3-443a-a34d-0d8463efcb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6432dfa2-88a8-4fe4-904d-854371bd8180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be359b2d-161b-4ebc-bdcc-4df81272b6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d96f7431-e018-4b8d-a0cd-2c0bbef33d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f31a31-12f3-44f3-b057-7102ca6ccfef",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0013a08c-bdd8-4dce-a773-b872cf2c1713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1419d9b6-32b4-4f4c-9e54-24a7b8e2ef8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cfde12-47ea-4119-9256-9ea31711bb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8026f628-9621-4b64-a3bd-84ae6a9390ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9466dd95-2246-4a8d-a636-6b3ba1fd3cdb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58bf66b-ee6b-46e3-a7ec-def304e00005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd05373-926c-41b2-b735-40a4a328332c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cdfa2e-9b9b-4ae1-b3ca-63ff22a0baab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c29d1d9-b708-4808-843b-cb80fb743149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de982643-04e1-4ef0-b55d-364720cdd6fa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f36899-de3c-4e38-857a-00ef94b06ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62803b50-8487-4f6c-bbb2-eb0ac9d2db78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b07a2cf-c2ca-4024-9412-ac9d221ac3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e071d7-63cc-4fa3-957b-f260373770ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b25d283-983d-44c6-88a6-1a7b34b3f550",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818c8c84-943f-4fb3-ac58-cdcdee92a410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999c3dba-c51c-4238-899d-e5fd139c79d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83055846-bc60-4994-873d-b4fef18b4dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cfbc343-e313-4fce-bfb3-fc5737294523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6715bc85-2511-4709-948e-96d048ec50e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e89ee6-36c8-453a-be2f-07d30956a581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aad7dfd-e368-476d-b116-a7614183ad49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3956750-ed15-40d5-aa33-7325934599f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4041ca-2a47-44ba-9c24-ffd0bdbce3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d04dfbf-d06b-4465-a4ec-ed33b667ab18",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163b771b-b0dc-4206-9372-d77906b26542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7aa0b4a-5737-4f3a-8aab-015b2361555b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcf9cab-6371-4ebd-a0c3-4671cbed493d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "837906a7-f5fc-4dba-994b-3b6f478f1e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6d731f-c596-4ebd-939c-782d553d54c4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fdc0cf-7ff5-4259-836a-05e8b546fdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa0df11-e892-462b-bc35-b17e5aa20791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d68672d-83e8-4d61-98e7-fe52b4a61c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "73aa970e-e2b1-47b3-8c3f-c8ee20fa232b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe110794-5e7c-4e38-a3ee-17dc40771bdb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0363db2e-3f68-42f9-b75c-463d936b2aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce02ce4-aec7-4f30-92b5-7e082fd022db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f702eac1-ba17-48d7-823b-706d05a3c62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c38a30b-340a-4048-8c4b-b521a5f9716e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a33cf73-2508-4ba4-a60d-d91ffbb3d386",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf9dbdb-8c3b-492e-adfe-1306eabcab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a60aae9-ff30-407f-80b0-1b7d9bdf1d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ffc254-53ab-4e3b-a987-c4d94a5ac665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2753af31-0d89-41f4-86ac-f2a1d29e39c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd2e10c-897d-406e-a061-b13d11d940a4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802808d7-08b6-4183-bb49-8c064b5729fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82115c08-7baf-42e9-8375-bdac0e4be511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca8b39b-0b77-42bb-958f-90224550abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4089b0cf-2d77-4764-b3b9-d8833cc977c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fb1b3b-106c-42d9-975e-24514193dc72",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7a51ae-585b-42d8-9745-42c5c3bdfb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09f0d8d-18b3-4723-945d-27717e23205a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ecebf-0b9d-4645-8251-f30e0a82b319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a248bb4-8d0d-4d3a-a433-3fa0f354529d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce99c38-26d4-4e65-b9d4-4540eaae0cea",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a58cb7-90ac-4718-8637-5d250dbf7e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37cd9e01-4f66-46bd-afe7-52d686a6a9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a586630-38ed-469d-a154-7fa5f4741076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d3baa8-d8e2-413c-929c-febffd825722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f414fd13-8f78-4785-b4f7-566b4b519486",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14e62b5-38f6-48da-9bae-6801022e146d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5228ce31-d9c1-49c5-bd43-8528a134ea25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df9e5a4-a441-4a99-a3bc-de0290d1b6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f57b469-a8b5-4901-b70f-da7b80eaa57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92238a9-465e-499b-bee6-02d6c2ea73a0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f301f2f3-6bb9-4568-b090-2a82a3a5520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ffcd00-9613-4099-af94-7907f2591eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e90b32-c837-4b9e-8e8a-ddad7adee571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8609c5bd-1e6a-4d8a-aec4-32527f26bc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26f1879-33c5-4ee8-8a74-b930074f4df9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd77658-bab0-4539-bff2-c3f1ff3a0a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13951f7-cd2c-4bf4-8a62-60faaa542309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ba5a7d-41ab-4702-9ea1-8b3e6bd86f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "670c8388-3b94-4e10-aed3-f28c1a1605d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6913a245-6bdc-4f2a-ae0b-f3dd4955d265",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cc31f9-3aab-4974-836e-f9dbeddee4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e0f17e-ee79-4f7c-934b-3cf65b9eb21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2439c9-e253-46b5-85de-a06c8033f5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "48da1e28-ac20-4f36-8241-f5367e94f0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d55533-d473-4d10-876e-784096c09af3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99393db-c626-4636-92bc-c608a6df1691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3728db-540e-4b4d-b4a6-4b9f7883b3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcc6944-22c2-4628-9206-2d9e1356ec4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcdbbe8-3b62-418f-815b-ba6318411243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d1aef7-448e-4947-90f0-2ec4993a8114",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df6ccca-70f1-4d94-b9a3-e9a8cb43dd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "acfc1573-11cd-49cf-b899-aca97557b53b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acbff43-2010-4150-a325-01cd4ecff9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "647d697b-644f-43ad-9d54-b988f20fa0cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99b95d34-6c6b-4a5e-951e-d1d76786f0ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3b298be-38ff-451a-abf1-6eb99e29cd73",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962783b1-3cf7-4389-b26e-126689a557f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "516eb467-6b67-447d-a479-2b502ea77c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab083ef-1138-43fa-81b3-3b9b9a269370",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85fb739b-b8d6-42b4-93d2-4653660b72a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7182453-6a8d-4975-aa67-2ca47450aa13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a5300c7-681b-4158-a3ce-37335aaa40e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6f90d08-3122-43b0-9ac5-b293398cb2d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69e747e6-991c-4a12-8e86-16a82a13c8dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1b54413-7c4f-4572-975d-3280cd43667c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ddd2f595-f84e-430a-8d41-4838602dcdaa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "180500ae-9052-4dff-962f-781a6c09e0c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6147faeb-7aad-4842-a669-05ba46b142aa"
                }
              }
            ]
          },
          {
            "id": "348dee90-ff88-4ca0-9aa1-438df5bb9457",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c400b3e5-e109-4cb3-b983-adfb57d050ff",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98e6c37a-c197-43af-a1bb-49938be5b01c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c12ce3b4-659b-4286-8a4c-cfda575c4837"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18c91136-87d7-45fa-987d-8a2e7ab4aa49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d94f2f55-848f-49af-8f64-2d983eb13f32"
                    }
                  }
                ]
              },
              {
                "id": "9147310b-1ecf-4fb3-b51d-0bb59fae3c9a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0e0a341-a620-4111-a3a2-d6f1e1e4c804",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "507c5f53-7e1d-4b8d-ba15-cfe449d4539e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7786e80-6151-424a-a53c-7cec3926682b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d25510ad-0f9e-4791-ba8e-2f22ce24f775"
                    }
                  }
                ]
              },
              {
                "id": "2f9dd635-6c26-4947-8908-0c94d9d8aad4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2917e6b-a62b-4185-b2dc-321ffa065ea0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62a755b9-d343-4146-8afc-1df2d7015ae3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ae15406-33e1-4585-b9fa-6d7da06b045b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7f16957-cfaf-4a50-9563-2d9a69d85785"
                    }
                  }
                ]
              },
              {
                "id": "f1ac2c6e-e2da-476b-9def-19a667648406",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe9179ba-5881-4d0c-aa90-d5119477d5a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76b804c7-76e5-454d-a3a1-8012d915f6ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9de6dd67-51ce-4b87-8576-dcd301c8e86c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "109528e6-c990-48b7-a91f-1d79148c4ebe"
                    }
                  }
                ]
              },
              {
                "id": "9ceb4844-a07f-42f0-92a8-76b168366ced",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "602b8adf-78d3-4db4-b104-4d544d9cc918",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35b5dcc3-7582-45ea-861f-d5a4fda28c72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f51608d-c8e6-45f8-a440-666501a3b99c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "511d039a-52b6-421f-95ea-3f27b2519bef"
                    }
                  }
                ]
              },
              {
                "id": "ce0f4c54-9d79-4670-83a6-87347a5a4e90",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de592994-ac16-4a5f-8758-390d71c8f4d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4df7713b-8ddf-488d-96cb-e612a5540310"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa864539-44dd-494a-be53-54ca49907584",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "809c9b3e-895c-4fe9-a8c1-5264cb860fa9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a888199-71d8-4640-adfa-86de874c654d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f5550a5-ab7f-47f6-b0f3-d76c0beb0a30"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f64b9d07-df63-485f-9851-4df4b6009679",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ddc2ce9-dd1d-46ab-a7bd-ff20411490fa"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "167c8d00-6bd9-496f-93f5-a10caaf92ef1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "eb5ebc43-c4b3-4746-9f42-5c6ea7e5b990"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5097e382-561b-4287-ace3-650cb690f937",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00526c94-e755-453e-9af3-976c0690683a"
            }
          }
        ]
      },
      {
        "id": "fe68b45f-92c5-4614-833b-8a17a07100fb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "83708fbf-4450-4b18-8ad7-42f22568d444",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc722667-0271-49d7-9e68-0f13aec557d7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e4d1709-d208-4c68-96f7-3b06209b49ed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed7adac-1d48-4708-860b-56e6b02a7ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9236461b-0dd7-4fbb-901d-c58581a804a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41590b90-f309-4305-a132-31db9e397dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "25dff5fd-8aa1-4c4b-a814-d9c6116c63b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e7a3ae-4ab1-4db0-a8c1-3afffc3236a3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ce315f-3c47-406b-91fc-b8281f074ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e033d1-f567-4652-bea3-b0eac1be48fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae9db57-d4b1-4055-ba41-4f765d4e3720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7dd933e-2528-4fe7-83c6-f4dfd0a039e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7440773b-caa6-4437-af2e-6a4ec7ae6748",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fa80da-400e-4744-ab2a-962e6815283a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e5a3d1-2dd1-465d-a4a8-ff97a5e4b1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987ebe6b-9597-482a-9e17-180213643227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ff02ea-719f-403f-b89b-da29efd44af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69cf154-4fa9-4349-bee1-ebbde0070ca1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cdd571-f612-44fe-9d4a-dcaad2cec23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fc4598-cdab-43e0-b826-65d0bd0abc83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dc3f0c-3de2-438e-b718-42b6ec86bca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f434d03e-27d0-4dbb-977e-fc9d716813d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2ed334-8c7e-4b9f-a0c5-4983b5fab873",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27c047a-7dea-48b5-b161-865ae61f0a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c534281-5ec0-4d51-8a05-dc0797981054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d829eebd-6678-4e0b-97ec-04c7de91854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15acf998-4c45-4929-b3f4-e2755fc024a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41459462-78d9-4604-a062-542b9c632584",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2512a76a-2c44-45e9-bca1-82ca9fdffa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16af3e4-074c-49de-8169-b03e11e69a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa644f5-0099-4292-b5d0-4a1cf4353712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77168efb-f666-4c3e-8e24-f4cfe8b09d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c823f47b-f286-4a9c-b439-e115e7aaf156",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b99518b-3d92-469f-b9e3-8e2d2dcff381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c37d615-f5bb-4345-9b60-104180817a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd37f552-0863-4964-8705-71849206d726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2c5a02-e4b0-4dcd-a67e-9283f8a43332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c12e0d-ebda-4f66-aec8-54a0bc6e3b3c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd36057-f56c-4ff2-a0d6-f34c1fc675d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a0890e-0e0b-4696-bb7c-f0e310ac11d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d22806c-ae20-4858-b50d-496786410923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b89d75-5a2b-426c-9fad-260b2be41c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de805145-1e36-4059-b052-5626d201a1d1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85b8328-69f1-4688-88f8-415961408b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b7650c-69d6-4a4f-8751-0c4fff46ac69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ab1e4f-83f4-4458-a18b-ce70ab5f620c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a80ba7b4-b354-42f1-aecc-efb9358821f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654fc7e4-dc68-41fa-beff-f3283cf84698",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb4e0c1-57c1-4cc4-b297-fef5ce300a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac35e1d6-6383-4216-922e-047fe2632e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a27992-fdbe-49e4-9639-64be6a011112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80d527d-394d-458e-a770-3de0332a0bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f77e711-e1b8-493c-8401-f8866712e2da",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5980b8-26a4-4a1b-8a4c-20135cc65bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d858f3-6909-46ed-879f-bd652ba07804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb26133-e8ce-4f1e-963a-2b553d05989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "85f68233-b99d-431f-87f6-a817fc8b857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559ad23f-e0e5-4e92-a1a3-148b94e842f4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf1589-19a6-4f5a-bb23-7f58546d4286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de60fb7a-d7ee-4e80-9783-b5b3c1c4958b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a33c38-998f-45c5-bb27-62ed5b01069e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "babcea9d-f88e-4454-8c88-5e86cb2a1baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830760d3-a95e-4a39-88fe-76c9e588d315",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e32080c-0c92-44ab-b447-af6cd9c59372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a276e49f-ad79-4079-b303-056a0f4034b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3052db29-8264-4e45-b6c0-140d0d8f9cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3551c89-5ca8-4235-a6d0-1361ec8e8a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873ac593-7f41-4f6c-a5fb-ff7b5628cf0b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307ce87c-2f60-4f68-928b-4bc43ac48e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd01df51-ecbb-4792-894b-4a544a3dd99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aad44d3-718e-4155-abf8-3a7a4081daf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca83f81-1ed2-4b5d-9540-f940b7584b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9a01ef-eb63-4884-b50b-358a543a4ea0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d6e21f-cb14-47f5-95a5-d11d61c6ab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c382a8e-fd8d-40aa-a9e4-409aedfe37ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ea7d69-dd53-4bbb-987d-112283b7d6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e91de6e-8867-4998-b04a-4815fa3bfb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fc3b50-c5e0-4577-8f8d-849f64793b38",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f6b001-93b6-44fd-9821-7d9b3294a2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dc0d4f-0d1e-4c60-9112-68b59619b952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef16a36-9f4e-44e9-8760-84f3ed47b038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72edd2a-5c45-4ad2-8889-668a5bc4e83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef6b542-ddc1-4ebb-ae9f-29ef244687e8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103fc7f6-f0ca-4d97-9f9b-7c74f7d72b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49871f1c-2bd4-4d7c-a5ea-02aa569c8dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fb1036-7296-44e4-a43c-03b675c359a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0472513e-c3ae-4607-a903-381ef008fb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7799ba39-5796-4176-9cda-6dfacce115f0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6707bf0-836a-48b4-aa45-df765cc4d6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e3938f-0a93-44ae-8dec-3f8dd6913a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab45dde-beab-48cb-b312-5e16d029b635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ff0594-f49a-45f6-bc3f-12364e54f691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a661ec1-ca63-4026-a4b0-d7f74b6e092b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37c485e-0022-407a-b2ee-a320c5d0910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed1beb5-dbaf-4955-9af4-3ab212749807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8b97ea-c4ce-438e-8616-e4a9460d87c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "523cb33b-441d-472e-b974-12ee896e0963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dde9f3-df7c-41c7-9364-1125e42383d0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b408a5-2e5a-4290-b704-4a3460fafacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1167f2fc-fb1a-4437-8790-e5624873102f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8453c30-966b-402a-a8d1-612ea92ea387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7527fb1e-3a37-48ec-86da-fca5178cb8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3189166-2334-4a92-a7a8-f5d769cf1b81",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf84bb6-139c-42f7-a2d5-a96146b30883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9cd718-6962-4af1-88d5-3ddb9c9f94dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ddfc2e-51d2-420b-8f80-bc5657456a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6198369b-c4ba-4787-af6e-9af524fb5877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f513a4-c741-4630-85ee-4eee95f818ca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd1810d-7659-4640-8629-7108710212ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9b4da2-7e78-4782-9b11-8672b6bbec01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c74a2ae-6151-4477-9ce7-bf761924ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0579610-7cea-4cfa-8833-b4cfc83035e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c2b1fd-d1b4-4283-9d69-854bbde783ec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd69b6ae-ff2e-4a12-bc44-d0fb3b591415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6d2f29-6f07-4166-ba6b-a507b1ba539d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0ea7d1-262d-4e81-a523-384a7e2aaad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9aa16c-e41e-4d41-aeab-6ad7e79a60c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce18cb3-67df-40ab-9f04-752b771d688f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090e5d3a-7c52-42ea-ae2f-0ed83a2f09ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f487d14f-ba63-49c3-8cf0-1096c8455840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f48f77-2c92-4e7a-92df-3b84e0dda2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d5be7d-9ab5-4a74-a378-50382c7a24f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6680a2-c93f-45b9-97bc-23e2553f6d39",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c216bcce-7af8-49aa-9e2a-ab7dc8e29cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fa6526-9bd6-45d4-9480-d66b486f5b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f429e28-2764-419e-83da-ce2db2fca98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1ea554-de4b-49a3-a0c4-c5f893365b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5e2fb0-4117-4c10-b716-f257a2d21b82",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c86674-73a9-4d66-93e7-e85d1b195ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42da5f3e-2dc9-42e6-8321-3ff912d0e4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b657f64d-2b08-4f3c-8507-ff2ae1c8737b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3941ccbd-a6c3-4b57-a677-906f0d1f3bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c046a971-d35f-4e62-9e03-0f37d31b3bab",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9982ad-99d3-4e27-90cd-6224b7560ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0844b4b0-f64e-4924-9607-52bb276f360a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb75410-88a2-4b23-b93d-ffd10650442c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93dda1e-3f18-4b66-a61c-a9805d4c1722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aedd8a1-37ab-4cef-be40-d2ad6ae7613c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5443e041-121f-4e33-8d54-ded0496eba4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7d6f80-cd3d-47cf-aedc-2945a12f5d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb5b205-79a8-4ca2-aa37-6fdbed9f280b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2713d229-d352-423b-8438-8e6f2d2a89bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f57650-cbab-4e83-bf4f-7cbf2648ae29",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86720df-0496-42d3-83a9-910320506fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae11e921-12e0-4add-aa90-656b0101f0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2b4c31-32a3-4b21-9a44-e05c0dbff0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8925984-39ef-4acc-bfbe-d938219509b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a8467b-a8f5-4ea3-9953-ccd27ff24876",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f782a39-72fc-4274-8e12-8b33744a46c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae666d6-d20c-4cc1-b90d-5a6be111b268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37b995b-7e49-4799-8573-e108cdeea163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15661069-c9d1-4a2b-9ba5-6fbc8f36a057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2c539f-b8a3-4b81-8cbf-18ed1ff8c094",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3b4969-8093-46ce-ab8f-d61418cb33e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abd7200-f980-4ed9-8121-e420bbd8a9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdbe5e0-eeeb-46dc-89b1-3f01e29cf52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9400051-57ba-46da-b121-8634c5776bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228b9ec7-04a4-4e58-8991-720c6f9dca73",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9c11b2-2777-4c16-9a47-d7102f4d08d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43697089-1802-476c-b3f6-2a4deb365811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749950d7-341b-4dec-bcea-402df98de025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd82d3c6-c220-4543-84d3-11ff836ef148"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9cc6895-c9bd-4bd5-892f-58de3b02d355",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bfbc65a-295c-45f9-a9ac-46dad7aad442",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2625b8c6-8869-4162-a063-d0bd471246ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0f077421-4f30-4b42-91c3-8ec7d4dc32ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a84120-bf62-475f-bc5c-2bc7b760ec80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f06dcf77-3b23-4baf-91f8-1a18aea55357"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc516c95-5f24-4bec-a9c9-26b1af843518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "897e7d6b-3304-42c2-a2ed-50145ee3d460"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2597a326-d72d-49f3-9f41-85152f6a0761",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c062fab-755e-4257-abaa-c41da9d6e0e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9e9880c-6828-4ff5-afd7-6769f5a16988",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1cbcd5b-b0a1-4f1d-a622-22d5f3ce1bea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c29de0b-d334-4a08-a379-ec55aadb54e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a29df7f7-c577-4587-b4d4-65b7a4b0e42e"
            }
          }
        ]
      },
      {
        "id": "fb52a4d9-11a5-4dff-99f8-b47fd85a97a0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "da0d6694-5055-4f61-b5e9-b7fd1b7a0d15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5d106b4-6430-4f82-8979-c0d19ab3891a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0686c7c-7af3-45f8-8fa4-09b065240062",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4a0137-a3ad-4780-b6dc-0ff518a3e4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d9545f-a1e5-4771-82bc-5707482edcdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bad601-382a-4b58-aa3f-6b5ba3cab2b5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cd7402-6777-4214-9101-ce3a8fb2113b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a206564f-b1cf-4dd9-ad69-3db49d58506b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd657ef-39d7-4439-ae14-6f3d1637601c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f957b2-a76b-488c-aa9a-611b468f0898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ff6e3a-7192-4f50-9057-11b0e833406a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412fdb3f-e96e-4dc5-a984-1e9e4f670de0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0fb522-0001-4a31-a4c1-4150c7e72c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317be124-858e-459a-993f-f846d27e4aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4a64b2-9d06-489a-a560-ffb2fcfc86ac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f7a271-f660-4389-9f93-b5bfdfe5edd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bde177-a27d-48e7-a1fb-439bbd66c882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc779c5-c6b0-442e-8635-6698b851d09f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba22d77b-5f3a-4ecf-829f-74ffea2358ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc16f9b4-98e0-4c27-aa58-d41be1b7eb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0ec002-a030-4094-a4db-e7695aa6be02",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a8d969-b648-41fc-b396-d19a5736c830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf44ac0c-0255-4ab4-92be-2b7fc9496733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4322b9e1-9a2f-493f-a15d-1ec61d822f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31a147c-dd8e-4822-a8ea-e6ae6b75a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c635d797-06ce-49dc-8473-def58f6f40cc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b8e57f-f3fa-4343-9a02-d94b6e04d1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a550d68f-3bbb-41f4-b176-2d2caa856161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e622b638-5c82-432b-8049-35f5e1504fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095f2375-29c3-4d7e-9669-300257fd0da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4125403-d752-4d67-85cc-0c3504f57d92",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef66e188-113e-45f1-a620-2e4b90eae038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06fd83a-385c-40e4-b29b-1764d1a83614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf75939-5cc1-4357-8ef9-cc28d5dcb88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a1d00d-bb70-40e5-845e-bd7ac5dcc4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a841ec80-6264-4e6a-8e65-3e6917dd47fa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c501f9c-d741-4df2-9e7d-b2c4c3f1974d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "588df791-5090-4d40-8338-6c3b327637c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcc70dc-686b-4b2c-9d52-620262fd5d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b23ac9-1673-48a0-b178-c087581a5712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3821049-6f2d-429c-8f6b-84cfde7e8929",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb09bfa-6632-4c18-b5d7-33efce67f50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263c265c-8a80-4ffe-99d1-61d445f36612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a4e5e8-c8d6-44ed-9988-0f431aba2a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e4d26a-208a-4f99-85a1-dc82403eca7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd9b897-41ed-4e5d-9203-7d8ae87b60b6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0756cc15-56e5-48f3-af97-a0b5bdd41ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cdbc9e-1af6-4972-bce2-3d9c985bea5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dbc082-1c0b-4ae1-bc0c-413170fe95e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cbd847-2890-4226-b552-7ba83a5d7ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ab353f-8a35-4083-b048-be9912a9da0c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832d16a5-27f4-4cc5-a3b7-5631e760d9e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1426ddcb-cd55-4781-95c7-7b713515a8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f782334-3002-40b3-a12c-ee08208f9503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da8596e-6d0a-4801-9537-e19faea4cd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfda2f28-678b-4bc3-bba9-3f14f36d9c9d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eec5dc1-4dc3-4fcf-8144-d03ab7514fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e0cdf7-7c73-44a1-8b0f-4934de281e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbec7ee-a8ac-4b08-b58e-944a32123e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bd2806-9df6-4c50-b3b2-b16e129c2c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b44656c-4e59-43b9-af96-7d16de7eb375",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b937632-c065-41b9-87d6-939c8faf5eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac71e8c8-cf04-46a2-b18a-cc6815d7c4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d228237-8ab3-4aa7-a273-8c844798b1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed4abbc-4717-4d29-ac92-199bccf2fd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce2db28-e7bf-4b3b-9822-6cb0fd4507fd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e5f123-1cb4-45a2-a7c5-f7bb0f8b04fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17059081-e2a7-4c3d-8495-08d1eb592ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad7d847-9859-4068-871f-f865a2317397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb04f7b3-5342-4e94-ad21-2e34952175e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffdffea-91d9-4f49-8cf9-f39ead923da8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188ca879-222f-4ba6-bc51-0bc38c1693cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dbd121-121d-4e02-bbe3-84ae81cc219e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477cf15e-36c5-4d36-be03-7a123e41af96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bcf826-8f44-4f92-ac16-1da64fcdaf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2b8456-4a26-4e06-8014-1872fc21bb27",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83639e7-719e-49b9-bbb5-ccf5b6db33bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d006604f-f2f3-4d71-a1d6-f0c8f143394d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8239af-dcea-43b9-b69c-85a96cff2408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282212ca-08e4-4346-8920-7b8decda5d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816bd25b-223c-41a2-bdb7-3f8c5050d3ca",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a6f7d8-f7bb-4f40-a8f6-48285e9f267d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e025210e-98f6-4e9e-adf0-4f3a9a0d83bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfccead2-b197-47c9-a44c-1d608b0352f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99279556-768e-4161-8063-7dd65f2330ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3586221-a6e0-4766-bb10-afe4a5598d25",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09df4571-9d73-4914-9404-fcbddf4823ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77ba196-6908-43c4-9ebb-932fb84d3c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1820dbb-3818-4c89-bd89-fbfa3c40c284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab24b8b3-5b5d-4a6d-904f-dff77fa76fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0f7cb6-9ca6-4ea9-a7a1-3732a82919c4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe4b990-aaa8-4d7d-9652-26d96939e521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76af001-7be9-44cf-8d62-4184b45045cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6dac6c-bb6e-453b-a2fe-585b2d9cba81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7132d722-0885-4b15-b34b-e53ffb1aa841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ce6654-c47c-4a42-8770-91831b6ca68f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337f1041-d400-4975-80d0-b1c5bc20f205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8695d83c-5462-4870-a7b3-96f892aa2dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8780aa3f-5f53-48c3-a463-d17e5e63aef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054004fb-28c8-4de4-9327-809b791b28ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75e6334-4f7f-4837-bb26-ed15c6c48f5b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6115feb-715f-4cbe-9509-f9638a33695f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82af59d9-a03b-4866-b886-0b397ebb6340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7208b38e-6ea8-4903-88be-09e43f51b72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ef7f94-9b6e-4071-ba6e-a09cabe9754c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e758f3e-baaa-45e5-9d65-5743d0437160",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c7845e-7867-4d19-8565-f3d438835a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a934bf-b12c-4af9-bc81-8e960a1d9ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b08d971-3924-4bea-be4e-31f7d9f00ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e479dc-da46-46a7-a451-efa0d2f8ea23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8859ef78-5551-4032-982b-a03efbb17b79",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f835dc3a-f347-41c1-8c8c-800bae7aeafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d2c44c-bb24-432c-b305-64588666fa62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0236108b-fe24-403f-9ae2-41cd0edb61a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6926cb6a-599e-4ae2-9dfb-a1775b2e8cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911e30ca-0fc8-4b87-a13d-2fe2ec7026c0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78d09fb-a69f-4557-801a-0c60dc06b16e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea393dea-8878-4ee5-87ac-7df3a3a1565e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8c56fe-dfbd-422d-9386-3f24b8977e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e9061b-081f-49ef-a923-6823f913397d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd30b04-8986-4cb0-8203-9daf4d30cfda",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8a1adf-ea5f-4e5a-9854-5a85b78160b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e43b5d-eb73-41c2-b632-1648c91cee25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345833e3-e6c0-4fed-b3e8-d9ca4b48a809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e9c4b9-7f2e-4b78-83b8-b7165968b7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824bb134-1305-4006-8428-134ad87ae6ac",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5a3ba3-a8de-40ca-b3ae-43bc83c4a5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aceddfff-a8c0-41a3-804f-204b1736e3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8e08f3-88d4-4b36-bc30-4eeb440ad1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c22db2-a49c-42f1-8440-75fb213aa461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840985fb-a104-49fa-a60d-30a3b2105c10",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91ac9ff-700c-41e9-a960-557f551d3090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4d84fd-dd2c-4d05-998a-40eb8906447b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c42d03-683e-4633-bd91-c5a7ca7c9447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4be8c6-a436-48bd-9247-5cf5d2b14fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386cc8f0-59a4-4228-9cd6-b379c157969f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5410f77c-be45-4907-a59f-a9fc28bf175f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee0a18b-1983-44bd-82e5-b644afc19f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d38ecfe-cd80-43d9-b747-3b3e9c233774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7a3ec7-4293-410b-bb17-0864e8c0cc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8bedb9-9f1b-496f-bab0-e713052ed87e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd6091b-5164-412d-b557-9e7e340f2af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd28046-40fb-4d40-a3bc-f63092b456cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd3f223-c21a-4701-99c6-d9e7b3934659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc36da6-e3cb-4228-9f43-8a1168581a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95fbb59-9653-4016-8f3c-ba467a27c584",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3d643c-8ee2-4daf-b557-f2b07c1c447c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3570ab-4279-40bb-9840-7871ba2a7053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53feeb80-6877-4be9-96c7-b64467e658ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b964db-163b-49d7-b189-f94e5eefe2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8003a6ea-96d7-4315-bca3-d674e07b464d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89d9f2b-783f-4213-a595-4703a6e354f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f67badb-30bb-4b04-b346-7bb323864468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eba9fd-9c1c-485e-a7cf-dabd2d7b2ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f20b8c0-5016-4a04-b1ba-6071b64039c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2cd8e6-d29b-41bb-ba3b-d42ec0598426",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4544133d-f4d4-4122-8f31-92770fb56fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35b868a-ccf1-45c0-bcc3-c4e1747d64d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cef0c5-a760-4a1e-8f30-9bae49104c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d1bce9-0c63-4167-9c7e-8e1ebd9b22e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080de5ba-c250-4118-b12e-24c9b28cc4be",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe93b9e-ac30-4556-a359-55f4200124d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f8e290-04ea-44b9-b5bf-40ac46f3d6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532fdcb8-829b-4519-8138-2d2243746da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182e7a6d-1c71-4632-8068-58a9b4618ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758a1c80-6c1d-4821-8ad4-a32fdab518f0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5218d01b-a95f-424f-814d-b83ab8c4d584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362f0019-9419-4ad0-a968-3ce66d71ddb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903b2c58-6fb6-4110-8c9c-0f692b79123a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160dca3e-1c9d-4b4c-9323-330872f6e908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4c595e-8618-4f7f-8cef-7bf0c36e5000",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2f071f-0e64-40b0-9046-f01a9912a3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdf48f2-b6fa-4d01-945b-ec98f8185a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcbbe90-c778-45b2-a94b-e2e293f94e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb64efa4-7684-49a6-a020-3702c8a4bdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e9d7a3-d74d-4046-bc0c-e7e4e220a167",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6750a5ec-7782-4d08-99e2-9e362e0b6412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df145e0-ee23-4ba3-ad98-a01541d86455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaec4af4-a1a5-4a35-91f0-64412fc02c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc569e2-e590-4dce-8561-514c2026341f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba59843b-1d15-45ab-9aa6-4393146348b4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71568537-7906-450d-9729-6d93cc302a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cd6a5a-6512-46c3-87fa-542e2fb80563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321801d7-59ec-4256-9996-e83b13010d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2de0e9c-d005-453d-8001-d7bc38301f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608d07ea-a142-4516-a910-e9a87c77ac31",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d864b3ac-e7e0-4af4-92e0-c70fde251d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ca0502-00e6-4833-9a54-34ed14543cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8224a819-e1e7-4eb1-9ecd-fa7be0415b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a358a97-4a55-4489-b08b-37da53f8e9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e24ee30-9329-483e-b886-b1086bc2a2f5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63723596-b599-4d7a-910d-f906288d5b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa258341-bbb7-4adc-8479-b68528c7d57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04e8232-f398-424a-af78-a59eedd7abde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093a04d4-11dd-4fe9-a17c-594ff9344604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61231a0f-5693-417d-a00e-691edf31d538",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43887233-f3dd-4235-9c15-19a0030838ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9517e8f5-e140-4805-8750-c6009a5e51d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95977b53-8bae-4213-9a4f-4f28817dd09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cea396d-5d0f-4b9e-bef8-3e624f167131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d7b290-6023-4c6a-866b-efbd2882457d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3682dc-03c7-42a4-8975-cfeacaafc540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f408f0d-f0fe-4db1-a121-fcbe45da526d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20f9173-f37e-4044-aed4-ea3f362087ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029f41ff-6566-4ac0-b196-4e1bc051cd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378a4d23-1930-4007-9d9e-5c68daa1f83d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805b029e-4097-4988-b59c-e5d31d096e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e209ec4e-3da9-4931-bd54-1a823bff2861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95979979-4afd-49dd-b631-c4347cb93fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b57d77-8803-4a4c-aeca-03cc5919599c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ef4828-4794-4c4c-b94f-1cac014f8702",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6d1e0c-4861-4bda-a6d9-696068662598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30956c2b-95b7-48ba-a841-17223012a2bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a51b365-d4aa-4891-9ceb-ebd4487e2c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adf7d71-a174-4208-8691-36250d5fe7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b001490c-e845-4b5c-ab27-1dc6249df409",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe84c2e4-f83d-4296-b361-9c58181db894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad51bb7-e666-4dd5-a213-30325c36c763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a875bbf-8e58-4ef3-8095-a90174d12409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca37c0e-eb03-4ed4-8cce-9ea10afab0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6108a3-e0a4-46bb-ba84-09feb3febac5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db15b33a-183a-43de-97cc-6a4193fbb9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96022874-5a78-458c-bac9-635c1bc86610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e0c8dc-294e-4e9c-be7d-f998b7226bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9a634f-ac8a-4d3c-adde-07d19a5eacf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba48439-ccc4-41f2-a077-f44b87aa969d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a68662-09a2-443a-9cdf-1cb23675f1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333cd13a-2100-4a8d-a4b4-acac34bdabca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065a4408-888a-4d51-bd4d-2716d0dd4142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337c88fa-f491-4842-b234-db3dfce75021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eb60ec-6958-4cf5-9fd5-8980c45e2f77",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5011f41-0a8e-4605-bf17-7df7fd19df4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2975ef8f-715f-4609-9081-826bb8cb8efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947c672c-45af-40fa-889c-43d5f4672ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c356f4a8-44b4-40af-af3d-4f650f488810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f9b78f-86e1-4ef6-a6a8-7cb028bbbbb7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9e9e20-c2ea-400d-9721-3bdd41ef0094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a76f41d-29b6-4b88-886b-018590b13986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a967a0-36ca-4bc3-b270-6632681d3e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be83c798-42ac-403d-a409-0b41b1f1bf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82d8993-4fa0-4d93-8426-07bae563c39b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459a8790-2dde-4212-a71a-db68562ed480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae38f65-5cb3-43be-9a06-a09667c547e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76842ab-6e73-4316-9d04-54b021d71db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad075363-6994-45b2-9ea6-3f7a0d6fa34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db081514-a672-4f76-8aad-d2b556117af5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecd3be7-a402-4aa4-84f3-917c64222887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e03eb39-4303-49f2-a214-3f6fc615b855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d2d6da-b683-493b-812f-37afa74f6963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b67ae0b-6b28-44de-86d1-606cce0528f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd1b3c2-edb8-4b4c-ac1a-bdecdfe68c64",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e645c7-c027-4618-8c69-6a7f1d6b428d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fd5da0-bfca-4b00-934b-2e88ee83155f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb8b8f9-5a1d-48d7-8406-e61fd6eb1e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07673189-f1b2-452a-bc89-ad5963f1a280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87f5285-efa0-419e-9960-500797d772db",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f10874-e86f-4d8e-ae47-14df56fbd978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dace830-1846-493d-8a95-55794963f696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851e43a9-e248-448b-b545-05b827554562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe916c7-6bac-41da-b4c3-d307de211f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea06139-b76e-44d1-a8e0-e2bb3c33d98c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5802c779-8cb3-4673-bb61-0ee89c30d286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca104fcb-c04e-4104-9c58-e231d04a07b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6f121b-5f48-4914-a202-bf9180fc5317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176a32e1-ae97-4a1d-86d0-eb4a0397cc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21710444-06fc-4c16-bd6a-3bace8107bcc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e01e537-8e22-4d96-add8-e5c9e946bbdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181258b1-c620-49b8-8102-62f5d6e622a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d83af0-391f-4ffa-8b46-a99d4a0c3c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f93486d-a069-4f22-bf6f-d2175a09fb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab78c81f-1215-4b45-ba66-259604922432",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4df10af-9d9f-4a2f-b9fe-9cb1a8318330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14a9f49-9222-4ef2-a1df-3a7d2b30846b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ab01bb-41ce-4f93-ac9d-d0dca0390afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46f056c-6897-48a9-9d47-8e262af26ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f139f7-3620-4dbc-8968-9aaffc50d742",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf55b0e-c541-4fbd-bb25-7e3a50dc6cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a03d90c-3771-4e8f-8da1-200ac4dff874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1e96ff-6f65-4792-ae14-908c199b48af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4456c6-f8bf-4718-a9a9-cd22534c82b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56ec975-23a2-4a8e-a0dd-939b0e6aae09",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834e7036-60a2-49b7-9a4a-5bf3e0bcdd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ddf9b1-11cf-46f7-92e9-f5c3f2449e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f687a4f8-23c8-449e-9fb7-dc90684811ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddac1cd-75a6-4b48-b397-8944e7e066fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fce5cbe-fdfe-4f2d-9383-a0fdc0edb7db",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d014212-1538-4216-9f26-d530af87f47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b8db0a-cc3b-42c2-be45-fa0f80f74801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f309695f-d7de-4df6-9295-a069c3ccc456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06755655-9bd7-4b12-a690-13df6750929d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7adc0b-aaf9-41d1-b8c1-94f17193e6db",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5ae60c-a33f-430f-a355-40946bd2771e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0817a067-ba33-465e-89c7-4c521e673337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c88f78-f780-49cc-a8c6-9c4e98363029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a1bb61-3d78-4372-b80f-5a60c5bf4545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437d8c2e-b77c-4569-91fb-5b616d26879a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cbb413-90e7-465a-9f66-442356ef3375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d727c4-4186-4b66-b7ee-5ad536784d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54320ecd-6d03-49df-9a0a-97a9f0d80dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fd342e-a3a4-4ac5-9b60-70140368d560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c7fb58-2e34-4725-aadd-4eff8e4d5673",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20606698-8f1f-4dca-91ed-cc2a21a43d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a240f69-f676-49e8-b33b-91e42871f520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990a6cb1-8f57-4b58-9f7f-b8fb413a09e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dc8701-bebb-4ed1-a224-ba3e13e7d494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c127c4b-f0df-44da-8e12-74b69101b745",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaca57e8-b3ba-4517-9bf2-e10256e487d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddd2d61c-70d1-4ba3-b153-b2743735c4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d85edf-50b3-4e40-88e1-83ad820ac6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b326afc-856b-44f4-b5a6-081a9c86485b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718f256f-64a2-4e5c-b8b8-6b64068775da",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dba35c7-3efe-4f4a-9469-bb2b41a709ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e927b9cb-38ee-4e3b-aff5-b1b1dfa8fd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8800cff-05ce-4f97-a6e7-621ecd6e18a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385171b0-f94e-4503-ac33-4837075c9c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682b4d2b-8a97-4ea2-9175-1ff502ce53ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd1dc71-7ee0-47e4-8382-dbcd534e8618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec7969a-cb56-4906-8d34-05994150496c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35aa1c4-f1c5-4c77-b4dd-72262775f754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c681f0-77c9-4f22-ab29-fce7aa8fc203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc31d96-08d1-4bc4-91a3-08e671425f94",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39877545-96e3-4bc9-90aa-a42b2666e1b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f852d4-4aa2-4fb1-9802-5e2752cd09bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb301ca9-d83d-4c26-8542-5edcb4c615f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49690ad-3033-4155-a1fb-d7e7a8b98ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c6c632-45c5-4ce2-b44f-88f5effc928f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14360ef-defe-4c0d-8c6b-00f2d6179d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d737acf4-1e34-46ab-9cc6-d7684a8b223f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84a7b91-7c34-4ddf-9ec7-32da84c4d4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbd5cd5-8834-42c6-a649-bf1dc497ba6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcd085a-2f4a-4f21-aaf3-286d4ae5eda5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253cc755-db87-411b-89e3-06540ac144b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2abc8afe-e408-40d7-9f4e-3b750dba4fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f5bb57-dbed-4401-b6aa-42960427be0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f6372c-4211-48b4-9dcc-62509c9addba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206994e2-aeec-4750-927d-c10c1d579ebf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b6e559-e3cf-47a7-94fb-f521cb06f263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91fca080-53eb-43ba-ad44-86058756a6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde256b-a30e-42e2-903f-ef5a563ed2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e61002f-6ff8-42dd-a378-9a6ca50af9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03c3594-1792-4317-ba79-1fc9f82f8d06",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f105ce-ae1a-4298-a9b4-f4ab46d8c268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac5fc742-18a0-4d65-b04c-bdbd16b929f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48e0d5d-821c-4440-9eb0-9891da68316b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9bac17-478f-49fc-9cf3-72047a902f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c990a3-2749-48f9-9e4f-c6a81a5dbe9b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54463769-fc72-48c0-9728-c918be8b9ac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1f02f70-3dbf-4e1e-85df-25cd4d45ae8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e03a8-16f8-47b5-ac4a-31a5a5edb84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bb1a7c-bc75-4429-ba1c-2fd90e9d7a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858e4dca-260d-4a09-8fc9-fb1ae56bf061",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e27ead-f735-4a4e-81c4-8581c98d2c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26fb2524-dd82-4580-a8cb-6b12155a13f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce75c75-af30-4233-bccd-d30657d791d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10de7ff-6106-4b3f-8f55-20d576e6c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06be8f0b-9254-4161-9a5f-1d41ddea3e1c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae565c18-d23c-45f8-a87d-2660f9c8a158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4296faaf-0cb5-47ad-ba4c-52a1d4bed42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f7b2a1-6b3e-43a2-bf13-8d259bfee9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2564a37d-63fb-4fcf-9469-656c9f75eddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6a353c-069f-4e08-a663-38d7aef4bff1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a068cf-176a-40ee-8066-33bcd13bceb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7a6b18c-66c7-4dec-b2fa-b59dd5cd4ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f5eeea-e345-4536-bda6-c55aece2125c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d66648-f4f4-4c77-8f06-72803b23e77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff64912-4905-4076-973d-9916b1af3b3a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7776ef-17c1-4344-aa67-65892deda446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c81502-eddd-4741-9633-85a7dad5be05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6316c4-7333-4df7-b683-5a5c1c681028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19373631-f567-4c2b-b0e9-67738f5b369b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3def78b-3ad2-404b-8fd5-3cbd12f2c863",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fa31c4-f1d1-41f0-8778-b3b99bfcfc94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0532aa70-14e0-4530-a2ea-6a0ab4ccbdac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de97001b-73eb-4618-84c7-322244566660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963c0e84-68f2-476d-b688-67607a819c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36341e26-6512-41d9-ac27-4667c8665bf5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a2c6b-0bd5-4e35-bc7b-05094ed8f054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58df3c79-791c-4dfe-bd42-328f6800b4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37d1f57-8e08-4742-b3d1-11dcc99e0901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4203a5d3-81a1-485e-81a3-4b7c05fe0935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b684ecf7-f0d3-4eaf-9185-e8eae1308ec6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0bac8d-e942-419f-8cce-4308601cbd2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc23c49c-ecb3-41a0-ade6-6b296703cc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490c6793-6bc0-47e8-bba8-56f75d759370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b94fd5-de15-4112-b32f-49fa9f405323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f7c275-61db-452c-9e4f-91bd8933ac3f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c010d394-9736-4f4d-9190-1d2affa2cf8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc80309c-159f-4780-9c14-686345fe52b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5916ca0-ae7a-4d8b-b753-701dac212637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f57398-ebe8-49b5-b41a-fbcaf6e1edb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bffd8e2-cc5c-4c81-9977-b0b1ffe39cd9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d1132a-6a0c-40e1-aa1d-d376687aa2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d3c513-8fc8-45f8-8361-85b5c414ffb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1002cc3c-aa5c-44b0-87f1-1a3a14540578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2e48e5-2a92-405d-a3d7-d5eb47e921c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d5be70-b6d8-42e0-9dd8-58a921e42c99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fa9d04-7935-4357-bda8-1f1532389a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f10a1cce-9328-4817-b124-a4400f7b903f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21b25de-71ea-4247-af11-6dce8c1b3b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e551224-2cdb-4cd5-b6f0-e549cc50d63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82090c4d-88a4-4c97-953b-4c3a9517f9b0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95568ebd-de28-4f66-9bfa-57808b046281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3da8dfe0-13e9-4fde-b140-078c7495c673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44b3ddb-c796-4740-9986-89b690e37eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6bc20d-5d14-40c4-bb29-1dd0e059da05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0742c3d-3c39-451d-9ccf-f3d7f2f2b679",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b93dc3-8427-4ae1-9a9c-ad2d1b78b149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8029b35-d4c3-4a37-8403-8641463cb981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212b7c11-0ea2-473f-a03b-74027d7168b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe1c278-1680-4b7b-97a5-f2e4fd67af73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06395ad8-d3ab-4056-b307-30173bffe4f0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df0996b-2421-4d9e-babe-362f81db16f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e66eb7-8b93-4e16-bd95-f803b5dfc00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c179320-d521-447f-9108-abb872341e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d054875e-380b-4746-9574-d193c1a35b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eff6247-8018-4201-9b97-a3aeda080f16",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6053c20-944b-4b12-9d84-4ae5653c4b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5642faa-8724-4759-96e8-eb8b0d3df203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae38f37-d326-4868-9a27-2fde5c35f3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6137f4-3e16-4b89-bdba-119210a135c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15ba295-ef29-4e6c-9cdf-ee43504e764c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827b9158-7582-42a2-8c54-57d3005969a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7e1938-e9fb-490c-8f44-1456d7aca5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e64833-5ca6-43cf-98f1-c740b785cc27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2232b057-9409-4b43-b28c-58dda9bc6f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682ab58f-3a0f-49f9-a2de-9a1e7a003046",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58796097-feba-44b6-ab8e-b9929eb11d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3afa9331-7b14-4ffd-94e7-c01db0539f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0cae0c-2e9e-4af9-a7de-162803399c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cc2831-32b5-47a5-9024-af0b9eb36d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459b5f8e-af4e-4ac1-a5a2-963ae093f261",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f80840-6592-4a67-b996-2a5646dd5648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9593f15-e996-4818-ba79-02accdfbaa48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1bda82-7773-4889-b375-180a2bf2db7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f5dfbf-a038-46ed-a9ea-66a2ae3607bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e916dd7-9d4c-4dec-8fdd-f3f67ffedf65",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3774b32b-ab12-4af5-be54-d8e590ae46cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca393369-ae48-4545-8f9f-e29374f17940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3d2409-6cba-49cf-9390-2b57085d4552",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18aa4754-9f2b-4f87-ab69-5b809f31c3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a591ed-7225-4529-a938-e4987dbe974c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8059f047-c5f5-4115-8515-37e65501f5c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091f1925-1b54-40b4-b630-5a54b125cada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94dbbc4-a8f0-4792-a51c-376c34fcfad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a3ef1d-2e0e-4a74-b275-b0aa16b60fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befc7b4b-3652-4e3f-8e89-7f70df069036",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6c102e-c81f-4286-84b0-a01fe11ad4bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff725830-8fda-49ea-b079-d3564f80ad4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011d0fa5-11a3-483f-b628-865be4faeddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78308044-95ba-4dd2-a2c9-be8d8b0a5076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0862ceef-1c83-4531-9826-fae9ef8eb71d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e553aae2-0c94-474e-a404-88c7438e15c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfef171c-f4a6-4ca9-938f-f482d0378573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c4cf49-71f1-486c-a79b-364ee432bb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4ed722-017e-4e37-890d-d0513d178d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4549f20d-8d01-448c-a2c2-28acd24feea0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ff27bd-5e2f-4062-8679-a18477505bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ae9c88-1cb2-4a15-a722-fed554f26f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc69aa27-fe92-44bb-acc6-d34d4ae7478e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b967a2a2-72ec-4c3b-80d5-84d0db4362fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3866a8-ea03-40c8-a5cf-bf3a6f2694ce",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812af603-b98e-4e89-925b-789de62eb81d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25c4cca8-22c5-4acd-8746-935743729774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6263c1f-42a7-439a-b9fe-3d935cbead94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39749f7e-6d7c-46c2-ae37-d08c3c3ff98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd672983-31d0-46e1-9f5e-d679d6409901",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3554857-7b92-4b4c-a557-aa7bb6d1269d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc18d920-f0d3-44d8-87ab-b0dc61de4586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed522686-6708-4c48-b9c7-816f6ae9d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21938e71-9ee7-40cd-b5b8-b3076ab2c28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6a3b79-eb61-49ff-9ad2-69901b78bbbc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446359eb-41c4-4124-9720-a4a65bf59d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f618b470-8965-4003-b2b4-751b3b123fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3181a8d-5d23-40f2-a6fd-0a56a2a30d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88721bb8-34bc-4dcd-b538-d8ffb2c9ed16"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc33720f-caf4-478b-a595-602157ac551d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef2023c-fb76-46e4-a12d-bf882547717d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "422f9636-f8a2-4d7b-b344-cee3631641b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "446da37a-42b7-454e-8c7a-22a449c6230c"
                    }
                  }
                ]
              },
              {
                "id": "4f301c43-dc74-459e-b8ae-8d38c6f3e606",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b02a5804-fdee-481e-92e8-27b84befab21",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891da733-fa42-4f48-a58e-4bee29d88020",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b225fa1d-a4f5-4e3a-9e70-d09430b22154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8921a2-ca1f-4a49-bc28-da6bff12cfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85775f30-1a4c-4a17-b77e-26f9d17d00bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2175b64c-eca6-4cb7-ae4b-0f045011f647",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8e05a6a-cc20-4ec3-9d52-db6fbf55092b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7726334-0e0e-4f5a-a228-71d742ca26f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2260bee9-7a91-4c76-9bd5-f7bf80cf9425"
                    }
                  }
                ]
              },
              {
                "id": "7361fd01-aeb5-4dc0-923d-2aa3358a0a43",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "30532896-3dab-498d-84b0-831fc5f68bf2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7470ce4f-ce22-42a0-9fc3-8d63a3e6871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f4751e5d-f64b-4d6b-97cd-4bf738eb33dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab0c05d-f371-4c7d-9b9b-8adef613a50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d430f6-f00a-446a-b151-cc30e9e8a326"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e5e52d7e-c76b-4ebc-a8e0-908fd3c9de3a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd5eead5-33c1-431f-bc94-21043ed91bd8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aeb10516-617e-4e1a-9b5b-e3bff9259bfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d7f28362-92aa-45c4-976d-495d816cd15d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5897e32-c311-45cf-ade6-6dc8b9233b0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec29a474-1036-4b77-96ae-345d2b36039e"
                    }
                  }
                ]
              },
              {
                "id": "fd757247-df3d-4bc8-8b67-fe972713d1fc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38ca27b4-52c4-4282-8255-a9512aa8ba97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b4a09030-c0f3-48f4-93bf-4f18e0aa9726"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb970d27-ce80-4079-bf19-d41b5b7ef22b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4c5c2a9-0ab8-45af-8304-42dbbf80a619"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "789bda3f-f6a7-436d-9c54-4ae72f74a611",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "957e42c8-6700-431b-8b6c-03179fcf26e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b53ab1ff-49fa-4f81-99fd-61c2f4d6ea7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd7f9ea3-d051-4e27-abbd-342104717027"
            }
          }
        ]
      },
      {
        "id": "68ac9c24-6ab7-47bf-bfef-6a4f2fea73e6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6e975600-dfc4-4823-8934-21ddf68b0e21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09edd54e-0a5c-4eda-8d42-306e0cf45ca7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fd0ba6f-3611-440a-96b8-665b305f98cd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03b498d-fbfc-4d25-b7cd-b554f3c28182",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb440923-00d7-41be-868b-e3d3ece1d3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1b2973-f0fc-451b-9492-de134736a2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a4c63a2-1588-4121-ba00-6f61e3618722"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fcf029d-3dc0-476c-a7e0-af430a2dc6f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51887b5d-e939-4017-8729-a1797ccfaeea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b76d45d-374c-4abb-a050-06feda6d8f18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3341cdd8-fa8a-4a0e-b928-dca75d83dddc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38241f23-1e58-4160-8eb2-f2be57f8d082",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b6331262-10e2-432d-aab8-4d7534063257"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bdab2c5-4155-4a0f-84f8-8dafbf23eb62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02ed4801-75d3-4003-9159-215854a3adc1"
            }
          }
        ]
      },
      {
        "id": "3ca09952-6cc5-4b1b-bea4-ec325360a9a8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "148a59b5-ead1-42f2-b3d0-f9ba51f7fde8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c9b39de-c730-468d-b7fa-1ceffa9a4541",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71ebf14f-508b-4e48-98dc-533b048fb275",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e9bfad-3160-445c-aee0-2bc27a9f2750",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a9bd1a6-b698-426a-93fc-4da0720ccdd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28cf92c-45ce-42f1-beb3-eae4c2b07352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "961bea0b-9b9f-4a71-897f-455411554659"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e102cf67-94d1-44f0-ba4b-3d5a2e2ae48a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca63750b-626d-4d62-8a97-1e2fa2232c20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93b437b5-4a9f-430c-8518-7561ce9a17fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "753d2254-d8fd-4b32-baf0-d9843c2f92e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9972d43-4308-4cb5-b668-c8177be4f156",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2544280a-1d91-4a81-ba82-bf3702e72b7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffbefe30-b03c-4476-bd3f-409d30836500",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "191f3643-1334-4a05-be1d-b5fe516beb15"
            }
          }
        ]
      },
      {
        "id": "4d710539-7da4-456b-beb9-32443369fdec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "07987c70-520f-4b56-9b2e-2e5394df2511",
            "name": "Negative Testing",
            "item": [
              {
                "id": "547956ac-3b46-4112-9c16-4ac897906e1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3b0ba4b-649c-4cfd-ba05-4c44479af7a2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0b0831-0eeb-43c9-85e4-e5314e75016c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1391c470-7145-4957-8184-92ceacf2ac7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9902e68-7bb3-4fb6-8472-f4bcaa1a6990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72694dd2-ca3e-4564-8fb4-a7d81b970df4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "076dc757-987c-4985-a67b-907645e24be1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dea12f1-640e-4e46-b352-f3eca02914a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e7988f3-e13d-4f1b-8a31-53793bff976c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "769932ea-8802-4de7-881b-ee3100a37ea1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d05c49ed-e8b5-4a8c-92e5-05d5bf932858",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8f628813-9e6a-4333-9f86-5fcb79c9a643"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bfcb010-52e4-45d4-ae97-8884716f0c74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b864a0c-0a77-49fe-ae62-28f93d56b48c"
            }
          }
        ]
      },
      {
        "id": "8e2bc6c1-8c47-4629-b58d-5a1ee71adc84",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f528977-bcbc-44f0-84a7-3356366d46f5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d43e9c42-8878-4a49-b608-a502e6e812d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6234cc95-9d25-4ac0-8d66-6d1767254150",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d53d6cc-f13f-4f7e-958a-a4ba97dba89f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9ddcb86-6e06-4501-9cf2-3fb1d10cc74f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 393
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.66260162601633,
      "responseMin": 7,
      "responseMax": 309,
      "responseSd": 22.45112088524536,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685580764559,
      "completed": 1685580794649
    },
    "executions": [
      {
        "id": "8eb7099e-d307-49e2-a9ab-8fb8a8f76798",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "663f6286-867c-4f32-9dcc-3f1313cac987",
          "httpRequestId": "e0125f48-a01f-4714-b86e-892f6a8f63be"
        },
        "item": {
          "id": "8eb7099e-d307-49e2-a9ab-8fb8a8f76798",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2e1a93ee-4038-4a6e-a392-3aaf331ba298",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "f76a5597-8d67-4e18-9cbd-10afa2a468e2",
        "cursor": {
          "ref": "f64e85b1-a28a-493c-aef7-f0e07dd53f0e",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "209a926e-07d9-433a-a308-25112e2f813c"
        },
        "item": {
          "id": "f76a5597-8d67-4e18-9cbd-10afa2a468e2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f330aeb6-5099-43e3-82e9-aef6631aa1ff",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "7c027f43-71cf-4ad4-9447-ee38e3ba3d26",
        "cursor": {
          "ref": "788c827a-7e1a-4bec-846a-d94bfad9d569",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0f766a20-8d9b-4443-9b6c-003a30630478"
        },
        "item": {
          "id": "7c027f43-71cf-4ad4-9447-ee38e3ba3d26",
          "name": "did_json"
        },
        "response": {
          "id": "fc4e8c8f-e3ba-4a45-b5d9-24e8b1848c5b",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48852a16-5ed0-45e3-bee5-d110fc3279bb",
        "cursor": {
          "ref": "8d0fbf15-8971-4f58-8056-8f2206a362f9",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bc5d8bb-8ae4-45bb-8468-5d5310eeeea9"
        },
        "item": {
          "id": "48852a16-5ed0-45e3-bee5-d110fc3279bb",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d21afbe-c818-45af-856b-5d1fb6bed0e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "48852a16-5ed0-45e3-bee5-d110fc3279bb",
        "cursor": {
          "ref": "8d0fbf15-8971-4f58-8056-8f2206a362f9",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bc5d8bb-8ae4-45bb-8468-5d5310eeeea9"
        },
        "item": {
          "id": "48852a16-5ed0-45e3-bee5-d110fc3279bb",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d21afbe-c818-45af-856b-5d1fb6bed0e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c05ef1e5-bab3-4b0d-8839-8c8c7ddc649b",
        "cursor": {
          "ref": "9b2f1907-74ce-49c0-a35a-1758b047dfe6",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0742a999-aa7b-4990-a987-d1db4658ea9a"
        },
        "item": {
          "id": "c05ef1e5-bab3-4b0d-8839-8c8c7ddc649b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "477124e6-505f-4423-b3a8-3080f8a5f453",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "0cf7a12b-e597-45e9-b0b4-ce7d14bb71af",
        "cursor": {
          "ref": "8e258608-0418-4493-977b-b80f719afbc7",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "716405b4-5df7-41e2-9604-988ed2633157"
        },
        "item": {
          "id": "0cf7a12b-e597-45e9-b0b4-ce7d14bb71af",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d685e384-32fe-4046-9d38-6d3f17bc9c47",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "835c6699-4eac-48e5-bfda-c5ba993cb064",
        "cursor": {
          "ref": "dddc5502-336c-4473-bfad-3959162d2569",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28244ecc-427e-4046-bfdd-8a15ae504a15"
        },
        "item": {
          "id": "835c6699-4eac-48e5-bfda-c5ba993cb064",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0e8685bb-3672-4eee-b2c1-6efb065a35bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952749fa-8b03-4aa3-ba10-3483c7f10b69",
        "cursor": {
          "ref": "62213839-a2f5-4262-96e8-fd23c13dbf78",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0a129726-99de-4bff-8f9a-94d6d6c88706"
        },
        "item": {
          "id": "952749fa-8b03-4aa3-ba10-3483c7f10b69",
          "name": "identifiers"
        },
        "response": {
          "id": "4a1c163c-1022-44e5-af5d-05658a73d10e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6343922d-4d02-4561-bb29-35ed13357b6e",
        "cursor": {
          "ref": "08e00219-95ac-4ac7-badd-1128f79f8c91",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d93f57f3-79ac-437f-b9c8-06fe01a277fa"
        },
        "item": {
          "id": "6343922d-4d02-4561-bb29-35ed13357b6e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "569aa1a5-d6a3-4cc4-9da7-c49abf5d8050",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "b2c8d24f-7088-4e17-b7a0-eb662033c598",
        "cursor": {
          "ref": "c4fffe59-eaa9-4fc3-9787-61ba0c3b16bc",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d753c87d-8076-4e1a-b71f-f15627914e70"
        },
        "item": {
          "id": "b2c8d24f-7088-4e17-b7a0-eb662033c598",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c49d2c1f-49d7-4b8b-a71c-05d1c4c5f6cb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a3aa52d4-18a7-4c12-87c1-0badd8613ed2",
        "cursor": {
          "ref": "85046703-b187-43fa-8b01-f65f587fa6d7",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "627783c7-b7ac-43d0-9902-5ccc6d51ecdb"
        },
        "item": {
          "id": "a3aa52d4-18a7-4c12-87c1-0badd8613ed2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cfea87a2-6359-4c81-a569-c14abffd353e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e55b76c8-476c-4c2b-809b-877edd23216d",
        "cursor": {
          "ref": "06030f15-545a-4871-b215-c84581dfbc54",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e5925835-2c96-4447-95c5-0cfa38e1a306"
        },
        "item": {
          "id": "e55b76c8-476c-4c2b-809b-877edd23216d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8a1d5dee-162d-4f9d-bcba-a6806a9ffb10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5c6c6661-e7e5-46dc-97f4-2d5fc5a1a810",
        "cursor": {
          "ref": "65246ca3-87fe-46e4-8ae1-569a2285f297",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c781ea5d-a4f7-4719-9c70-db1be1bdf559"
        },
        "item": {
          "id": "5c6c6661-e7e5-46dc-97f4-2d5fc5a1a810",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1ce69e34-29b4-4978-b4a3-aaf320f16d1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9361a2be-4a27-4317-b0d5-cfbf5c7da5b6",
        "cursor": {
          "ref": "943a5241-4bfa-44a3-b1eb-100460619acb",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c529bc88-a66f-4246-82d7-a9e72657874b"
        },
        "item": {
          "id": "9361a2be-4a27-4317-b0d5-cfbf5c7da5b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "026de91d-e3db-4e66-9e62-d0573a90d38b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "56b695d8-d016-436f-ba2c-f17c53b1df57",
        "cursor": {
          "ref": "ffa1571a-cd53-4da6-beb2-3c78bf99152d",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "be8a50f7-5d07-4bef-8aaa-db66db2ecb7c"
        },
        "item": {
          "id": "56b695d8-d016-436f-ba2c-f17c53b1df57",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e97661a2-edb0-4484-a4b6-37ab46e54ddb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "011daa55-1444-4854-933e-cfc7c2346eac",
        "cursor": {
          "ref": "ccc82966-7716-45dc-a37a-db624f8590ea",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9d54940b-b9f8-4434-8395-15bf4655c813"
        },
        "item": {
          "id": "011daa55-1444-4854-933e-cfc7c2346eac",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "19d04ab4-8e4e-4811-9104-4d9cb38394f3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "04636c31-44b4-4b14-8a51-fcb087a2c0ed",
        "cursor": {
          "ref": "4bf7c4f1-ba76-4088-a39c-d7609db9ddc4",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "24dfd98e-05f6-4bbb-b791-c7add30026e6"
        },
        "item": {
          "id": "04636c31-44b4-4b14-8a51-fcb087a2c0ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a996701a-1b7d-4fef-8465-bcb8df039488",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a2f4805c-c4fd-4ab0-92cf-3afb48a5ced8",
        "cursor": {
          "ref": "709fcc9a-1207-4cc1-962e-427ab4e8c22b",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0064743d-760c-4a88-87d5-55a4b50becb7"
        },
        "item": {
          "id": "a2f4805c-c4fd-4ab0-92cf-3afb48a5ced8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f234f8ad-689f-4bda-b2a1-f1223e17d3d0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "8a3f05ed-fce3-4510-b274-9e51551e1191",
        "cursor": {
          "ref": "e2f95d94-3be9-4ce4-9057-a8100d19ab99",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0c777302-b679-468c-92be-b2879e64a161"
        },
        "item": {
          "id": "8a3f05ed-fce3-4510-b274-9e51551e1191",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "56ee1e7f-9102-4a0a-ad57-cd51502294ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ffb962cf-81ca-4dcf-96f6-5605518d9161",
        "cursor": {
          "ref": "623b5c54-610a-441d-89bc-e07b4aee6e16",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ad733f8b-dbbd-46f7-8c86-0cf36cd551db"
        },
        "item": {
          "id": "ffb962cf-81ca-4dcf-96f6-5605518d9161",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5340fe92-8df9-4104-aa53-fbe5e6236a35",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d5d5f0d2-6bc1-4697-b578-dfb6ebff3857",
        "cursor": {
          "ref": "9603e66f-9e2c-4146-89ac-6f856a474c6e",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "badb251c-0bc9-4422-bea0-8f7ac59543fd"
        },
        "item": {
          "id": "d5d5f0d2-6bc1-4697-b578-dfb6ebff3857",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2d1ca135-60f6-4ad3-bf47-62b0f5416bdb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ede1babd-a787-4685-987a-fdeab9104d0b",
        "cursor": {
          "ref": "a88acd03-5fbf-41ae-bc8f-d952fe301a88",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "66325095-889a-4bff-8a33-7bfe4d41dca3"
        },
        "item": {
          "id": "ede1babd-a787-4685-987a-fdeab9104d0b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "29de4ee4-58d9-4b9b-8384-aa47d36cec4d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "75ded3ba-1fcc-4881-a071-7cec56fcbf43",
        "cursor": {
          "ref": "76f62ba9-8da7-41ee-b658-87363a03a280",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e476c274-f438-45c5-83cb-79aa1541e766"
        },
        "item": {
          "id": "75ded3ba-1fcc-4881-a071-7cec56fcbf43",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3ed3093d-6001-4ae5-bf66-74721071ef06",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bb944df3-7537-4e58-8d94-e8eb8176fb50",
        "cursor": {
          "ref": "4473a7c1-c056-49ef-8cfa-8a5eb2c74f57",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "627758b3-3c4e-45c7-b870-516403d2a3b6"
        },
        "item": {
          "id": "bb944df3-7537-4e58-8d94-e8eb8176fb50",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "79146e12-c812-437b-bf04-da6633de0632",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "786f08e4-474f-47aa-8343-36446efbef68",
        "cursor": {
          "ref": "17865146-8dee-4818-a2e0-1f704070f42a",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a6b03d7-14ef-47b3-bd57-81b8980e89dd"
        },
        "item": {
          "id": "786f08e4-474f-47aa-8343-36446efbef68",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bf62b6b9-0330-4d38-84af-1e791e646884",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "58c5f439-c67c-4304-ad5a-e293e481c620",
        "cursor": {
          "ref": "876aa671-2eda-40e1-a197-8448db1199c7",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "933865ff-a7c6-40fa-8820-9bf6e777b863"
        },
        "item": {
          "id": "58c5f439-c67c-4304-ad5a-e293e481c620",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bcd2cdda-4bd0-47c6-8248-046c4494bee3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "36e5f5b5-96b0-457a-b455-1438d08bab9f",
        "cursor": {
          "ref": "8a948892-b1f6-4cae-be28-385aee0b9492",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "75231696-54e9-43a4-8fd9-9b1972412284"
        },
        "item": {
          "id": "36e5f5b5-96b0-457a-b455-1438d08bab9f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9844c892-cafd-4b58-8b2d-85f858fb298e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "7ce63faf-1bcd-4bcf-bece-abe3bc932e4e",
        "cursor": {
          "ref": "58c84230-4540-4a07-ae4b-c55d3a58e47e",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "750c0521-6222-47a3-98a0-5458c7728774"
        },
        "item": {
          "id": "7ce63faf-1bcd-4bcf-bece-abe3bc932e4e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bd74c466-ba50-495a-88a0-ce262da3e6f2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e47d8824-0083-450b-b3cd-07d4e2ca24b8",
        "cursor": {
          "ref": "29452241-e01e-4708-bf38-233988ff077c",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3c8ea313-3110-4ed6-9bb4-49fb2d03393a"
        },
        "item": {
          "id": "e47d8824-0083-450b-b3cd-07d4e2ca24b8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e0b55a27-961e-4a20-a3e1-bf56b33cc702",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4e3159ea-d501-41e1-937d-81799030827b",
        "cursor": {
          "ref": "6f539e29-1733-4964-83fe-b4fe1dc15ea5",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "06737f8b-cfe4-450b-b5a8-7c23ef71eb4b"
        },
        "item": {
          "id": "4e3159ea-d501-41e1-937d-81799030827b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fc484d57-7eb0-4f82-91b9-22bb2e82be74",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "778edd1c-ccb9-4b5b-b89a-40f29e43b463",
        "cursor": {
          "ref": "73bb64a2-acbb-4a48-83d7-2249199932a5",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8f8a22d1-72c6-4b96-b4f7-7baf463273c2"
        },
        "item": {
          "id": "778edd1c-ccb9-4b5b-b89a-40f29e43b463",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c7ac9439-2d6f-4549-b8d9-14a68f37fc26",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5faab0c0-e5b2-4d6b-acde-18f2b50339ea",
        "cursor": {
          "ref": "f69939e1-88e0-4cfc-819b-74018fe4dbf5",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2a609ca7-73ae-4a1a-940b-05e19edae4e2"
        },
        "item": {
          "id": "5faab0c0-e5b2-4d6b-acde-18f2b50339ea",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bf85bd75-caf8-4cd0-865b-45b1f380333c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "12ba83c1-5734-433c-9b28-c706c06b93ff",
        "cursor": {
          "ref": "86efa740-8a0a-4925-9b75-357a221d169b",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce679740-2578-46be-afb7-925f3e03fadf"
        },
        "item": {
          "id": "12ba83c1-5734-433c-9b28-c706c06b93ff",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0997cff4-0968-4dfd-85be-0e6c84d3b93d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b66245bd-5d0d-4236-bc67-a01442392b3f",
        "cursor": {
          "ref": "b8a16857-4fcf-48c7-a3ce-e73bdbc0c9f4",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9ab37bcc-64c9-4c26-90c9-644c6f6f7d13"
        },
        "item": {
          "id": "b66245bd-5d0d-4236-bc67-a01442392b3f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5ab1ef96-00d4-4b40-a1fb-e2512125153d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "15e8a6ff-4a5d-40b7-9215-06136e128520",
        "cursor": {
          "ref": "f465e989-c633-4ccb-b32f-08613f3c3d9d",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9385ca84-0727-469e-b298-8785d222ef35"
        },
        "item": {
          "id": "15e8a6ff-4a5d-40b7-9215-06136e128520",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5eab0f52-02f8-4388-959b-df722f76ac6a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d1f816fb-d997-4349-afae-1c70d1ce5dc0",
        "cursor": {
          "ref": "4ca8e5a4-0571-42a7-9b35-9324f19cd8f6",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aa1eece5-37bb-48a8-869a-cbaa826f70b2"
        },
        "item": {
          "id": "d1f816fb-d997-4349-afae-1c70d1ce5dc0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "db2a1ea9-2b86-4379-a028-0a81234294b7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4e70d8fb-179b-4318-b73f-cf081e865d5c",
        "cursor": {
          "ref": "8bc54b61-3489-4147-ac56-0ba0bfc95a8c",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "82ca0e3d-73da-4d5a-a80a-332742b33189"
        },
        "item": {
          "id": "4e70d8fb-179b-4318-b73f-cf081e865d5c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "90b2b73f-344e-4a03-95de-85e5f1063c3a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "afb86854-3f3f-4f0c-aca6-e0aa4c597320",
        "cursor": {
          "ref": "4bad9dbe-8da3-4ba0-8ce7-0adbd9f24f6d",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "df827250-edc9-43f5-8dad-526e78e49843"
        },
        "item": {
          "id": "afb86854-3f3f-4f0c-aca6-e0aa4c597320",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "269fed72-f3ad-4e56-8cab-8d23c4981f4f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dc5fda98-0a1d-45f5-8af4-9a5e77c7728a",
        "cursor": {
          "ref": "4c67cb96-57b3-49f6-9e25-2af06cfa72c8",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f3288a0d-46bc-4f5f-963a-d14478ee5cf2"
        },
        "item": {
          "id": "dc5fda98-0a1d-45f5-8af4-9a5e77c7728a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "469f2fa2-cd3e-484d-abd9-0d78a223a4ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "760276e8-701e-44af-8f34-256788eb28fd",
        "cursor": {
          "ref": "d09cde08-408d-4469-b76f-14780cc56947",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "aa977559-f4db-4edc-8631-25677d9d18a1"
        },
        "item": {
          "id": "760276e8-701e-44af-8f34-256788eb28fd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e5a8bc87-75c6-4c1c-8963-568737dcc3a4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e46f754a-f59b-417c-a985-7a0706f47195",
        "cursor": {
          "ref": "7d6c6ca5-9fc2-4dfa-b881-ae394dd5cb06",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "00f5491c-631a-4698-9be1-d9ad64759121"
        },
        "item": {
          "id": "e46f754a-f59b-417c-a985-7a0706f47195",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "07bbe4a9-44a6-476e-bc88-232f85b4e914",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "58acdc5a-376d-40be-ab63-b77d0aa5d153",
        "cursor": {
          "ref": "1f091bfb-a446-467d-af76-97644d8759a7",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "61f8c3f0-acc9-4094-817d-e21fe416a89c"
        },
        "item": {
          "id": "58acdc5a-376d-40be-ab63-b77d0aa5d153",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "245098fc-da77-4b7e-82ec-a79a1a52a1d6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b886b39f-b14a-48ad-ad72-a3e0d1f22bbb",
        "cursor": {
          "ref": "935c8e58-6688-4e61-bc44-53246ee0ba2c",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f3dfef20-011d-459b-a2ff-b70917c9e458"
        },
        "item": {
          "id": "b886b39f-b14a-48ad-ad72-a3e0d1f22bbb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5e7f687e-8db5-4e7a-a70b-889dba04c6d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "863db7ca-e433-43b4-a3bd-14f3520ba0eb",
        "cursor": {
          "ref": "83c81fb2-48f3-4954-b904-89b851c63de9",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c385f84c-eaa7-4a34-8bfb-a6e17d6271b3"
        },
        "item": {
          "id": "863db7ca-e433-43b4-a3bd-14f3520ba0eb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2c06c152-34a5-4aa2-a699-d81d062e1f43",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bed360bb-033d-446b-9454-47fd10a8b2a4",
        "cursor": {
          "ref": "3a3fb9d0-af25-46e2-ad22-ccfadef47978",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "616ace0c-6598-4580-b887-4bb4b7c13c40"
        },
        "item": {
          "id": "bed360bb-033d-446b-9454-47fd10a8b2a4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "440d298e-c03b-47c0-a5ea-729fcc91dcee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f7fb42ab-3ab2-4126-84a0-36da55aa101f",
        "cursor": {
          "ref": "4c1002f2-f5c2-450e-a008-847d6120f377",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8bf1b0a6-5bd3-4460-ba0c-7729f5498c5b"
        },
        "item": {
          "id": "f7fb42ab-3ab2-4126-84a0-36da55aa101f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2226a67f-3260-403e-84f9-1015dd9ca172",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6e5f9659-6071-4d73-9ff7-691d22041135",
        "cursor": {
          "ref": "9e042186-e49a-45e2-82dd-82bcda67ce36",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be8eb995-99cb-4df3-a574-46a963013de8"
        },
        "item": {
          "id": "6e5f9659-6071-4d73-9ff7-691d22041135",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9a31fe1d-cb59-4b97-8929-8416302d998d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8bda2825-fa66-4b8b-ab51-7d7703612260",
        "cursor": {
          "ref": "cf3e5e32-b27e-41b2-b767-517ca20e694e",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15706e23-d757-4409-a7a6-4ea50bccf932"
        },
        "item": {
          "id": "8bda2825-fa66-4b8b-ab51-7d7703612260",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "93c2d434-943a-4991-9dde-0de6d0dac709",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "736f205b-b80f-4c0c-934b-9d596d847c63",
        "cursor": {
          "ref": "421c2437-1b05-48f6-8c2d-301620b516e4",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "15b249c7-29f4-4d37-870c-58ef5c3c37ef"
        },
        "item": {
          "id": "736f205b-b80f-4c0c-934b-9d596d847c63",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "26543a13-a3f2-443e-a613-39846b8c4d83",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "48a2e05c-4a5b-4bc4-9206-5a1cafe3328b",
        "cursor": {
          "ref": "c20db40e-86ad-4b3a-8407-a29f2f2cb3ba",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8af6a036-73c5-4c05-9bb0-897ca384bf93"
        },
        "item": {
          "id": "48a2e05c-4a5b-4bc4-9206-5a1cafe3328b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "28b3b02e-e169-4511-a9ee-fff0aa16d209",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "94d49d78-9ee1-42dc-800b-8b455770f441",
        "cursor": {
          "ref": "27ed455e-c3a1-4cc4-9655-77d490fd8e83",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d8fc57bb-65b6-4483-8dd2-13102dc5d5eb"
        },
        "item": {
          "id": "94d49d78-9ee1-42dc-800b-8b455770f441",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3fb5ed50-2f9d-44de-8445-6a1889ef135a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e58c8d64-990b-4eba-88c2-36431de7f999",
        "cursor": {
          "ref": "76608801-5ef7-4684-8f1e-f8e359a5ec4b",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f487e844-c4b6-4ef5-b739-471e97dea187"
        },
        "item": {
          "id": "e58c8d64-990b-4eba-88c2-36431de7f999",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b9d7bcb4-ccae-451e-a597-46fd2fc514e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b3d48efd-5d9f-499f-9435-616ef5fecb27",
        "cursor": {
          "ref": "85dc4e45-1139-47f6-bd40-295d648f60a4",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "26380aba-e7f1-4574-9753-3058b4fd1998"
        },
        "item": {
          "id": "b3d48efd-5d9f-499f-9435-616ef5fecb27",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "12c09d86-0103-4ba3-ae5d-17aea8aa1d95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b732eae5-8c1b-4064-b61e-b881f90e482e",
        "cursor": {
          "ref": "15dbf4aa-de06-42b7-8d94-9b2432dcfbf1",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "18db4394-40e5-416a-80f0-08e0803f022e"
        },
        "item": {
          "id": "b732eae5-8c1b-4064-b61e-b881f90e482e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7b9c051f-b43a-4de8-b67c-09c0973bd9fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "435940f7-a127-4ab6-9473-080abf61b0f6",
        "cursor": {
          "ref": "c63704fa-1a80-4539-97e4-fcec3bf6acd9",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "03022968-3587-411f-9b00-44b821a49cfb"
        },
        "item": {
          "id": "435940f7-a127-4ab6-9473-080abf61b0f6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "91403992-52c9-44f7-b0d9-30ab43407a7b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "2cbcdae6-b05b-4d12-8976-0f492d7a7fde",
        "cursor": {
          "ref": "05a93c28-ba8b-4a2e-af1b-01d1e1ac65df",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7ba5661a-415e-4117-ae11-5f991538949c"
        },
        "item": {
          "id": "2cbcdae6-b05b-4d12-8976-0f492d7a7fde",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ea8151ca-6e7b-43cc-93c9-9a0e5183c531",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "ff6cca0f-67c3-40b4-b81b-53b1b6fbb68a",
        "cursor": {
          "ref": "dd6c0ce2-9aa9-49aa-bc4c-4bb94e59e03e",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "728add48-1194-4f79-83b4-6a5d166e3f38"
        },
        "item": {
          "id": "ff6cca0f-67c3-40b4-b81b-53b1b6fbb68a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3268b3ab-7acd-4b10-9df8-5ece1b2544e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "24ac83da-bbfe-47f6-9e91-00414b398f71",
        "cursor": {
          "ref": "51221569-618d-4134-a974-0740ec0d1b04",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4fdd36ed-d16f-45f2-8734-104983178bef"
        },
        "item": {
          "id": "24ac83da-bbfe-47f6-9e91-00414b398f71",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ac2a86af-f339-4fc1-baf4-08aa3627649a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 86,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "f9cda649-7fcc-4c23-8bed-f795c6689798",
        "cursor": {
          "ref": "87355560-627d-4a89-9e78-193a820896fe",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "05c18d17-65c6-4304-b0be-aee04495074c"
        },
        "item": {
          "id": "f9cda649-7fcc-4c23-8bed-f795c6689798",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "82f9a384-014d-44db-b8a5-0e6a0b9e040f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7f07ecad-5285-4e23-a492-30b4073c3395",
        "cursor": {
          "ref": "6427a6ce-662d-4b43-9cf6-6f1c53d53481",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b06b0437-864d-429f-8e0b-18c6eeaff8f1"
        },
        "item": {
          "id": "7f07ecad-5285-4e23-a492-30b4073c3395",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "09f48c75-c949-4001-8da5-21b4f5f46463",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a81ffc1f-4201-48d2-9a20-b66e40a27eaa",
        "cursor": {
          "ref": "bd835c83-7f1e-4d71-b066-729af3f8046c",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b5a2f559-4273-49dd-9f53-c399f0cd2fc3"
        },
        "item": {
          "id": "a81ffc1f-4201-48d2-9a20-b66e40a27eaa",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "76475136-0d76-4a78-9adc-a50b8504f45d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5f6452cd-fb5d-4dbd-8915-641ddc9a7fff",
        "cursor": {
          "ref": "a49143ee-3669-4198-b5ff-24fcadd30535",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f45368b1-2bc2-4025-9f9d-fa0324819456"
        },
        "item": {
          "id": "5f6452cd-fb5d-4dbd-8915-641ddc9a7fff",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "995c02e2-46b2-4722-8e8b-810358145bba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "112ec732-1180-4d63-a927-b3db31572fc4",
        "cursor": {
          "ref": "662eb1f9-b9f2-4a94-8c23-6a30ce6de0e7",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7ad57bfe-b3ac-46f5-b79e-70cd8de3c78c"
        },
        "item": {
          "id": "112ec732-1180-4d63-a927-b3db31572fc4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5b3c0028-caa4-44a0-bc5b-68bdd5349845",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "43b1f922-8f3d-4295-8065-272eef5614fe",
        "cursor": {
          "ref": "35c7cae5-1e5a-436c-b23c-62af837ad1a6",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "869e9cb5-0254-432a-bcbb-3dc9c7ac95d5"
        },
        "item": {
          "id": "43b1f922-8f3d-4295-8065-272eef5614fe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c882734d-2a2f-4d9f-9969-17fb0ac3ec06",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "eb4032e8-087b-4718-a990-44bb4cf078a3",
        "cursor": {
          "ref": "dc86ee8a-fcc7-4f9e-b7a7-6187b1bfa304",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "396a6a2a-bd7e-4fe4-8c40-eeb96de9222b"
        },
        "item": {
          "id": "eb4032e8-087b-4718-a990-44bb4cf078a3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e1b4c247-6709-43cd-b58f-e2edbdc80677",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8d8fbe41-d482-4850-b1b9-c386095e2ada",
        "cursor": {
          "ref": "b9df5431-e0c7-44c7-9c9d-af770e0fb786",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0664f91e-47d9-40df-aa43-d1cf12c865b9"
        },
        "item": {
          "id": "8d8fbe41-d482-4850-b1b9-c386095e2ada",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7d6d3cae-d72f-4dd7-92b4-4d5e93a51103",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "085045e8-b154-4ff5-b0ee-b13726dab314",
        "cursor": {
          "ref": "b86c5a5d-8ec0-4357-a656-2f3f419dd706",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f8be31a-3da3-4580-a0de-880dac214c55"
        },
        "item": {
          "id": "085045e8-b154-4ff5-b0ee-b13726dab314",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ac46bd86-6789-49cf-9fac-72e8fedf396c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f966057c-50e6-4199-b311-1a766f67d4ca",
        "cursor": {
          "ref": "ffb9a27b-8fe9-4797-b186-e8c0f150c468",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "586d3ece-22c8-4fa2-a57d-b0252bd46573"
        },
        "item": {
          "id": "f966057c-50e6-4199-b311-1a766f67d4ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ff8ffdfe-f085-4e3d-a70a-0c5b31b5469d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6759430d-5b2c-47fa-8b93-4e9c2281c5f2",
        "cursor": {
          "ref": "dd759b5b-4cb1-4064-8be7-4b2f3d1b108a",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e08b027b-2f69-4569-9235-b357cd7620fd"
        },
        "item": {
          "id": "6759430d-5b2c-47fa-8b93-4e9c2281c5f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "86a716b6-ffff-42d5-9efc-a3bf884f7a12",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4fc3d296-c079-4e6f-bd90-23b694d8c5c1",
        "cursor": {
          "ref": "c02d993a-804b-4de6-bacb-68128d25d7bc",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2958be4b-95e4-4be6-971c-2c2331a584b6"
        },
        "item": {
          "id": "4fc3d296-c079-4e6f-bd90-23b694d8c5c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "953f0b8d-1a18-4ede-9415-efc1a0d48bd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9b714b89-8c90-4b30-99a7-25315b9d1a5d",
        "cursor": {
          "ref": "0706a005-a8fb-479f-86d8-59ec47cc2112",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "217dce59-37a0-4bfb-9ab1-f611de9b7b62"
        },
        "item": {
          "id": "9b714b89-8c90-4b30-99a7-25315b9d1a5d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "eafea1fe-0a17-449a-8ee0-8ba3ddade32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 571
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef05b3fa-e4f0-4d2f-a616-060e496dc68b",
        "cursor": {
          "ref": "5aaf6022-0c6d-4f57-a520-0139babe0c18",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2c0428f8-c394-464e-9265-d37aa3788068"
        },
        "item": {
          "id": "ef05b3fa-e4f0-4d2f-a616-060e496dc68b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "53b41db8-d3cd-4f0a-94d7-04637dc12abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 570
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76549cdc-7197-48d2-9fbd-cd9d238f3f88",
        "cursor": {
          "ref": "e800ed32-524c-497b-867c-8d304e33a569",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0b689efa-15d5-443a-b0eb-d2202ef0362c"
        },
        "item": {
          "id": "76549cdc-7197-48d2-9fbd-cd9d238f3f88",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6f230dd7-4769-4c5a-9923-73de898551cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 572
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1b5f0c-72eb-4d2f-be86-28a06aa9c520",
        "cursor": {
          "ref": "8d73869c-b68e-4e3f-becc-3f3987a82e1b",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cf61243a-8ab3-413f-a230-e09114c9d69b"
        },
        "item": {
          "id": "de1b5f0c-72eb-4d2f-be86-28a06aa9c520",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4a6b0353-7c33-4f4a-a7cb-6083432f2b08",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "123007c6-6aee-4109-a511-2fef7eda5666",
        "cursor": {
          "ref": "bad47b9a-0a33-430d-8f43-feea14f0cc8c",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a754332c-e270-4a63-b8e6-5c5ea539c800"
        },
        "item": {
          "id": "123007c6-6aee-4109-a511-2fef7eda5666",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6553414b-7452-4ce0-858e-2f1149cb8e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 572
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331b9a65-c6c8-4c2d-9791-6fa9754e0fae",
        "cursor": {
          "ref": "9ee82def-0296-4add-90d1-885a5e8f58ab",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4810a856-22b8-4597-895e-911f8505cccd"
        },
        "item": {
          "id": "331b9a65-c6c8-4c2d-9791-6fa9754e0fae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "acaed135-d6c7-403b-acb7-df975b130c80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "86777a8e-0af9-4dfa-9d9a-7023caecfad1",
        "cursor": {
          "ref": "312bdc72-b98c-4029-b4d5-ad0836b16963",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "68823c41-fec9-41f3-b7b7-bf1acf110906"
        },
        "item": {
          "id": "86777a8e-0af9-4dfa-9d9a-7023caecfad1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "357fccd1-764d-4812-ade0-a78a3dfa3b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61da206a-b59f-49db-a5e8-3bc1d01a9763",
        "cursor": {
          "ref": "85bbfdf1-110d-49f7-96cc-aa8d929f4df7",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a40fb31d-5cec-427c-a5e8-4fc88839a133"
        },
        "item": {
          "id": "61da206a-b59f-49db-a5e8-3bc1d01a9763",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e5fc3581-4958-4344-9435-2c31d1ad2d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8267db62-83fe-468e-90bf-89079f001421",
        "cursor": {
          "ref": "80c9cf0a-a081-40ce-b85e-65824a0c46cf",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bd1aa2cb-3ec3-4c30-917b-cbfcba14cd2e"
        },
        "item": {
          "id": "8267db62-83fe-468e-90bf-89079f001421",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d9beb791-0226-4131-b355-7e45f593374c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2eb4cc2-2ee1-40ec-ae93-3011681f77de",
        "cursor": {
          "ref": "5db18402-b593-4eea-8e20-02ab67c86ac3",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "16f0b8a3-ab39-4ab6-888a-ba3bd3a094d0"
        },
        "item": {
          "id": "d2eb4cc2-2ee1-40ec-ae93-3011681f77de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ecea987f-91aa-4d99-b77c-5c7c35d2fc93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "66481d64-f7e1-4871-886e-7b847883f0b3",
        "cursor": {
          "ref": "9f2b0ebe-cb49-454c-9c47-4d906cd5468c",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5fcf3d67-efec-44c1-89ae-b7ebe0d3d3dd"
        },
        "item": {
          "id": "66481d64-f7e1-4871-886e-7b847883f0b3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b618181a-2a23-4c91-9f7b-4b400d2e08de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadee3d2-8123-44ee-9f06-dc6607495dd7",
        "cursor": {
          "ref": "2f841ade-15fc-4ca6-a263-e7fef9f150d3",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ab8472aa-b0c6-447c-81a3-0cae1e3b8333"
        },
        "item": {
          "id": "cadee3d2-8123-44ee-9f06-dc6607495dd7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4952b898-5516-4297-a3de-928434fd71cf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "59f31a31-12f3-44f3-b057-7102ca6ccfef",
        "cursor": {
          "ref": "54a2e383-8695-4c6c-9ccf-9881f45781a9",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fc9dc48e-a677-4cb5-bc4f-6acb2e2011b1"
        },
        "item": {
          "id": "59f31a31-12f3-44f3-b057-7102ca6ccfef",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4fbcbd5c-f21f-4df3-99a1-b1fd929cc965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9466dd95-2246-4a8d-a636-6b3ba1fd3cdb",
        "cursor": {
          "ref": "a5c1a56b-ad63-429c-81ed-bb501e9e601d",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c8f7d21b-3469-48b7-8d12-2ecbd27d96a1"
        },
        "item": {
          "id": "9466dd95-2246-4a8d-a636-6b3ba1fd3cdb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8d3cc12d-3eff-4dc3-9077-0d01088b7c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de982643-04e1-4ef0-b55d-364720cdd6fa",
        "cursor": {
          "ref": "0474f857-6939-42a8-835f-e6822fc38129",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1f9b7bd0-bf69-4978-9c38-f24901c80f8b"
        },
        "item": {
          "id": "de982643-04e1-4ef0-b55d-364720cdd6fa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "929e5ae7-5715-492d-b8aa-24b21afb0209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b25d283-983d-44c6-88a6-1a7b34b3f550",
        "cursor": {
          "ref": "29042916-3c77-4f52-a374-5656bed840be",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b4c84f6d-f954-4270-95d7-450722046bda"
        },
        "item": {
          "id": "2b25d283-983d-44c6-88a6-1a7b34b3f550",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9ef7eab4-e943-482f-a89f-1eadc576993b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6715bc85-2511-4709-948e-96d048ec50e3",
        "cursor": {
          "ref": "5bba9f6d-406e-48fe-840d-ebc5c31df761",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2eaf3dd1-8dc4-4821-9746-0b45b2847abb"
        },
        "item": {
          "id": "6715bc85-2511-4709-948e-96d048ec50e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5e7ccbc3-e191-4409-94d5-f8694e660a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d04dfbf-d06b-4465-a4ec-ed33b667ab18",
        "cursor": {
          "ref": "6820b65d-79fb-4bbe-a65c-d0ed87e3b2b1",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e7b7b8af-71a9-48a0-9d0d-1d94d77a847a"
        },
        "item": {
          "id": "6d04dfbf-d06b-4465-a4ec-ed33b667ab18",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b58e998a-1646-42b4-9401-be08a99661f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6d731f-c596-4ebd-939c-782d553d54c4",
        "cursor": {
          "ref": "3211670e-bc4b-4103-969b-008211b6fbf5",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c3bf0782-413c-4dc8-b38c-a223204a51d3"
        },
        "item": {
          "id": "ea6d731f-c596-4ebd-939c-782d553d54c4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d705b02d-3b69-46e3-9040-4dfb63514846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 402
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe110794-5e7c-4e38-a3ee-17dc40771bdb",
        "cursor": {
          "ref": "0cae2f31-46d3-485e-b496-76e057c7ea19",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c36b11ce-ab70-4459-ad19-10c09032b5cd"
        },
        "item": {
          "id": "fe110794-5e7c-4e38-a3ee-17dc40771bdb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bc6d4090-d482-4a2f-99f1-e5c8e800f8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 401
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a33cf73-2508-4ba4-a60d-d91ffbb3d386",
        "cursor": {
          "ref": "5c1841c6-73fa-4bac-9bff-2601edc28a83",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5231cddb-3313-4a68-8e72-5e4ef127cabf"
        },
        "item": {
          "id": "4a33cf73-2508-4ba4-a60d-d91ffbb3d386",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8efc794f-10f6-4df6-b926-626ed03b9673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 403
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd2e10c-897d-406e-a061-b13d11d940a4",
        "cursor": {
          "ref": "a4b4ff35-22ae-4c2a-879b-2cdb1ab8ae54",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "34ed6509-c347-40fb-a659-75d89ce0ff37"
        },
        "item": {
          "id": "ccd2e10c-897d-406e-a061-b13d11d940a4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9ce6dbc1-49a7-4cb4-8232-75ba06bbe154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fb1b3b-106c-42d9-975e-24514193dc72",
        "cursor": {
          "ref": "733aa7ad-6e31-411f-94bd-dc288c138062",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b5b35a72-ac95-4360-9d2a-03c72e102923"
        },
        "item": {
          "id": "e8fb1b3b-106c-42d9-975e-24514193dc72",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "773853c5-5875-4922-878a-575318dadf02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 403
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce99c38-26d4-4e65-b9d4-4540eaae0cea",
        "cursor": {
          "ref": "004f1429-fd70-420a-9a50-7a3f8455e1bc",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "10556d4d-9092-4311-82be-4282739f3c10"
        },
        "item": {
          "id": "cce99c38-26d4-4e65-b9d4-4540eaae0cea",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "59469a53-2d12-4db1-8d33-f4af28e87f2d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f414fd13-8f78-4785-b4f7-566b4b519486",
        "cursor": {
          "ref": "23c4e253-b3ae-4ba5-b358-af12db148d11",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7ed0c6a5-4c4f-469b-a39e-827572f86090"
        },
        "item": {
          "id": "f414fd13-8f78-4785-b4f7-566b4b519486",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e797f2c3-a693-425a-a0b3-0ce72b5c25de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92238a9-465e-499b-bee6-02d6c2ea73a0",
        "cursor": {
          "ref": "9d2a9a10-c743-4a13-a6b7-6bcd222ed4e3",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c2a53b75-d646-4c3b-803d-9e2d97bd2044"
        },
        "item": {
          "id": "a92238a9-465e-499b-bee6-02d6c2ea73a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1d4d80c5-375b-41bd-b211-c149905a8acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26f1879-33c5-4ee8-8a74-b930074f4df9",
        "cursor": {
          "ref": "ac71f4e0-558f-4a74-95c2-fc9864984112",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3f7e324c-4fb2-4812-b317-587160e7da8d"
        },
        "item": {
          "id": "e26f1879-33c5-4ee8-8a74-b930074f4df9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b2c84575-15b3-4227-a597-e3fb2f9d2cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6913a245-6bdc-4f2a-ae0b-f3dd4955d265",
        "cursor": {
          "ref": "eb46c5f1-0fbe-48e3-8fcc-9ec8fd258504",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "daea9417-89b7-45e7-8a30-fa69c3ba1679"
        },
        "item": {
          "id": "6913a245-6bdc-4f2a-ae0b-f3dd4955d265",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "04d829f0-f65a-45ec-b287-c80c1b25fdf1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "a1d55533-d473-4d10-876e-784096c09af3",
        "cursor": {
          "ref": "588efa0d-39c9-4e21-bd94-b0ed281be9d8",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "90cff024-0b35-4a79-99a1-0a5585faa0b3"
        },
        "item": {
          "id": "a1d55533-d473-4d10-876e-784096c09af3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9c73b7fa-a2ec-4779-ba3b-d2b86e21d358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d1aef7-448e-4947-90f0-2ec4993a8114",
        "cursor": {
          "ref": "0b5ba5f0-d6d6-4f83-8a88-d8b1a3231aae",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "18087881-f750-4a3c-b396-a5dcc9e00bcf"
        },
        "item": {
          "id": "a1d1aef7-448e-4947-90f0-2ec4993a8114",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fe5b1b68-a4c5-4450-81f4-0f898e7a033d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e3b298be-38ff-451a-abf1-6eb99e29cd73",
        "cursor": {
          "ref": "c8e0c2ce-2131-41fe-a04c-96241dc25547",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a4289d00-a3a8-4d0b-b372-1680fc52beb7"
        },
        "item": {
          "id": "e3b298be-38ff-451a-abf1-6eb99e29cd73",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ba82902e-1942-45ce-9af2-3a7bd794ede9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c400b3e5-e109-4cb3-b983-adfb57d050ff",
        "cursor": {
          "ref": "bad428d2-6a4a-4289-b661-10d17f63108d",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ef5bd45a-e825-4043-bc77-27e8ae5a61f9"
        },
        "item": {
          "id": "c400b3e5-e109-4cb3-b983-adfb57d050ff",
          "name": "credentials_issue"
        },
        "response": {
          "id": "04cc23d9-c573-486c-852b-bb23cdbb8e8b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "9147310b-1ecf-4fb3-b51d-0bb59fae3c9a",
        "cursor": {
          "ref": "9c893ae2-7160-4268-b372-6440fcef3a85",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a6a05d1c-8c8a-4fbd-bb28-a8a9a6396399"
        },
        "item": {
          "id": "9147310b-1ecf-4fb3-b51d-0bb59fae3c9a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "172f46c9-01d1-4ecb-a955-13814f8664ac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 211,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "2f9dd635-6c26-4947-8908-0c94d9d8aad4",
        "cursor": {
          "ref": "9c08d3f5-c5cb-4ad0-8256-f3a48a3ff521",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c88aa33b-7450-4ee9-a1a3-83a7dedc9604"
        },
        "item": {
          "id": "2f9dd635-6c26-4947-8908-0c94d9d8aad4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2442a9f1-b16e-41b1-848f-322d9dde9da3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f1ac2c6e-e2da-476b-9def-19a667648406",
        "cursor": {
          "ref": "b388a54d-1bc2-4b14-9f76-4d9a6382be7e",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9c9a8e87-4b5c-4d9c-9616-e07c6e7b5239"
        },
        "item": {
          "id": "f1ac2c6e-e2da-476b-9def-19a667648406",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b34ef4ed-c376-47f3-83e5-b5202658cdc3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9ceb4844-a07f-42f0-92a8-76b168366ced",
        "cursor": {
          "ref": "dbd6d0f5-8466-4ccd-8605-28315eaee4a6",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "477fb5fa-c489-420a-a980-211dcb13a55d"
        },
        "item": {
          "id": "9ceb4844-a07f-42f0-92a8-76b168366ced",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "06db2c71-89ec-4ef2-9e43-2fee861a6090",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ce0f4c54-9d79-4670-83a6-87347a5a4e90",
        "cursor": {
          "ref": "75e5d929-33b0-4965-99a5-a00337cbf999",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7a636acf-345f-4300-8cc8-034694f380e4"
        },
        "item": {
          "id": "ce0f4c54-9d79-4670-83a6-87347a5a4e90",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d4e09074-a803-4d6c-91d9-09b34f4f4102",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "5e4d1709-d208-4c68-96f7-3b06209b49ed",
        "cursor": {
          "ref": "1a357f04-581a-4176-a91d-69c0f39ce39f",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "25c66846-ad5c-4ac8-8ace-a310f684c6ad"
        },
        "item": {
          "id": "5e4d1709-d208-4c68-96f7-3b06209b49ed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3baa302b-831e-4446-ab0b-2e9211b459ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "19e7a3ae-4ab1-4db0-a8c1-3afffc3236a3",
        "cursor": {
          "ref": "44985cd7-9248-4439-9f1f-b609de906f98",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "64dd9b4b-fd9c-4447-9c5f-6a22bbde8861"
        },
        "item": {
          "id": "19e7a3ae-4ab1-4db0-a8c1-3afffc3236a3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a9ff07f5-9d99-4762-aba9-c09116a9e2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7440773b-caa6-4437-af2e-6a4ec7ae6748",
        "cursor": {
          "ref": "b6e4d4f4-f445-4141-8e04-a6142bf2dd83",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9b98c275-424f-4071-a411-b2819f7b6309"
        },
        "item": {
          "id": "7440773b-caa6-4437-af2e-6a4ec7ae6748",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "469855ab-b6bf-4635-9e43-d1174afec387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69cf154-4fa9-4349-bee1-ebbde0070ca1",
        "cursor": {
          "ref": "3341cb7c-49b1-4061-ac8e-9df4d4ccc482",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "26bd27a0-4b0d-4d1f-b0f6-7def4bf828ad"
        },
        "item": {
          "id": "f69cf154-4fa9-4349-bee1-ebbde0070ca1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "950c79df-62ce-4139-9a79-68cb52a6ba63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2ed334-8c7e-4b9f-a0c5-4983b5fab873",
        "cursor": {
          "ref": "30ed990e-19b1-47fe-b450-c1fa2c134d32",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "554cda7f-563f-49dc-9988-6da89d162bb2"
        },
        "item": {
          "id": "ff2ed334-8c7e-4b9f-a0c5-4983b5fab873",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e72c8820-d1af-4671-8999-3af74baea131",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "41459462-78d9-4604-a062-542b9c632584",
        "cursor": {
          "ref": "de54318b-a663-4c73-981c-2030041b6bce",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e9f25735-b0b1-487b-bdfe-97a3e823cccc"
        },
        "item": {
          "id": "41459462-78d9-4604-a062-542b9c632584",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c3b4747f-515e-44d8-9f0c-47e672fe3dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c823f47b-f286-4a9c-b439-e115e7aaf156",
        "cursor": {
          "ref": "e44c3b74-fe70-4ea5-b371-c5c4ed92733c",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c3c97f01-bc17-4ca4-9c62-98d8c8ae9b2b"
        },
        "item": {
          "id": "c823f47b-f286-4a9c-b439-e115e7aaf156",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "41742505-4af6-4600-b188-ecd5f65f39d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "47c12e0d-ebda-4f66-aec8-54a0bc6e3b3c",
        "cursor": {
          "ref": "de9e5c48-72a0-411e-9dca-74ff4ed51add",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e4781d8e-d51c-4c2d-b110-ef4393b1b5af"
        },
        "item": {
          "id": "47c12e0d-ebda-4f66-aec8-54a0bc6e3b3c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d425e79f-2a51-41c8-aa20-107acf8fb324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de805145-1e36-4059-b052-5626d201a1d1",
        "cursor": {
          "ref": "6f2d463d-fa82-45c4-a31a-8c82c60a2548",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "64f40e16-43c0-41be-b61a-b67898d41c84"
        },
        "item": {
          "id": "de805145-1e36-4059-b052-5626d201a1d1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "06b381e4-97a6-4e37-975e-be0a9dd2669d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654fc7e4-dc68-41fa-beff-f3283cf84698",
        "cursor": {
          "ref": "dd310b01-3021-49f8-b461-012f894fe5c7",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "833bfb5c-4872-4db3-9ea7-b00396a73aac"
        },
        "item": {
          "id": "654fc7e4-dc68-41fa-beff-f3283cf84698",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c003ad01-ac9d-40c9-ab2e-5c1ffcbe4e5c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1f77e711-e1b8-493c-8401-f8866712e2da",
        "cursor": {
          "ref": "75339afc-2734-4352-a70e-f26082c7d7d1",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d52df752-c2e0-4da2-bce1-1852b8da3ec6"
        },
        "item": {
          "id": "1f77e711-e1b8-493c-8401-f8866712e2da",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4c636d32-5a48-4591-abaa-9639492ebfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559ad23f-e0e5-4e92-a1a3-148b94e842f4",
        "cursor": {
          "ref": "1d4ee285-097f-41a8-8b39-edd57d6a22e4",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7e3bab42-f74d-4f3d-a5ab-2c68cd1b2cd5"
        },
        "item": {
          "id": "559ad23f-e0e5-4e92-a1a3-148b94e842f4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "78e74c2d-8508-4225-b0fa-b87793640c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830760d3-a95e-4a39-88fe-76c9e588d315",
        "cursor": {
          "ref": "c153c433-4253-4f37-8750-d33d40579a50",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "424a3b3e-4de7-4d1d-a28b-026e0d7a6781"
        },
        "item": {
          "id": "830760d3-a95e-4a39-88fe-76c9e588d315",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "55a88320-81ef-48b0-9a38-7717d0a29cd1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "873ac593-7f41-4f6c-a5fb-ff7b5628cf0b",
        "cursor": {
          "ref": "e26a2bdd-150e-4c7d-9a10-bb0e9e9f3be8",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8febe201-b527-44d1-a729-f335c6e51797"
        },
        "item": {
          "id": "873ac593-7f41-4f6c-a5fb-ff7b5628cf0b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cfdaa387-8763-427c-8584-22328be4da47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9a01ef-eb63-4884-b50b-358a543a4ea0",
        "cursor": {
          "ref": "036c2255-7394-453b-99e1-a50b42b2e12b",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c6be15a4-4c08-4f28-82ee-de86ae6b1004"
        },
        "item": {
          "id": "5b9a01ef-eb63-4884-b50b-358a543a4ea0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "88576531-c594-43c8-a30c-4ae599c0160d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fc3b50-c5e0-4577-8f8d-849f64793b38",
        "cursor": {
          "ref": "4c04f4ad-a42c-4e07-9d03-b5ac53d06cc7",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b3210e9b-2280-470d-928e-204576f488de"
        },
        "item": {
          "id": "58fc3b50-c5e0-4577-8f8d-849f64793b38",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54c3f7d8-8495-43fe-9b4c-3701b174713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef6b542-ddc1-4ebb-ae9f-29ef244687e8",
        "cursor": {
          "ref": "43e21ab4-b2f1-4341-a7c3-1a4b34e19f27",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b58e46bd-d28d-4be4-8228-8adeff696d6e"
        },
        "item": {
          "id": "4ef6b542-ddc1-4ebb-ae9f-29ef244687e8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b2c2cea-a263-4982-98ae-a6e7ed8b7466",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7799ba39-5796-4176-9cda-6dfacce115f0",
        "cursor": {
          "ref": "a741dcb1-21b4-41fe-aa02-41dee627d4af",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a810572e-9bb8-4d34-a124-696c95df5888"
        },
        "item": {
          "id": "7799ba39-5796-4176-9cda-6dfacce115f0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4808dda9-e900-4e0f-8730-8e3cc328c257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a661ec1-ca63-4026-a4b0-d7f74b6e092b",
        "cursor": {
          "ref": "36c96ef8-082d-452f-a062-2d97ca0d6db5",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "237fea6d-285c-4f70-a2ba-788a5b6242a8"
        },
        "item": {
          "id": "6a661ec1-ca63-4026-a4b0-d7f74b6e092b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5bb8c514-553b-4b91-aafe-114c805e1c41",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b9dde9f3-df7c-41c7-9364-1125e42383d0",
        "cursor": {
          "ref": "b089002f-4a39-43f0-899a-0afdd36a81b4",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7941af80-00ab-468d-a8cd-daf2f4c0cc2d"
        },
        "item": {
          "id": "b9dde9f3-df7c-41c7-9364-1125e42383d0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b10db9a3-a796-4c6c-b333-f32afc853847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 293
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3189166-2334-4a92-a7a8-f5d769cf1b81",
        "cursor": {
          "ref": "0f826d26-c320-4b01-b3c7-2d5205513f28",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "59ff2d21-b030-40ad-b945-910fd22b89a2"
        },
        "item": {
          "id": "d3189166-2334-4a92-a7a8-f5d769cf1b81",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92c01646-b4ec-4225-b84b-4bd3b11a34dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f513a4-c741-4630-85ee-4eee95f818ca",
        "cursor": {
          "ref": "5c87db45-c616-43a5-8bd5-e28d80078c8e",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "53c1ae6a-a8c1-4745-9e12-b82d711f6cc6"
        },
        "item": {
          "id": "c4f513a4-c741-4630-85ee-4eee95f818ca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4c0e6604-f839-4892-8f78-f6d21c757d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c2b1fd-d1b4-4283-9d69-854bbde783ec",
        "cursor": {
          "ref": "8c733a62-04b5-4166-9e88-03a7a78da5ee",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d829fd4e-2b29-4297-932d-63e8b3bb7eeb"
        },
        "item": {
          "id": "35c2b1fd-d1b4-4283-9d69-854bbde783ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b4415ded-064b-48ae-88bf-0fe29dd11d27",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "5ce18cb3-67df-40ab-9f04-752b771d688f",
        "cursor": {
          "ref": "9c9881a0-a960-4d9f-9158-7a33aae13bbe",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a51ad460-b88a-40c1-be6c-9a19e5b29d3d"
        },
        "item": {
          "id": "5ce18cb3-67df-40ab-9f04-752b771d688f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d5ceef1e-af25-4c43-9120-66b052419a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6680a2-c93f-45b9-97bc-23e2553f6d39",
        "cursor": {
          "ref": "050b9682-7739-41bf-ad69-a0c554bd363a",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "13500aa6-dca6-460f-a433-ee1d91f85223"
        },
        "item": {
          "id": "8f6680a2-c93f-45b9-97bc-23e2553f6d39",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f0ace73b-29b2-435d-aa04-fa16b5417af3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4b5e2fb0-4117-4c10-b716-f257a2d21b82",
        "cursor": {
          "ref": "0ef6d1b9-8148-4f7e-9160-3760cb7cca10",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5a479020-417a-462f-95d2-652a5e1c6aab"
        },
        "item": {
          "id": "4b5e2fb0-4117-4c10-b716-f257a2d21b82",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1b6a0461-9219-4728-aafa-626d2fb94339",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c046a971-d35f-4e62-9e03-0f37d31b3bab",
        "cursor": {
          "ref": "5090e5b2-5b74-479e-bee3-1d76cfa39b71",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d00c2efb-53d8-47ce-822a-aa4c3ea60598"
        },
        "item": {
          "id": "c046a971-d35f-4e62-9e03-0f37d31b3bab",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ddce32f8-4532-42dc-b08f-e5fdfa59c075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aedd8a1-37ab-4cef-be40-d2ad6ae7613c",
        "cursor": {
          "ref": "b767f652-720a-48b6-ad07-a87a74c4e387",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b45a55d7-46f8-4815-97f3-201726ce981b"
        },
        "item": {
          "id": "5aedd8a1-37ab-4cef-be40-d2ad6ae7613c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "842dc803-77ad-41a5-a1fd-be4890352f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f57650-cbab-4e83-bf4f-7cbf2648ae29",
        "cursor": {
          "ref": "43a46c67-0c1d-4bee-97d3-35dc25ff9e19",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "039ef7c7-78a9-4ed9-a1c6-569f30509b4e"
        },
        "item": {
          "id": "90f57650-cbab-4e83-bf4f-7cbf2648ae29",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9b61a2c1-7870-4f42-9609-e9f31a0f2e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 296
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a8467b-a8f5-4ea3-9953-ccd27ff24876",
        "cursor": {
          "ref": "ae78b369-f3b1-46f6-9427-c7fead7b907f",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "998cf16b-64ec-4396-8581-e3d174424c18"
        },
        "item": {
          "id": "17a8467b-a8f5-4ea3-9953-ccd27ff24876",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a9c49c72-fcf4-4d46-8e7c-62e2c81e22b6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4f2c539f-b8a3-4b81-8cbf-18ed1ff8c094",
        "cursor": {
          "ref": "721bfda3-3b27-4641-822d-e6b5f6a97060",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e0a68bae-3c92-45a3-8e64-efa4e1e6f872"
        },
        "item": {
          "id": "4f2c539f-b8a3-4b81-8cbf-18ed1ff8c094",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7a14def3-e984-4a7a-8f81-4feb32ce40ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 296
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228b9ec7-04a4-4e58-8991-720c6f9dca73",
        "cursor": {
          "ref": "0bd20b63-25b4-4a1d-9535-03268e545187",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bfa4f61b-d253-4237-8284-045423ad2926"
        },
        "item": {
          "id": "228b9ec7-04a4-4e58-8991-720c6f9dca73",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "05a09161-a9b7-4219-8180-77bf6fc45729",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "0bfbc65a-295c-45f9-a9ac-46dad7aad442",
        "cursor": {
          "ref": "1bdb4aa3-eb84-49d5-b50a-8b087daeac01",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81e7d9a6-a193-44ff-bb0a-94a40c308d38"
        },
        "item": {
          "id": "0bfbc65a-295c-45f9-a9ac-46dad7aad442",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4b72a5fe-7a15-454c-81f2-0aaecd440f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0686c7c-7af3-45f8-8fa4-09b065240062",
        "cursor": {
          "ref": "4cddf780-eb54-40d8-aa7b-25e68c091ff6",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6a0b6452-a631-4d72-9270-b4fad68b429c"
        },
        "item": {
          "id": "b0686c7c-7af3-45f8-8fa4-09b065240062",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1e2f5e9e-f094-4b5c-aca8-e929ea25b506",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c9bad601-382a-4b58-aa3f-6b5ba3cab2b5",
        "cursor": {
          "ref": "f760c65a-41b5-4964-a0c3-51b63d2c9f05",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cd06f67b-857d-4553-b5d9-96a33aae91ae"
        },
        "item": {
          "id": "c9bad601-382a-4b58-aa3f-6b5ba3cab2b5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4bb45e90-cf5c-4604-bdea-78efe1fdf6c0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7bd657ef-39d7-4439-ae14-6f3d1637601c",
        "cursor": {
          "ref": "93f383a8-9c33-4a9c-b650-b6761ea1af6e",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d33a81ef-f653-481e-bf4a-85d5cef536b3"
        },
        "item": {
          "id": "7bd657ef-39d7-4439-ae14-6f3d1637601c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1118c17e-4c61-4af3-9eac-6055bfc8df97",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "412fdb3f-e96e-4dc5-a984-1e9e4f670de0",
        "cursor": {
          "ref": "3cd3ec19-2686-492e-9e4f-7d858d499a50",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5adcd84d-206e-41b6-b161-0632826ef48b"
        },
        "item": {
          "id": "412fdb3f-e96e-4dc5-a984-1e9e4f670de0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "60b3348d-9575-4c94-a795-581903ea7799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "7d4a64b2-9d06-489a-a560-ffb2fcfc86ac",
        "cursor": {
          "ref": "cd1cf172-ffe1-4c32-aad8-be219900fb0c",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1e3115c9-3e7c-4896-826c-dac2c5d9ce73"
        },
        "item": {
          "id": "7d4a64b2-9d06-489a-a560-ffb2fcfc86ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bfdfa401-13d5-46fb-803c-c8752c2bc04c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "3dc779c5-c6b0-442e-8635-6698b851d09f",
        "cursor": {
          "ref": "f87e4faa-f3be-4644-a28b-8baf812abba0",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8ddf4194-cfcd-4edb-9763-a4437cf3aa94"
        },
        "item": {
          "id": "3dc779c5-c6b0-442e-8635-6698b851d09f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "46674e81-3144-487b-9a0f-bb115d021422",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "2a0ec002-a030-4094-a4db-e7695aa6be02",
        "cursor": {
          "ref": "065d5c90-267f-4c53-ad6f-f638708d84fe",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "879e4704-a1ad-4fb5-9863-c5d0b03a1c8a"
        },
        "item": {
          "id": "2a0ec002-a030-4094-a4db-e7695aa6be02",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cddb05fe-ec8a-4e03-ac81-3147a30fc560",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c635d797-06ce-49dc-8473-def58f6f40cc",
        "cursor": {
          "ref": "6c25a271-bed6-4ff6-b7c2-a3d77fd8a55b",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eb4724d9-3be7-44be-af75-86b9657a4ed3"
        },
        "item": {
          "id": "c635d797-06ce-49dc-8473-def58f6f40cc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ef2be2f3-f747-401e-b27d-e6962d281026",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f4125403-d752-4d67-85cc-0c3504f57d92",
        "cursor": {
          "ref": "5d1a8517-6051-4b91-8f61-3543cf17e2e1",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5b5d6fc7-89ad-4610-aefe-d57d66fa7215"
        },
        "item": {
          "id": "f4125403-d752-4d67-85cc-0c3504f57d92",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "02ec8f9f-6b19-45a7-bda4-857890259b5c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a841ec80-6264-4e6a-8e65-3e6917dd47fa",
        "cursor": {
          "ref": "a76b42f0-1a04-4c3c-b703-31aaaac393b6",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "54d3ab03-34a6-4052-8403-9a173b3690c8"
        },
        "item": {
          "id": "a841ec80-6264-4e6a-8e65-3e6917dd47fa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5064b88d-027d-40a4-8ba2-ef9c0ffc307a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "e3821049-6f2d-429c-8f6b-84cfde7e8929",
        "cursor": {
          "ref": "ee838e8e-df69-4fdf-afa7-8cf6ceb03880",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bf04aa57-02af-4b3f-ad72-7e4f9de11694"
        },
        "item": {
          "id": "e3821049-6f2d-429c-8f6b-84cfde7e8929",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8b84f282-eb9d-4dff-8a44-2d68d2a120b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "cfd9b897-41ed-4e5d-9203-7d8ae87b60b6",
        "cursor": {
          "ref": "8ae7c52c-1ecf-4831-894d-54f97fb192f9",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8a6c0de5-6479-4998-8787-82217b35e9f0"
        },
        "item": {
          "id": "cfd9b897-41ed-4e5d-9203-7d8ae87b60b6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5ce0d0f0-494e-441b-8d08-86f2b7650b9d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "60ab353f-8a35-4083-b048-be9912a9da0c",
        "cursor": {
          "ref": "eb962d2b-e366-4f81-8f11-24a9564d9d32",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f08048b3-4c33-4ab7-a9af-b0bfa77a5353"
        },
        "item": {
          "id": "60ab353f-8a35-4083-b048-be9912a9da0c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8727d2d4-eed1-420e-8632-b17b130c7457",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "bfda2f28-678b-4bc3-bba9-3f14f36d9c9d",
        "cursor": {
          "ref": "91a7b4d3-992b-4c0a-a323-6f7bca5bd2bd",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "168cfe19-c75a-445e-b62f-58a1c95fba90"
        },
        "item": {
          "id": "bfda2f28-678b-4bc3-bba9-3f14f36d9c9d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1cd09cc0-9b1f-47ef-9b87-ea9f60b47f31",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "2b44656c-4e59-43b9-af96-7d16de7eb375",
        "cursor": {
          "ref": "c1c2a130-3cdb-4a67-8ec0-5f9c258ed498",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "51cfc157-7bb5-48d7-ac72-24e683f91193"
        },
        "item": {
          "id": "2b44656c-4e59-43b9-af96-7d16de7eb375",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "516d754d-8276-4faa-9038-fcb40b2b825d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "dce2db28-e7bf-4b3b-9822-6cb0fd4507fd",
        "cursor": {
          "ref": "03d484dc-45f4-4d90-858d-57428b6b69d1",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f9d38b8c-0aaa-421e-8061-8c2f12fb08d6"
        },
        "item": {
          "id": "dce2db28-e7bf-4b3b-9822-6cb0fd4507fd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b0e86366-ec2c-4465-9215-acae4fe24257",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "0ffdffea-91d9-4f49-8cf9-f39ead923da8",
        "cursor": {
          "ref": "077fcfd3-f77b-4ae9-9c1e-6df3e4b13c2b",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5ac42f0a-a3c9-4674-badc-1b5222fc1199"
        },
        "item": {
          "id": "0ffdffea-91d9-4f49-8cf9-f39ead923da8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d0dc096f-dfd1-4da7-b269-22791f2aec3c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "2a2b8456-4a26-4e06-8014-1872fc21bb27",
        "cursor": {
          "ref": "c4b3f6c9-9c6d-4d76-930e-21e0456cfc01",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4e113091-c779-467a-a35d-cad40918c652"
        },
        "item": {
          "id": "2a2b8456-4a26-4e06-8014-1872fc21bb27",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38917add-0ef7-4feb-81f4-df4861f9039a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "816bd25b-223c-41a2-bdb7-3f8c5050d3ca",
        "cursor": {
          "ref": "e2667d67-e6f5-4f32-809f-3eab831e56bc",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f2dae132-c1ff-4693-9e2c-c8dcc08fe65b"
        },
        "item": {
          "id": "816bd25b-223c-41a2-bdb7-3f8c5050d3ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f8298e05-ce61-4597-94ce-81f8d317d5b2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "b3586221-a6e0-4766-bb10-afe4a5598d25",
        "cursor": {
          "ref": "51505c04-914f-4cc7-a689-6d836f055376",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "40d6d255-2cce-45fa-87e0-beb18e7bb2ab"
        },
        "item": {
          "id": "b3586221-a6e0-4766-bb10-afe4a5598d25",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "467450ae-7dd3-462e-9993-2f07b7497a78",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "3c0f7cb6-9ca6-4ea9-a7a1-3732a82919c4",
        "cursor": {
          "ref": "e3e3803a-cf3b-4c1e-9221-a3732868b9f8",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c5d78a62-73e4-4c16-b62f-a51e8fdfe0c2"
        },
        "item": {
          "id": "3c0f7cb6-9ca6-4ea9-a7a1-3732a82919c4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "32790710-e5e3-4317-8667-b4e5a9ac1140",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "b8ce6654-c47c-4a42-8770-91831b6ca68f",
        "cursor": {
          "ref": "2d09cf02-b92c-4fd3-a0eb-31df5b6004d5",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "44f08242-28b6-4f1b-892a-715a287b7b26"
        },
        "item": {
          "id": "b8ce6654-c47c-4a42-8770-91831b6ca68f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "80e60a57-3324-480c-a230-db83be87ec80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c75e6334-4f7f-4837-bb26-ed15c6c48f5b",
        "cursor": {
          "ref": "0da73f5f-6977-4ffc-af61-7416dddc3da1",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b254dd44-03e3-4540-b3d5-3133cdcd2b41"
        },
        "item": {
          "id": "c75e6334-4f7f-4837-bb26-ed15c6c48f5b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c54e9317-e67d-44a1-8741-c5da56e43ce4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "1e758f3e-baaa-45e5-9d65-5743d0437160",
        "cursor": {
          "ref": "17387618-a126-431f-8c4b-2b538e862889",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "47dbf553-c3ce-4afb-9157-ed664994c244"
        },
        "item": {
          "id": "1e758f3e-baaa-45e5-9d65-5743d0437160",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "540c789b-e616-423c-a6ee-0840476e9f23",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "8859ef78-5551-4032-982b-a03efbb17b79",
        "cursor": {
          "ref": "991712ac-3a86-4791-bbeb-d14f7ade1648",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d5ea4207-353e-4ac8-b508-01268c7141c8"
        },
        "item": {
          "id": "8859ef78-5551-4032-982b-a03efbb17b79",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5daac68c-b1e9-4c49-a571-f5bcf71cd23d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "911e30ca-0fc8-4b87-a13d-2fe2ec7026c0",
        "cursor": {
          "ref": "7eaab47f-df62-4b2e-8feb-6f52530898d1",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "934f22d6-b81c-441f-a3a0-b4ba4995f588"
        },
        "item": {
          "id": "911e30ca-0fc8-4b87-a13d-2fe2ec7026c0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bea437d4-f708-4048-b918-3999b820adc1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "cdd30b04-8986-4cb0-8203-9daf4d30cfda",
        "cursor": {
          "ref": "bee63f9d-e49b-400d-a203-196d51da6f4f",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "531f052a-508b-46e8-8ade-24a672dab9f6"
        },
        "item": {
          "id": "cdd30b04-8986-4cb0-8203-9daf4d30cfda",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "24a3caed-ac30-4498-adfe-ad286a93a3e4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "824bb134-1305-4006-8428-134ad87ae6ac",
        "cursor": {
          "ref": "c59874aa-597e-41ab-b423-8e3c5add64ea",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2a9d814a-9955-4d13-b8f9-27ec5dec2efb"
        },
        "item": {
          "id": "824bb134-1305-4006-8428-134ad87ae6ac",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dea7b3da-2460-488b-8a5c-43967644b0aa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "840985fb-a104-49fa-a60d-30a3b2105c10",
        "cursor": {
          "ref": "e8948e88-0595-454b-9797-94bd73c5c353",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c8e97e39-c791-4a71-bf41-bfc9a6374138"
        },
        "item": {
          "id": "840985fb-a104-49fa-a60d-30a3b2105c10",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6ae21fd1-1fe6-45f5-958d-92e6ca4f3528",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "386cc8f0-59a4-4228-9cd6-b379c157969f",
        "cursor": {
          "ref": "80439bfd-8a03-45da-a3bb-fde67cb1918f",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "232b5015-1f36-4450-a12f-bb14a6786dde"
        },
        "item": {
          "id": "386cc8f0-59a4-4228-9cd6-b379c157969f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "751ef048-a17b-4e4d-9cdd-32651434a5d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "8f8bedb9-9f1b-496f-bab0-e713052ed87e",
        "cursor": {
          "ref": "82c0e889-3ef7-4362-b21c-0fc70ba907b8",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "18d98c81-cf82-4f41-b9e9-6739063341aa"
        },
        "item": {
          "id": "8f8bedb9-9f1b-496f-bab0-e713052ed87e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5ab46b53-848a-456d-9d4b-c5ea44d41767",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "c95fbb59-9653-4016-8f3c-ba467a27c584",
        "cursor": {
          "ref": "e72f57ee-7814-4113-9941-995df3fa20bb",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2a0e8272-e7ce-4a73-a4e5-52618d679dd8"
        },
        "item": {
          "id": "c95fbb59-9653-4016-8f3c-ba467a27c584",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4db9b2f2-c4db-4eec-98f1-76ac7ba3e32f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8003a6ea-96d7-4315-bca3-d674e07b464d",
        "cursor": {
          "ref": "ffe2fa93-326e-4ff2-ab3c-d3fce1b657b3",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73e54711-9b9e-4577-b9a0-b5953c279e8f"
        },
        "item": {
          "id": "8003a6ea-96d7-4315-bca3-d674e07b464d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ffdb23ed-1eff-44e2-9929-772eb73d2064",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "be2cd8e6-d29b-41bb-ba3b-d42ec0598426",
        "cursor": {
          "ref": "7d1371cc-a3f9-454b-85c9-19237c3e772d",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "44bd7aa3-0883-4478-bedd-a2f7f61461b2"
        },
        "item": {
          "id": "be2cd8e6-d29b-41bb-ba3b-d42ec0598426",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6f1cf072-af72-45c6-8a30-2a3303a5c104",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "080de5ba-c250-4118-b12e-24c9b28cc4be",
        "cursor": {
          "ref": "350cf35f-c0de-4a2f-a675-8830f5b40b6f",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5aa6547c-8780-4268-81f5-e9ffc51a5f7c"
        },
        "item": {
          "id": "080de5ba-c250-4118-b12e-24c9b28cc4be",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ed6fad27-ee7b-4697-997f-a29575235167",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "758a1c80-6c1d-4821-8ad4-a32fdab518f0",
        "cursor": {
          "ref": "5f6afca3-64e5-4b65-9e31-a92f42e168cf",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "88a6fd15-809d-4681-ad2c-3d42f27c7858"
        },
        "item": {
          "id": "758a1c80-6c1d-4821-8ad4-a32fdab518f0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4dbb1895-e464-4d79-9c19-d6a4dee2829b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "4a4c595e-8618-4f7f-8cef-7bf0c36e5000",
        "cursor": {
          "ref": "2d9e2b4f-0760-4d51-978a-9718b25f21de",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3ee4a2f1-e82c-40b8-ab09-a57f55dfcc69"
        },
        "item": {
          "id": "4a4c595e-8618-4f7f-8cef-7bf0c36e5000",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4f4de2df-861a-4255-bead-2b33ec423574",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "96e9d7a3-d74d-4046-bc0c-e7e4e220a167",
        "cursor": {
          "ref": "5afb5508-60ec-4614-abde-e6077d72d342",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d134f662-df46-4bb6-823c-a50d58ff704f"
        },
        "item": {
          "id": "96e9d7a3-d74d-4046-bc0c-e7e4e220a167",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "658824d3-88f6-4f9f-b003-92f6013f1bdc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ba59843b-1d15-45ab-9aa6-4393146348b4",
        "cursor": {
          "ref": "310876a5-dc18-4c2b-a7e0-bf70d6b18b46",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a64c5d80-df89-40ea-a7fa-5b4b28933c09"
        },
        "item": {
          "id": "ba59843b-1d15-45ab-9aa6-4393146348b4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "995437eb-919d-4a2b-8250-313dff398799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "608d07ea-a142-4516-a910-e9a87c77ac31",
        "cursor": {
          "ref": "249e3286-470f-40e7-b3e8-fffe9ff31e8d",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ba51915d-56a1-4566-b761-6b68d68fa03d"
        },
        "item": {
          "id": "608d07ea-a142-4516-a910-e9a87c77ac31",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a6bf87e7-d6cc-4b91-aa02-7ea65405a7a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "1e24ee30-9329-483e-b886-b1086bc2a2f5",
        "cursor": {
          "ref": "c62da497-5955-493d-a8aa-f16341f268a5",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d6b39fab-3d41-4ca5-bee5-381a6af1a2a3"
        },
        "item": {
          "id": "1e24ee30-9329-483e-b886-b1086bc2a2f5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0f5cf14a-66f2-4255-a2ca-40740f805ae6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "61231a0f-5693-417d-a00e-691edf31d538",
        "cursor": {
          "ref": "526147de-b93a-463b-a714-338cff2e5d7b",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bcf285d1-c5bb-46d7-9089-558fc86a95f4"
        },
        "item": {
          "id": "61231a0f-5693-417d-a00e-691edf31d538",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "43966f3c-3c0b-451f-9a19-76ea0635ce10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e7d7b290-6023-4c6a-866b-efbd2882457d",
        "cursor": {
          "ref": "a4f75f5b-674b-476f-97f3-19e496b4bbe4",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c0d499fc-4f57-4a73-91c4-872134571a87"
        },
        "item": {
          "id": "e7d7b290-6023-4c6a-866b-efbd2882457d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5263ff9b-f84c-4c1b-9557-0dd10500e4bd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "378a4d23-1930-4007-9d9e-5c68daa1f83d",
        "cursor": {
          "ref": "bea575d3-9645-4a30-9dcf-4eacdb896dfb",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "34ecc06c-1ed3-4344-912a-a5a4714debf4"
        },
        "item": {
          "id": "378a4d23-1930-4007-9d9e-5c68daa1f83d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4a730fe0-05ca-47ec-8899-526778300e5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d3ef4828-4794-4c4c-b94f-1cac014f8702",
        "cursor": {
          "ref": "93b72189-105d-40d2-a81c-b99a0a7ac98e",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5a88c3af-92fa-416a-8b5e-75fe94e11308"
        },
        "item": {
          "id": "d3ef4828-4794-4c4c-b94f-1cac014f8702",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a704bdde-8c43-44ba-b1a7-33c6dd6ff3f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b001490c-e845-4b5c-ab27-1dc6249df409",
        "cursor": {
          "ref": "9a3ba408-ea4f-41b4-bc96-8d104eaa846b",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3ff6ba18-fe48-4ec7-b6c6-7111e30bfb95"
        },
        "item": {
          "id": "b001490c-e845-4b5c-ab27-1dc6249df409",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f4534ecb-419a-4bfe-8d22-79d3bcc92712",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "3a6108a3-e0a4-46bb-ba84-09feb3febac5",
        "cursor": {
          "ref": "67cebbec-5f46-4657-98f7-a6bcd2e1bb7a",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "26d867d3-4638-4bc3-9790-99cdfe9d9171"
        },
        "item": {
          "id": "3a6108a3-e0a4-46bb-ba84-09feb3febac5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e77698a2-ea66-44c7-87cb-d346c8372448",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6ba48439-ccc4-41f2-a077-f44b87aa969d",
        "cursor": {
          "ref": "2f7e6a93-3151-4603-9893-21eecc23cc7e",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "eb041dcd-9958-4226-b4e9-5694e41271ca"
        },
        "item": {
          "id": "6ba48439-ccc4-41f2-a077-f44b87aa969d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3d2d1ab2-8b58-4efd-b1fa-55a08116e893",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "69eb60ec-6958-4cf5-9fd5-8980c45e2f77",
        "cursor": {
          "ref": "b6417a98-7cca-4582-85cb-89bcc97ca0c2",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "520251a1-4faa-4bdb-8cc8-2192d41ce779"
        },
        "item": {
          "id": "69eb60ec-6958-4cf5-9fd5-8980c45e2f77",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "767b3d12-6f23-47c2-b543-69e1ef98b97f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c0f9b78f-86e1-4ef6-a6a8-7cb028bbbbb7",
        "cursor": {
          "ref": "51b09855-2a9c-443e-998d-f3461499f292",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2c54bb51-2cfb-4b0b-a42c-228f94fb2b1b"
        },
        "item": {
          "id": "c0f9b78f-86e1-4ef6-a6a8-7cb028bbbbb7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74029804-65f1-4f8f-a157-0b896abbfa79",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c82d8993-4fa0-4d93-8426-07bae563c39b",
        "cursor": {
          "ref": "16ed8128-3980-4266-8cb4-3a890834064e",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3a707eef-7db3-4491-8d70-5f02c795cefe"
        },
        "item": {
          "id": "c82d8993-4fa0-4d93-8426-07bae563c39b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ff5df87-effa-4cb5-b62b-8d846d85fa43",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "db081514-a672-4f76-8aad-d2b556117af5",
        "cursor": {
          "ref": "a34f6f85-98c8-4645-91d1-0e6f5d7792d0",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "35f302f9-57d9-412a-9cc4-438c8fad140a"
        },
        "item": {
          "id": "db081514-a672-4f76-8aad-d2b556117af5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eba7a6a0-9068-4330-9c2b-eca2e4e413a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "dbd1b3c2-edb8-4b4c-ac1a-bdecdfe68c64",
        "cursor": {
          "ref": "5f704476-013d-457e-a5ec-319959ea9199",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1ce98eb8-64bc-4cc5-9afa-e1059f6f3f68"
        },
        "item": {
          "id": "dbd1b3c2-edb8-4b4c-ac1a-bdecdfe68c64",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "64d49456-cee2-4d08-804e-779fd953c025",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "c87f5285-efa0-419e-9960-500797d772db",
        "cursor": {
          "ref": "cecac4d5-077a-4b7e-838a-8d4628300b6c",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "21446153-91e7-4720-a9f0-d99e772dfd55"
        },
        "item": {
          "id": "c87f5285-efa0-419e-9960-500797d772db",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ca28cf03-aac0-47ef-a1b7-1ec4e187bc3e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "aea06139-b76e-44d1-a8e0-e2bb3c33d98c",
        "cursor": {
          "ref": "f27154fe-41b2-46cf-b5b9-29ae61debc79",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1a4cb8b4-4391-45b6-962c-957f38dc228d"
        },
        "item": {
          "id": "aea06139-b76e-44d1-a8e0-e2bb3c33d98c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4b13ddcb-65fd-4492-9966-a4bbd23d74f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "21710444-06fc-4c16-bd6a-3bace8107bcc",
        "cursor": {
          "ref": "8c83c92b-3ceb-4473-9e8c-7f075867035f",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4e46eff8-4d0c-4484-97fa-52c180152b76"
        },
        "item": {
          "id": "21710444-06fc-4c16-bd6a-3bace8107bcc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6fceb544-14dd-4fd7-b6b0-507901d78c7f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "ab78c81f-1215-4b45-ba66-259604922432",
        "cursor": {
          "ref": "7c83288d-770a-4abd-87e6-0160f75d121c",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4e4be9d-9cff-4a42-b28a-39ce13d57cfd"
        },
        "item": {
          "id": "ab78c81f-1215-4b45-ba66-259604922432",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8038d086-a91d-40ae-9783-21c0b6da99f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "39f139f7-3620-4dbc-8968-9aaffc50d742",
        "cursor": {
          "ref": "8484c515-7193-4eb9-8d3f-329f67f74e79",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "75237a1d-58ba-4710-a8cd-ccbf523b3974"
        },
        "item": {
          "id": "39f139f7-3620-4dbc-8968-9aaffc50d742",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0def4d9d-2159-4ded-95dc-4b36fd0ae990",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d56ec975-23a2-4a8e-a0dd-939b0e6aae09",
        "cursor": {
          "ref": "c2c3b7a9-5546-4940-9cf7-8d2af2947754",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "09c6325a-d9a5-420a-9f8f-805a0ca3608d"
        },
        "item": {
          "id": "d56ec975-23a2-4a8e-a0dd-939b0e6aae09",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4135c3b9-46c9-442c-a6d9-68908171ac27",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "7fce5cbe-fdfe-4f2d-9383-a0fdc0edb7db",
        "cursor": {
          "ref": "237fae84-ccf9-4335-ab85-ddfbc86fd9b8",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "07b2415a-9de5-4033-8147-fafe057bdaa8"
        },
        "item": {
          "id": "7fce5cbe-fdfe-4f2d-9383-a0fdc0edb7db",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ac329fee-be50-4159-bb9b-4a083cbc43bb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "cc7adc0b-aaf9-41d1-b8c1-94f17193e6db",
        "cursor": {
          "ref": "3c1d2555-9705-4215-9af4-d6410d3ab8db",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "20ef2609-448e-496f-98fc-2cc1a0276acc"
        },
        "item": {
          "id": "cc7adc0b-aaf9-41d1-b8c1-94f17193e6db",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9bdc2484-9242-4759-9ad2-1182382a6cc1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "437d8c2e-b77c-4569-91fb-5b616d26879a",
        "cursor": {
          "ref": "3c042ca7-eaa5-4ab9-8389-68311f163603",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b8631e59-18a7-433a-ac2c-da27d52fb4fb"
        },
        "item": {
          "id": "437d8c2e-b77c-4569-91fb-5b616d26879a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bd157261-1f5c-409e-9702-dd49e2441757",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "32c7fb58-2e34-4725-aadd-4eff8e4d5673",
        "cursor": {
          "ref": "3d541472-b3f9-4d92-8e39-80fa488341eb",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "27477bd7-02a8-4545-ac1a-5be7210510d2"
        },
        "item": {
          "id": "32c7fb58-2e34-4725-aadd-4eff8e4d5673",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c1c338cb-2111-48b6-b6a2-305d56da2cdd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 200,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "0c127c4b-f0df-44da-8e12-74b69101b745",
        "cursor": {
          "ref": "e96f0bbc-6310-453a-a089-3585e396bb26",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d1a5a24f-8300-4a60-96e5-67c0a05426ee"
        },
        "item": {
          "id": "0c127c4b-f0df-44da-8e12-74b69101b745",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9747be65-ea46-4478-a7b6-76589af69d33",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "718f256f-64a2-4e5c-b8b8-6b64068775da",
        "cursor": {
          "ref": "b6e9ea40-299c-4680-ac4b-725a438e9413",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7affb64c-cb0c-44b1-ae0a-4524f85d1b2d"
        },
        "item": {
          "id": "718f256f-64a2-4e5c-b8b8-6b64068775da",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e53387ce-e657-48ce-9cf4-a0d735030e15",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "682b4d2b-8a97-4ea2-9175-1ff502ce53ee",
        "cursor": {
          "ref": "577397c8-e311-4f70-969e-f5ddeeb71661",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eaf0cf78-c806-447f-9f59-e9e243d1ed22"
        },
        "item": {
          "id": "682b4d2b-8a97-4ea2-9175-1ff502ce53ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c814ef7c-f88f-434f-a151-8e00b0b60367",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ffc31d96-08d1-4bc4-91a3-08e671425f94",
        "cursor": {
          "ref": "dc51db74-018d-49e4-a7b2-ec0fcf1fdea6",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "93d30a4a-36d1-4339-b540-6a0627098ef1"
        },
        "item": {
          "id": "ffc31d96-08d1-4bc4-91a3-08e671425f94",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b10af7b-2728-4244-8b67-0830bb47c070",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e4c6c632-45c5-4ce2-b44f-88f5effc928f",
        "cursor": {
          "ref": "33332154-7572-445d-9e6c-305c814a1155",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0fcce09a-dd53-4445-994c-26cc99aa3f82"
        },
        "item": {
          "id": "e4c6c632-45c5-4ce2-b44f-88f5effc928f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "50798bfb-a50f-41fa-97d9-c6949dc416fa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fdcd085a-2f4a-4f21-aaf3-286d4ae5eda5",
        "cursor": {
          "ref": "18931dea-0fc6-4e55-983a-37c97ff52772",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "808ff20c-4098-4d15-9058-88d88adf838a"
        },
        "item": {
          "id": "fdcd085a-2f4a-4f21-aaf3-286d4ae5eda5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "86bdb8e6-5001-4e2f-9ec3-496f470cab15",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "206994e2-aeec-4750-927d-c10c1d579ebf",
        "cursor": {
          "ref": "dea39b8c-ec15-437d-98f5-598471a66ba1",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7e83718-cf4d-492c-8a58-3533854d8eec"
        },
        "item": {
          "id": "206994e2-aeec-4750-927d-c10c1d579ebf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ee3f221e-bb01-4d63-b534-24ce603e4e8d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b03c3594-1792-4317-ba79-1fc9f82f8d06",
        "cursor": {
          "ref": "2fb97ab3-f5b9-4634-9674-e52795efba50",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5874c6d5-7914-49cf-9206-1b9d23517a55"
        },
        "item": {
          "id": "b03c3594-1792-4317-ba79-1fc9f82f8d06",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c5e1f11e-50c7-4c13-9a51-2901ecfa4301",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "72c990a3-2749-48f9-9e4f-c6a81a5dbe9b",
        "cursor": {
          "ref": "38cde5d1-7559-45f7-ba6d-19e93cb62d15",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "90e9ec48-f6e0-495a-ade7-2be8c412e224"
        },
        "item": {
          "id": "72c990a3-2749-48f9-9e4f-c6a81a5dbe9b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "63add866-4280-4f3b-83ff-dae6240f014c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "858e4dca-260d-4a09-8fc9-fb1ae56bf061",
        "cursor": {
          "ref": "f3788cec-e800-4aa1-83b6-9dd092fb5eb5",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f595734f-ea3c-4792-ad3a-b97d74e7dc09"
        },
        "item": {
          "id": "858e4dca-260d-4a09-8fc9-fb1ae56bf061",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b91471b0-e5e8-4805-b7f7-0a0883dd0ebd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "06be8f0b-9254-4161-9a5f-1d41ddea3e1c",
        "cursor": {
          "ref": "d23cb077-cd13-4e50-b577-ab9d10fe3197",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7d2b802d-f963-4cf8-982b-74f8fa3b93e4"
        },
        "item": {
          "id": "06be8f0b-9254-4161-9a5f-1d41ddea3e1c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1ca60b93-d674-4261-81d2-399c46dd6d27",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "fd6a353c-069f-4e08-a663-38d7aef4bff1",
        "cursor": {
          "ref": "22f82f3f-73ce-4a09-a23d-9bfadaa57571",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8a968ad9-3004-415a-a35f-44b18a76fd2e"
        },
        "item": {
          "id": "fd6a353c-069f-4e08-a663-38d7aef4bff1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7e7f28c7-96f0-40a4-98a9-6ef65c927806",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "dff64912-4905-4076-973d-9916b1af3b3a",
        "cursor": {
          "ref": "13f5ca79-73cc-4cc6-b440-7aa452c804ee",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "15dbf927-4e38-4517-86b2-f7e6e9c176fc"
        },
        "item": {
          "id": "dff64912-4905-4076-973d-9916b1af3b3a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "585f8a97-8733-468a-8034-ec6d8a03d6b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e3def78b-3ad2-404b-8fd5-3cbd12f2c863",
        "cursor": {
          "ref": "cf5fe4f6-3db6-47ed-b72c-0741d04da193",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f3c2b1ea-6651-4dcb-98f6-c7d5b6abae23"
        },
        "item": {
          "id": "e3def78b-3ad2-404b-8fd5-3cbd12f2c863",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3944e328-44fb-4890-98b2-c90bd88cc0cf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "36341e26-6512-41d9-ac27-4667c8665bf5",
        "cursor": {
          "ref": "9945e673-1c4c-4f26-9df5-8a5b6b5c37cb",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b693b4e9-1219-4d00-9600-6efbaa90c090"
        },
        "item": {
          "id": "36341e26-6512-41d9-ac27-4667c8665bf5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b8ee0197-8bc2-410f-972e-0dbdff083fe8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b684ecf7-f0d3-4eaf-9185-e8eae1308ec6",
        "cursor": {
          "ref": "2c821281-9fc9-4732-a8f6-4409131bf7fc",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e6f92260-acd1-486f-a42d-616c6329dcdf"
        },
        "item": {
          "id": "b684ecf7-f0d3-4eaf-9185-e8eae1308ec6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8b188f38-ed32-44b4-9834-3da32cb4dc88",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "75f7c275-61db-452c-9e4f-91bd8933ac3f",
        "cursor": {
          "ref": "c76dff11-d4cb-414f-ad20-6d0c62c947da",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e6a649c2-b322-4784-b9c3-8673be6b3106"
        },
        "item": {
          "id": "75f7c275-61db-452c-9e4f-91bd8933ac3f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4242f4fb-34e9-4ea5-a323-0a213bb50701",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9bffd8e2-cc5c-4c81-9977-b0b1ffe39cd9",
        "cursor": {
          "ref": "a2311b5f-c249-41a3-9306-19a695c35859",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d21cebfa-f5fd-4ac0-86a3-348d31dd2db1"
        },
        "item": {
          "id": "9bffd8e2-cc5c-4c81-9977-b0b1ffe39cd9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8f4ee378-6adf-4413-b961-039c3b3ed4e0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "40d5be70-b6d8-42e0-9dd8-58a921e42c99",
        "cursor": {
          "ref": "9fe7a5c7-b06e-4aa2-8b6a-b811f01efe79",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "93d7459f-fd78-4d67-9330-2a24ca9d7a65"
        },
        "item": {
          "id": "40d5be70-b6d8-42e0-9dd8-58a921e42c99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c80ef27e-4b87-4bfe-8cfb-64c57ca41376",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "82090c4d-88a4-4c97-953b-4c3a9517f9b0",
        "cursor": {
          "ref": "65e29a4b-0c46-4617-aa8e-e11525ca5ea4",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2039c270-0082-4f15-8385-4ab97d10bcea"
        },
        "item": {
          "id": "82090c4d-88a4-4c97-953b-4c3a9517f9b0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "223d21a8-98c3-496e-b4a7-492df0b04c36",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b0742c3d-3c39-451d-9ccf-f3d7f2f2b679",
        "cursor": {
          "ref": "71b2a57f-3fc7-427d-919d-65ea1c6fee8c",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f0ca537a-67d8-47bc-89ce-2b504550b004"
        },
        "item": {
          "id": "b0742c3d-3c39-451d-9ccf-f3d7f2f2b679",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ee6319f5-78df-40a2-9d78-685097ea348d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "06395ad8-d3ab-4056-b307-30173bffe4f0",
        "cursor": {
          "ref": "c82defbd-6fc0-4264-923b-79bfa1f8da3a",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "86751dc4-1ba7-425c-8c70-678ce9600fdb"
        },
        "item": {
          "id": "06395ad8-d3ab-4056-b307-30173bffe4f0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "075e8280-c9fa-4562-ac78-6dc132192343",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9eff6247-8018-4201-9b97-a3aeda080f16",
        "cursor": {
          "ref": "540b0b1b-729e-4d0c-b2d7-e846abb0355f",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d42efca9-94c7-4eb4-9746-18fb72e17a2c"
        },
        "item": {
          "id": "9eff6247-8018-4201-9b97-a3aeda080f16",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "942f209f-25f0-4ca9-a7e0-7460b722c585",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "d15ba295-ef29-4e6c-9cdf-ee43504e764c",
        "cursor": {
          "ref": "3e265ddb-8579-4ff6-b51d-d572ae845d56",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d1f74c5-450c-47a4-a98f-0dafc139c128"
        },
        "item": {
          "id": "d15ba295-ef29-4e6c-9cdf-ee43504e764c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f666dca3-09b2-4a7a-b2c8-846254fb7640",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "682ab58f-3a0f-49f9-a2de-9a1e7a003046",
        "cursor": {
          "ref": "b9de6ad8-7af8-4073-82c1-34ae88acf6f5",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bfa11ff2-4f6b-411f-b9cb-82d7dc1a9cd4"
        },
        "item": {
          "id": "682ab58f-3a0f-49f9-a2de-9a1e7a003046",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d15028c-61d1-4924-aab8-93d6eac44418",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "459b5f8e-af4e-4ac1-a5a2-963ae093f261",
        "cursor": {
          "ref": "7dcff137-06b0-42d4-9fc6-a243b43c7996",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bda81d74-71fd-4ce2-8423-5cee1e80f1ad"
        },
        "item": {
          "id": "459b5f8e-af4e-4ac1-a5a2-963ae093f261",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "40be2074-da69-421c-8009-02508c661df8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "9e916dd7-9d4c-4dec-8fdd-f3f67ffedf65",
        "cursor": {
          "ref": "b47866a1-1de8-401b-ab3b-1fd9b9671dc2",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "50fdf8d3-e788-43b5-8656-79d9e2c54d5d"
        },
        "item": {
          "id": "9e916dd7-9d4c-4dec-8fdd-f3f67ffedf65",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f2d38de2-940d-4d8b-bd12-56cb27950276",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a7a591ed-7225-4529-a938-e4987dbe974c",
        "cursor": {
          "ref": "256a985a-f31c-44f8-b1b7-fe31247d421e",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5fa2e51a-6494-49d8-9679-dd2d98d2364e"
        },
        "item": {
          "id": "a7a591ed-7225-4529-a938-e4987dbe974c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d6b025d4-201f-4434-b4b0-0a8ba00c0361",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "befc7b4b-3652-4e3f-8e89-7f70df069036",
        "cursor": {
          "ref": "92af4435-aa1a-4e90-b94f-46aa2d7a437d",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fb25ffdf-cb72-4435-8c7e-b80085f30ed3"
        },
        "item": {
          "id": "befc7b4b-3652-4e3f-8e89-7f70df069036",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e2aa93ca-a0d1-4093-9cf9-b1899ea81659",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "0862ceef-1c83-4531-9826-fae9ef8eb71d",
        "cursor": {
          "ref": "c273b413-e0e3-4863-ad1f-e25b378b8afa",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c0f452ce-8b4d-4208-afa0-c57f335551f6"
        },
        "item": {
          "id": "0862ceef-1c83-4531-9826-fae9ef8eb71d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b56a05d4-f51b-4e38-906a-e08639c423f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "4549f20d-8d01-448c-a2c2-28acd24feea0",
        "cursor": {
          "ref": "db2d306e-464d-45c9-a089-01687223c583",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "81f6bebe-1b99-4b5b-a018-d62f25f1d857"
        },
        "item": {
          "id": "4549f20d-8d01-448c-a2c2-28acd24feea0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e3670f7c-3120-49b9-a6fc-e848abc4a631",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0f3866a8-ea03-40c8-a5cf-bf3a6f2694ce",
        "cursor": {
          "ref": "fed08798-b76a-4098-84eb-5a29818e7e73",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e4aa96e4-13bc-4748-bcdb-9f1c44440b1e"
        },
        "item": {
          "id": "0f3866a8-ea03-40c8-a5cf-bf3a6f2694ce",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dd0f75be-9ca2-4707-8342-6b74e49a4e5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "dd672983-31d0-46e1-9f5e-d679d6409901",
        "cursor": {
          "ref": "11beab54-23c8-4d2b-b30a-f0547454d0a0",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2aea9ce0-7472-48c4-b393-7d75a24002b3"
        },
        "item": {
          "id": "dd672983-31d0-46e1-9f5e-d679d6409901",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1b7cdb19-a5b4-4807-833b-024cae4e0875",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6f6a3b79-eb61-49ff-9ad2-69901b78bbbc",
        "cursor": {
          "ref": "b5bb0eaf-6a24-4a97-9e57-f4d2864367a8",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "747ea7cd-b50c-4804-b102-579e200748dd"
        },
        "item": {
          "id": "6f6a3b79-eb61-49ff-9ad2-69901b78bbbc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a7bf19f6-e0f7-42c5-970c-7ecdd0bfde76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b02a5804-fdee-481e-92e8-27b84befab21",
        "cursor": {
          "ref": "bf9f7202-97ff-4ca9-87f0-376575cc4857",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c18d1236-082d-4a1d-8196-35ddab173828"
        },
        "item": {
          "id": "b02a5804-fdee-481e-92e8-27b84befab21",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9482f407-9ed1-4a2e-85ec-027a6b1b6935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30532896-3dab-498d-84b0-831fc5f68bf2",
        "cursor": {
          "ref": "ab63c5a8-ebb4-42b3-9d9d-622301f9723e",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5a42ba67-250d-4d13-9b1a-402c1bf3bdf6"
        },
        "item": {
          "id": "30532896-3dab-498d-84b0-831fc5f68bf2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "00bb505a-ea83-42fa-b347-847fdfd42248",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "bd5eead5-33c1-431f-bc94-21043ed91bd8",
        "cursor": {
          "ref": "40b1196c-c036-4c0f-845e-85fa9ddd8cac",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b2291fb9-5196-4c0f-ae79-08284ff73314"
        },
        "item": {
          "id": "bd5eead5-33c1-431f-bc94-21043ed91bd8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "36156d31-78c1-477b-a233-ab26b07c8484",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "fd757247-df3d-4bc8-8b67-fe972713d1fc",
        "cursor": {
          "ref": "6ef7b3dd-ba81-498f-a2f7-1803af2370be",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bc33eb51-2c6c-4617-bf6e-75033243f7e0"
        },
        "item": {
          "id": "fd757247-df3d-4bc8-8b67-fe972713d1fc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "473d250e-cd1a-4baf-80cd-458dd9893be7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "6fd0ba6f-3611-440a-96b8-665b305f98cd",
        "cursor": {
          "ref": "8fa10269-4eff-481d-b326-1e8548428c94",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "abfe7a02-f5cc-4ea5-a64f-eaa7edabb155"
        },
        "item": {
          "id": "6fd0ba6f-3611-440a-96b8-665b305f98cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dbf1cab6-afd6-46bf-b0f6-86e798d87370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd0ba6f-3611-440a-96b8-665b305f98cd",
        "cursor": {
          "ref": "8fa10269-4eff-481d-b326-1e8548428c94",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "abfe7a02-f5cc-4ea5-a64f-eaa7edabb155"
        },
        "item": {
          "id": "6fd0ba6f-3611-440a-96b8-665b305f98cd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dbf1cab6-afd6-46bf-b0f6-86e798d87370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ebf14f-508b-4e48-98dc-533b048fb275",
        "cursor": {
          "ref": "cc8b26e5-830f-4ea8-a257-ab06cffd9412",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ad336fa1-4f78-42ed-ad49-435c51917eb2"
        },
        "item": {
          "id": "71ebf14f-508b-4e48-98dc-533b048fb275",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a01a6aaf-dc5b-419b-a694-3d3085714c86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b0ba4b-649c-4cfd-ba05-4c44479af7a2",
        "cursor": {
          "ref": "455159fa-e5f7-43a2-b672-fa48addb72e9",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fedcf722-a64e-4bed-977d-c0bbb8290f5b"
        },
        "item": {
          "id": "f3b0ba4b-649c-4cfd-ba05-4c44479af7a2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2ddf6dbd-8fcb-4915-8a1d-dfc46fa0001c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}