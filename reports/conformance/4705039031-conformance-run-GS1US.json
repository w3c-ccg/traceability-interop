{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3ff9a11e-1e9e-4e43-8fb2-aeada3faf75c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7572301b-6f7f-48a8-90f9-a3dd006e2401",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8088dce-b3ee-4450-9f07-c3e190274dd5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6a7af0fc-9ab7-4ed7-8cf8-0f02439cfdee"
                }
              }
            ]
          },
          {
            "id": "f53ff0c4-cb7d-4df9-ae5a-c3f13d6cd085",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6cfbf1a9-8fe7-4192-ac9e-43340b1f4262",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35f8a0f3-48f8-43df-833e-2d17fc25c9b2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "670758e9-c893-440f-9505-ad05d7e471fa",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e5ac83f7-42b4-4473-9c1d-26dad5502a0e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d312249f-35af-435c-b8be-8a7d6434d6c9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e26d7ddf-39d3-4d10-bb09-0a841e3ba83f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93cce893-0725-4d4f-8b79-0fe11a3722f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32280479-6b60-4503-94c1-460f7639e15a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "777b01db-7304-4380-bf07-e2edde6c4426"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd9b6249-9482-4bc4-90ef-102c408085a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "760f90fa-9aee-4eda-aeec-66a491958e44"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecd3620d-2566-41ae-a935-71161381b450",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "230853f7-72ce-4700-ad40-3214ab1d4e35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a0865c1-f000-4c3b-94dd-ca1a5bc5dfdb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "459473bc-7ce3-4f29-907a-cf0be21a1cfd"
            }
          }
        ]
      },
      {
        "id": "96042355-5d47-4919-a5f0-974925f56dd6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f59f6c2d-399e-4cb1-8575-a2a53c321bd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f742d63-7eda-4f28-9ee7-bde4ec396002",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fd267429-c610-4f06-8993-a2af1ae6c7df",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9821e9e-16cb-4a7b-ba34-bfb553633c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cc16256-04c8-4be5-b833-0023f518002b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5680751-3aa6-4e81-b32c-94b07a1d3152",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9048e6-9d8b-48a6-9e25-7bf90a7e9723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5b7ced0-a322-4ee7-be86-ad0eb881b870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57c05cc-30aa-4d3e-b7eb-f6dfed0a1582",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e6c537-9d0a-4da6-a33f-7eef61c3d7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8aac78a-998b-471e-b32c-0c4cee02fee4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d696af90-1816-4d4c-99df-6d3801d0f427",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c59d6469-eb32-4566-82d5-3f0acecce9f4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c33ac7-d34d-498a-9bbd-88395265e84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18fc54d6-b1c9-457a-a54e-c64c57db1b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00e3d6d-57ec-4af5-97db-7f552c3eafa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c66b13-7479-41d5-b451-8180a3702968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ca1d23-c150-4677-baed-6436b78cb90e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af999e7d-912d-47b1-aede-42a33b1ce48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c9b1039-13f6-487d-ba33-7e9f7b836844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c777b46a-78ca-4f00-aeca-949e97c8a8e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b3bb349f-5ca8-4592-aa0c-449f8810a838"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "582c9439-c7ae-4811-89c2-e90fc66ef1ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a37b875-8629-4dce-9b43-d5ca6ae4e5c2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b025b9-35fa-499a-82f2-db8e30b8a4d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "27a4c726-1147-4633-8bf0-51c290ccbb80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4634804-4183-4c05-9a81-cb72ecf49404",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "12d38bdf-f4a3-4a3b-ba9a-ec87d1aff843"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66da2767-88ee-4c9d-9924-c787d86d6acd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7479e2d9-e05d-4fb8-8df6-ec16090d8206"
            }
          }
        ]
      },
      {
        "id": "defcf685-5417-4d73-9e6f-75a549afd8ce",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9e5c025e-791e-4a5d-b46f-a3a72b251def",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66bfebba-5804-4d3b-97e3-4cc4b6bc6c45",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a1ffb435-2c53-44f2-8813-b66770517e53",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791fb7d3-de82-4e5f-b485-4bd0c5aa1c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d58c50-7662-43c2-bfa8-857b9c1e7f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58843012-8521-40cf-9be5-f0519b25d5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac2399e-0bf1-4dcd-a174-6af1ba2f924c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ddd9e5-9e41-430d-b5bf-6201554f2b4d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ca40f9-60c1-4e23-8502-575556570246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d19905-c794-4f27-8d0a-decb261e5aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f1cf0e-6d10-41c0-b2a0-84298d2ca72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ba6a8e7-819f-461b-9597-01b5e52793b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff76cbcc-d764-46c3-9a9a-8bfeb1cde476",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96bfb22-53e5-4887-a811-a184c4820203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391a259a-15b6-4846-a87d-776f5017ec10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999a8d27-6702-48f5-b66f-6add3cc80ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2007d4e5-6160-465e-ba3d-6037f9e5313b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4952940-c037-4585-9f3b-3b994fbe308e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e41ebad-49de-49ff-8a00-becab3f2a739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3869af-8c3a-45e5-9abd-8000b826a283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e489f25c-7251-4026-87a1-70744e44129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f0d5c14-ee49-4242-afb0-2a03badc4b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f3ae44-d044-490a-a771-e2d7856583f4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af83c8fb-4a12-4e9b-999b-9d9ebea58f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc3e080-0a16-4fc7-930e-83cf192f6a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5faacd0-1904-4432-8cc3-51ecc5b4aed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70498844-0732-4999-93a0-55940bd419f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281e0fd1-cf03-4e38-bf95-d84bac202d82",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec6e2cc-b5c8-4da1-aae7-2c72f670adf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f67725-6ab9-476b-9165-699527cbc9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dabc03b-6e18-4d3c-bdd2-d26ea176b774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26730322-322c-4ac8-87f0-e7d77c1f9839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7317831-0a49-476e-8939-ec7da6e39fb9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e2aee1-533b-4799-8622-b7d66a34b28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ccf7cc-e5ae-4299-aec6-24e852eace3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53da096e-13d4-4b58-a16b-2e82d1c7cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87526be3-3192-41b3-9046-90d23757a749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8b44bf-ffa5-41cc-80da-c2af66dd0a48",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b41d8a1-2b0f-4ac2-afd5-21e48faaa9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fdd583-d02f-4320-ba23-51209f16cfd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfda68a-dcbd-4ed0-a739-a0ad24ae3016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa06936-5f7a-48bf-8b0d-61035617a648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becd33ed-66fc-43e4-a933-dfc892366291",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04223a18-b550-4068-ad65-30c4dcbc1c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d18ef28-5c39-403c-98de-3574efcad4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5421c36-6f5f-445b-a569-e99df0623204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c752ed0a-6931-47ef-9079-73d540e98dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1343e659-d72e-4c8b-a50b-a97af5a88a27",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2854852-d86c-4fe2-9bbb-3866fa264bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3e4e54-b14a-4011-89c4-83a5c9b268f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa6f6e8-d931-4e37-9d8e-3200f011ba9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09e66a59-61f5-4308-956b-d7a784f00c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0d08ce-5639-47d1-94ec-00c82f32a217",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e58d76-e59f-4f78-aa9d-ed99f0822075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bc8d44-9b28-46ac-88c8-5e48043ac6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0725e174-4bb3-419d-ae91-f0136ed4b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70fea238-7cbc-4486-a532-bb56ada62abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e851c8c9-2854-4947-985a-1d5aab4e8db8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da14336-c494-4f36-aa8f-2b06c665aa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60aa8393-b526-45a1-83fa-d184d5ea094e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21025611-90dd-4737-b203-854c7b5a8476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67c226e2-42a5-43b0-93b0-4a95ef2a1004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5b8055-9f94-4edf-a9b9-9d8df92c2690",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fc148a-3532-4390-bf64-d6d84851de65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e26b9e-9843-4d21-9add-08971d580b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0944f508-cd92-45ce-9be4-0f24f3842489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aabe76ec-0f7d-4973-b176-85c947a75ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3630d4e5-bb24-4338-9e2c-d45a384649f3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3252cca5-c506-4554-87f9-dd97caebd6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f27cce7-9820-4bcb-ba26-737f21950886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920fefc9-29cd-4c91-b93b-3ecc1c73a827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31c9fbf8-d8c2-41f3-8632-9a58d760f7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed3eba2-3e90-4987-abec-af460f1faa97",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ef50d0-284b-42aa-b2c3-bce599fd4cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f675e9-3d70-479f-bb51-f56293b1042c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da04bfb8-5946-4176-a62c-76f10ecb6726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "facd9850-78ee-4378-a1f0-4f663c408e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71841a9-3ca6-46a5-b3bf-aa38bf378127",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ce2108-83c1-4773-a7c1-c71007189ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15153f07-9c79-4167-b043-9271c188bb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9996e16-a097-478e-8719-7afb441141e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a21233b-c102-44d6-82a6-b10c554be06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ad677e-229f-4755-9ddb-cab71dd36e59",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c5375c-2099-4a40-93cc-a6382aaf1dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b09aa7-b042-4064-9d1c-b89bbb86201b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd56a5a3-027d-47cb-939f-59a65d50e048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "271e99a9-1bec-4f21-ad8e-f5426cd50067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ee54e7-2fca-40e8-b3e7-39c906a22c3b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4207b5-c681-4b1a-86fa-984dcc4f03c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477115f9-505e-40a5-97bb-edca8f21767d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a3d25-7859-4194-b331-efbfb9392cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8254df42-f4c6-4754-9d5f-6646e6486b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fd0277-9b88-4a22-9d9a-51d2a0075917",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fb1f7b-4df7-401e-b05c-09d719f86516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d965ca0-c31a-44b9-b793-468447572540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920bcd8b-20cb-4504-8006-f6812cec8cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01c5bde6-5941-4bb2-adee-0dd2e60562bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4766d9-1632-46ec-af81-30253f36823d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67e1442-89b9-4b82-861f-5bf488425497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6e148a-537e-4ee8-bb57-9751aa5565c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7650a75f-eef6-4b63-a50b-3d589ffbc753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "291da1e9-65c6-45dc-84c6-96a0397c8e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c55802-ca4a-4d7c-9e9a-4de4812d8beb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf6372e-70c6-487a-a20c-0feeb30a368d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3a38c8-1540-485f-9bdd-ceaefcd8b5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0c9742-3adb-4e92-b3c2-9fb96a1e6047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bacb62-a3a5-458e-9e32-ad7767affe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e467d2c-5b59-460b-b859-e0172ec92013",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4dffd8-f46c-4104-89e7-4a724e9ad5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89640b4b-0e5e-4fc7-b732-a852adb8492a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0382981b-6403-4318-9815-3b7c6cb35932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a87d2c9a-2ff0-4ba6-b902-d2c8a2bf81eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba38502e-28a0-412c-a80b-879d3e516750",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389e4e55-99c3-49e3-a87b-4e5ae12a31a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c87865-287d-4861-a462-ffb16bdb2ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d00b87-8097-466d-89fa-5e56dd7c3002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58d29880-7769-470e-b45f-99354fba8374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d3bf3-b21c-465b-9187-47d9d80e7c0b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc9e8de-bd01-47cd-889c-53e268c24cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572ab37a-03e9-4ddf-89d1-8ae642e6accb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad25efa-80f6-44db-92fa-6e828f7753a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c656431-e847-4af4-b668-c0917863a06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149ef018-9bb5-4293-9a79-05337b34e3b4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63ad295-5191-492c-a67b-863615e296f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156785d7-373c-4e18-96cb-c8f69794294b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc90d8d7-5ed9-4e1b-9939-196593436813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "122eeb78-9ae9-4252-af0b-644ed6b69098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca4c4fe-9003-4b5e-8b59-db34c39e2223",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8d835c-a0aa-4396-91bb-bed1acb3d258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded65385-650a-4327-8f7b-bee92374626e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4f1f34-ff5d-45ef-a7aa-52f3383b5c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06f513ea-1d96-4377-a5d1-00a3c1c3b430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d406f06-f1ba-43a2-a1db-2f62b649b4d2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0874440-ea4e-483e-aa2c-5a2b012e6341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f66f1e-f5d7-4336-bd29-0294c37be0e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ac5ba6-b3ce-4cd8-baa5-b0362c9d7144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "610e5192-c460-4bc1-82c7-eb663af060b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a6341a-0969-4a20-a461-a0915cb8e9ee",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a494b9c8-57d5-47c5-80b7-aa7ffe799ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377e7599-742d-4d0b-8706-5db941cd85a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207f5117-f31b-445c-ade9-1e64389e4ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73f9b328-29ad-4834-9d5e-fe61bf2482fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08953337-68b8-4355-9c33-341ce0458977",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79adf594-7b25-4c5e-915b-7ecdcd7de056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb297a1d-60fa-4f53-8789-e56fa30f7152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f114d369-b122-4248-bce4-153b08c93cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d06214f-8a7d-448b-a15c-dcf946770835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51dba6c-7c52-4b88-b667-4ace1fce2a7d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26af6867-07cc-4b49-a81b-407bb80bffc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fda5e87-13e5-4eb6-9b3a-568dcb46df34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4475e0f-26b2-4fec-882c-05c46768a2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7eaac15-0394-4c58-be8b-99ea8c162ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe77230-02db-4440-a745-201703a7a834",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84947ee-0eb9-4542-92bd-a7ef3971e17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10081d1-4991-4d81-b739-eabec173f022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139e8db1-9c47-4232-a7d0-2339b8537ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49b51ab7-a2d8-41b9-a77e-8012823ff956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9f15d0-7a47-4be6-bc04-7bba978c4f8f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05acbaac-8b24-4762-aae4-ff751c348688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e260c0-56af-4712-9730-f508115990bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c92b02-e48a-4cfe-8ef2-8b1ddbddd6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d68913-1822-40fc-bf0f-1a1bec1be46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a703cd-0045-416c-a789-cb40cff4762c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd1bff7-5334-49f2-871c-861cc9bebbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e0acf6-8a2b-48c7-a543-e7db70876aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0af9fce-f55d-48e3-8ec3-22700519816b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e664708-4879-4b8f-86d3-d23406b57cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d3ffae-f2f9-4210-9402-75023d88f5f9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84c5177-9e64-4683-b862-7d6c00c57441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56db8277-6fc0-4b1b-952d-83512d4c7f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9501cb-7269-4a4f-a8e5-ed20b610aee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd87ced-6b09-445a-854d-5731921c0714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cabf29-1a67-429c-88e4-d7b023c35909",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7555d0-a837-4d12-9c3f-4abd25f0e3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc19718-d577-4f11-9197-680978f9a416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e403915b-63fb-4248-9c5b-c982e98f3867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "66f69742-b786-4e7e-916d-a1762b61d86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a1cb87-f53a-44be-9fde-e846a5fbcf1b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8e0cb7-a759-4a30-8637-c329c47ac2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c61c959-8f37-4678-a07b-0b92b3094a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f123e3b0-7292-4a3d-a6b6-3caab5051214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec047945-e1fc-46c4-84a7-b1ae6633dcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c5e169-9baa-4a5c-adb5-ace2dcd4b032",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d39c997-e10b-4fff-b5d1-7f73fa90aa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6bc95e-868d-48ee-a16f-b1306d0a344d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d839274f-28fd-4b50-8f44-dd3e87ccc1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2158dd2d-6c52-407b-a19b-d6937556070a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e07175-733c-45df-8e00-6afced970d09",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf591a63-71d3-4230-9b98-5813829dd922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84107b3-d1ab-4653-9e85-4d141e1d4e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a23d71-9c44-488d-8899-3bd47d6966a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c378ed7d-6513-4095-b09f-7ab2ac408aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7341b4-d9da-43ca-a4f9-d54f1dde130b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f3828c-a79b-4a4f-8f42-cc62e408b406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37daac7-c8be-4d4e-82af-6797ff54291a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc66bbe-3dd8-4f45-814e-4a2d2d886611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4d5cd5-e91d-4bc0-9d14-8f24d6b424d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdbd2f0-daf3-4406-aa7d-c74cd247b5ef",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78cc19f-5ab4-4e21-8bc8-7daedce720ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05634ce6-e1c5-4f85-aa66-dbbc3bd907f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3308929d-6332-4c03-b48e-dc56b3ab6c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f60b56b-7ca6-4297-9ea2-ea4b6cab4b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d30ca2b-4873-4b8f-9210-830a44ad5819",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30880114-fad1-41e0-9296-eff34e14e2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2221fc-b921-42dc-9825-fb62d455e606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461cffb0-35db-4d5d-8b1d-0221e8dce748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7630da56-d7b4-4ae0-b94f-8a9c76bd0da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b3ee24-c3cf-4a09-b44b-5974529d9b88",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a83f71-1525-439f-a7fc-2b885c3bafff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac31946b-dc99-457f-bc6f-5c5b3ad8b846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d28df23-5ef3-4125-be64-42816293ce04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3098c49b-9756-4427-9835-c7a4c13bfcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5229da-2daa-4873-9dcf-7be81be8b978",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d465cbc-23c2-4e59-99db-ac418087ea40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a9369b-326f-4da5-a15d-24bbce430ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697c8f15-1b4e-4564-b3cd-1ca282505e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a371d68-fbea-4795-9330-643027a68c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7d431f-bf66-4ac0-bb1f-10df5bc9c63c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8106a162-4667-438a-9e0f-f3a513b3c713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1755a10-d78f-4509-bb9f-85c609fb38eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b7491-d71a-48a0-9a9d-4ff8789da229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5709efd7-0f4f-408e-bbfc-900d308d3818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ca21b5-7234-4eca-ad93-cd5d1c0836ca",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb2d420-a8b7-4c6c-95bd-c1a048e36302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d864d83-6d9f-4e3b-8d6c-0f8c9bba2f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b721c845-d8d6-459e-a423-89ecfa2895b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9280ef-13a1-4ad6-b5bf-0628b7d116d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5422b0-6249-4b31-93ce-7407cc7f16cf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f474b1d-517a-4d3c-bda0-0bbb2e19eb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734f3619-62bc-43b6-bae9-ae10916be63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3859f852-c9e1-4ac2-88d6-75608f2963b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9a4895-12f4-43f1-839f-b96245a86aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d388dedb-5e64-4e06-8650-43cb8a925720",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e45c393-b904-4b26-99a7-641b6479ec97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac74d00-e577-4037-965b-e9ee26e2b59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ceaee2-e88f-4e35-aa70-9d660a60ca3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d05041f-fbf0-4a6b-bf85-0688aeb46c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bdd538-7a5a-4c25-bb9c-b9f02db9770f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a68603d-6c84-41dd-aaa7-4c2cb829a017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96c30db-8cd9-479c-8db4-99e1dd8b9c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51d3aec-c810-492c-b1dd-3b10172c4cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad3a534-e3ba-428b-b234-c566f87ca6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93dab736-d85d-40a6-a941-5fafc45752c3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b253a4e0-cd8c-4171-941d-5c5d31c9f359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df91aca4-f431-4c21-9b0a-02f95f529c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ee5954-095d-4aa2-b5b4-5e197802d072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00a01bbe-4ee4-4ca9-af89-b5f727039a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7102fb48-4dcf-4b9e-8a11-bbed239c16f3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d721c931-acb5-46fd-81bb-d99e5709c0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05a8071-e741-41bf-8254-8ea2c1c77d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1452d37-8c6a-4e60-ad9b-168f44029c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fba91b00-49a4-4e22-aefd-0eb0f092e53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0e3bd4-b58d-4c2e-997f-d969221e24a1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fa1992-21b4-4fd0-a40b-48182630b385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c238d7-bb27-4aa0-a54f-7fc4848a69ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92080e9-f5db-489b-a6b5-83852d610cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e59d74f9-a509-4297-b979-56463593a60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13851c93-1b5f-4fc7-9b82-5c00c53da4e8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c842aa8c-cb40-485e-9257-fecb6e60939d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168434b3-87bf-4800-a5a7-74abc306439a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05587f2a-b490-45bb-93a0-ddf08827ff97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b05ea64-78ae-4562-b937-9f7659b40a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80aa085-7774-43ef-b825-8d26a900f30b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e9be58-6008-458e-8fb2-494dfef0bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3775f815-a8e0-414f-b018-fca143d8b077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8f69dd-82fb-4388-97c6-5ed61ef2aaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b70c27-7d36-49c6-8941-c644c25f9bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f64a9c-de52-43b2-b583-05d6fd1916f1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cfdca2-a78c-43e3-8a99-04997e728d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8e0f5e-6cb3-480c-b3ee-5277aedcb6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9010f4a3-72ed-46d9-a7a0-f4385cb0c0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78b237fc-f23b-425f-9323-9dc601d4e074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3022590b-dc34-40bd-96c9-f93b8392717d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e82f76-964b-4b22-a6ba-939cc6661faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40272d69-d999-494a-8727-92edd270aef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405ee49c-f7b1-4239-877a-b427e634e0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1427699-0d0e-4dea-a865-e76d099beaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320b281a-8de3-44da-a60b-a61f3be4fd93",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6596e92c-45a5-459d-886e-7cfadf12610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbe186f-281b-4a8f-bc3b-6f0d6019fcea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee4a63b-c74f-4d72-9213-ee69c7248746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "31da8aaf-acb9-484b-861c-02beca6b6a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca208771-2566-4a23-81b5-ed8f336ff4e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760b423a-4c1a-4c6e-aa2e-c8426ecfa374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfaa8089-1589-4e88-bb05-7a3ec49f495b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cea1b5-bc67-4e6d-9cc1-bb7d93d88988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4130013b-9e9e-47a6-93cf-41cdd704a402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23bd1fd-f704-4fa9-94d5-d7f133d56c20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cddaa52-db6d-44d4-a71c-e55cf2ec3b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3564121-1985-40cc-b79d-931da4ceba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2ce012-2fb3-439c-97ec-06efca135f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a582af5d-c897-450d-9540-312df3c94231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cf7bd6-a55b-435f-9912-0e0046617562",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abc3f43-c5d9-4a0d-a7d2-62b45b0722ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6bce7f-b44c-473d-8c74-99fddc2bcdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5da7e6d-d5ff-4d14-9025-abd04ca2d7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f02f307-1faa-48a2-b2c7-1940d78d2587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0f36c7-b37d-4a63-b53d-734931c94d36",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fca7f06-f56b-4fe0-be9b-5c03edc3d6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b79d46-9e13-4e30-a1c6-1c9753479e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32095a8-10b1-4f5f-91bf-5541fa855574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c0380c-4a83-4f93-bf84-89a499a930e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee12086-ea64-4b96-9085-4836a9b720cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fb8d0f-778c-4b66-899f-1fe16e0ae3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234cb849-48fb-4ea1-8d63-72005c28a6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bb65eb-6030-486b-be7f-0b620d6bc240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c72298-4d1e-4317-a8f1-da71f5b84faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741b03ca-e351-484f-9e07-4e6278e1b827",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13910553-0963-4bb6-95cc-5bdffbf14c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cc3fd3-1193-407c-9ad9-f934cdfa0e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae6e4e2-3adf-4e8a-9016-44cb68979d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2a7415-96f7-4f22-8919-75e942f28201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437ce4f2-99ee-404f-a568-16b1e690082d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f6c700-a257-457e-914c-c977cba82f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e723c45b-2d35-4780-a48e-5072bd96996b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9061bc0a-e208-4cf9-98ba-b75a45b2c15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23e1108-98dd-46f5-8769-bf35ac1047d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19935797-1973-4f3f-9d28-83f1c4c58f6b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ac33d5-fc14-426b-a508-121878e618e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8988f09-5271-4e83-8f20-0d2d7036e725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e57265b-273b-4a41-b2bb-a52e31f62c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c735d499-10c4-4f52-a37a-116038ab8be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b44b31c-a078-4a5c-a86a-7e44749149f5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c762954-48c9-4922-be22-47af00dbd390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7623488f-9137-4c33-ae5b-498b342cff0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6827740e-4f62-49ab-85e9-d23d17305299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c38aec-b503-48a7-b025-535628004cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fde425-02a1-40b6-8806-85610bd3b6c2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8745f1c5-8dc8-4f4e-9342-e2bdbb35801a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bd175d-17a1-41b2-b297-f7af67488d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63c88d6-2c8f-4bed-952a-0d68de360686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34166283-73e3-4abb-a712-5cb573d70bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad326a9e-a439-458f-b43d-a5ad091701da",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45808fba-2e7d-4e2e-bdf4-df6b60bc68fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85efef1f-3248-4345-8a30-79a81defb0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e516fde0-50b7-46c5-945f-22b3e2a94b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5cc200-f90a-4ebb-9712-60a0b4ae1f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d093359-6e1d-47a5-8c32-402f05443f0e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b279c54-1fb0-419d-ba4b-a6e27d2429fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028f2f9f-c349-4d5c-9fe4-812f1e20d693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af01b49-8924-47ca-a93f-51fcf5463c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a922ffc-2fc1-448f-99b1-1283c569a242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60e8127-7476-44b1-ac6b-7f28ff7ab125",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a372fef-6c06-4921-993c-f986c132ef91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab4870c-8919-45de-8308-f13cd95b1d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816ad7f3-21e0-4e75-bb58-d8c5a5df07be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e29b8f-f05d-46df-9cbb-c14b4a1b4673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a46c687-a14a-417e-a64b-70b0fc6e2711",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1b207c-344c-4117-a333-3f21c0fe1046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29edbfd3-4574-407f-8109-6be3074d3d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65ea161-fb9e-4160-addf-e60f9d88b728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26748639-251d-4352-b154-499e69a3f636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec782758-e24f-455d-a81c-52e0748d29c4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8d1fc6-e48a-4cba-9780-d987123eb169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21655df-9b6a-4e4a-be82-4201cc365f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88d0ffe-2ed3-404c-95b2-09b9a9884cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e403a3a-3631-42fa-b63b-394c2d341e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ca8fce-374a-45b1-9737-30daee2c7e39",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c78ec5-9594-4654-89c9-17815ccddfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbca97bb-61c6-402f-b169-922d185c4cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1199e9da-0bd0-42ee-b356-0da6ea7ecce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2970cb-76bf-4092-b3c9-a3aa439283c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c8d2a9-574f-4122-b392-192fa8304282",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813d5284-7b71-4eac-9c99-759e9ec86131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08172b39-d2cc-418a-b6ef-a457468dae87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f196f4-86b2-4a66-a2e8-fbbe6fd99905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec126e9b-da24-44eb-bf87-6956782f6a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86815f5a-c854-4ef6-9cb3-6c31d4653b57",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75190352-081e-4fee-87fa-a0a2c708482b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926ab60c-2f6f-4f0a-9c9c-6930c8c069d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85c37bd-30a8-4657-85e7-1938b9f18567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9db48b-707b-4e84-94e9-0d17d33deea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee857bd3-4ea9-44ac-834f-63343f7009c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56e3b1c-177a-40ac-bab4-e16407d28297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ce1d07-18da-404f-a167-14c36f74c65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddec98e-c539-4c94-a7d6-525d01346289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e400141f-27ae-4a20-9666-db26568ed20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8c1ba6-07ed-4978-9f0c-06fe350899ac",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114e51a8-3815-45a1-b3d2-afb3560d449d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c28e7c-8ac5-40b7-a4dd-8152603e0e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f604520c-d99c-45f1-8956-4d37d0944ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "044ba320-8704-44fe-9465-2d9cf976b1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79509184-50f3-4fd4-a195-4bbe70168ddd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ba3891-7f6d-4310-add5-14bcfc3e5485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d170a48-613d-43be-befb-abbf472f0b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0221a549-4137-453e-a2a7-506a3e86118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f62cca50-8a3b-4b8d-b0ce-e6bd8bf6ee26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85161942-3116-464c-ac9a-e2bc54fe4eda",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a44db86-00a8-41e6-8f0f-e3e495f2fcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebaab17-0d8b-4676-bf68-fcd073a5cff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "face4ac0-0da4-42a2-ac33-92f8432ead44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d5262c-539a-4561-b991-b60bb33a8bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b208bbf-cdb5-400f-afde-52e02a42eb53",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e04515f-eed1-4aab-810a-3970efc5e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6164ddb8-dcda-4888-a5a3-9fc9f7687dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e99038-9529-44cc-a10c-7086848a7662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8369571-0b25-4dfe-886b-0e481c46635f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e21d9b6-ae2a-465b-89bb-f7388bc1130e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b39114-4b31-4ee9-aa47-5018974dbcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2977aec-daaf-4475-b477-dd24243a9344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6df81b-5296-4b9b-acf3-6fc584d37c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8744e07b-dafa-443d-a16f-bdae62200fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2db45cf-3b42-4b62-8740-add885bef9b5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8847d7e4-5479-4a87-90c4-3be6fa40fbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e5a37a-c76e-48a0-aa55-a821448713fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09778177-1e59-4325-8a4b-a2d37269b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5236bb-3b9a-45f8-a18a-ee5885a022bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658f7391-2997-456b-bffd-6f4cdc7b144c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322385e2-cf31-4edb-9fb0-a9c22a4ea84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacc6ed9-8bc5-4420-b9d3-4f7ddf204837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c88ac2-c83a-4307-843d-9274ca72203e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "319183aa-3184-4881-8db0-3478c68d0928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb433fa-0851-4d1e-848f-c0e04e103efd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b3a667-5ddf-4432-b050-c29a38e34258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d84540-6c87-4dcc-8c13-4b9a8e0e37b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07bd3f9-0fad-4a49-8185-65dbf1f622e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1ba60a-6379-452d-8686-a4ff4aedf088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f4b0a0-a4ec-4e98-90ef-73029d62f656",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30feebe-dffe-444b-b0b5-ed59c1d5bbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c2eeea-ee1b-480f-871c-b34525755a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e37795-c98f-4dea-b5bb-49aba42f6e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5925ea3c-7ccd-49a4-b3cf-9f0b715cb2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e26c70-55d6-4104-8644-337d3270b233",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6bc2e0-2a55-4aff-8696-9a53c501e91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2595e98b-d963-4bea-b63e-3f14691986ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77291a3-1895-47ea-a5e5-b5b26bac1f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4b5419-56aa-4aa5-b513-119eb65c94e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f105e16f-7656-49af-819e-15264b8c3ac5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad76c76a-18f7-42a9-8e05-0d48678c06a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0aa957-699b-4b00-9742-baf8e82656d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1836cc6-a311-4af6-a089-b31124b980b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "859f9687-9cf8-4920-9e87-397ac2b9e58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65790b3d-c1f5-4cbf-9fb5-7de15f682071",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad1712b-fc60-44e4-bc10-6e17e23e8360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1c961f-1f47-47dc-b86e-e489ea0cd488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a4fb4d-b493-45d1-87f2-656fc62bfab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecddf418-72da-4c6f-bb05-c63005b21599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d275ba-bbde-4b91-93f0-483f3531fb5f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e516dd-0f19-4bb6-a605-48ec3b6f2e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2235ae34-99e7-465e-81d3-a5896213edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d177aabb-f389-45b6-b4c7-4da4f54e3d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b89129d-e79c-4630-a4a2-0555d04afae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8257ce9-324e-4858-88ed-0c9f2550a4aa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1632e341-f71d-4f17-9bcd-9d0af9c5958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b490b85-15bb-4892-b225-5c09bd2a175a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4038fe7-fa68-42dc-a0e0-a0279a6da657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0d14b6-2ac2-48ec-91bd-a7b0e37c0461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f68c72a-2768-47d3-bf85-091625adb5fd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6e39ed-0980-48bd-9c41-3d3c6ca73b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79176b4e-a9fe-4bb4-b5f7-2aebcc94211e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59676f4e-cfab-4c26-a679-7a631569beb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfb8271-22b2-4e45-9b1c-12b99b4b1940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b232ae-aa16-49e7-8e77-b0cb8ac237b1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca6ea5-5bd6-4175-a764-6b65af931fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e9d246-0238-4c3f-9187-9da4fbd66ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431a8c19-2c44-4a3d-945c-cb3439be8395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0238ae45-7e07-4ba6-9a68-09e16241fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dbd2fc-8349-44d3-9716-dc0620c3dc9d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca84f749-3cd5-4565-ad8b-5487d29a1295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "381cc9b7-9fdc-4333-a300-4558254f6ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f07ea5-6620-4f1b-9fcf-5212e00f47d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ccd9c9-ed13-4883-a7ce-07c6b50876c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89752543-963a-48da-80fd-9aeb60e395bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cef32bf6-eadc-4423-ae75-03687d25ef9e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deb346c-3d2d-4eee-9241-732564a90c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1524394c-2f0c-4885-8980-58335a89bcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ee3a19-6174-44aa-8e45-ea93c3abd431",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "888fdda0-af07-4dbc-b34c-d210ea1db06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9449b0-ff94-4ef0-bcdc-2ae1e8c43c31",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9312c9-0810-40ea-be31-e027eff80729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "805ac98f-8956-407a-b57c-af2b0fed2a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c67a6f-efab-4bbc-a5df-9731c35c6673",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6649d88-c72c-461d-aafb-25e8f60dda86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d745bc04-b83d-4c49-b4d8-baad217af6cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b54384b-03a1-4113-85d8-842844142573"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dd5328f-133e-4f4b-9333-fd18dd3c3673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f473cfda-eddb-4873-a91d-99bdb4ac2c7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af4ccb80-fdb0-49f4-9d14-4ce35c84daa8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ea11cea-6622-4a44-a828-78622410a490"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93ba8d1d-f839-4ce2-86f7-e81e3cdb962d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a557b839-ebfe-42ed-933e-f63762727d94"
                }
              }
            ]
          },
          {
            "id": "472a3915-39f6-4687-972f-3b02d4d0396c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5fee4cbf-9ded-477f-a86c-f98b19b94802",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c745ddc2-5e29-4de5-bf5d-f7f2b86f59d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28a11c33-96a5-41e2-b9da-e0fb9bfc2a72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ec9c9c8-f899-4bac-84bd-d7b2bf5ffc03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58da5725-396d-405a-8caa-969bf40d41a6"
                    }
                  }
                ]
              },
              {
                "id": "430757f3-7bb4-4489-a3b4-ad8fc69b5815",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aec43aa2-30e0-40b1-a607-092c1a7d6f94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8e713dc-85ac-419c-8f69-550b3307613f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d15052b-9115-4fa1-a425-7b1d2f9fe7e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bcea301-8379-493c-8e01-383d5e576a07"
                    }
                  }
                ]
              },
              {
                "id": "fd5bcbab-cba5-4a4a-b51c-afce9601158b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a2161c7-2a37-4c08-8cfb-641939a6605a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "508578b8-d30b-4f51-9e3f-37f7b7801b1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f746f327-aeb5-47e9-810f-8f996d37de8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4179179e-cf46-464f-be24-d94143843e48"
                    }
                  }
                ]
              },
              {
                "id": "85a00dbc-5d6c-4d77-b4bf-d096d218b855",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf285fb9-f068-482a-840c-3fb995328794",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c1dc025-57b2-41bf-8c4c-c37850789bc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "787161cc-5491-44a9-8276-def2071b12cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "31536607-ae1d-4f6c-893a-e2e5753414fc"
                    }
                  }
                ]
              },
              {
                "id": "c7db64f2-c707-42bf-9ecc-97e5b53a50bf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "073993ab-e28d-45eb-b791-efaa25011c34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90fd766e-98b9-4e86-85cd-1ac5aee7572f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17a34ce0-fa49-41cd-ae93-b6307e47042b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8d3252f9-8ec6-4676-9526-41fe280cf09e"
                    }
                  }
                ]
              },
              {
                "id": "07171ecd-58dc-46dd-8951-e8e160bc186c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6954151d-8f5a-4af6-99b6-29911d6b4795",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "733e3069-4db3-47fc-a19b-3b2fb44afdcb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "244297ba-ea18-43fe-9aa2-0bab72f17b0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d413f0eb-7400-4514-ab90-aa62d133e4fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6411a71a-0f7b-4422-844f-537e9d90f4aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba1f8994-9231-4fc1-9bd4-62645f6357af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "13de2980-674f-4e38-b0f9-67dcd70765a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5b68e73-1c69-46b5-85e9-b981bef0c099"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ae4ce2c-6f4c-4514-987f-2d701ea460e7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4ec79e19-5c68-4086-a714-058d8a725e26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "392ffa62-8950-48a6-8146-b65ee2377e86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8f7d08a-8429-4ce3-af7b-69cf298d9c86"
            }
          }
        ]
      },
      {
        "id": "52873614-1417-40ae-8c83-6b1ed2892701",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b4ef12af-ed06-4e97-bb0f-48355b7d4f33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4516230f-8290-4fbb-a49a-c8c8caebf9ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8a846717-c276-4c91-bdd4-4c4ba2f600a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61673ab3-872f-4488-9d7e-dc24e5a7c024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981d37c2-2404-494c-b3a8-2112494b8176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30955a16-d6a1-4dcc-86ce-011541709223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4045e5-5613-491f-a8ad-e7655d59d953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc3e387-a33d-4fb0-9dff-f15755107cfd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19354d3-730c-4e1e-968b-8460978e3259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5854968f-0d1f-4cd6-a9d1-f8e12a9ad751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6160ac29-7c85-432c-9df0-cc4bf7a9cef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5198b834-2f7e-4456-8bb6-638e9a42f06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b07f671-a398-44ad-a91c-99c46bd7dd4f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798aa797-d646-476e-bc0b-74b6ca39e492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39f703f-8882-459f-936b-f30edba8ad16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069f91b6-254a-47a8-b104-0634fc11f206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e76c7f-86eb-4ee9-a875-18b5e4a3ef77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ef9430-a069-4ea7-9fde-67dc32584b3e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4f31ed-16d6-473c-8605-fd921d90c180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20c1bf8-8a4a-4c32-a44e-f58fc54a5047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73cc64a-f197-4fc3-8aeb-77d7e17b43f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c56ae823-00f8-4740-8a6d-9579178ee593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17f26e0-4b83-45eb-b420-ca47bdb40cad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e39530a-99c9-42e9-a9a0-50f3064f7a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e69138-1524-46cd-bed0-ee06d9b7a3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39757785-1598-4d5f-a568-dafadfbd4cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6274876-14c8-4db1-bd85-0258d1f40953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab89ea5-7eed-473c-81ad-bc93d0612760",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c883802-f249-4a26-92bd-06337e67019a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b35782b-c376-4a31-a129-48dfdf793105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c621f010-d54a-41ed-ba2a-f5d59498b239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69e37422-aea9-4102-8b34-3506f68f6ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d400d2-0bf0-4a4f-9b73-717f1d6397ca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e817565-25ce-4907-94bb-22191ec4de5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474a9387-4992-4648-a767-c04cb5bddf2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d723c57a-2aa3-4047-b502-5b4194f172be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf22a7-2968-4380-a2ea-9f2fe2cdb6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eefe3a-326c-4930-aeea-3077fa52194e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badb6551-ad92-4be8-8ae6-35221a673a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdc91a6-8604-4886-b7f2-8d3fb91ca48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c630d1-6299-483d-87ea-e07ee94034df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcbd86c-7f7f-47d9-bca5-7e3b66d951bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac45879-7cef-4eed-8297-73611183f7bb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cbd895-c449-4111-85a5-210af40339f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5eb8146-7b22-4757-acbf-a379145c2373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865b17ee-ef8f-46fc-9a7c-3a2678e3ef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eff70ae6-4c55-4a0f-94bc-d356b09846bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61e1261-18e7-4fc8-a693-a2c2e3610cf6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e1008a-2d81-4170-a35f-175d175c231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64eddf6-c19f-42c0-8f0c-a5273acc8f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96089c63-0d27-4db7-acb4-96e25e388650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1ab854-a56a-49a7-be5f-44017a312d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc53c9c-e17f-4544-a8fb-4ee0cef8b2d2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1800b5-1a66-40c3-b82d-c0dbcfeadee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5773156c-6c2e-47c2-ba80-0baf6e0dc6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b51e9e-7763-4a84-8236-589935135365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e095aef5-e663-4dc5-9695-472f60f33502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f983c2-b0b2-4dce-babf-6a11ac684916",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb812323-7499-4d87-ab96-f23c0561b607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b039f186-5421-4af6-9ad3-e88ad61beec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86b6173-8cbc-4d77-9689-7dce9587ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81063b43-6a80-48b2-9532-8f044d05e510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5eab99-b481-4016-8c3b-86ca0116d552",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c9eff1-69f3-4a8e-b5a9-de92bf7ee205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9eae8b2-ea25-4a2b-85fb-e964566e976c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632e3fa0-6a10-4a77-a01e-e439bcb0b994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ddc412-bb26-4081-8937-e4c90b2ad6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44155497-1034-4cdc-a521-fabef17fd64c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95761574-d13c-45cd-88d7-1acbe4ae1512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d903de-7d3c-490b-8b0b-004c5db3af93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2575b28e-c695-4cb1-a19a-cd37b059d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "370ce315-5fce-48af-ab88-217391a4b858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bb0afd-3bfb-42e2-afe7-61b479444cf8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe2093d-35a2-45e9-aa37-ca6e9cbf0257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4255e2-defb-4bcf-9667-9bd8c97aeec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfbeb4a-4420-40ab-b32b-17d11e3a2535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5813957-04d8-4a0c-b9cb-2ecb41c9c599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c52b8f0-e0b2-4d86-b33a-52971b34d098",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981e07ac-6892-4885-a29e-ad42904d5ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041f4147-a8a0-473a-a05b-ad9b8a4fd600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f55cfe-8c03-40c1-a78e-b2146874d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf25fd1-4f9d-4b51-ad96-b9402b3313c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4a7f65-53e3-4779-afed-1a5796221967",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610a6d7e-9a1a-44cf-9c96-457b3a91c4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e6ea00-ba5d-4d35-a093-d18789a484a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20538f48-8258-4d7e-861e-7a29dd442481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0017fe-c667-4284-9a69-81adbb9a50d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbea7eac-c11d-4afa-8364-08508f4834b4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a7fe45-db80-48ef-b52e-aeed917faa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e993cd-f1f3-4302-b6a4-cfc3da8e33a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67b914b-6eb2-4963-99a9-ffc6a9142e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ee0f8f-d529-47a7-b4be-777ff2989eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1f167c-a439-445a-a1a5-cbe552173e4f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f66147-4e94-4758-940a-9cb63b2f46f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b60edbf-982f-4861-bb24-df7fb2ad77ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7800d8a6-3380-42bf-b470-c58826679236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c5d294-e138-4150-8d78-fbe8676f06f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42a1da9-ace2-4915-bb99-715de6649df5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce1e136-fb43-4e37-bada-f0268be70b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a135572-3ea2-41f8-9aee-09a08dbdf0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421dd8f7-f455-4742-8f8c-3eb3bc9bb29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a08bce18-240d-4701-b1ec-c79328f83e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f909396c-f5ce-4bef-9e2b-9c82298bc2e5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241cd47e-889e-4b2e-a03e-16686aed5393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a500fb-a8d8-40e9-bbfd-4e30b26b3bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187af52d-e7ef-4122-9c91-8027e9e5908a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb5e8b0-3168-4d0e-8d2d-b238171a4015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844e077b-76e8-4ef3-bccb-7134dbb193b1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbbba66-2a3e-459a-a577-5cd36a0b3cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2401c2aa-97c5-46f2-afa5-dcb640a187f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ab4841-2648-4e78-9999-0b598262b43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4279f29-549e-4ddb-830e-0c870293f5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d7f463-b837-4f05-9a6a-cb9665971394",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd52cd4-e024-486c-9129-09659d6bcc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7236390-2d99-443e-9eba-4836087db877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ad057d-c27d-4954-b200-975701e9cc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bff74ac-a2e0-45b4-ae28-e89417f39f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f17e203-cb65-4df9-8501-20c95af949ec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c5508a-d69d-463c-8d2e-43293dd20257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3948652-8d7e-4b14-a31b-816885a5746e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f2feee-76ee-44fd-9fe4-08f060c8266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4764da-4cd6-4379-a058-bd48a879252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361b2f3b-f85f-41df-aa01-d1d20ca44170",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afeb479-33df-47ac-b5f4-3af509743203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78475142-9540-468f-ac61-e283315be82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378eb0b7-fffc-4cc9-8fa6-961d1493ed33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ac93cd-ca27-4201-a6cb-8660e4d9a733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb9c6ef-abee-4940-b370-2effb2c7f511",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d494ed-c812-4aa5-a16c-693bddd3e8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4fcbfd4-8544-4fa6-8d3d-74b78a95ce4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbaa619-460a-4664-b206-77f3ec0655d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4d9160-bfbb-4f96-a409-726c22cba4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673380bd-fab8-43d0-b741-90e90ef2f94a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4890d7-2206-4a3e-9ea6-93fee562517e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b448491c-2054-4aa1-851c-8b1de35f3e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e40b17-058f-48dd-bdf2-5049999906ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77d9b64d-a243-4b4d-b9ff-d95b3ab63f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4365e5b3-babf-4d61-9c4b-d83a7e7e82bf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad0fc3b-323c-4a30-bff7-3158de0bda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bdae1f-20c9-485c-9e96-568effd3b230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8518288-80d7-4f08-bd3b-1d691f1963a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7b4b03-b07c-41b5-8962-0f7c0995059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ad6175-f621-415f-a57d-61e5ae740442",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ed689e-14e2-455a-85b7-011489517a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b04087-7e4c-4e49-9a8e-784830a214a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3aefe73-1e59-44d7-a5fc-c496b497b8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e111fed-a9bc-474a-a85f-319b56929a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39006bc-bf80-41b8-a429-bc0954b952c3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0124e46-7d8f-4407-bcd5-f35a58c329b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217e314f-4c86-4e14-951f-802170ce5adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7030ce8-9cbd-4eea-a242-73b5ddf33996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a7fc6c-4371-42b1-a9d8-a18115ece9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b064b642-5405-471b-8a5d-38c5bd0ff491",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de316b4-89a6-4879-95a8-22f059a35e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3d501b-5e62-4737-81e4-bdedf0836a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb56dfa8-8c27-4d35-a654-7fae61ec5dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b68263-c33e-4d7f-a466-d4e5eb91021d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2d6f8a-d462-4e50-9018-ea4cede79cb8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c5f92d-e44b-4c96-8ef6-e64e15278a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e96266-64c6-4ebb-93dd-d600250d7596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee588eb-d673-45bf-b4ea-0916368ba9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "431dfd47-1eaa-45cc-881e-b8cae9abc0ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e17c18f-2611-4b5a-a5ba-50124c138a6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9c52a04-31de-4a28-9b9a-f31e8014beee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82e326c-0a66-468a-9546-1f1b175bbc8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e145a0-e664-4373-8cd4-095e9bc789c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09573e47-2b39-425e-b829-373962d3b26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "898eb394-2a61-4275-8012-582e917d3237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06549886-6e05-4972-8df4-493370eebdc6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7222494-7582-4991-ba6f-b01e237b9782",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4beda3-c6ae-409e-b287-fb0c06f7eeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae54637-304b-49ff-8abf-c48698657694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7c15602-087b-4f56-9a8a-3ccef64d793b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbedbaf2-5a91-4e69-b76a-dba39f038af5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e4cee40-0b86-4c51-a795-8ac9ab67d788"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bb83575-9341-483c-aa3d-296a41bc8630",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a2dbfe3-759e-484c-8788-183c86bf7dcd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "655ab546-fab9-4262-b94d-0a9e109fedb2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f98737b-b08b-4a93-81e7-767602069894"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5e4c89c-1437-4291-a1fd-820d13e28dec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8f67510-df78-427e-80a3-b2745b81568a"
            }
          }
        ]
      },
      {
        "id": "e5fb8140-3b44-4d65-a43b-cbc48011b768",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c050b684-8518-4c67-8718-a02318f74e10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "691cf732-0e67-4379-b965-f7a3918014b4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9669ade5-b4bb-43bc-acfc-abf04d2c2307",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bcd783-77b2-47ed-bf3d-e5af1a7c51de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d37d63-2642-47c4-af68-fb42cf070530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7c23ba-2e94-40bb-937f-fcf400493050",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a504ff2-2a1f-4285-b872-e7c2e93e4690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a4d4bc-75cc-449a-92c4-8765c55d086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6b957a-e039-4b1c-80f0-3be257f7b326",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf0a55b-7f9a-44bb-99c9-1fda1e65ca84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c7c7fd-2619-45d6-94a5-926490e6809b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1026634c-9525-43d3-8e2a-ccce69978e27",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01522d1a-2a6e-4f88-99b9-b079cbe31222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9664a1db-7abd-497a-83e8-2c6af197fd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556ef374-18a3-41be-a2b7-8afb9b0e974c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede7930f-ac72-467d-8a70-ab4f8c347db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d66b95-51ad-4eca-b9ac-ecc3321469ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e2bc5e-765b-41e6-a2a6-664bc298d261",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553260f0-9240-4989-a042-b054afe362f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af6fc83-b0e1-4d1b-94cc-3a5cfffe6a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fada2b8d-3a84-4051-a8a4-3b5000edfd13",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79101e34-0b44-4431-b050-37fe1562a217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7804f3d-d4e6-4214-96d9-32ad272a79bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f02870-a796-439a-85e4-4863872d4f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0072aa54-6bd4-4aa1-aa5d-13901d174220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1995e2f7-a9de-481c-a98b-ef3b06dda693",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edf467c-256a-4559-8151-27615aff9f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0041342-cedd-4c88-9a44-f546caac2b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1186dce0-1ed3-489f-950e-9078543b8009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f4946a-b599-4a60-8d5d-3ae03554c2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c277534-1589-49b1-95c9-169ee98ee958",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d045966-a070-4385-bd8b-b4749eb693e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b6cd4d-5c07-4015-ba70-682a9e440d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a5ef07-3726-4887-9eeb-82782b20ad77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9722842c-11b9-4ee6-9d80-926a7730b968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61248c9b-5579-48fc-99fd-d0811ce0eea9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ef66e5-6bc5-4ec9-980e-26e1012296df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c42475-0005-4abd-a877-72e1ca344b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6632302e-7d48-493d-a425-52a7ddc7b1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98aeef11-b51c-46bd-9d1e-b5768f633382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb79f22f-21f6-4e62-bb97-da7b247a114a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0cb052-43ab-47b3-8e6d-60a6a6ec1e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed319aeb-ea7d-4eda-aa73-b83c2d701110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0393d8a3-3495-407b-a045-30f683b7283f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56906fd4-ea80-4715-b981-4a994dffa9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8323fd85-7320-4d62-8232-dd247e015efd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35d118e-aef9-487e-aaee-cad4507b716e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3eaf5c-fa96-420c-ac0b-b290d33d7f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a035bc-4523-4824-9897-2421a62acced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e3e83e-b659-4bac-a637-b96cac0f64b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86b1151-1178-41f6-bfa0-0cba72985033",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e855d95c-91b3-41dd-a25e-d95fd8c850fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7827ed-047d-4297-9bb9-d775e0d736df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5082b4b1-ae57-4b05-9b55-fd4c4b77326b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939d461d-07c7-49c0-bd52-251ea2f9a406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d1c390-fa99-4814-8e40-789d90213049",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb805b56-7a99-4747-a090-7ec53bac5341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b20df9e-ce1d-4dc9-a863-944c33d8f9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3d393e-1325-43fb-8460-944cc763bb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79755bc-e6f1-483f-a50c-9b2440a6d051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75761802-e02d-431b-9858-7c094f054b16",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb5471-fa2a-444d-baed-2accdd52da9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f01c529-5e15-445f-914c-b17a92ec11a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8e1b58-7a37-4d56-92de-4515d7990130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a2943c-a702-4805-98f9-6c9d6680afa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6107492-e511-4d99-be16-0af16ea5f4e2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf6aff3-4ba8-4734-9208-5daa66fc427b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0ab7d4-c9d6-437c-b595-1aade0d410eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499699de-2631-4536-8e8b-7a4a426e7d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccfaf41-0423-4aff-9d9c-17650ef75954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a22b568-176b-4ee6-8e8f-ee7a3abe2c70",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9133985-ac25-433c-bab2-65fdba6a5e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2cf9f6d-d5d9-406f-8d15-b006acdb64ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a09dc39-52cd-494a-8ea9-66b3c1838273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d24b95-b9ca-4c9c-ab8e-fe04aa9734e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fbb3d0-4572-4713-9320-4bcbb88e3179",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8eb364-cbcc-43d8-9b92-c4d8f399d946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b73def5-5b4c-495b-bc84-ec77d6e4ef05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89d27f4-9c2b-4a20-a874-1956d606610a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6094be1a-cc45-4179-a32a-ff916d2150d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3fb0af-2d83-463d-becc-49a211d8d74a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61033f78-01e1-4d11-9f8e-5ae1220364b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db1c056-5b31-4238-b8cc-98edaf2000d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29274661-1e7d-4b9a-88fc-2fc1a7d060e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca700ec-eeab-496a-89aa-37dbe071b8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770d57a6-05d2-4603-ab32-38a015898635",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403869dd-dd2f-4c2f-b0ab-c0c69f0daa25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70908a7-168a-41f0-9a7a-643da94d7ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe79a08-a997-45f8-a454-455a250c3b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53c3a0d-4a15-4073-ba48-8900d0b9d555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210e1c0a-a599-4388-a9aa-eaad140ab58d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ddd5b-6e9f-4354-91b4-b3cbded94a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a66c193-c7cc-4d7c-aff4-6dc2ac2370a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49af46a-873f-4284-8bfe-623d025c9bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8d9a6e-1683-4658-b8ac-674b431aee4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb089bd-b518-4a23-b307-3006557f21e8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3048f4f1-a468-4e24-8a95-3263a239ba72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21f03f2-7911-4363-9e55-2665bbe6cb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa499698-7715-4f2c-beb9-8aa61bb30e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f07d249-a7c9-4ae8-92d5-26b36bca8dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cc31f0-d9b2-4ccc-9423-9703e05805d8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ca20c2-f4a3-48a3-9897-b4822a191d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f398875-1c58-48e9-9850-06d4b4b8548f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815089f6-a96e-46ee-8013-e4c37f647866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a281dc5-6114-44ee-a907-f695cb749eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028d871f-4126-476d-9ea9-718e619d81d1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f1a639-4fc3-41d8-9ec9-320b587e3527",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc8f26b-2d4a-41b5-b112-df9a9953103a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f3a699-85b3-4afb-a1dc-fe4e3105e247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb901933-8784-4733-bf8a-7af5aec179ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac812c8-f0b8-4481-aa35-179a335fd09f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e591ac65-ad8a-4b9f-bd93-01e2bbd4b544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e584600a-0ef7-476a-952b-c0ca7d1a9224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7aeb87-c6b6-40d1-a8c1-ec834ba44725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e5b1a8-0daa-4966-992a-b8ad1422c49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9fcd4d-00c8-4637-9a53-a3f5bfda3dc4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee21ed75-b523-4c36-a3cd-ffda6078a7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aca0968-708e-4861-8985-b4bc7ad4e125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3136655e-e325-45c9-8067-2980d3f828f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5acc2c5-9d3f-47dd-8aa0-5971157323d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ce0e9c-d80e-4304-892c-0c2f1194fe44",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea24b071-902b-4c41-8232-39283c63414c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fbdc2e2-1b15-4eb8-8996-79e672d2aa6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fb07c7-b04f-4b73-b26d-d8563bc42a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c99117-69fa-43c6-a40a-d493a5ff2617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5944e11-3626-4a9a-8d2b-fd3631a56476",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6692d8-cc06-486b-a0e4-5f40d4a0a638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32b9c0e-e646-474f-8de0-948a8dd88813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea443679-bc07-4a91-8e63-4cdc94201d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137f205a-1b32-44ec-92f8-9a46185a2d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e173ef7-6ca9-494e-a4c1-5d5757756016",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dd8ea1-89c8-41fc-981d-61aa138c1207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c65f92df-a380-466a-b056-dba67c917f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba6780d-d2be-4d92-a387-b5e7d3637004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d7efa9-0e79-4b27-9ed2-e78a23bdf3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac62dd49-b166-4450-80ed-35e0a7579932",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702a6f56-a2a8-4e99-bfae-4ffa8d37749c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411a77b2-ef50-41ee-817a-8acf4676a878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08769662-4d45-4c39-9709-046d103f0f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8c91b4-8b31-49da-adf3-80c6f5fb5684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0cf9cd-2a5e-401d-b0bc-bfec70227647",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d08fc5-b456-41f2-b064-afd0860f8d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0632ca4-b2ce-435f-97ed-76e08f0af5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763b3ce0-3fff-4b05-9e36-7f70fef182d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8594c2c6-140d-45ab-aa70-b6f48c6dee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2b4743-e6a1-42b3-abfb-9981b9197f8c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697b2436-5e4f-4717-ad04-13635c0fa614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246dbe6a-33b2-4688-9de7-e03a839466fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa54a40a-05b3-431d-8107-3acd6b611e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92a978b-4bd3-4af4-9a2b-6a4584641225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d5a430-2ac8-400a-bb1d-1be0f5922755",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7e6216-87b2-4c63-9196-3d78c45995f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55254c8c-4e53-4899-abfc-56c004de2981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e3c50d-654f-4415-8cda-a21d7a45fe4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc68f6d3-c973-41de-9dae-865f149b3bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9ee921-6d82-44cf-90ee-b580a840c0de",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983872ff-47bd-4469-a2d3-5daf98cd13e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc38e7da-3fff-47c2-9a44-9d40d9232bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e17eb1-64e1-4919-8eae-e01a77d79e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6316000f-35b2-4c64-b5f7-95cc684aafe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8d026c-2495-4c2c-9233-da8f7e48ff17",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb598d6-917e-4abb-8621-48f19380d3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44b0c4a-4017-459e-b66a-865786176b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc0355f-5174-4117-977d-99194fa5ba3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c53325a-52b4-406a-88c9-8f1e21ba36aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4995a76-1c3f-4310-a408-8d3f826c2006",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79c3123-f208-4c41-95d8-c8817f014e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee52ac6-a76d-4d33-bc5a-ec4573dd19c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea97ab6-31a4-47ac-b9fe-93fda97e69c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3b1e68-be6a-4f46-b976-dac48762df91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f1fdaf-7d33-4ca5-ba5a-beab25597945",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a0c614-7c4e-48ef-b4b5-4ffc922fdcbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96e55b3-1259-43ec-bb12-511a3caba5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac7d7da-baf6-47d2-8072-87b088a9da36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1ec47a-5b2e-4e15-b534-86ab9a4f8668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793a310b-67a9-4d9a-b540-32df71411ec5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de9d098-ee3c-4251-b8a5-fc797f6afa7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de71898-721b-4da9-920d-7b7f95e501a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225e2cbd-ed85-49f2-814b-96682bdd8491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11c3ca0-230d-418e-915f-1299140aa84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9046281c-8514-4033-a4ba-074ae92b1094",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe083e5-f273-4d6a-9d21-c7c92d26d9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0a9e46-23c2-4a60-a263-d989bd4d7c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5398c1d5-ea1f-4dc7-a949-511a5d7869ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f87a477-68ef-4108-8fa7-3370ab084259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dbef3a-0460-45be-982b-3b7ecd42d6c4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7a9f85-e3df-40a7-9e74-cb0347daaca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae282a6-2d3d-4a38-ad83-50f3e7822883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2071fd0-4f02-4f7b-a3f6-c3799ae4fe39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a87455d-a14a-4a1a-bc92-7cafd9e91dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f285004-8f9d-49dc-be1b-1e49e8b9a02b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850f3db2-16b3-4c86-90de-cf0cd232c7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16e58b6-1a2e-4210-a4dd-b820f16a530c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e642844-ae33-49d0-9c8a-375d9e95356a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9ce301-264b-40f4-a301-bf1afc4fef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27284ef5-5611-41a1-8b57-8fdac2c3298b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a65aeaf-8a91-42e8-a6a1-47232d66b671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2da65b6-40b4-4c61-86a6-5fba449e3c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18a9085-af5e-4a91-aa14-e4e2067cd377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30e0f43-f6f5-49bf-9f47-f1793e542079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393eb836-2041-46f1-a61e-36806b2d1d13",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9bf9f3-c6ef-42dc-8a48-3a80c5d1ca92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8b7e06-0134-4f05-a344-3301864847d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831918c4-e096-4455-af39-c464e595e386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08973dea-13d3-433c-9f27-d588a0a65c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4065fe15-18e9-4928-895b-e399f70c218b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc56486-b867-463c-a75c-b95ea13150be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a65f530-8c24-45ac-93db-42d793dac29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd743ad3-e6f3-47e6-9789-c53f7e3dc20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5875e954-b556-4c7b-8a14-24a0736bcc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d736312e-d232-425a-9a48-4f6fe58735a3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8b561a-e840-41cf-bd2d-a99488803fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defcf56c-2166-4894-b43b-6e26045bb563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b72288-5dda-49f6-ab42-23d3f884ae66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5779dcd-b776-4050-9afd-3fd66e2e6a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af904c6d-7abe-4ed9-99fb-0fa195f9942c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe051cd-c0ef-4a62-9c5f-1cf8bdfe015b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b82b400-14ac-4190-bb29-b5401bd4153c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58be5df-9588-4b51-8f28-e56d63852e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de08bdb2-df4b-4da6-add8-25a21944913d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e725953-01be-4380-a535-61e5e9b2fbfe",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392832ca-add2-4cf7-972d-08293296f3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552fe050-4a71-47cc-a65f-06ed678a19f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa16330-627c-464e-b0b1-3b80a6f6860c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871f1676-694c-46e7-b62f-b78de275f8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e61aa5-8e8a-46bb-bec8-78d82014c6e6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a2e925-17ed-4cd7-96e7-615e868c4986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4680c2a1-8b99-4d82-8e3e-052f9c6741bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63f8ede-bd7a-48f3-b65e-0bc4eb93be1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4b3ea1-7774-4b3a-98d8-0bfa2e2b613d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52c9121-5104-4c0d-9bd2-daac833f30c8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac5a4a7-11b6-433f-9dc7-d39851ed24ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd21e9a-95fe-4dd5-82e5-c25b54d83147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba928cf-b4f5-43e3-86fc-d273d19321da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51236790-1f70-4c65-94fd-d7c32613bf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48627809-40d4-4d8b-8657-246c4b21b9c0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a765d5c2-a0f3-4f80-9a77-6010651a2883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb34cc73-98f6-4fa0-a46e-8eaa72bb9518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cf6f0e-a794-47b5-b792-26f02355e601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d66250-9ee4-4c4a-88a4-942bedef5866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905c8d15-5508-4878-8d6c-324d9241f46d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4058174-f8b6-4c58-b828-f337a9fb5f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4866f8-983c-4a5d-93b2-122fc93eecf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e372bc5c-342f-46b9-a0b0-dec236eb6f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d723af-10d4-4323-9c51-987c3715dc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ed6e94-2486-4da5-adac-e52e5657d495",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccd7d2c-bef8-4e84-9655-fb573b59e0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c36e14-9e85-40d8-b8db-d4d8e637ad84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689047dc-ecd8-401f-8742-dc50292fe701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d1050a-786a-42f7-a673-fbd124d5d399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c8fa16-35f6-45b9-944e-67c5225f02c7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733c6c61-8298-4cbf-abdd-5985dac0095b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd6176a-e21d-4cd0-8973-6f586b9906d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d43ab37-5800-4f00-9351-e9182a9453f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64e2970-61a1-41e6-8e24-f67665c2843f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397f8927-5ff5-49b8-8ebf-97e75a04327c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c3aea2-9cf7-4dac-b457-df36236ca1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1e2486-7750-4ae4-bced-04b476c6baaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78b74cc-cc5d-4dc7-b87b-33c0f0f5ac40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6985cb85-c536-488b-86be-5f1a7ed70f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34554edb-ff8c-4f1c-8943-96a91413a566",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da208e21-6c9b-494f-9839-7d3e84094d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c032c7-e87c-411a-8de4-11f37bb905f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845b471a-55e4-4094-810f-388392b511a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f047e5-f14c-4835-bf13-9b5430926b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34febef-1191-4ee8-b233-0bc7ec56279d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ed08e1-eb69-4ee4-8a32-32830de50491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23796f19-99a9-41df-84ec-55fb6d1d174f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ecd396-381a-43ce-9339-be4471dc247a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b2bdf7-cd2e-44fb-8af5-59f80379886c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd002e8-ed6b-469a-bd4d-773a0c762a7b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2967cef0-ea48-4499-b7dd-6171ffca1689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311d1e69-7cf6-4441-82fe-1006040cb515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90f6b4a-0a84-4c8f-8947-6f3f08a849b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8c261f-3716-430d-aacc-56c7a81a575f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6bbf0e-7790-4775-ad8c-14bda1fa0a96",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bbf01c-0beb-4fe9-a56d-503c0e9c7ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d14bc00-d19d-4636-8cb7-9739f22a0896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b1d3b9-4a17-413c-92e8-50da39d5ff43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77e2b98-3b93-4e09-b947-e3eb4ca8ab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1675df-f331-44b7-81ea-4f95cd5cff9c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7f08c6-21fe-4f76-9a11-24a9f602101d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0006621f-ee9f-47c8-8acc-21ec633e18b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8700df80-0aaa-4508-9543-15b8390debd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccb830c-1b63-4c34-8556-e411354ec6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc180c3-389b-44e9-bbbc-8460ddab6a1e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc42b4-72d0-4ca1-94a4-875170d4edb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56eb9d6d-f6e2-4bcf-850e-16a30d0a341a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3719272d-1e6e-4a9d-998c-31ae7409fefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cb30cd-7a83-468f-9d7b-30f9400bd5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12efbcd1-88c9-40e1-a2e3-ccd1c93814c1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f693da0-3ea5-4710-a656-6029ef12729c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8895b1f0-ddfc-4f30-8c79-871251aa31c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81a2e6c-40e5-4bbb-a06c-76ab6e86dd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ab8421-d59c-4bf2-b646-2bf52ab4ed9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7a5a63-f1a9-428a-b2ef-9127393a9ef3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98dc1c7-c0b2-4cdb-a959-abcd288066ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e4fd39-0f08-4b29-a73c-8cb69e2838ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a798839f-bcc9-4066-bcc1-9ca1481c32b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba1851f-ca98-4bab-b62b-4abbb6d00eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b27ca0-b98e-447b-b13f-472862b2f5e9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6568a6fb-27f4-48c6-be93-b42717e3a3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a296a9c-f588-427a-a1b5-b2249b482072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0bc4a9-b9c3-4cd6-b07e-200e69ab8064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d643bf85-10cc-49f7-aabe-6a7399c37bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf28731-4c0d-4c1e-a10a-e472bbd871ae",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb90ecae-7394-475b-b11d-062ec1f9bd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5818c6f4-257c-4796-a245-35bcb226c619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2251b744-9bdb-430f-a645-2f80b02f74b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b97fc7-a241-4914-aef2-da26eaf7cd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbeabca-32e4-446e-b75a-9a16b5dc0054",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437af3c2-f1b8-4375-a36a-3e2dc300bf87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75438b08-1668-4747-a7f0-dc6a2fedf0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490fcf3d-0972-46e7-8a0b-eb5f739a5e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bacf59a-a237-4437-8b91-ae514f05869e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612e12d3-f75f-4f42-b5a4-8237ec46502c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe292ade-1ceb-4749-8847-49d1098b0b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a432bc4-07b5-4f33-99c6-e3357108321f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20666cb1-5a8d-468b-ae35-e694409b5079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21a0ae6-4465-4781-969b-13ee7b39cf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770a9a42-2845-49cf-a7bb-9c130d740171",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007c825b-c370-4d7a-8a91-cfabf4fd5945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f58b75-0a27-4671-b64d-cb8b351630da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f757f7-b9a3-4cfc-a930-183a195df28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b56ba80-aa68-4a83-9338-c041277e30bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad0133a-27c2-493e-b92a-50260594fe0e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add25c60-4fa9-4ce6-8853-fbbc5ef6b9fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e6db79-70f9-45b9-8d48-1cc5266fc763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2aac39-b927-4178-b464-750d3a7194da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7febc50e-2bfe-4dc3-83bc-9319c65cd8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186fb526-4707-4fd3-9b9f-54e14356bbda",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4be530b-c5e7-469e-8358-5c7c64d5e374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115de22d-8dd9-48ff-b7e1-6e166ac9128e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00122632-ec0d-475b-8f4c-83d9eb99414c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65c5142-feed-4484-ad7f-50531f04070f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c813938f-3f3f-47e9-9ea9-2cd0c554fd98",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085111df-87e2-49fd-a0e5-9997615b7ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c92559e-7fe1-42ce-88d7-7435cf69d531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2f749c-7baf-4deb-a5f0-46f62ebf0f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbffda54-603b-4759-9562-f4dec86b756d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05875d4-b79f-46fc-b4ea-bfcde77035e9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f350e02e-47a2-48f5-87f7-58f479acf5db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d40471-b1a0-4078-809c-3f90394cb6cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82042f2e-47bf-4ff9-8417-5f3dc0e47d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca9db48-02cf-4680-9145-6d759a91f14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88064b4a-baab-4c05-9bf6-e769c4f2ad2e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd82d7d-db32-4ea7-942a-cd042bb560f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bf22df9-7777-4e20-8b36-4c7dd85fd7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9a5e2b-8317-40cf-ab6e-5b3dc13c580f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d293c92-023d-4212-b0dc-aed6f1685037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59be7aaf-2961-484c-aa13-82855b23aaf0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690c8da4-2ed2-447b-8cfb-78b1bca2522d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ccf9b8b-01c3-4706-bb9a-d481d0ecd17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb205ba-248e-4382-80d8-937359ffc3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afe9d1a-29dd-4022-86e9-29110aff9ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027e9248-c9f6-4195-a4cf-41ed6de521ca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee77acc6-4289-4bf9-aaa4-6a0ecc302ed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f940863f-0219-4ad8-99eb-a5ca5bdc0179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70947b4c-9992-4e3f-abaf-26a28da74ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e524955-e819-41a6-b7a4-a25ccde04304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc6e6c9-0892-47e0-9139-b2ab757d4c59",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e09d8ff-cdef-4444-a527-dcf3c735784f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ddb61c6-2980-4d72-b39f-efbeef9836ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "080c514f-5c5d-400b-a47c-20e46b753608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069c4a1b-a029-4ed3-95e6-d8c9a16fc1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14ab240-7d99-4f80-b8a9-cb601a186336",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b6ca0f-aebf-48ec-937e-bf30960432bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e256e52-5dbf-43fd-8ff6-0edb8b1d0366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5e5450-8e2f-422f-ac65-18ac42f6214f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd4d3fb-f7da-42fa-b711-5e98a654613b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e920aa-f407-4c78-83cd-8a1332810231",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1d5f54-5d32-4051-a5a3-a10506722abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c97793-9a0d-402d-9658-dd20b1eeaf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38429a3e-43e5-41e1-bc7f-b2bb2c9bb646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7d1c2c-1b11-4e85-a6c6-b2e8f6f22a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9b4a19-6d82-42fa-b007-ef6dc7eba731",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6d9e39-2ced-4615-b276-2bb0c1f4360a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb92e1dd-57f4-40f1-9eb6-a3084c2a761b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2242654-31ed-4eb3-8bbb-a3842f3a4bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce35046-9707-4649-b52c-48bb11978615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95b50b5-3f4b-48e9-b5f3-96ce4e4c2829",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460865eb-9eb5-4613-afdb-e518f1a74331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e26225-9a3e-4ebe-86da-4e8243a978d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c425bc9-f378-4ee7-bad8-d1a28b8622a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c105c889-9315-40af-82de-3afadd4751e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a18c884-0f73-456e-a5be-64918aab89d8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7b43d5-4865-4dec-8b27-39af0c49832c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c91b043a-a493-4113-b975-d90294df0bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9999f50b-e139-4873-8fa0-6fa9038298e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4a55d5-42bc-43a8-b863-9a6b6b22847d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa84c7d-bcf5-4ebe-ad66-7110913e284e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c95f0-60e0-4071-ac35-c4c455665058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f22f80-fc60-4106-abb9-a192b5ae4c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ceb86e-fbaa-4519-8741-7fafac58909d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ce99fa-0d9e-4939-bc66-ecdb9dce6a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de343dbe-cb7b-4c7a-a11e-bc2a01110190",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93140663-2ce2-4a40-a6c8-4cfd8a264eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6cf78c1-709b-439f-9de8-9d8f3b435c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15855b0-77ee-4be2-9d17-6889def41db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5921e8-e524-4b04-8216-7c8ac7107672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d581a1de-468c-40d4-ac6b-42da24e23c12",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9a8869-cfe8-4f58-b79c-d6ade6cca924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "001f316e-14c8-4bcc-811c-d9801702e26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f031d77-4b9a-4418-b26b-aa447691a5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddcae96-c936-4944-9b6d-929e4e6ab243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f10e0e-73e0-4af9-96e3-5aa5ff1c00d1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d4403a-1fd7-4d20-8740-7ced05e8ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c1f7cd-c96f-4ff7-b65c-b950fb508dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5cb9c6-7b71-4db6-80b8-e4a67a095ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf66fb5-c87a-4d27-8ede-507d355808bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d995d9f-1d4e-4f27-aa56-28d555f7f675",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ac7e28-25c1-4171-b072-38af7c9ca628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38da6823-1376-4c84-afb1-540ec302231c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7da60db-f4a7-4c98-a32d-6cad2212ced0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190ca8f0-cc46-415c-af32-5e5d2545d979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c0cd4f-7576-4eae-ab0e-50a0ef4b7fc6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cb072f-c994-4b22-9c0a-c2107f3ed132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d3a3b9-79a9-4e70-a882-556b7a552e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179a37f5-ac7a-4773-abb4-55c553b147a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df904e1a-0461-4f11-bc97-dfd68642be76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa5135e-ca3c-4b9f-8642-26aa41c61a71",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fcf51a-f9c6-445d-bf4b-8f6f6c620e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab7169a0-475e-4ebb-86a7-ddc5a7bec8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494cfd8c-b692-4d8d-9273-665e101c8e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf50c582-1e80-4f25-83ef-bbac73c68d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7ba98a-05b5-4670-a306-dc72a1e8fbfc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c112fb4b-9da6-4682-9766-9d0e1eef414d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6f63382-347c-407d-ada2-3735b81288bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3872468a-3bc9-47a0-a8e8-0d45132fbd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bb81e4-bd8d-4155-8631-be71365a0054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b9455-3af9-419c-af4c-aca4d37a49b1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179ab3ee-ccd9-49c1-867c-11497c8e70b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9d291c6-f065-4fa4-b93a-b673296aeaba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb59e59-79d2-494a-9518-c0deb79af076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a154db1-3115-489d-88b4-bbf55588d196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e961a880-b60d-4cd8-9175-2a90514e940b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dad43a-6fb2-4b8e-b126-82805945036b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2664124b-ad24-41c9-92d2-5a721c19573c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a47a41-d6e0-492a-9b75-2584588a52d1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e69d5c0-ad2e-44bd-a40b-6ddcf26a3162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5044a8f5-e8ed-45b4-9519-efc9cb67cf38",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fd28fa-ed7b-4457-982b-9fcc9ed0425a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c233eff0-6d02-433b-bbfb-0981dda8a527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b33192-ee52-4631-b38a-ebbf9c1c631a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccceda4-723b-478d-a6c4-c452b9366148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df617dbb-5239-4e92-8b00-eb674b9a6c03",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87734c0b-318f-4775-b561-aead50b3993e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf5d52b-a667-4e08-a310-20b7170375ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1bcf08-9b07-4aeb-9413-c487321204ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1053bb8f-37e5-4ce3-a7d0-8f98867f4530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c4f65d-438a-4e7e-869b-a85ef198281f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4535558e-5d70-4986-8955-84242812e87e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed485d47-d4a0-49c6-81a5-f936610e8c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f169157-9221-4328-bb79-c32c3f63a314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c94a27-3f4c-465b-a22b-749ff4041528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520fd0e1-0b91-4710-ba4f-5a9a984c50b4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fb5712-0309-45ee-927b-1fd6869cdc13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54069d63-2bf2-45ca-9e7f-6ae9a7b95b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041eee23-0211-4a2f-af44-c7174458ff3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434b6cc1-4914-4a4d-8458-8332f07bc543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672ab252-bcfc-489d-97e1-fa1e89f3e9f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199530e5-9094-4d95-9cb9-26eb26d86c54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d141a5f5-44f0-47c6-94ea-7ae7426d1745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e161b3-bb1d-4501-9cf3-801c872a01b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b140db-c47b-48a6-99dc-b95a4577bca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b330fc8f-ee55-4b62-9e44-36332c82b55c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eaba27-e11f-495f-ba58-4407b3bb7954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b03bce0-0aa5-42c9-961a-8e0dcc44dbed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49231907-528e-4057-8bba-f98ed178fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af50883-6b45-4297-a31b-491ff781872f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854d7b88-26a7-4a5a-b14b-738cf6eb6d7c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad019ee5-c07d-47f2-814f-6675705b7315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fb0b8e6-ae1a-46cb-be32-e42c03b7ee23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed45354-da2a-44b6-a731-fdd0c963d859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6db9d0c-b782-4ab8-ba9b-ee89728b0609"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edfb56e8-957c-4b5a-9152-1ceaad952451",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4df41114-304c-4404-925c-50eea22dd26c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15987c69-f78f-4442-bfe6-bcfcd91f5127",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08ad00ff-9fc5-43a8-9a7e-5a6b4d3384ba"
                    }
                  }
                ]
              },
              {
                "id": "d2226fbf-864f-4a57-aac9-c0e737b93d54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46cf8e23-ccb5-4168-ad25-073ddb89cb2f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987c848d-42aa-49d9-b660-ef9d0556b763",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ff756c08-f1ab-4f59-b88f-4bfa95fa6c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30007e49-023e-4e62-b3a2-53bf702f4054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d1022cc-f5d6-47df-8423-48356c186c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8c52ac-deba-439d-bcb2-b1edc747d503",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64e0b78-3888-494c-a4ec-db98623ca018",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "54d910b5-e056-4d61-91c5-63a387068ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a7a23c-c719-45bb-898e-c8eb23d33973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f650929-b658-4507-8ace-9b96abea74ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10f7a4ab-274f-4161-9922-89d3f3ef4c6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09f4e3c1-5552-4afa-8617-4c2e6a3f7086"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d0434b4-1802-48ff-b191-4868809e7042",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5520d6b1-6b97-433c-ab15-c24e2d4f175d"
                    }
                  }
                ]
              },
              {
                "id": "55503f48-a851-4855-a8b4-0f0178486df5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "38e88f26-d11a-4eee-820a-0977c4a33ba0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57b9b6c-349a-4234-bb7d-cd6b828bd9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b439f867-95ca-43ec-aa08-efd0adf67b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae899e8-47ab-4204-b337-18cd98eb412d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15c46ea-6477-44b7-833e-86edddf2f749"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1001b5ed-65dc-43ce-af7f-2cb0ca368ac3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "036bab0d-be54-484b-9509-984829115c77",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa96392c-99b8-4c64-9801-003907b0a1a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a8835d5b-c133-4548-8223-73bdd75e32d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e21aeba-2d21-4224-ad6b-8bcdaadb95f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60ebb29c-5126-4676-8724-91de67cf6e88"
                    }
                  }
                ]
              },
              {
                "id": "1a70d43c-089c-4637-bce2-1007b7c773a1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1212dd24-a65a-4f90-adcb-7a9a3d9a2b31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "181aab1e-76b4-410f-853e-e3f7d8960821"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf043f6-a248-414e-8f1b-9bb74901947e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2993340-60eb-48fa-bae2-1e8c250876ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebb7aa96-e2b0-4954-986e-f9409bd3151b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b936cfbc-2d51-46a6-9f5d-251c5b648b90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "becb8687-6e7b-46da-baa7-ea6771225777",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83fd68a3-4245-44b4-8d3b-84e7d7201caf"
            }
          }
        ]
      },
      {
        "id": "6d52580f-dac4-4966-b2b8-0d70f42d5180",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9674dc13-21ed-4bca-aeca-026f9e8d2c54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0f1f423-d0e6-45bf-b169-aff3c5e10c31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add6ab97-f6f7-4fb5-9060-68b1a1a5db80",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f43116c6-a00c-42e8-afcc-28a7a7ade32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522ac445-94a0-4e14-aed5-942fd7ec32bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec02be52-ca9c-4758-86e3-044ea8020753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e20467-b24f-4a12-ad55-6002ed208464",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa408715-a348-4625-b06d-9e4548c070a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6892b96c-6cb0-4ab8-a8da-5750db86fbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29be63af-ef84-4e73-83ef-8fc526feb20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34335e63-fec0-4cc7-a453-493e1c2e1a0a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95ab9ab4-8cad-413b-9e11-3fd61f3a9740",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4c48b89-5e75-46ea-ae44-602a8a8d13b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e93651a-b00e-4252-9ffb-f9e957bb5d97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aab6e81a-781a-4efb-834a-25325e4bfa16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6458e984-45c9-48ec-88fd-9fb4087769c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "21cf9a0b-8d6d-4523-963d-a405f534f07d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1b8bc18-e758-4a7e-abce-ccc564108bb6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dc94c31-3c19-43df-8e2a-879762fc6e8f"
            }
          }
        ]
      },
      {
        "id": "77365dd5-c3a4-4fec-a731-096008f74268",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "212ecfd1-e0b0-46b3-930d-a45f42a7938c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eaff918c-5e8d-4a4a-80eb-388c683db29d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9f8bfb2-2de5-49e5-9b55-e9ea9fd8cb75",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136f1ec5-70dd-48c9-a12e-e01e0b284115",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b24f192f-520e-49cc-ad69-3552a5e21444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2de60c6-2831-4e25-9f6f-1bccfe72b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a320795-90c0-4e78-a088-6e80cad0a39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0f6387-72bd-452b-9133-fb83588a801c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23decda-dd70-4a32-bac6-919effed0196",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b3390f4e-10c8-454b-82a2-69028c1f8f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7ab478-5360-4926-ba90-32503dc00e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63547268-27c7-493d-b4fb-78b0d6bb9f40"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71093c2e-2fa7-4d41-9768-64add92631bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "919384c9-7d35-4435-b29a-eb8bba0190b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f374eb4-e419-4919-882f-0a25f891357f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bf95367-758b-403e-a19b-6e249929137c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a873c614-7976-485a-8ea1-2865c7c1b7d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9c79e2a2-1a18-44b3-8c0d-fe9f7f23bdd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "536fa04b-d089-4b2c-a0df-0e8560e889da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a22321af-c7a2-46fe-ba08-e22f528c5222"
            }
          }
        ]
      },
      {
        "id": "39db1364-45df-476f-894d-018241f8d694",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "00609528-147b-4de5-9715-2d0351108f96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9da7c82-675c-4477-bfd7-2828321c9866",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a476c9a-0f08-4762-b40f-67c9861cee64",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fe86e5-66f8-4003-9129-2b64bdc1129b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be6a49a5-e2c4-4411-97cd-803bf27a3b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a69a6dc-c874-40ca-9008-f9406338803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8d8def4-f634-4235-b34c-dd927bf67ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99496b7b-afc0-453d-a89d-7e90a7913174",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45a4835-691a-488c-84b7-a35ee23f8bc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "74601215-8b31-4519-b0cb-b099e0bfd2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b80988-4039-4468-b0a9-39505f739d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b75956a0-dabe-457f-bcbf-ce678e7724f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52629ad1-c9c2-4903-9716-082b0345d3ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0abe9908-c489-4769-9c9c-226602ba75fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "028f7349-4d74-47f6-9881-f5dfbc8960f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "184f8ef2-9723-4744-9c5a-4fbae0107bac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6152ec09-84f6-4d70-a26a-58ca5dd2cb03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f289f1bb-2cae-44cf-82c8-161723cba0cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06830e75-08ff-4ddb-85b7-3aec4f160f1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cc1562d-f29f-4a6a-a81f-ea1adb960095"
            }
          }
        ]
      },
      {
        "id": "da900adf-95dc-4682-8b7b-0fe0e7630b80",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f56eab4-2a30-47d7-b178-0079cba5f20c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd58f148-3579-496a-bd8b-b15276f70f77",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b6621851-cd8d-4db3-97b1-fa945a153d67",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4728b0e3-dc78-47b7-bed0-9d533e728ea9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ac1eb6a-1704-45ce-9519-2388d0b60bbf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 295.83461538461546,
      "responseMin": 21,
      "responseMax": 4465,
      "responseSd": 715.2309091595246,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681519117301,
      "completed": 1681519204824
    },
    "executions": [
      {
        "id": "7572301b-6f7f-48a8-90f9-a3dd006e2401",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ed86325d-aeca-4824-aa3d-1090d7d8547d",
          "httpRequestId": "9a898262-a9d6-4a4b-ba69-0d7afd1e7704"
        },
        "item": {
          "id": "7572301b-6f7f-48a8-90f9-a3dd006e2401",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7869d8c6-4b2d-46ba-a0c3-491cf146dd4c",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "f53ff0c4-cb7d-4df9-ae5a-c3f13d6cd085",
        "cursor": {
          "ref": "96c5128f-a090-447c-971a-d1b9e06bf2ce",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "186d414a-6d8e-4c06-afd1-a39b3a75cdc7"
        },
        "item": {
          "id": "f53ff0c4-cb7d-4df9-ae5a-c3f13d6cd085",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cc975c52-b7cd-47b7-84ae-c111260fa55f",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "d312249f-35af-435c-b8be-8a7d6434d6c9",
        "cursor": {
          "ref": "1044fb6b-b24d-4e72-82f5-839cddf1627e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fb7b1d20-a063-424d-8d99-3c2585b6dffe"
        },
        "item": {
          "id": "d312249f-35af-435c-b8be-8a7d6434d6c9",
          "name": "did_json"
        },
        "response": {
          "id": "1c7b26db-7a7a-4953-a46d-34faf38e52c3",
          "status": "OK",
          "code": 200,
          "responseTime": 584,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd267429-c610-4f06-8993-a2af1ae6c7df",
        "cursor": {
          "ref": "5c20ef58-7895-4e74-a641-66ac50452ac5",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "beb79185-a1bf-4720-a675-7c3f77cbba78"
        },
        "item": {
          "id": "fd267429-c610-4f06-8993-a2af1ae6c7df",
          "name": "did:invalid"
        },
        "response": {
          "id": "59045c75-c89a-4f17-9e8a-29a8967ca3d1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1304,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fd267429-c610-4f06-8993-a2af1ae6c7df",
        "cursor": {
          "ref": "5c20ef58-7895-4e74-a641-66ac50452ac5",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "beb79185-a1bf-4720-a675-7c3f77cbba78"
        },
        "item": {
          "id": "fd267429-c610-4f06-8993-a2af1ae6c7df",
          "name": "did:invalid"
        },
        "response": {
          "id": "59045c75-c89a-4f17-9e8a-29a8967ca3d1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1304,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b5680751-3aa6-4e81-b32c-94b07a1d3152",
        "cursor": {
          "ref": "aa3594ce-17ec-46bc-a298-3a42ba50134b",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "240334f8-ae91-4487-87c7-049ed1336e2e"
        },
        "item": {
          "id": "b5680751-3aa6-4e81-b32c-94b07a1d3152",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0f57dcc2-848a-43cc-8d5b-4ec6bd73f9a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57c05cc-30aa-4d3e-b7eb-f6dfed0a1582",
        "cursor": {
          "ref": "a5221301-662d-45d3-930f-751dc2977a4b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cfe11de1-1a25-4796-9c52-9755d7d64214"
        },
        "item": {
          "id": "d57c05cc-30aa-4d3e-b7eb-f6dfed0a1582",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a715451f-7ee7-4c28-b3c0-2eb5c9a3f11a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59d6469-eb32-4566-82d5-3f0acecce9f4",
        "cursor": {
          "ref": "a0af0e2c-fc77-486a-904a-9b80276cd92f",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6c85c503-abf2-4995-a5e1-4938b0477d85"
        },
        "item": {
          "id": "c59d6469-eb32-4566-82d5-3f0acecce9f4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7bc3e9b4-5841-4607-b06b-479327efe48c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f9ca1d23-c150-4677-baed-6436b78cb90e",
        "cursor": {
          "ref": "79855b01-a2f9-492e-ac97-32b140cf90ba",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0779e458-7617-4f8d-988d-cf762c285213"
        },
        "item": {
          "id": "f9ca1d23-c150-4677-baed-6436b78cb90e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e24a6112-7881-48f4-9419-50e58c379ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 444,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f9ca1d23-c150-4677-baed-6436b78cb90e",
        "cursor": {
          "ref": "79855b01-a2f9-492e-ac97-32b140cf90ba",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0779e458-7617-4f8d-988d-cf762c285213"
        },
        "item": {
          "id": "f9ca1d23-c150-4677-baed-6436b78cb90e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e24a6112-7881-48f4-9419-50e58c379ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 444,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6a37b875-8629-4dce-9b43-d5ca6ae4e5c2",
        "cursor": {
          "ref": "e7131dad-0241-4aab-9644-c065e4bda29c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6d539475-505e-4c70-a589-072d311f48fd"
        },
        "item": {
          "id": "6a37b875-8629-4dce-9b43-d5ca6ae4e5c2",
          "name": "identifiers"
        },
        "response": {
          "id": "184703f8-4d44-44ce-86d0-5ca586d7adaa",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ffb435-2c53-44f2-8813-b66770517e53",
        "cursor": {
          "ref": "09f06218-6852-476b-b6d5-a3f6b5f1b007",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8db7d926-8097-4d03-9897-b83b59de565f"
        },
        "item": {
          "id": "a1ffb435-2c53-44f2-8813-b66770517e53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "be2d4033-6d71-427d-b3a1-1554c75b83d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ffb435-2c53-44f2-8813-b66770517e53",
        "cursor": {
          "ref": "09f06218-6852-476b-b6d5-a3f6b5f1b007",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8db7d926-8097-4d03-9897-b83b59de565f"
        },
        "item": {
          "id": "a1ffb435-2c53-44f2-8813-b66770517e53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "be2d4033-6d71-427d-b3a1-1554c75b83d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ddd9e5-9e41-430d-b5bf-6201554f2b4d",
        "cursor": {
          "ref": "45910538-b427-489a-81e9-2dab2138d720",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7fa3c933-8178-4bd9-a801-a56d9f28703c"
        },
        "item": {
          "id": "83ddd9e5-9e41-430d-b5bf-6201554f2b4d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "90ac130a-979f-41db-862f-3ba3780325b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff76cbcc-d764-46c3-9a9a-8bfeb1cde476",
        "cursor": {
          "ref": "5587261b-1507-4af1-8b6f-af2cc5a7571f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1afbdad2-b021-4326-9211-f97052f3fe41"
        },
        "item": {
          "id": "ff76cbcc-d764-46c3-9a9a-8bfeb1cde476",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ea7a3f23-2ee5-4038-85f7-ee258fbf728c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4952940-c037-4585-9f3b-3b994fbe308e",
        "cursor": {
          "ref": "453c0883-c97c-4956-b530-62f48f8d16d6",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e324fc0f-a5bc-412e-bd14-30b5dc330c31"
        },
        "item": {
          "id": "a4952940-c037-4585-9f3b-3b994fbe308e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7499b677-bead-457a-a9ce-fba6e37f5de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f3ae44-d044-490a-a771-e2d7856583f4",
        "cursor": {
          "ref": "0712dae5-5c0e-4f0d-9291-90091f3aff83",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6e51cdab-89fa-4529-8f8b-9303a823a568"
        },
        "item": {
          "id": "99f3ae44-d044-490a-a771-e2d7856583f4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf5549f6-9526-4a38-8395-9b596eb8ca90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281e0fd1-cf03-4e38-bf95-d84bac202d82",
        "cursor": {
          "ref": "704d4b30-a3b7-4136-97ef-87db0dc2bf79",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ae810d72-1dbd-4390-b9b8-cd06daf843b7"
        },
        "item": {
          "id": "281e0fd1-cf03-4e38-bf95-d84bac202d82",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5b8de3de-06d2-49e3-81ac-d32185da3bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7317831-0a49-476e-8939-ec7da6e39fb9",
        "cursor": {
          "ref": "c1592c18-fa9d-4790-b23d-f855501a499a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b8843846-809d-4d99-996d-c064fd4a3f0c"
        },
        "item": {
          "id": "d7317831-0a49-476e-8939-ec7da6e39fb9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d8f5fcc6-d657-467b-b5b8-9322cb96f911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8b44bf-ffa5-41cc-80da-c2af66dd0a48",
        "cursor": {
          "ref": "daa95a54-dd18-4923-b110-2e178833ccf5",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "704a69b3-820a-43fe-9e45-3c535c5a4582"
        },
        "item": {
          "id": "1b8b44bf-ffa5-41cc-80da-c2af66dd0a48",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7e9a8c9f-ac88-4885-9fba-e365ccda31e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becd33ed-66fc-43e4-a933-dfc892366291",
        "cursor": {
          "ref": "8c640b70-dd1b-4a38-81f0-30e8a8dbc0c6",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3d1693e3-80cc-4168-b8c6-2b6caea66a02"
        },
        "item": {
          "id": "becd33ed-66fc-43e4-a933-dfc892366291",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "85338279-a609-4923-be6d-7e1ea7808cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1343e659-d72e-4c8b-a50b-a97af5a88a27",
        "cursor": {
          "ref": "631de28e-6b92-4f68-b2ed-2415ba68cfbd",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8d3eb4c1-4217-4477-aead-fa2233081566"
        },
        "item": {
          "id": "1343e659-d72e-4c8b-a50b-a97af5a88a27",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7ed5cad7-4b9d-4233-ad22-20f36365d9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0d08ce-5639-47d1-94ec-00c82f32a217",
        "cursor": {
          "ref": "63516afc-78e1-4fd5-bd6b-6a725266255d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87d51f44-cf51-4cbe-9e7e-1b34d32f605e"
        },
        "item": {
          "id": "4d0d08ce-5639-47d1-94ec-00c82f32a217",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "63522ae3-1f0d-43e9-a3e2-6ff0239bbed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e851c8c9-2854-4947-985a-1d5aab4e8db8",
        "cursor": {
          "ref": "cdce9c4b-c66a-4f2f-aa90-496926ad8cec",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b16d55a9-df82-42a5-bbe9-55e7ffc22c1f"
        },
        "item": {
          "id": "e851c8c9-2854-4947-985a-1d5aab4e8db8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "66ab8fcf-59c3-456b-8bc6-61c6b4196149",
          "status": "Created",
          "code": 201,
          "responseTime": 4465,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "be5b8055-9f94-4edf-a9b9-9d8df92c2690",
        "cursor": {
          "ref": "68fd8beb-34aa-4620-a4a9-baadff845d7c",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "50da77a3-91e3-41da-87a5-4baaab157977"
        },
        "item": {
          "id": "be5b8055-9f94-4edf-a9b9-9d8df92c2690",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f434ee78-fba4-4fff-aa32-2fcd0558f958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3630d4e5-bb24-4338-9e2c-d45a384649f3",
        "cursor": {
          "ref": "748574fd-e361-4d94-8a7d-40938ec6fc7c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "548d5e7c-05dd-4e70-be94-5bd8c2357829"
        },
        "item": {
          "id": "3630d4e5-bb24-4338-9e2c-d45a384649f3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a5276340-17bb-401e-ac14-9ea61a5864aa",
          "status": "Created",
          "code": 201,
          "responseTime": 4027,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "aed3eba2-3e90-4987-abec-af460f1faa97",
        "cursor": {
          "ref": "d9e4e4e8-a427-42d3-95b3-b08338a5ce00",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8259cc21-c277-4c6e-ae1a-128f173b5177"
        },
        "item": {
          "id": "aed3eba2-3e90-4987-abec-af460f1faa97",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bc9770f4-6de1-4c57-895a-b84f70010c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71841a9-3ca6-46a5-b3bf-aa38bf378127",
        "cursor": {
          "ref": "02af2acb-1b8f-40b2-a95d-1d614df98641",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ebdc57f9-b8eb-452b-af05-a4867b982b7f"
        },
        "item": {
          "id": "b71841a9-3ca6-46a5-b3bf-aa38bf378127",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f47aa29f-327a-4071-af33-3f43e9a01da0",
          "status": "Created",
          "code": 201,
          "responseTime": 3077,
          "responseSize": 973
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a9ad677e-229f-4755-9ddb-cab71dd36e59",
        "cursor": {
          "ref": "fe440c74-6659-4ae8-92f5-9ca2a1a4c8e8",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d34b97d-9e69-4026-be04-27d984b86603"
        },
        "item": {
          "id": "a9ad677e-229f-4755-9ddb-cab71dd36e59",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3cc6fc19-01e5-4eaf-b1b5-3b7e872aa2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ee54e7-2fca-40e8-b3e7-39c906a22c3b",
        "cursor": {
          "ref": "13c163d2-da49-44ad-91cb-d697826d1fbf",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ab3e49ab-008d-4f33-91ab-62d26f1a38a5"
        },
        "item": {
          "id": "58ee54e7-2fca-40e8-b3e7-39c906a22c3b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b9e51dd7-1449-46eb-8907-519d8cd8c507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fd0277-9b88-4a22-9d9a-51d2a0075917",
        "cursor": {
          "ref": "a73c1675-1067-4dbf-90fa-c58758cb9516",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "38d4070b-ad0b-4f17-81f7-7a9dba6bf839"
        },
        "item": {
          "id": "d9fd0277-9b88-4a22-9d9a-51d2a0075917",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "46503e68-4ec3-4bbc-a42a-3971ff8a8c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4766d9-1632-46ec-af81-30253f36823d",
        "cursor": {
          "ref": "dcc1e389-9eda-4703-97c0-d07f9444a309",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "30f88878-80f2-4c04-998c-fc2388a217dc"
        },
        "item": {
          "id": "4a4766d9-1632-46ec-af81-30253f36823d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "248fb403-0168-4aef-a4db-4714a1ad20ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c55802-ca4a-4d7c-9e9a-4de4812d8beb",
        "cursor": {
          "ref": "516045a2-a9e5-4748-82fb-0a31ea9b9c44",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1a6559e3-e7d3-4633-b706-2ebdacd9299b"
        },
        "item": {
          "id": "69c55802-ca4a-4d7c-9e9a-4de4812d8beb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cfcb3b78-864a-47a7-a355-389cf583cef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e467d2c-5b59-460b-b859-e0172ec92013",
        "cursor": {
          "ref": "af466cdf-e7a9-4123-bbac-04b5a22db94d",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ac91592a-802a-4928-bef0-2d3fd5704515"
        },
        "item": {
          "id": "0e467d2c-5b59-460b-b859-e0172ec92013",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c8d0e49-6007-43d5-a588-7d1ddae36197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba38502e-28a0-412c-a80b-879d3e516750",
        "cursor": {
          "ref": "532aa8f4-48a2-4470-bcba-484cff0bc034",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "db244028-8efc-438d-8620-77617c89d61f"
        },
        "item": {
          "id": "ba38502e-28a0-412c-a80b-879d3e516750",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "334e18b9-d941-4629-a2ad-ef6728b13e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d3bf3-b21c-465b-9187-47d9d80e7c0b",
        "cursor": {
          "ref": "d7e33658-365b-4691-8a63-2a810add48f3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "33077f8f-b90e-4f9e-8eda-d8c86258c776"
        },
        "item": {
          "id": "780d3bf3-b21c-465b-9187-47d9d80e7c0b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "87d1b8a5-63e9-4470-a258-d3c2118703c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149ef018-9bb5-4293-9a79-05337b34e3b4",
        "cursor": {
          "ref": "a28473b0-5105-45a7-9329-2b7dbd9fc76e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "79e1c840-6005-423a-9aba-63ef85b700c5"
        },
        "item": {
          "id": "149ef018-9bb5-4293-9a79-05337b34e3b4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d7cf31e7-4e6a-4f23-b094-d9f3da1bfc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca4c4fe-9003-4b5e-8b59-db34c39e2223",
        "cursor": {
          "ref": "e5501b0c-58b8-4202-9307-cb3d06f00766",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3790f38d-dc5e-4645-a586-13e97db0da10"
        },
        "item": {
          "id": "7ca4c4fe-9003-4b5e-8b59-db34c39e2223",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2e151367-9d74-4119-ac25-56cf74146f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d406f06-f1ba-43a2-a1db-2f62b649b4d2",
        "cursor": {
          "ref": "4ce2a27f-b73a-4df4-8f01-cabc87bc1d81",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3d86d47c-7fbc-4032-aaab-20f156bae34f"
        },
        "item": {
          "id": "9d406f06-f1ba-43a2-a1db-2f62b649b4d2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9e03ab10-1e47-42ce-8ea5-1e6d137ca050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a6341a-0969-4a20-a461-a0915cb8e9ee",
        "cursor": {
          "ref": "94f3d4fc-f588-4e30-8928-adf3f5950b76",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ef1626ef-0ad0-43c3-a2ab-15c880c4b2ef"
        },
        "item": {
          "id": "49a6341a-0969-4a20-a461-a0915cb8e9ee",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4d1b9bbf-8330-4078-9695-618024e198a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08953337-68b8-4355-9c33-341ce0458977",
        "cursor": {
          "ref": "825cc983-4be0-4c4d-ae00-d7570abcda17",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17a9db95-35aa-4b92-9654-d674ce716a37"
        },
        "item": {
          "id": "08953337-68b8-4355-9c33-341ce0458977",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "99cdbfa6-e0cf-43ae-ad99-7364f4abc631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51dba6c-7c52-4b88-b667-4ace1fce2a7d",
        "cursor": {
          "ref": "ccf2877b-5478-45d9-8a2e-313ec76d9d52",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b61e6450-0e68-49bc-8b18-655226e42853"
        },
        "item": {
          "id": "c51dba6c-7c52-4b88-b667-4ace1fce2a7d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6906f948-eac0-46f1-9047-6255e14cab25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe77230-02db-4440-a745-201703a7a834",
        "cursor": {
          "ref": "e8454c88-5561-4fd0-87b8-75da680982ab",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a48ec958-17c2-4823-9e0b-edd8113d3f09"
        },
        "item": {
          "id": "ebe77230-02db-4440-a745-201703a7a834",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "09375bdf-f97d-48ab-8c6e-d97c95fe171d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9f15d0-7a47-4be6-bc04-7bba978c4f8f",
        "cursor": {
          "ref": "95fa66a1-f208-4a08-b78e-fc334ac56ce9",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b6dd9dd2-e87b-40bb-9c82-e30dc5bf79aa"
        },
        "item": {
          "id": "ec9f15d0-7a47-4be6-bc04-7bba978c4f8f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "741f1e4e-dc50-4e7c-a424-3b6871f99c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a703cd-0045-416c-a789-cb40cff4762c",
        "cursor": {
          "ref": "71e6ff6b-b1a5-4dca-aa42-1be940339db4",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cba7f247-b4fc-47c4-be29-49ec6c1b3baa"
        },
        "item": {
          "id": "70a703cd-0045-416c-a789-cb40cff4762c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "67c11f41-7554-4675-8a3e-d7492342d465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d3ffae-f2f9-4210-9402-75023d88f5f9",
        "cursor": {
          "ref": "01bceeac-b346-4ec5-acc8-e450d7499488",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "93b354d7-a135-49d6-9888-432ffb969ba9"
        },
        "item": {
          "id": "d9d3ffae-f2f9-4210-9402-75023d88f5f9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e6659ddd-4d4f-441c-a23b-895df8a326b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cabf29-1a67-429c-88e4-d7b023c35909",
        "cursor": {
          "ref": "3a0a0b94-975c-4fbc-a54c-6f66879a3219",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e2444338-bb6c-4beb-8e1f-aefcb65c913f"
        },
        "item": {
          "id": "b8cabf29-1a67-429c-88e4-d7b023c35909",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2ae2b7dd-6e4c-424f-b14e-cac2a3e98b22",
          "status": "Created",
          "code": 201,
          "responseTime": 2782,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "89a1cb87-f53a-44be-9fde-e846a5fbcf1b",
        "cursor": {
          "ref": "7ffb2119-7ace-4394-8707-9e96af7dfe65",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e4a6b3ff-6351-435d-94b0-254e526c8de0"
        },
        "item": {
          "id": "89a1cb87-f53a-44be-9fde-e846a5fbcf1b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5faf5708-2522-475e-8b2c-c4a4e23ed4c6",
          "status": "Created",
          "code": 201,
          "responseTime": 2644,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "58c5e169-9baa-4a5c-adb5-ace2dcd4b032",
        "cursor": {
          "ref": "1829e6f7-1a53-4727-89cc-1bb37bc6bb3a",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b8d50def-017a-49bd-ab0e-13d00e7b509b"
        },
        "item": {
          "id": "58c5e169-9baa-4a5c-adb5-ace2dcd4b032",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1568854e-53e0-4425-ab89-57a20e0060dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e07175-733c-45df-8e00-6afced970d09",
        "cursor": {
          "ref": "144fa052-45d5-4ea1-b377-4e37b86cb485",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "68798a35-15af-4d2f-9e1d-b145051c73b3"
        },
        "item": {
          "id": "03e07175-733c-45df-8e00-6afced970d09",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "32d6a02f-df0f-4650-b0cf-1cc7adfd2829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7341b4-d9da-43ca-a4f9-d54f1dde130b",
        "cursor": {
          "ref": "63aeaaeb-c319-4dbe-8b66-3942dd7181b7",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7cbd4b86-1f88-4d43-91fc-100959eaa55f"
        },
        "item": {
          "id": "0e7341b4-d9da-43ca-a4f9-d54f1dde130b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c3774235-bb87-49fd-95af-95ecb1592b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdbd2f0-daf3-4406-aa7d-c74cd247b5ef",
        "cursor": {
          "ref": "61138e9b-0bd2-423c-9bc8-0d1590e9ec7c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9d4a44e5-b564-44a7-8808-6c1c83675018"
        },
        "item": {
          "id": "ccdbd2f0-daf3-4406-aa7d-c74cd247b5ef",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9ace25b8-cfe5-4cf2-93c4-e36adc089d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d30ca2b-4873-4b8f-9210-830a44ad5819",
        "cursor": {
          "ref": "977e4ddd-14f6-4275-8d54-8df92114fd9b",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "80a253a5-d7d4-48c2-beae-335184a28d43"
        },
        "item": {
          "id": "3d30ca2b-4873-4b8f-9210-830a44ad5819",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3100bb1c-e2e3-43fc-9acd-33ed2f2b68df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b3ee24-c3cf-4a09-b44b-5974529d9b88",
        "cursor": {
          "ref": "029c210e-0cdd-4cca-ad96-2ac7a6098463",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7a2032a4-683b-4a7d-ba53-ea57a1309425"
        },
        "item": {
          "id": "58b3ee24-c3cf-4a09-b44b-5974529d9b88",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "41ccaf35-c109-4bd1-b70f-0c28da59275f",
          "status": "Created",
          "code": 201,
          "responseTime": 2553,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e5229da-2daa-4873-9dcf-7be81be8b978",
        "cursor": {
          "ref": "2fc4c25e-956e-4e06-a259-76f1f595ff6a",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ce978efa-be2a-40f8-bbd5-8303bc50cdcf"
        },
        "item": {
          "id": "0e5229da-2daa-4873-9dcf-7be81be8b978",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b986a365-cc0e-44a3-869a-e7f88268b5d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2631,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0e7d431f-bf66-4ac0-bb1f-10df5bc9c63c",
        "cursor": {
          "ref": "d1247f8f-aae1-47a4-8925-c67442ab6fe2",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f4e0328e-d4dd-4952-8434-175979743f04"
        },
        "item": {
          "id": "0e7d431f-bf66-4ac0-bb1f-10df5bc9c63c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9a1b0875-606b-4aca-84de-95919a575f18",
          "status": "Created",
          "code": 201,
          "responseTime": 1811,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "90ca21b5-7234-4eca-ad93-cd5d1c0836ca",
        "cursor": {
          "ref": "906df09e-d422-4209-b7df-afec529f42c4",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7203612d-9cfe-49cc-9df2-703d98aabc89"
        },
        "item": {
          "id": "90ca21b5-7234-4eca-ad93-cd5d1c0836ca",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3fb12b03-4f44-42f0-a65f-12bc41f3cc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5422b0-6249-4b31-93ce-7407cc7f16cf",
        "cursor": {
          "ref": "bba84f09-a953-43dd-996a-a4fe46046fab",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "43ac3c0e-5623-4d3b-87d7-92b2938f5559"
        },
        "item": {
          "id": "3c5422b0-6249-4b31-93ce-7407cc7f16cf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "47a8bf9b-a171-452e-867d-9ca4962a5c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d388dedb-5e64-4e06-8650-43cb8a925720",
        "cursor": {
          "ref": "1059958f-2920-4907-8f36-a8e193a22ba6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7c33a9f4-4a05-4501-a570-97917e1381c2"
        },
        "item": {
          "id": "d388dedb-5e64-4e06-8650-43cb8a925720",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db1fead7-44d3-4246-bbbd-34b82f7e93ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bdd538-7a5a-4c25-bb9c-b9f02db9770f",
        "cursor": {
          "ref": "f199da35-78d4-47db-bc82-a65cce0eb776",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9c4f051a-3237-4226-8257-4d8ef6981acd"
        },
        "item": {
          "id": "d9bdd538-7a5a-4c25-bb9c-b9f02db9770f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3f2a62c5-b0b0-42ea-98c8-5fa10dca6c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dab736-d85d-40a6-a941-5fafc45752c3",
        "cursor": {
          "ref": "c02445c4-740a-4731-81d3-053d62640554",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b003a610-8b61-4199-b554-8c2961e6e6d0"
        },
        "item": {
          "id": "93dab736-d85d-40a6-a941-5fafc45752c3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "970680e4-83c4-4c4d-a5d4-0348d087634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7102fb48-4dcf-4b9e-8a11-bbed239c16f3",
        "cursor": {
          "ref": "9dceb78f-e38f-4420-ba3b-ef2d45e16460",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cdedf572-6bfb-4770-a644-3646c61cf580"
        },
        "item": {
          "id": "7102fb48-4dcf-4b9e-8a11-bbed239c16f3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9045c2a4-4cdb-41da-950c-2df86a2a613c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0e3bd4-b58d-4c2e-997f-d969221e24a1",
        "cursor": {
          "ref": "bb8ee507-11bb-476e-a4af-1f388bf12df1",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "443170e0-9bda-4b14-87a3-b30810f11830"
        },
        "item": {
          "id": "bb0e3bd4-b58d-4c2e-997f-d969221e24a1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5803529b-bb12-4d23-803a-ea0c8eea287e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13851c93-1b5f-4fc7-9b82-5c00c53da4e8",
        "cursor": {
          "ref": "31ad70ae-2523-4291-a939-690a5c0fecfa",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2d147244-9c22-416d-bc85-dfb6e17a9cad"
        },
        "item": {
          "id": "13851c93-1b5f-4fc7-9b82-5c00c53da4e8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b547751d-5bb3-408c-9c37-41de6f905f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80aa085-7774-43ef-b825-8d26a900f30b",
        "cursor": {
          "ref": "17673dc4-4cb4-46ab-b965-57aba26ebcb1",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4444bf37-8d20-4f95-9ba1-8cc807332852"
        },
        "item": {
          "id": "a80aa085-7774-43ef-b825-8d26a900f30b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e1cd5926-20fc-440a-8bfc-e9377da7bc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f64a9c-de52-43b2-b583-05d6fd1916f1",
        "cursor": {
          "ref": "f43600b2-1e25-45de-a778-e01d9a055262",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "deb4aac0-f8cf-4100-9745-3cf06a775d4d"
        },
        "item": {
          "id": "76f64a9c-de52-43b2-b583-05d6fd1916f1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dd7e1f0a-2c78-41f9-ac51-3a434c84e7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3022590b-dc34-40bd-96c9-f93b8392717d",
        "cursor": {
          "ref": "b0018ae5-7233-4a4e-932b-7380a6c1568b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b8d78442-2d3b-4857-93ea-5470a0368703"
        },
        "item": {
          "id": "3022590b-dc34-40bd-96c9-f93b8392717d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d3995afc-f26a-41b3-89cf-a06bccf78b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320b281a-8de3-44da-a60b-a61f3be4fd93",
        "cursor": {
          "ref": "be8bc897-34e0-4f98-929a-d50cb056c964",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f465b3a6-3937-4940-9707-dfa24c130656"
        },
        "item": {
          "id": "320b281a-8de3-44da-a60b-a61f3be4fd93",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "766e3bfe-3ac9-46bc-8a29-2203a29c5069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca208771-2566-4a23-81b5-ed8f336ff4e5",
        "cursor": {
          "ref": "bb8fa9d4-5e92-463d-b968-e122f1b6eb1c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1ef93d62-5011-435f-9838-fafdc3294864"
        },
        "item": {
          "id": "ca208771-2566-4a23-81b5-ed8f336ff4e5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e31d55e2-40e9-4e9f-9a34-c3f9fa5ae2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23bd1fd-f704-4fa9-94d5-d7f133d56c20",
        "cursor": {
          "ref": "31cfcb47-483d-4e0c-93b3-2c73bf8b3843",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "15a66d5c-c273-4e94-be73-10495ada8048"
        },
        "item": {
          "id": "f23bd1fd-f704-4fa9-94d5-d7f133d56c20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bd1143a8-4652-4225-a1b0-1537172cf961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cf7bd6-a55b-435f-9912-0e0046617562",
        "cursor": {
          "ref": "dcc84606-ecf4-47b4-9d61-c14c28bbc06b",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1ae7e94f-e82b-43db-a009-e0b66c7afe9f"
        },
        "item": {
          "id": "80cf7bd6-a55b-435f-9912-0e0046617562",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "db64f39a-d632-46bf-a4a4-03d4ce334dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0f36c7-b37d-4a63-b53d-734931c94d36",
        "cursor": {
          "ref": "17a175f1-3585-4326-b026-259263e6b9a0",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "67fee304-bba4-4447-8f1c-3a0c9c51985c"
        },
        "item": {
          "id": "da0f36c7-b37d-4a63-b53d-734931c94d36",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0563bb80-a59e-4da7-a404-d6a807ac7826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee12086-ea64-4b96-9085-4836a9b720cd",
        "cursor": {
          "ref": "a7832006-26ad-4133-ae14-680316522890",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b37fd694-be6e-4ba1-b350-df72e0427613"
        },
        "item": {
          "id": "cee12086-ea64-4b96-9085-4836a9b720cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "59f46af8-8a98-4a21-9ea1-459f3c32999c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741b03ca-e351-484f-9e07-4e6278e1b827",
        "cursor": {
          "ref": "9578918d-2a08-4eb4-8e9d-e89648ff5ff0",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a84b2459-1716-406f-ba4c-15b89dcd693b"
        },
        "item": {
          "id": "741b03ca-e351-484f-9e07-4e6278e1b827",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7db37ffb-a199-4739-a795-8a666b5cbb3a",
          "status": "Created",
          "code": 201,
          "responseTime": 2442,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "437ce4f2-99ee-404f-a568-16b1e690082d",
        "cursor": {
          "ref": "77eddd02-4288-48c6-a56f-57a7aedde96e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bcca8dc2-3ad5-4014-be93-5a23ea1cbcc9"
        },
        "item": {
          "id": "437ce4f2-99ee-404f-a568-16b1e690082d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c7071184-c6a4-4438-9531-7b94eeeb5bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19935797-1973-4f3f-9d28-83f1c4c58f6b",
        "cursor": {
          "ref": "9b9c29eb-481a-4a8d-a785-38752677aad9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "845ed1bf-5447-44fd-bddc-0de95f986273"
        },
        "item": {
          "id": "19935797-1973-4f3f-9d28-83f1c4c58f6b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f8ce8fcc-b59a-4a4f-be13-05f32971eb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b44b31c-a078-4a5c-a86a-7e44749149f5",
        "cursor": {
          "ref": "4fcd6dcb-d533-4d7d-b58c-e4683f130bd5",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d3872551-4b72-4eef-981a-31d07dc028e1"
        },
        "item": {
          "id": "4b44b31c-a078-4a5c-a86a-7e44749149f5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a7414516-0715-4305-b2e4-68fd243f2b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fde425-02a1-40b6-8806-85610bd3b6c2",
        "cursor": {
          "ref": "6e613a7b-1093-4d22-9e8a-4d12871fbaf7",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "749e8a78-e2a4-4c7c-8b1d-23cefd20b27a"
        },
        "item": {
          "id": "35fde425-02a1-40b6-8806-85610bd3b6c2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e7c6b432-4959-4467-b10e-d5b6025ce7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad326a9e-a439-458f-b43d-a5ad091701da",
        "cursor": {
          "ref": "f7df722b-9f11-40ed-8e92-307518a4b585",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bb69beaf-84a3-48cd-9204-590ff87e35a1"
        },
        "item": {
          "id": "ad326a9e-a439-458f-b43d-a5ad091701da",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bfeb0651-4d31-4983-aca5-0c8403b1f3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d093359-6e1d-47a5-8c32-402f05443f0e",
        "cursor": {
          "ref": "80ce3473-bdbd-4eb9-9c08-cb019e2e4672",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "afe8c728-8f1e-4e9d-a943-3a0b8a85c4d2"
        },
        "item": {
          "id": "7d093359-6e1d-47a5-8c32-402f05443f0e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "04f167f3-3f01-4bfd-a2ce-eb9f745b992e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60e8127-7476-44b1-ac6b-7f28ff7ab125",
        "cursor": {
          "ref": "afcdb91d-f609-42f6-86f5-fd4d619ec0d8",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "40a515b6-4bbc-4f85-a377-a8fb21581cc6"
        },
        "item": {
          "id": "a60e8127-7476-44b1-ac6b-7f28ff7ab125",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "770b1624-6d62-44b9-957b-bd2d1b9d881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a46c687-a14a-417e-a64b-70b0fc6e2711",
        "cursor": {
          "ref": "0a4c9833-cfef-49c8-ac07-92a5fab0190c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "253ea25c-bf6b-4a24-9907-3ad2149eb333"
        },
        "item": {
          "id": "9a46c687-a14a-417e-a64b-70b0fc6e2711",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26df1f4a-c421-4f49-a99a-03cdca245c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec782758-e24f-455d-a81c-52e0748d29c4",
        "cursor": {
          "ref": "63fad381-0ff1-430f-9f7f-ef1a27007fd1",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a0a6517d-e428-4912-ae1f-9ed156da9b74"
        },
        "item": {
          "id": "ec782758-e24f-455d-a81c-52e0748d29c4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b4af2c97-9306-401e-b7ec-daece2015b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ca8fce-374a-45b1-9737-30daee2c7e39",
        "cursor": {
          "ref": "63dcdced-5ef6-4ce5-81d6-81d48a5f19dd",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4e8b54be-4a4f-4001-a599-12238892b750"
        },
        "item": {
          "id": "b8ca8fce-374a-45b1-9737-30daee2c7e39",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1d92b02a-b590-4250-8cb7-eb4ced8a7554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c8d2a9-574f-4122-b392-192fa8304282",
        "cursor": {
          "ref": "de55d98a-41e5-4ad0-9d4e-08250c090a8f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4d7148d8-dc98-4369-a64e-59cd8fb19869"
        },
        "item": {
          "id": "34c8d2a9-574f-4122-b392-192fa8304282",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1b7fc20f-e3a2-4e44-8113-dd7bb38cbd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86815f5a-c854-4ef6-9cb3-6c31d4653b57",
        "cursor": {
          "ref": "85b90e1b-30de-4a43-9ba8-c2d7b2bc6668",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0da812a1-729e-48e7-a0a6-7d23f8699b60"
        },
        "item": {
          "id": "86815f5a-c854-4ef6-9cb3-6c31d4653b57",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "99169104-949d-44a2-8d88-07d0e9b00a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee857bd3-4ea9-44ac-834f-63343f7009c4",
        "cursor": {
          "ref": "273aa46c-c9dc-4035-9a22-5c29d5cfb703",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e49184cf-cc33-434b-9540-b0e7706927bf"
        },
        "item": {
          "id": "ee857bd3-4ea9-44ac-834f-63343f7009c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4928732a-b67b-43ff-804a-0e1649580b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c1ba6-07ed-4978-9f0c-06fe350899ac",
        "cursor": {
          "ref": "e771e8ee-6612-49d7-8a4b-37846a135ac0",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "edafca2c-cdf2-4b55-8c99-dc5991ea8f08"
        },
        "item": {
          "id": "8c8c1ba6-07ed-4978-9f0c-06fe350899ac",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6fa00a2c-6c7b-49e4-b6f4-451820b06a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79509184-50f3-4fd4-a195-4bbe70168ddd",
        "cursor": {
          "ref": "c0e605d9-15b1-4bc9-aefd-ec5b1f9a1560",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f22751f7-b21a-4f77-b116-afcf7250308e"
        },
        "item": {
          "id": "79509184-50f3-4fd4-a195-4bbe70168ddd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1d644f0a-f52b-4723-bdb0-40fa6f5c388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85161942-3116-464c-ac9a-e2bc54fe4eda",
        "cursor": {
          "ref": "5960d4fe-f8fe-4076-ae65-816cb7676c06",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ad6490a7-7153-491c-934c-750e62abba0c"
        },
        "item": {
          "id": "85161942-3116-464c-ac9a-e2bc54fe4eda",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e8b33724-9d30-4f0b-b48f-a7a2fd052846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b208bbf-cdb5-400f-afde-52e02a42eb53",
        "cursor": {
          "ref": "8fd5608e-fdbe-419e-9d0c-291a869eaa40",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "42dd4a49-7293-434b-afb5-cb0a51a78c64"
        },
        "item": {
          "id": "3b208bbf-cdb5-400f-afde-52e02a42eb53",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d1cdce97-1efb-4850-9ecc-32d1b983131e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e21d9b6-ae2a-465b-89bb-f7388bc1130e",
        "cursor": {
          "ref": "c5fac534-e9db-4095-83ea-93c3a92c5ee5",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "434949ef-2e05-4e20-be68-c7bd6c3548c9"
        },
        "item": {
          "id": "9e21d9b6-ae2a-465b-89bb-f7388bc1130e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "38d0c31a-35f6-4d61-ba6d-2158988f4bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2db45cf-3b42-4b62-8740-add885bef9b5",
        "cursor": {
          "ref": "e6de2dc0-c87a-4d48-8a6d-14273a30f87d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3c38a249-b585-478b-80ad-715c05d06f04"
        },
        "item": {
          "id": "f2db45cf-3b42-4b62-8740-add885bef9b5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a5e161ff-acdb-4cb9-9ff3-3fd2a8a09df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658f7391-2997-456b-bffd-6f4cdc7b144c",
        "cursor": {
          "ref": "dc8824e9-96cc-4f6e-8c84-2b3238c491cc",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b21ae87-c167-494b-8c4a-3458d134d4c1"
        },
        "item": {
          "id": "658f7391-2997-456b-bffd-6f4cdc7b144c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7f7285f8-b8de-4275-a94e-d75f9f970fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb433fa-0851-4d1e-848f-c0e04e103efd",
        "cursor": {
          "ref": "fb7ac03c-6525-46d9-8c8a-f08fb159490b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5c74cb2-4a28-43f7-99cc-8d10f085b052"
        },
        "item": {
          "id": "6bb433fa-0851-4d1e-848f-c0e04e103efd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fc63085e-ac56-4472-a561-fc4bc413ac8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f4b0a0-a4ec-4e98-90ef-73029d62f656",
        "cursor": {
          "ref": "05962ed3-60dd-411f-af7e-85d38e4c51ae",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a029afce-3105-4bd6-85e0-4b94c83e09c4"
        },
        "item": {
          "id": "70f4b0a0-a4ec-4e98-90ef-73029d62f656",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "86e9000d-a43b-435d-8280-491fd902ffec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e26c70-55d6-4104-8644-337d3270b233",
        "cursor": {
          "ref": "a55adb61-49ff-4b6a-9d8e-dfa7753d1204",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "309c4b97-f8a8-485e-b0eb-7a280810ff9f"
        },
        "item": {
          "id": "f7e26c70-55d6-4104-8644-337d3270b233",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "065a7416-8c27-4b59-8203-e698cdfd7e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f105e16f-7656-49af-819e-15264b8c3ac5",
        "cursor": {
          "ref": "b6e0b3a2-fb8b-4d3b-b79c-669d9287ab06",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b28225db-640f-48f9-858f-964378f61a5c"
        },
        "item": {
          "id": "f105e16f-7656-49af-819e-15264b8c3ac5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7ff5ac3e-0327-4d90-9f7c-ecf7ff637a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65790b3d-c1f5-4cbf-9fb5-7de15f682071",
        "cursor": {
          "ref": "6c385e49-3f86-4f33-9fb6-c5e2583920be",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "287ab32b-3cdf-4653-a945-82b9019a17e8"
        },
        "item": {
          "id": "65790b3d-c1f5-4cbf-9fb5-7de15f682071",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "37585e63-3d74-48ea-98a2-e98ef3e42454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d275ba-bbde-4b91-93f0-483f3531fb5f",
        "cursor": {
          "ref": "52888107-9e76-49e9-ac8b-f9e9f48e86c6",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bf1bd9c8-b239-4d1c-b25f-ae15b363e6d2"
        },
        "item": {
          "id": "33d275ba-bbde-4b91-93f0-483f3531fb5f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1a0cf8a7-410d-4a81-9204-d8d078cae83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8257ce9-324e-4858-88ed-0c9f2550a4aa",
        "cursor": {
          "ref": "70a1dd59-2c19-495c-b407-d4862b17fe51",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e6159628-a3b5-4722-96ce-13e988ff0a2a"
        },
        "item": {
          "id": "b8257ce9-324e-4858-88ed-0c9f2550a4aa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5b2aadcc-7c0d-4f4a-a29f-e2e9becf1273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f68c72a-2768-47d3-bf85-091625adb5fd",
        "cursor": {
          "ref": "26279b76-a16d-44b7-a268-6d4dc81a9681",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7107e1d9-8fff-477d-80fd-8404548e1d52"
        },
        "item": {
          "id": "9f68c72a-2768-47d3-bf85-091625adb5fd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "62a5c496-38f4-48d0-be21-707a218afd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b232ae-aa16-49e7-8e77-b0cb8ac237b1",
        "cursor": {
          "ref": "9a199bfc-f3f4-4f23-a024-24230698bcf2",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fcf11979-7e54-49ec-9fe9-9cb76ed9d4f8"
        },
        "item": {
          "id": "f8b232ae-aa16-49e7-8e77-b0cb8ac237b1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ac570797-3e2c-4329-bf8f-a9aa40f9364d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dbd2fc-8349-44d3-9716-dc0620c3dc9d",
        "cursor": {
          "ref": "e88e4160-459f-4f63-b536-ebcf52c8c7c6",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "490afa53-2c68-4909-959f-fd776d67be9c"
        },
        "item": {
          "id": "96dbd2fc-8349-44d3-9716-dc0620c3dc9d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "25fb7b15-d5bc-4bf0-acbc-0518f776b953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef32bf6-eadc-4423-ae75-03687d25ef9e",
        "cursor": {
          "ref": "7a2561b5-dc0c-4fab-af9a-44913ee80f75",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e26414f5-6ce7-4c5f-8cc2-b49ec301a891"
        },
        "item": {
          "id": "cef32bf6-eadc-4423-ae75-03687d25ef9e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e7a3ad14-2024-4134-91ce-05d6bddfc1a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3c9449b0-ff94-4ef0-bcdc-2ae1e8c43c31",
        "cursor": {
          "ref": "4656cc37-470e-4f44-8292-579edb7532b3",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1c427b8b-2e18-413a-acd4-0c63942c1205"
        },
        "item": {
          "id": "3c9449b0-ff94-4ef0-bcdc-2ae1e8c43c31",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4cbeb525-2a3e-4c3a-95bd-66ce08f32f25",
          "status": "Created",
          "code": 201,
          "responseTime": 2025,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5fee4cbf-9ded-477f-a86c-f98b19b94802",
        "cursor": {
          "ref": "a1e2fd4d-8d2d-4ebd-a0df-c4413f467d51",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "05ccdedf-93c9-4f4d-ae3c-0b46d48438e1"
        },
        "item": {
          "id": "5fee4cbf-9ded-477f-a86c-f98b19b94802",
          "name": "credentials_issue"
        },
        "response": {
          "id": "faaf499e-dadb-4135-96af-51438cbd428e",
          "status": "Created",
          "code": 201,
          "responseTime": 2330,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "430757f3-7bb4-4489-a3b4-ad8fc69b5815",
        "cursor": {
          "ref": "97de1299-b375-4ead-ad85-4b0dec1a362c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8ddbbdd8-0718-4abb-a321-751872133a05"
        },
        "item": {
          "id": "430757f3-7bb4-4489-a3b4-ad8fc69b5815",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "586eaad8-a013-49ad-948f-c94c9311efcb",
          "status": "Created",
          "code": 201,
          "responseTime": 2663,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5bcbab-cba5-4a4a-b51c-afce9601158b",
        "cursor": {
          "ref": "fa5f9be6-77f3-4050-b80a-05fde30f772c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7bee0f95-9bd4-4288-95ea-417486303da6"
        },
        "item": {
          "id": "fd5bcbab-cba5-4a4a-b51c-afce9601158b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c5799605-e935-4cb0-b6f5-578b8efd5fe0",
          "status": "Created",
          "code": 201,
          "responseTime": 2100,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a00dbc-5d6c-4d77-b4bf-d096d218b855",
        "cursor": {
          "ref": "a8175c01-9a9b-45fb-8c05-6b5ac0fcf9a9",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "32573c4e-e8fc-4df9-beb9-c591a59b7b81"
        },
        "item": {
          "id": "85a00dbc-5d6c-4d77-b4bf-d096d218b855",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "93bdeef6-1259-416a-8eaf-1d7ed00c98c8",
          "status": "Created",
          "code": 201,
          "responseTime": 2308,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7db64f2-c707-42bf-9ecc-97e5b53a50bf",
        "cursor": {
          "ref": "390447d1-8f75-4f72-b43e-0a5268e308cb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0f624383-eb53-4436-9911-a053a7a2c24d"
        },
        "item": {
          "id": "c7db64f2-c707-42bf-9ecc-97e5b53a50bf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83c77366-9d1e-475b-8998-99757a469759",
          "status": "Created",
          "code": 201,
          "responseTime": 2240,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-15T00:39:33Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-15T00:39:33Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "07171ecd-58dc-46dd-8951-e8e160bc186c",
        "cursor": {
          "ref": "2fd95b0b-d47f-4c56-9995-04490f93bb7f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3437adb2-1362-41a6-8057-592abed27535"
        },
        "item": {
          "id": "07171ecd-58dc-46dd-8951-e8e160bc186c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0cb0d075-0141-4071-a5af-bf26c212f47f",
          "status": "Created",
          "code": 201,
          "responseTime": 2300,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a846717-c276-4c91-bdd4-4c4ba2f600a5",
        "cursor": {
          "ref": "f89b3104-ce26-4dea-9277-256c241dafc7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bc0b4b54-6185-4d07-ade9-c02ae468e909"
        },
        "item": {
          "id": "8a846717-c276-4c91-bdd4-4c4ba2f600a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ba474790-ca16-4ae3-9845-755ccaf01aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a846717-c276-4c91-bdd4-4c4ba2f600a5",
        "cursor": {
          "ref": "f89b3104-ce26-4dea-9277-256c241dafc7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bc0b4b54-6185-4d07-ade9-c02ae468e909"
        },
        "item": {
          "id": "8a846717-c276-4c91-bdd4-4c4ba2f600a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ba474790-ca16-4ae3-9845-755ccaf01aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc3e387-a33d-4fb0-9dff-f15755107cfd",
        "cursor": {
          "ref": "4c3bc701-6ba0-4c27-bfc9-b76471cf16eb",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dc8d1d6d-e69d-4179-b214-badfe85b8eca"
        },
        "item": {
          "id": "ebc3e387-a33d-4fb0-9dff-f15755107cfd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c763a3c9-8639-4478-abb2-fc96f3134d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b07f671-a398-44ad-a91c-99c46bd7dd4f",
        "cursor": {
          "ref": "06af8f3d-c64b-4b4a-a247-c1bd6062e7de",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bbef4215-5e94-420b-9296-dc0cdf41532e"
        },
        "item": {
          "id": "4b07f671-a398-44ad-a91c-99c46bd7dd4f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "70e60b08-18a1-407e-a032-9ec26277feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ef9430-a069-4ea7-9fde-67dc32584b3e",
        "cursor": {
          "ref": "a2ebdf7a-4953-4263-8ab7-8c54e2a27f8b",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5251b7b6-bd8d-447b-9d84-c3c185fb281c"
        },
        "item": {
          "id": "c0ef9430-a069-4ea7-9fde-67dc32584b3e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef972516-cc73-49f3-82b0-89762a067008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17f26e0-4b83-45eb-b420-ca47bdb40cad",
        "cursor": {
          "ref": "27b44769-e6a9-4a6e-bab3-7eb5e1a82d6a",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7e830fb8-32c7-4e75-95a6-5793d572b4f0"
        },
        "item": {
          "id": "d17f26e0-4b83-45eb-b420-ca47bdb40cad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "416efc19-1e26-4d7c-977e-1d1fed766261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab89ea5-7eed-473c-81ad-bc93d0612760",
        "cursor": {
          "ref": "112cfe5d-bd87-4005-9bdf-db60abf99b30",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1d16b81a-c52c-486b-a562-0b09f6500559"
        },
        "item": {
          "id": "cab89ea5-7eed-473c-81ad-bc93d0612760",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bb2ef6a5-67b0-4c42-bee5-5f43a374a329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d400d2-0bf0-4a4f-9b73-717f1d6397ca",
        "cursor": {
          "ref": "e3b64c0f-4778-496b-8793-5eed320c2a08",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f501e121-fe2f-4abe-8cf9-63c1444340ce"
        },
        "item": {
          "id": "93d400d2-0bf0-4a4f-9b73-717f1d6397ca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3b57f42b-71bb-4a0b-940c-348a72b0ef2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eefe3a-326c-4930-aeea-3077fa52194e",
        "cursor": {
          "ref": "9f7270f8-a6e8-46b1-b467-55a31fbff2f4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8a9599c3-18b0-4dfc-8ccb-d414f2a457ce"
        },
        "item": {
          "id": "e5eefe3a-326c-4930-aeea-3077fa52194e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7c7d4565-d866-407c-bd6d-6880cb8ce2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac45879-7cef-4eed-8297-73611183f7bb",
        "cursor": {
          "ref": "1100cc30-09b0-4581-a1cf-f1c5d2f9592e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "894c001d-805b-4f73-b0df-a5a8667d1afc"
        },
        "item": {
          "id": "aac45879-7cef-4eed-8297-73611183f7bb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ef7ce104-eacc-444c-aefa-e38fe7ee060d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61e1261-18e7-4fc8-a693-a2c2e3610cf6",
        "cursor": {
          "ref": "2c9cfe0a-1e38-4c3d-bffa-9b19bcedc0fe",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3557a709-f63d-4d23-8604-24743d8a4722"
        },
        "item": {
          "id": "b61e1261-18e7-4fc8-a693-a2c2e3610cf6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f64e8fa1-1a0b-460c-9126-ac05016791da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc53c9c-e17f-4544-a8fb-4ee0cef8b2d2",
        "cursor": {
          "ref": "42a8e929-2f26-4b26-bc0a-ccff55db7e30",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2498c72a-2d1e-4be6-a525-b3fd1eccc820"
        },
        "item": {
          "id": "8dc53c9c-e17f-4544-a8fb-4ee0cef8b2d2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f55b8644-aebb-4803-abe8-f1d67bb737ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f983c2-b0b2-4dce-babf-6a11ac684916",
        "cursor": {
          "ref": "35e031c9-1e08-47f2-b218-75fc7c0d8935",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "405f0692-bee8-4ed5-85c2-0066fa380183"
        },
        "item": {
          "id": "32f983c2-b0b2-4dce-babf-6a11ac684916",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "539f3097-236a-42b1-834e-54dd9410d8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5eab99-b481-4016-8c3b-86ca0116d552",
        "cursor": {
          "ref": "4d31428f-3045-46c5-85ce-b70343f07a5d",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "43f8fca1-52ca-450e-b493-f35ff8706056"
        },
        "item": {
          "id": "dc5eab99-b481-4016-8c3b-86ca0116d552",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3b032ee2-d2b7-43fd-b011-5fd0689c1116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44155497-1034-4cdc-a521-fabef17fd64c",
        "cursor": {
          "ref": "1100024a-8f04-4198-82e1-1fdb41184e65",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "58c55b1b-ca3f-40ca-ada1-cc1fd4af5421"
        },
        "item": {
          "id": "44155497-1034-4cdc-a521-fabef17fd64c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6d7d843e-e2be-4be3-9bd3-d87157e01ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bb0afd-3bfb-42e2-afe7-61b479444cf8",
        "cursor": {
          "ref": "16cc1f2d-6874-4d72-a5dd-13a3355de2f8",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e4e4e83a-948e-437e-9e1c-1f40a50c95eb"
        },
        "item": {
          "id": "b7bb0afd-3bfb-42e2-afe7-61b479444cf8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e0cccae0-5168-49c0-949a-8ecf21afceac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c52b8f0-e0b2-4d86-b33a-52971b34d098",
        "cursor": {
          "ref": "c477aafd-ebb2-4fcc-a050-151844e7b73a",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "831352b7-aa00-4fe3-b938-a2b7bb5ddcc3"
        },
        "item": {
          "id": "1c52b8f0-e0b2-4d86-b33a-52971b34d098",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a96ea3bf-4a05-4d07-bed3-98c2c9d46c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4a7f65-53e3-4779-afed-1a5796221967",
        "cursor": {
          "ref": "7435c0cf-9cf2-4fb5-a83f-47a5f6f5b8ee",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ca38ef5a-d285-4d74-8977-c46ef1c9bbf9"
        },
        "item": {
          "id": "fb4a7f65-53e3-4779-afed-1a5796221967",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11c88b39-2743-458c-a044-a163948e08bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbea7eac-c11d-4afa-8364-08508f4834b4",
        "cursor": {
          "ref": "1d117ce1-f553-49f2-a588-c3474bf4559b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "caf831a9-1471-4ee7-9700-1cdcfc13091c"
        },
        "item": {
          "id": "dbea7eac-c11d-4afa-8364-08508f4834b4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89d2a78c-f9c2-4b97-9aa8-85f9b737b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1f167c-a439-445a-a1a5-cbe552173e4f",
        "cursor": {
          "ref": "ead36855-9589-492c-ad5d-cdaa6bb064d9",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b6a3d3b6-eca4-4c74-8e87-dcf3921a66d7"
        },
        "item": {
          "id": "8c1f167c-a439-445a-a1a5-cbe552173e4f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "de7a5d27-2277-42d7-bc56-46cc4e9e5abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42a1da9-ace2-4915-bb99-715de6649df5",
        "cursor": {
          "ref": "741169c0-2a51-4913-a698-87a9bf6d0a73",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d4928bb9-95d2-4a70-ba65-58f5af11afb5"
        },
        "item": {
          "id": "a42a1da9-ace2-4915-bb99-715de6649df5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1399809-500b-4e58-b275-d7e02de40cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f909396c-f5ce-4bef-9e2b-9c82298bc2e5",
        "cursor": {
          "ref": "b8901227-eb3e-4efb-9ba8-f57b0acd7004",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c2462929-6e93-4abf-86e9-0909ffb4e45b"
        },
        "item": {
          "id": "f909396c-f5ce-4bef-9e2b-9c82298bc2e5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4d91d45-622d-4bd0-9dc0-6805b51f13dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844e077b-76e8-4ef3-bccb-7134dbb193b1",
        "cursor": {
          "ref": "f6fc2ab4-4192-497c-8404-a407e28b9698",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "10558849-e793-463f-bac8-da085414be96"
        },
        "item": {
          "id": "844e077b-76e8-4ef3-bccb-7134dbb193b1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c36bdb01-95f4-4975-a13a-af8fd55463c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d7f463-b837-4f05-9a6a-cb9665971394",
        "cursor": {
          "ref": "4c4c21c9-05cb-4d5c-828f-57300b0304b5",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "86937abd-5f9f-4b7c-9aef-d1de17f08116"
        },
        "item": {
          "id": "c4d7f463-b837-4f05-9a6a-cb9665971394",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f85cbcf8-9bd1-4108-81ef-842825a2ec8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f17e203-cb65-4df9-8501-20c95af949ec",
        "cursor": {
          "ref": "617bd115-10f5-4726-bfbd-27bb7988aad1",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f4adb95a-1025-4d23-81ec-4477a1d4400d"
        },
        "item": {
          "id": "2f17e203-cb65-4df9-8501-20c95af949ec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9946745c-e795-4a30-83ca-4e85ec445004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361b2f3b-f85f-41df-aa01-d1d20ca44170",
        "cursor": {
          "ref": "875ec9bf-34f0-4803-a8c8-9745daed10bf",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3332c067-e841-41a2-82d8-7cb5f8f52b83"
        },
        "item": {
          "id": "361b2f3b-f85f-41df-aa01-d1d20ca44170",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "84fc6ac9-8df2-4f20-8c85-0282186c280c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb9c6ef-abee-4940-b370-2effb2c7f511",
        "cursor": {
          "ref": "e014600c-d668-4599-8d96-2f4ce2de1b59",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b35af21d-bedf-4277-ac60-4f4c42eb74ce"
        },
        "item": {
          "id": "bcb9c6ef-abee-4940-b370-2effb2c7f511",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2bed82ec-47c4-4d3a-9122-1f8ae20d0a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673380bd-fab8-43d0-b741-90e90ef2f94a",
        "cursor": {
          "ref": "e8bb529c-a934-4e8c-9810-59d409cfbab2",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c3f5b03b-db62-4662-b902-c06cf73914d2"
        },
        "item": {
          "id": "673380bd-fab8-43d0-b741-90e90ef2f94a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9f14ee3d-2cb7-490d-b2cd-6b366551b0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4365e5b3-babf-4d61-9c4b-d83a7e7e82bf",
        "cursor": {
          "ref": "0a2a17f6-3b58-49b2-bce0-f982a0d009e7",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5d9a8600-2d50-41bf-8fb2-e8d07f60f6d4"
        },
        "item": {
          "id": "4365e5b3-babf-4d61-9c4b-d83a7e7e82bf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c37dc83c-e1f9-496f-ad52-77ca9861aafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ad6175-f621-415f-a57d-61e5ae740442",
        "cursor": {
          "ref": "9d07cd6e-c777-4040-9055-6f3d67871a9b",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "05c05966-13db-445b-9603-da3eceafc62b"
        },
        "item": {
          "id": "02ad6175-f621-415f-a57d-61e5ae740442",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d7bab042-cdc7-472a-a890-b189664b7382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39006bc-bf80-41b8-a429-bc0954b952c3",
        "cursor": {
          "ref": "1981ae50-b7f7-4bf4-b6fb-8d58a9b33449",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "16d2fee7-b5e5-465e-87a4-ffc35e286403"
        },
        "item": {
          "id": "b39006bc-bf80-41b8-a429-bc0954b952c3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f24022c0-4fb7-4f81-b752-2529ac366c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b064b642-5405-471b-8a5d-38c5bd0ff491",
        "cursor": {
          "ref": "b078e1d8-1673-4f20-8a3b-91755a2c8113",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d8480f9d-5779-475a-b8bf-89b736368d98"
        },
        "item": {
          "id": "b064b642-5405-471b-8a5d-38c5bd0ff491",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a0b05231-2625-48a0-b6e0-bbb66ee56cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2d6f8a-d462-4e50-9018-ea4cede79cb8",
        "cursor": {
          "ref": "cfd4dfb2-b296-42d9-b8de-b16a4bb4e951",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2b6de03c-6057-4e09-9726-a736e72b932d"
        },
        "item": {
          "id": "ae2d6f8a-d462-4e50-9018-ea4cede79cb8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c6928ae6-5296-45cc-9636-b7e017fb282d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c52a04-31de-4a28-9b9a-f31e8014beee",
        "cursor": {
          "ref": "90cd90eb-1b25-495f-a480-dbd495c6b26a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ea895170-e321-438e-9acf-6399914724de"
        },
        "item": {
          "id": "c9c52a04-31de-4a28-9b9a-f31e8014beee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7bc449bd-b906-4a6d-ae07-251eba19c835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "06549886-6e05-4972-8df4-493370eebdc6",
        "cursor": {
          "ref": "fcdf1eca-8ea6-4b99-93b1-3677512084e2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b101dab3-412c-4c84-9853-e191dac0aaef"
        },
        "item": {
          "id": "06549886-6e05-4972-8df4-493370eebdc6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f3787d04-8e21-40c9-b50a-affed295c953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9669ade5-b4bb-43bc-acfc-abf04d2c2307",
        "cursor": {
          "ref": "07cdf4d4-6566-4d49-9146-aea30d4ad469",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9552fffe-274c-4b84-ac39-e68f608fdc19"
        },
        "item": {
          "id": "9669ade5-b4bb-43bc-acfc-abf04d2c2307",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7ce8c28f-b29b-462c-99ea-a6637fb9fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9669ade5-b4bb-43bc-acfc-abf04d2c2307",
        "cursor": {
          "ref": "07cdf4d4-6566-4d49-9146-aea30d4ad469",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9552fffe-274c-4b84-ac39-e68f608fdc19"
        },
        "item": {
          "id": "9669ade5-b4bb-43bc-acfc-abf04d2c2307",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7ce8c28f-b29b-462c-99ea-a6637fb9fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7c23ba-2e94-40bb-937f-fcf400493050",
        "cursor": {
          "ref": "6c07b548-306c-44df-8f4c-1c38df9f109f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "139b8edb-c344-4de8-ad5c-464614058585"
        },
        "item": {
          "id": "ae7c23ba-2e94-40bb-937f-fcf400493050",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6e2d00c1-934d-428f-b9c3-598f72cf8553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6b957a-e039-4b1c-80f0-3be257f7b326",
        "cursor": {
          "ref": "77852840-1cbd-4f06-b1d9-9304ff39567f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3aea282a-46ee-4848-93eb-6072e9c692d1"
        },
        "item": {
          "id": "1b6b957a-e039-4b1c-80f0-3be257f7b326",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e2ff57fc-2303-4964-aab6-b787069e6287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1026634c-9525-43d3-8e2a-ccce69978e27",
        "cursor": {
          "ref": "1096024c-71e6-4ef3-a278-372df679fa95",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d94d1aa7-e8c3-4ab1-8525-3389b799ca0e"
        },
        "item": {
          "id": "1026634c-9525-43d3-8e2a-ccce69978e27",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bfbe61dc-0685-470b-9cb0-65627c80e756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556ef374-18a3-41be-a2b7-8afb9b0e974c",
        "cursor": {
          "ref": "84aa28af-5d1b-4ae3-94fc-203fb99d220b",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2503d37e-1f77-40d4-9b15-f5d9fb0de5cf"
        },
        "item": {
          "id": "556ef374-18a3-41be-a2b7-8afb9b0e974c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "658621e3-b35f-442b-a8aa-cbbd0708adf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e2bc5e-765b-41e6-a2a6-664bc298d261",
        "cursor": {
          "ref": "eeac1462-612b-4d6d-a77d-a7f3ada038c1",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2905ad51-076d-47b9-bbeb-611577437d89"
        },
        "item": {
          "id": "12e2bc5e-765b-41e6-a2a6-664bc298d261",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "71c8dba6-9c96-4e02-8880-43c026e3a7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fada2b8d-3a84-4051-a8a4-3b5000edfd13",
        "cursor": {
          "ref": "18369534-5dc5-4393-94c6-da25bb3d5fa2",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e9b3984b-6c5a-4245-8e8e-9a4a95b0abb0"
        },
        "item": {
          "id": "fada2b8d-3a84-4051-a8a4-3b5000edfd13",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "054f7e28-7d3f-46bb-957b-9b93278dd0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1995e2f7-a9de-481c-a98b-ef3b06dda693",
        "cursor": {
          "ref": "8094dff7-16a6-41f3-a1ca-34d025ee2e12",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2e2a34d8-a8df-4df6-a221-1d1a201bf0dd"
        },
        "item": {
          "id": "1995e2f7-a9de-481c-a98b-ef3b06dda693",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8ba5c277-0ce7-4caa-b8da-18dc3d6c5f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c277534-1589-49b1-95c9-169ee98ee958",
        "cursor": {
          "ref": "ef29d5db-75b1-43ef-9a0d-6df6a57876eb",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d3695dbb-04be-4f24-b7a5-72917c97ab85"
        },
        "item": {
          "id": "3c277534-1589-49b1-95c9-169ee98ee958",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8a5b6e19-d3ef-40e2-9dbe-675cdfdc32ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61248c9b-5579-48fc-99fd-d0811ce0eea9",
        "cursor": {
          "ref": "287237b2-1a69-4703-ab71-8383c0a979f1",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a8d93197-bbd4-4988-a83a-8a80d943acf9"
        },
        "item": {
          "id": "61248c9b-5579-48fc-99fd-d0811ce0eea9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "06341c35-096c-4016-88ac-a3a5f4ddfa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb79f22f-21f6-4e62-bb97-da7b247a114a",
        "cursor": {
          "ref": "75e25c28-7ec9-441a-9c8d-b6f0a55f9743",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "881338aa-ced4-4988-b1de-11e3e98fca1a"
        },
        "item": {
          "id": "bb79f22f-21f6-4e62-bb97-da7b247a114a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b92a61b9-bc4f-4f50-bd44-bb0cf1b44ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8323fd85-7320-4d62-8232-dd247e015efd",
        "cursor": {
          "ref": "a9435dc3-4abb-4423-868d-993422318117",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "53b421bd-e86d-46d5-b337-a56930439012"
        },
        "item": {
          "id": "8323fd85-7320-4d62-8232-dd247e015efd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "50fc3bc7-5b73-4b56-91f7-f8d86322af19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86b1151-1178-41f6-bfa0-0cba72985033",
        "cursor": {
          "ref": "46a2b395-0d9d-4682-bdbd-36ae9f8e609d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8090ac6d-f361-4b7a-8a83-54bd1c943a83"
        },
        "item": {
          "id": "f86b1151-1178-41f6-bfa0-0cba72985033",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1baa15b3-3713-4f10-a2fa-cd7b388b6c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d1c390-fa99-4814-8e40-789d90213049",
        "cursor": {
          "ref": "1474160a-dc7f-42d0-b700-6270aaf31e85",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6f37c2bc-b46b-4039-918a-2bdcb576bc34"
        },
        "item": {
          "id": "30d1c390-fa99-4814-8e40-789d90213049",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0f681177-6bd8-4cc2-801e-9413b8c56eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75761802-e02d-431b-9858-7c094f054b16",
        "cursor": {
          "ref": "80819855-fb96-403c-8a9c-5c5f2ff40f2d",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd6fee27-227f-4659-a9c6-b225e1d9316e"
        },
        "item": {
          "id": "75761802-e02d-431b-9858-7c094f054b16",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bbda387b-e6cb-471e-9f8b-93f51a239038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6107492-e511-4d99-be16-0af16ea5f4e2",
        "cursor": {
          "ref": "b5aa2533-0bb1-423f-919d-27af72202994",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a40cf153-ed67-4d58-ba0f-ff8eb697f87b"
        },
        "item": {
          "id": "d6107492-e511-4d99-be16-0af16ea5f4e2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7bf57d38-6ce1-4f33-a615-dffbbb1a5f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a22b568-176b-4ee6-8e8f-ee7a3abe2c70",
        "cursor": {
          "ref": "844bc9c7-4646-4f98-885d-8720c57dce5d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "67ea14d5-ce16-4a95-be4a-cbf2e0df78d7"
        },
        "item": {
          "id": "8a22b568-176b-4ee6-8e8f-ee7a3abe2c70",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9ce1d4a7-d09d-49ce-a2ef-42ecc2b120a3",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "28fbb3d0-4572-4713-9320-4bcbb88e3179",
        "cursor": {
          "ref": "cc0c40f0-318d-43a7-aedc-83179cda212c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d8ee8fc5-c439-4589-836b-a5806297f16c"
        },
        "item": {
          "id": "28fbb3d0-4572-4713-9320-4bcbb88e3179",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d2cf136d-ae61-4251-bd99-898c195d369b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3fb0af-2d83-463d-becc-49a211d8d74a",
        "cursor": {
          "ref": "0448c1c5-8627-481e-8fdb-dcddf673cf6a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5d14194e-300c-4e19-9324-36aabbc15fc9"
        },
        "item": {
          "id": "ef3fb0af-2d83-463d-becc-49a211d8d74a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "18f5a26b-82cb-4168-985d-7daef1067028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770d57a6-05d2-4603-ab32-38a015898635",
        "cursor": {
          "ref": "199f8cb5-f53f-41ec-b72c-b4b6ae9168c6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b69eb45-26c3-4be9-80a7-ff071635a261"
        },
        "item": {
          "id": "770d57a6-05d2-4603-ab32-38a015898635",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9b865e17-3be7-48b3-8a9f-26cd7a19b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210e1c0a-a599-4388-a9aa-eaad140ab58d",
        "cursor": {
          "ref": "297c2956-70c3-4e82-b2b7-e7567cde14b2",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "390aaba4-be04-4a33-9cf6-b4f9bcc240a9"
        },
        "item": {
          "id": "210e1c0a-a599-4388-a9aa-eaad140ab58d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "18910096-3f62-477f-80da-1c2890564832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb089bd-b518-4a23-b307-3006557f21e8",
        "cursor": {
          "ref": "a7ac5cc4-93b8-43a4-97da-7518605f42a7",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a4e8c239-fea8-479d-8dff-bc925663ab48"
        },
        "item": {
          "id": "2fb089bd-b518-4a23-b307-3006557f21e8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7dbf8b78-0e12-4372-8b70-af9cd9f1acb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cc31f0-d9b2-4ccc-9423-9703e05805d8",
        "cursor": {
          "ref": "49dbff76-eab2-4874-9627-032231ad7b64",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f68daa1e-e7c0-4e60-a667-c6a630358b7d"
        },
        "item": {
          "id": "d9cc31f0-d9b2-4ccc-9423-9703e05805d8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b362ec82-0a7b-4dbf-8bab-2a678a75c846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028d871f-4126-476d-9ea9-718e619d81d1",
        "cursor": {
          "ref": "bbf05959-c3f1-4fe4-840c-c2aa3824b8bd",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f59ade7e-5fd6-4d0e-a02e-6a428e03bfa5"
        },
        "item": {
          "id": "028d871f-4126-476d-9ea9-718e619d81d1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8ae8bd9d-02c7-47fa-8af4-b3ac28358efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac812c8-f0b8-4481-aa35-179a335fd09f",
        "cursor": {
          "ref": "6d1e144a-0b52-4440-9de3-cb04275e6b6a",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "206b9156-bd91-4515-bddf-924180199494"
        },
        "item": {
          "id": "1ac812c8-f0b8-4481-aa35-179a335fd09f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cd479b70-88fc-4240-8867-b046d84ec7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9fcd4d-00c8-4637-9a53-a3f5bfda3dc4",
        "cursor": {
          "ref": "17430382-4f73-411f-a41f-c3116b820b72",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d485777b-e190-4539-94f9-515f4a2a084b"
        },
        "item": {
          "id": "cc9fcd4d-00c8-4637-9a53-a3f5bfda3dc4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aebc6ba8-1f98-4da0-b1e3-cae0f59e2a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ce0e9c-d80e-4304-892c-0c2f1194fe44",
        "cursor": {
          "ref": "43e09b42-2de2-4108-87df-0536c683f2db",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fcad6481-65eb-4c6e-9e51-8fff67a885bd"
        },
        "item": {
          "id": "d4ce0e9c-d80e-4304-892c-0c2f1194fe44",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "13602341-98a8-4cda-82e5-7acd9c14b32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5944e11-3626-4a9a-8d2b-fd3631a56476",
        "cursor": {
          "ref": "9bcd739d-2417-4eb9-89e8-293f0b9a385b",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0b57f8b6-6cea-4f89-8f87-3e1209fdb071"
        },
        "item": {
          "id": "d5944e11-3626-4a9a-8d2b-fd3631a56476",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8e9314dd-e6d9-40fc-be0e-614880a708ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e173ef7-6ca9-494e-a4c1-5d5757756016",
        "cursor": {
          "ref": "8c63c0ed-a932-47fd-9930-aa75708faf9f",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a32b7321-18e6-4365-823d-5788a053fcd8"
        },
        "item": {
          "id": "5e173ef7-6ca9-494e-a4c1-5d5757756016",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "142483f9-b2ea-4dbb-9ecb-16b64f53397e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac62dd49-b166-4450-80ed-35e0a7579932",
        "cursor": {
          "ref": "fd778b0d-350d-4092-82e8-c3ec088823db",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cff476a4-2666-44ce-94ea-82f1f653472b"
        },
        "item": {
          "id": "ac62dd49-b166-4450-80ed-35e0a7579932",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7b043827-b29e-4f08-bb51-e351635407fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0cf9cd-2a5e-401d-b0bc-bfec70227647",
        "cursor": {
          "ref": "1c5861f0-2898-4463-8d8e-994fb9a0f2fc",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d9cf7b84-31c4-4983-a88e-d1c0fc2ed3ac"
        },
        "item": {
          "id": "cf0cf9cd-2a5e-401d-b0bc-bfec70227647",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7218293e-f78e-4591-a13d-23c1b6049a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2b4743-e6a1-42b3-abfb-9981b9197f8c",
        "cursor": {
          "ref": "17df973a-9e47-4746-a5b8-915d6fc7b610",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3f71cc92-30b0-4ecb-ab16-261648922d01"
        },
        "item": {
          "id": "9a2b4743-e6a1-42b3-abfb-9981b9197f8c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8bc89232-ca6c-417e-8495-72c7d5dd9ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d5a430-2ac8-400a-bb1d-1be0f5922755",
        "cursor": {
          "ref": "26fe591d-f526-4c13-a7e0-11579b29077c",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "485523a7-1ba3-407d-95e3-deac13bec628"
        },
        "item": {
          "id": "60d5a430-2ac8-400a-bb1d-1be0f5922755",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ed3f9219-890d-4b8c-9f2a-fb7e3ad60a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9ee921-6d82-44cf-90ee-b580a840c0de",
        "cursor": {
          "ref": "62c08377-d333-4423-b595-4ed90be69880",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "56ed0982-19b2-4121-a7cb-df614a730020"
        },
        "item": {
          "id": "ec9ee921-6d82-44cf-90ee-b580a840c0de",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5ae5e17c-ffe6-41a8-9a6e-b0ed7ebddb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8d026c-2495-4c2c-9233-da8f7e48ff17",
        "cursor": {
          "ref": "a7eab630-3f27-46c3-84b6-bcb8a0686eee",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9f9f24be-f8b8-4476-9be5-b037bc9b3b13"
        },
        "item": {
          "id": "da8d026c-2495-4c2c-9233-da8f7e48ff17",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b0ca8332-f223-437a-961a-4fc0c5706ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4995a76-1c3f-4310-a408-8d3f826c2006",
        "cursor": {
          "ref": "f4f2eabc-35a9-498d-9756-b0dc37997c97",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ee9dcc11-feb7-45a7-a079-c0dbaf3f5e3b"
        },
        "item": {
          "id": "e4995a76-1c3f-4310-a408-8d3f826c2006",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b6b170f5-319f-4fe4-ba89-34a0571bb094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f1fdaf-7d33-4ca5-ba5a-beab25597945",
        "cursor": {
          "ref": "8405ebb3-d932-47f2-871d-5680165a5793",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c92f0fbe-0c21-4a02-996d-0ac55c5c9a7f"
        },
        "item": {
          "id": "91f1fdaf-7d33-4ca5-ba5a-beab25597945",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "14c3a22c-9a97-4ebe-876d-94976a7c6adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793a310b-67a9-4d9a-b540-32df71411ec5",
        "cursor": {
          "ref": "ff1d47ae-4baa-482d-8e90-1b59414436f4",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "619255ec-ebd4-4903-8b22-0956344ff9d9"
        },
        "item": {
          "id": "793a310b-67a9-4d9a-b540-32df71411ec5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3c595374-0a4c-4cd6-ae34-4c3f08b54989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9046281c-8514-4033-a4ba-074ae92b1094",
        "cursor": {
          "ref": "a9e3a6f2-120f-4ee8-ad46-b377d65ff15c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5f66b623-4434-41bd-87bd-18775b6242d4"
        },
        "item": {
          "id": "9046281c-8514-4033-a4ba-074ae92b1094",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "04886bb6-ebc1-4c41-8323-f2dab8d89285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dbef3a-0460-45be-982b-3b7ecd42d6c4",
        "cursor": {
          "ref": "9641d238-edb6-46d3-b0ba-5e4dfb9f43a3",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "46f4f033-d7f4-4d25-971f-a7e96167c849"
        },
        "item": {
          "id": "e9dbef3a-0460-45be-982b-3b7ecd42d6c4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3f079e99-fa6f-419c-98ea-66a8c13530f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f285004-8f9d-49dc-be1b-1e49e8b9a02b",
        "cursor": {
          "ref": "91fb2478-7580-42d0-9565-383f3bc71f49",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7917902d-70fd-484a-82f4-c2ae583c0f02"
        },
        "item": {
          "id": "7f285004-8f9d-49dc-be1b-1e49e8b9a02b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dd921d61-2983-4199-8deb-c0e5d5ea82f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27284ef5-5611-41a1-8b57-8fdac2c3298b",
        "cursor": {
          "ref": "59ba871f-a0fe-421d-9836-adcdba604fba",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "15ebb126-31f5-4da0-b5da-c0a555ca5c37"
        },
        "item": {
          "id": "27284ef5-5611-41a1-8b57-8fdac2c3298b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1871b056-ece9-4af7-9341-6743d6e58470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393eb836-2041-46f1-a61e-36806b2d1d13",
        "cursor": {
          "ref": "0861834f-408c-471c-b5b2-22b78cf52434",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "75d7e2b0-b43a-44e1-8412-1d6105fac620"
        },
        "item": {
          "id": "393eb836-2041-46f1-a61e-36806b2d1d13",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a6bc1641-7c3c-4e99-b87e-0021986a5ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4065fe15-18e9-4928-895b-e399f70c218b",
        "cursor": {
          "ref": "a62e7a7e-2cfd-4751-84be-21906df8f8ac",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a7a899aa-240d-44c1-84f7-9adff8c6fc32"
        },
        "item": {
          "id": "4065fe15-18e9-4928-895b-e399f70c218b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ae33b365-fa38-401d-9ab5-2e78090f0f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d736312e-d232-425a-9a48-4f6fe58735a3",
        "cursor": {
          "ref": "4b7b6055-b505-4aff-8580-db62ca25c980",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "786d8211-d9b6-4344-8251-540cbfe2e574"
        },
        "item": {
          "id": "d736312e-d232-425a-9a48-4f6fe58735a3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b332ce7-7785-410e-8f94-9c268d884a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af904c6d-7abe-4ed9-99fb-0fa195f9942c",
        "cursor": {
          "ref": "4f5273f0-52e1-4c41-a2a4-e47455c4bb36",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "90afeddd-1c07-45c5-aefb-3cec6eb107d1"
        },
        "item": {
          "id": "af904c6d-7abe-4ed9-99fb-0fa195f9942c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9379ddd8-1e50-43d3-a6d7-fcca61c3d576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e725953-01be-4380-a535-61e5e9b2fbfe",
        "cursor": {
          "ref": "81189233-924a-4993-907a-b43991fee2b3",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0dab7048-2ce6-4db8-a259-2269b4a9f280"
        },
        "item": {
          "id": "2e725953-01be-4380-a535-61e5e9b2fbfe",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e3804001-2812-4df3-bf67-debb1935fdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e61aa5-8e8a-46bb-bec8-78d82014c6e6",
        "cursor": {
          "ref": "79a06ddf-2ac8-4acd-9e92-12d78af77f99",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "60cd6945-48b9-4997-8c97-765cef6aef35"
        },
        "item": {
          "id": "79e61aa5-8e8a-46bb-bec8-78d82014c6e6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "35aea543-fdcf-46c8-a73d-a3f131919101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52c9121-5104-4c0d-9bd2-daac833f30c8",
        "cursor": {
          "ref": "7489926a-7122-4b7d-9984-04f09abd59f6",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0966d556-78fb-4a7b-b1a4-04608957dc9f"
        },
        "item": {
          "id": "f52c9121-5104-4c0d-9bd2-daac833f30c8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9e11ceb6-95a3-4239-b252-9fe73f2ac417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48627809-40d4-4d8b-8657-246c4b21b9c0",
        "cursor": {
          "ref": "681a5089-0d68-4f49-b6c6-1bc9e81d3bde",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6b797585-427c-46f2-9826-516391d3131a"
        },
        "item": {
          "id": "48627809-40d4-4d8b-8657-246c4b21b9c0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2ea1a2e7-79ab-4f85-8ab5-69b192fbadbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905c8d15-5508-4878-8d6c-324d9241f46d",
        "cursor": {
          "ref": "f036b47c-43cf-4819-9017-45b2d8eb9221",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "328ba74b-c9ba-4474-85b5-66f6ac1d67a4"
        },
        "item": {
          "id": "905c8d15-5508-4878-8d6c-324d9241f46d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cb36c167-423d-4d06-a07b-fbf0645ca117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ed6e94-2486-4da5-adac-e52e5657d495",
        "cursor": {
          "ref": "eb6de555-890c-4456-8712-9c071e661977",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dc86a9ed-f9b2-498e-acf3-e3f080402e6b"
        },
        "item": {
          "id": "73ed6e94-2486-4da5-adac-e52e5657d495",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "915c0f45-ed4f-4540-a6f4-f88c021991c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c8fa16-35f6-45b9-944e-67c5225f02c7",
        "cursor": {
          "ref": "9a2ee9f7-4e91-4ec9-b75d-b225212cad3d",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "daf1554f-ae13-4ef4-ba53-529225fd3871"
        },
        "item": {
          "id": "b9c8fa16-35f6-45b9-944e-67c5225f02c7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f944085f-0a62-4204-86d3-ea388f432d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397f8927-5ff5-49b8-8ebf-97e75a04327c",
        "cursor": {
          "ref": "7a591c71-2282-4282-9eaf-6db8eb1ccd36",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "350672cd-05a7-42e0-8a08-580c87ed2776"
        },
        "item": {
          "id": "397f8927-5ff5-49b8-8ebf-97e75a04327c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "66ae0405-bf6b-4eb0-8f19-a81d3e7eba4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34554edb-ff8c-4f1c-8943-96a91413a566",
        "cursor": {
          "ref": "0a668e8a-a3ab-4605-9089-5e01947adc76",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b1335e19-ff84-494c-902e-77989c52d132"
        },
        "item": {
          "id": "34554edb-ff8c-4f1c-8943-96a91413a566",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4c02723d-c415-49de-96b9-1d0ba1db77cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34febef-1191-4ee8-b233-0bc7ec56279d",
        "cursor": {
          "ref": "ab457e79-cb10-4a47-bda9-6ee314269eee",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9821c4fb-8e89-4f5e-bca5-34b1bd54714b"
        },
        "item": {
          "id": "d34febef-1191-4ee8-b233-0bc7ec56279d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4ae8b0f2-3777-43bc-8d06-125d07066e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd002e8-ed6b-469a-bd4d-773a0c762a7b",
        "cursor": {
          "ref": "01db9cee-fa8e-4934-8b8f-76c50bfbf070",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d7c36cc5-afb9-4235-be9f-e53a54e87504"
        },
        "item": {
          "id": "9fd002e8-ed6b-469a-bd4d-773a0c762a7b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4f7885c2-86ba-4c8e-80e1-719408e74f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6bbf0e-7790-4775-ad8c-14bda1fa0a96",
        "cursor": {
          "ref": "a69e1ea1-2e45-4b88-a3c3-2566a86bba2d",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "572a53a2-54e0-4961-b178-fd4bc65726e0"
        },
        "item": {
          "id": "bb6bbf0e-7790-4775-ad8c-14bda1fa0a96",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c9076b52-8fd5-42d3-ae9f-374b67cb684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1675df-f331-44b7-81ea-4f95cd5cff9c",
        "cursor": {
          "ref": "499d51d0-de66-4796-bcba-a9db9e5d9e77",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "debbb609-3c11-4aa5-979c-e7e6a1861212"
        },
        "item": {
          "id": "0d1675df-f331-44b7-81ea-4f95cd5cff9c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9ed1a2d5-f0cf-44b6-8204-3f2455f945a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc180c3-389b-44e9-bbbc-8460ddab6a1e",
        "cursor": {
          "ref": "d5882b19-b5c0-44a5-917b-856fb5eb3470",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dc965cf1-50ad-4121-9d61-2efcb0a05da4"
        },
        "item": {
          "id": "bcc180c3-389b-44e9-bbbc-8460ddab6a1e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "464d9e00-fba5-46a5-90cd-c4a2aaa00773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12efbcd1-88c9-40e1-a2e3-ccd1c93814c1",
        "cursor": {
          "ref": "72429b2f-ec16-4d53-a8b1-858ff6beb4c5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "652a8468-925d-4c22-939f-796a7ce9f6ad"
        },
        "item": {
          "id": "12efbcd1-88c9-40e1-a2e3-ccd1c93814c1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5b30eb8c-8398-410c-9015-d4db26d25812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7a5a63-f1a9-428a-b2ef-9127393a9ef3",
        "cursor": {
          "ref": "3d49a073-81c2-49ef-8133-ac3b7ab52185",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c47af324-758f-4dca-a54f-5247270a769a"
        },
        "item": {
          "id": "4d7a5a63-f1a9-428a-b2ef-9127393a9ef3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2d0fe574-ceef-4add-a09f-099cf6733db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b27ca0-b98e-447b-b13f-472862b2f5e9",
        "cursor": {
          "ref": "c5252b56-85ef-4883-9a02-3e440ea546e9",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "48cb81ea-3f94-4e94-86bb-42b52e6392f0"
        },
        "item": {
          "id": "56b27ca0-b98e-447b-b13f-472862b2f5e9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "35551884-182c-4033-8b49-7a141991ba88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf28731-4c0d-4c1e-a10a-e472bbd871ae",
        "cursor": {
          "ref": "152f05b3-44eb-4cd9-bf74-5b24af2c3413",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "20656058-b54c-480d-8097-9974f5ad4220"
        },
        "item": {
          "id": "ebf28731-4c0d-4c1e-a10a-e472bbd871ae",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "703dd571-4b12-4a8c-b8a6-8d038a541672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbeabca-32e4-446e-b75a-9a16b5dc0054",
        "cursor": {
          "ref": "df51689d-3f02-4ff9-a1ae-13dbdf2f6d53",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8b4fc955-46ac-4677-8cbc-dd10bd074d89"
        },
        "item": {
          "id": "9fbeabca-32e4-446e-b75a-9a16b5dc0054",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5b60ce63-f957-4aac-99fa-e50160d61e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612e12d3-f75f-4f42-b5a4-8237ec46502c",
        "cursor": {
          "ref": "0c325ed8-0aca-4a37-9f8d-378f9e18335c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8793ef9a-2a79-4353-919e-9b9df03f1923"
        },
        "item": {
          "id": "612e12d3-f75f-4f42-b5a4-8237ec46502c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8dfecdaf-597e-4ea1-af22-7aaa7e409be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770a9a42-2845-49cf-a7bb-9c130d740171",
        "cursor": {
          "ref": "7b6ed135-b9ef-480b-9014-b7259dbbcb78",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b33b42c7-59b6-4202-a9eb-2e41c2d204a7"
        },
        "item": {
          "id": "770a9a42-2845-49cf-a7bb-9c130d740171",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "768f62ae-6c98-408c-84bf-5311aa9581d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad0133a-27c2-493e-b92a-50260594fe0e",
        "cursor": {
          "ref": "b33a9a33-7912-4462-9a7e-cfb09c261425",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "24be3c0a-46e5-4c65-82d1-1f7588a99d52"
        },
        "item": {
          "id": "cad0133a-27c2-493e-b92a-50260594fe0e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d2230473-a5b6-42dd-a9a7-cc684b771a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186fb526-4707-4fd3-9b9f-54e14356bbda",
        "cursor": {
          "ref": "98e3bf14-b54f-4829-b2c9-174022b16ca6",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a03001d3-6259-4dcf-8eaf-cc45cb06601f"
        },
        "item": {
          "id": "186fb526-4707-4fd3-9b9f-54e14356bbda",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6a636c2d-c867-4e92-913f-bb29199a450d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c813938f-3f3f-47e9-9ea9-2cd0c554fd98",
        "cursor": {
          "ref": "ce83f17e-1f77-434f-b400-26c9730899ff",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "78f61c39-daee-425f-9d45-4cb218876c90"
        },
        "item": {
          "id": "c813938f-3f3f-47e9-9ea9-2cd0c554fd98",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "97ad45c7-f441-4f72-9c7e-3d9f1f5f638a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05875d4-b79f-46fc-b4ea-bfcde77035e9",
        "cursor": {
          "ref": "56ad7f66-1db4-46b9-99f8-6c4d62638e15",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a299ef49-6994-4e27-83cf-434b15e16d1f"
        },
        "item": {
          "id": "b05875d4-b79f-46fc-b4ea-bfcde77035e9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1b157782-77e8-488b-a5be-6a52ef935368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88064b4a-baab-4c05-9bf6-e769c4f2ad2e",
        "cursor": {
          "ref": "156f8283-f171-49c0-a317-8def1216dbb9",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b288d15d-d03d-4a8e-9fb7-a1019b567173"
        },
        "item": {
          "id": "88064b4a-baab-4c05-9bf6-e769c4f2ad2e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "560c34ba-1572-49cf-b063-54f713bb38e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59be7aaf-2961-484c-aa13-82855b23aaf0",
        "cursor": {
          "ref": "23358dd6-d3d6-49e2-a3bc-b48dc5b0744d",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "06c7e7b5-1818-4817-82d5-1e2643189128"
        },
        "item": {
          "id": "59be7aaf-2961-484c-aa13-82855b23aaf0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ad36b518-01c0-4689-9eff-baa45b0b7e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027e9248-c9f6-4195-a4cf-41ed6de521ca",
        "cursor": {
          "ref": "63a526f0-3a26-44dc-ba24-df76d1d1e973",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "82b7637c-f1f9-49bc-8901-b66b74f699a2"
        },
        "item": {
          "id": "027e9248-c9f6-4195-a4cf-41ed6de521ca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a416f09d-e7fe-49f2-8473-204155c8b846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc6e6c9-0892-47e0-9139-b2ab757d4c59",
        "cursor": {
          "ref": "ed02e22e-0f84-4d11-9b41-ef03b27f93fc",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ad42ef9b-801f-46cc-9d43-11fcac6303de"
        },
        "item": {
          "id": "bcc6e6c9-0892-47e0-9139-b2ab757d4c59",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3b8a79c0-9a86-4853-a294-01c7e9b3e72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14ab240-7d99-4f80-b8a9-cb601a186336",
        "cursor": {
          "ref": "f9149d1f-f8ad-4762-83bc-13f821e5e461",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "166e92b4-6bb9-4b34-86f7-8615cac76a2a"
        },
        "item": {
          "id": "f14ab240-7d99-4f80-b8a9-cb601a186336",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b8fbe54-d818-4640-8f8f-f9052fb4a1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e920aa-f407-4c78-83cd-8a1332810231",
        "cursor": {
          "ref": "421e1bf9-9627-4f72-a119-0ebf3cddcdae",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5da38244-5189-4ea1-816c-efd42d0799bd"
        },
        "item": {
          "id": "f7e920aa-f407-4c78-83cd-8a1332810231",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "54837ca2-117f-42e2-bf51-9a97949ffac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9b4a19-6d82-42fa-b007-ef6dc7eba731",
        "cursor": {
          "ref": "f457561e-cf3b-4779-a8db-047eef809533",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "71dedcdd-15ab-4683-9b79-ebc3ccb8c5ae"
        },
        "item": {
          "id": "0f9b4a19-6d82-42fa-b007-ef6dc7eba731",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "02bc6d14-2328-418e-ab7b-934295257152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95b50b5-3f4b-48e9-b5f3-96ce4e4c2829",
        "cursor": {
          "ref": "06dad2c5-50e2-4a29-85bf-45bd2fa753dd",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8b22bf09-2154-4902-9108-3d3518955726"
        },
        "item": {
          "id": "e95b50b5-3f4b-48e9-b5f3-96ce4e4c2829",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "424db2da-73e3-46f4-9238-09a0d213abc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a18c884-0f73-456e-a5be-64918aab89d8",
        "cursor": {
          "ref": "4ce1a38a-a859-448c-a328-db392380ad70",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "99e19907-7a6d-4375-8ac2-d36699d32450"
        },
        "item": {
          "id": "3a18c884-0f73-456e-a5be-64918aab89d8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b091bd6a-0780-4d48-a9a9-67e2e8e8c37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa84c7d-bcf5-4ebe-ad66-7110913e284e",
        "cursor": {
          "ref": "ac6b5b8a-9842-4620-a2e6-cb999b053ecf",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c84c9a50-b109-407c-8c61-a36f581d46dc"
        },
        "item": {
          "id": "2aa84c7d-bcf5-4ebe-ad66-7110913e284e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cb3ddab9-6741-451d-b515-57643696dc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de343dbe-cb7b-4c7a-a11e-bc2a01110190",
        "cursor": {
          "ref": "c73f4633-daf6-423c-a7e8-6d89f953caf5",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "182efece-72d7-42a4-b167-a07a81b8636c"
        },
        "item": {
          "id": "de343dbe-cb7b-4c7a-a11e-bc2a01110190",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "32b3b4a9-ce3d-4dde-bbac-d26ae110c9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d581a1de-468c-40d4-ac6b-42da24e23c12",
        "cursor": {
          "ref": "6e7d308c-6280-4330-b2ff-a481022c8f80",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0ac14915-1bab-4d67-93bc-c9c6a4e43588"
        },
        "item": {
          "id": "d581a1de-468c-40d4-ac6b-42da24e23c12",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "26639759-28c3-4a04-bad7-31f2a6acd152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f10e0e-73e0-4af9-96e3-5aa5ff1c00d1",
        "cursor": {
          "ref": "f3a2e14f-2b72-4af0-9948-4f45ec49879f",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6ed1f2eb-a5ee-418e-8a90-614e0ffbb2cb"
        },
        "item": {
          "id": "41f10e0e-73e0-4af9-96e3-5aa5ff1c00d1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8223183e-7da0-49ff-8af2-546bb3e82ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d995d9f-1d4e-4f27-aa56-28d555f7f675",
        "cursor": {
          "ref": "7d277f13-3e97-4a38-8360-e17e4314741b",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fabf7370-5f69-4816-8461-ced28e18941b"
        },
        "item": {
          "id": "5d995d9f-1d4e-4f27-aa56-28d555f7f675",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "392f3e3f-10b7-497d-9afd-bcf1ec633b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c0cd4f-7576-4eae-ab0e-50a0ef4b7fc6",
        "cursor": {
          "ref": "3034ed7b-28bf-4655-8c51-994a7c667555",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b410f113-6d5d-4ceb-8e2c-af9311f7fd77"
        },
        "item": {
          "id": "b7c0cd4f-7576-4eae-ab0e-50a0ef4b7fc6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8d7b05ba-c31f-4d92-be6f-f470f5ca4cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa5135e-ca3c-4b9f-8642-26aa41c61a71",
        "cursor": {
          "ref": "6bfccd09-c8b8-4410-85b0-7eb86abfac19",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0a3046bd-ff27-4f3d-8377-d4f79975e2e3"
        },
        "item": {
          "id": "4fa5135e-ca3c-4b9f-8642-26aa41c61a71",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b2a69a71-e99e-43ac-953f-45e3d64badeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7ba98a-05b5-4670-a306-dc72a1e8fbfc",
        "cursor": {
          "ref": "5c28ed6d-4e10-47f2-a337-02cc5019d842",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d7a757a7-adb8-4cd7-9d91-bc8d5851e6f1"
        },
        "item": {
          "id": "ee7ba98a-05b5-4670-a306-dc72a1e8fbfc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3e432bb7-2a3e-4364-9216-beaba30a881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339b9455-3af9-419c-af4c-aca4d37a49b1",
        "cursor": {
          "ref": "0a532db7-9735-410c-9de8-7923d108bbcb",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "724a9e92-c65c-4781-8a3b-d5f7e899a78d"
        },
        "item": {
          "id": "339b9455-3af9-419c-af4c-aca4d37a49b1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7e0d8015-7018-4f3e-bfa3-4d29290745ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e961a880-b60d-4cd8-9175-2a90514e940b",
        "cursor": {
          "ref": "23c43838-e7ae-4a8d-8c79-a2292fbfc6c2",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "19bda948-4ef8-4a47-8876-6b766644e6de"
        },
        "item": {
          "id": "e961a880-b60d-4cd8-9175-2a90514e940b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "31a10053-57ae-4d10-8a78-2e556db6a001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5044a8f5-e8ed-45b4-9519-efc9cb67cf38",
        "cursor": {
          "ref": "cc1cd6a4-0e78-4a14-bdb3-77594be95b50",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "42fb1a72-cca0-42ab-9f9c-5dc553ec0c12"
        },
        "item": {
          "id": "5044a8f5-e8ed-45b4-9519-efc9cb67cf38",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "38194b01-6d6c-4f1a-b9c6-5f51c3d81ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df617dbb-5239-4e92-8b00-eb674b9a6c03",
        "cursor": {
          "ref": "df0a7555-97f2-450c-bde9-8f2de8e2389b",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8520dd28-99e3-4084-aa96-34318c6a5418"
        },
        "item": {
          "id": "df617dbb-5239-4e92-8b00-eb674b9a6c03",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "374fbe7d-239c-4a3c-bb7c-a10e553ade39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c4f65d-438a-4e7e-869b-a85ef198281f",
        "cursor": {
          "ref": "fecb0e83-16f9-4710-ae97-9b1b5c4702ef",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "365e37ce-725e-4acf-ad40-60a129266626"
        },
        "item": {
          "id": "d5c4f65d-438a-4e7e-869b-a85ef198281f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "34664853-e409-44ae-b4aa-e5a2ea455cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520fd0e1-0b91-4710-ba4f-5a9a984c50b4",
        "cursor": {
          "ref": "bb94623c-e2e1-4c67-8cb1-2bafd1f806a1",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1e4c630-73c3-4dc8-8ada-cfcd6057d510"
        },
        "item": {
          "id": "520fd0e1-0b91-4710-ba4f-5a9a984c50b4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "624db0a5-2870-4527-81d5-cb77fa72f6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672ab252-bcfc-489d-97e1-fa1e89f3e9f2",
        "cursor": {
          "ref": "8f1d2e7e-155c-47f0-8c18-3410b3f02c9a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a3305352-0c87-4bd0-aa23-08a166ae9876"
        },
        "item": {
          "id": "672ab252-bcfc-489d-97e1-fa1e89f3e9f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "64726bc4-d5c0-4c33-ac52-93ca019d1f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b330fc8f-ee55-4b62-9e44-36332c82b55c",
        "cursor": {
          "ref": "2b034952-9976-4edd-962f-5cf9cf1ba9da",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9f1d80e9-dafa-43c5-87d2-6cc7fa807d8b"
        },
        "item": {
          "id": "b330fc8f-ee55-4b62-9e44-36332c82b55c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e5c592b8-600d-403b-ba2b-74e0f016967b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854d7b88-26a7-4a5a-b14b-738cf6eb6d7c",
        "cursor": {
          "ref": "dcdeb792-4cce-4408-8e35-31f2af361cbf",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67b30fb5-1f27-4bc5-9d6f-257534ea1992"
        },
        "item": {
          "id": "854d7b88-26a7-4a5a-b14b-738cf6eb6d7c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b7af8e4a-7435-4ba6-bb32-fa1a77d3b4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cf8e23-ccb5-4168-ad25-073ddb89cb2f",
        "cursor": {
          "ref": "3e9053c5-a131-41a5-88bc-bd029189a891",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1f38980b-e856-41ab-a30d-1c6c66fe1460"
        },
        "item": {
          "id": "46cf8e23-ccb5-4168-ad25-073ddb89cb2f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ad4958f3-f6b5-4370-8f5c-541b8a76d3d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "aa8c52ac-deba-439d-bcb2-b1edc747d503",
        "cursor": {
          "ref": "76ed8a14-7598-4760-87ee-d71933694d54",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "718024c4-8aa7-46e5-b9a7-7a81342739cb"
        },
        "item": {
          "id": "aa8c52ac-deba-439d-bcb2-b1edc747d503",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5bf6e0ad-7764-4407-9ab2-5f79bbe2b1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "38e88f26-d11a-4eee-820a-0977c4a33ba0",
        "cursor": {
          "ref": "19acffff-7a70-487c-8c77-89da3e921a2b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "092c8806-b87e-4390-bdce-f85e89c7e158"
        },
        "item": {
          "id": "38e88f26-d11a-4eee-820a-0977c4a33ba0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "727c637c-4bbb-4482-8ae5-1d0567dc01d3",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "036bab0d-be54-484b-9509-984829115c77",
        "cursor": {
          "ref": "41537cb2-68cd-4cba-a926-937a8a60bc1c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "abe4d3a4-011e-4b38-b69f-c7345d8625b7"
        },
        "item": {
          "id": "036bab0d-be54-484b-9509-984829115c77",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b7562811-2ed4-4fe8-9728-7430d2b336c0",
          "status": "OK",
          "code": 200,
          "responseTime": 2299,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a70d43c-089c-4637-bce2-1007b7c773a1",
        "cursor": {
          "ref": "68886035-2721-408f-a4cd-e47d3b30d2ad",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "52ffca79-00ca-49ec-8c40-9dad96c98283"
        },
        "item": {
          "id": "1a70d43c-089c-4637-bce2-1007b7c773a1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "48f39d6f-addf-466a-90d0-2fc91cb42507",
          "status": "OK",
          "code": 200,
          "responseTime": 2364,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
        "cursor": {
          "ref": "59990556-37fc-4679-a70e-84ecb0c8848f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4b26cd8b-b372-4d24-ab4c-14d2cf0d1fe7"
        },
        "item": {
          "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03e156d5-594e-4420-ac36-c190569b88fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
        "cursor": {
          "ref": "59990556-37fc-4679-a70e-84ecb0c8848f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4b26cd8b-b372-4d24-ab4c-14d2cf0d1fe7"
        },
        "item": {
          "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03e156d5-594e-4420-ac36-c190569b88fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
        "cursor": {
          "ref": "59990556-37fc-4679-a70e-84ecb0c8848f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4b26cd8b-b372-4d24-ab4c-14d2cf0d1fe7"
        },
        "item": {
          "id": "ac5639ee-06b3-4bc6-ac9c-f315005f03df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03e156d5-594e-4420-ac36-c190569b88fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "70e20467-b24f-4a12-ad55-6002ed208464",
        "cursor": {
          "ref": "0fcbabcc-f43f-41c0-a4ab-415bfe0a5289",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "17042495-46cf-4c41-8078-d5171be9cf0c"
        },
        "item": {
          "id": "70e20467-b24f-4a12-ad55-6002ed208464",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "dc5e0b9f-9660-4584-9914-76cc5112bf9f",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e9f8bfb2-2de5-49e5-9b55-e9ea9fd8cb75",
        "cursor": {
          "ref": "9a1f51b4-aaa1-4042-9209-8ec63f450705",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0ddaf334-f9da-4a65-b2cd-f97276f304d6"
        },
        "item": {
          "id": "e9f8bfb2-2de5-49e5-9b55-e9ea9fd8cb75",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0f460442-d6b4-4cce-a069-afe81aee9bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 340,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e9f8bfb2-2de5-49e5-9b55-e9ea9fd8cb75",
        "cursor": {
          "ref": "9a1f51b4-aaa1-4042-9209-8ec63f450705",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0ddaf334-f9da-4a65-b2cd-f97276f304d6"
        },
        "item": {
          "id": "e9f8bfb2-2de5-49e5-9b55-e9ea9fd8cb75",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0f460442-d6b4-4cce-a069-afe81aee9bba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 340,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9a0f6387-72bd-452b-9133-fb83588a801c",
        "cursor": {
          "ref": "ee0c0397-bf57-4e96-940b-640e46524c9a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5dac29df-4618-4477-a046-a7d70f787780"
        },
        "item": {
          "id": "9a0f6387-72bd-452b-9133-fb83588a801c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7ec2ee79-ea5e-4507-82b1-325a8047408e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 823,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7a476c9a-0f08-4762-b40f-67c9861cee64",
        "cursor": {
          "ref": "2f179c99-25f3-452b-b470-c6243fe0d8c2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "960990b2-42e9-4720-8cda-2d5f35858f78"
        },
        "item": {
          "id": "7a476c9a-0f08-4762-b40f-67c9861cee64",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "48682119-e255-4633-bb82-a80e2e83743d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 261,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "7a476c9a-0f08-4762-b40f-67c9861cee64",
        "cursor": {
          "ref": "2f179c99-25f3-452b-b470-c6243fe0d8c2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "960990b2-42e9-4720-8cda-2d5f35858f78"
        },
        "item": {
          "id": "7a476c9a-0f08-4762-b40f-67c9861cee64",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "48682119-e255-4633-bb82-a80e2e83743d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 261,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "99496b7b-afc0-453d-a89d-7e90a7913174",
        "cursor": {
          "ref": "640cd6a7-66cd-4558-a44e-faed71f62fcf",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "943cadaa-4466-496c-81a5-47e7d8d699df"
        },
        "item": {
          "id": "99496b7b-afc0-453d-a89d-7e90a7913174",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3d60b474-fe1e-44b3-b311-2ae2fd18f3b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 286,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}