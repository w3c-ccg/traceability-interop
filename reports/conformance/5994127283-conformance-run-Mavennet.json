{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5bfc6db4-6065-4f2e-abe2-41a6ad18e3d2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "21d7729b-36ca-4fb3-85e2-695d05d37258",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9629511-ba07-4442-bf56-912998035cfc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35ea1725-3ab2-4b2d-8185-c80c5525fef1"
                }
              }
            ]
          },
          {
            "id": "50896186-9bb1-4446-8e74-4587ff94601f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0980705b-739d-44b0-9017-e7a439c32f09",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72442f12-b9d2-4748-976b-087ae0224981"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9a71f470-3e04-4454-83de-bcd3d67ed9fd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "72558ccf-febc-48c5-bef6-edc90c97701f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d80fe7df-cca5-4e84-a6d1-a6d395accd02",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25137495-f9da-40f7-b528-1cf0a15848c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecd325e2-bb5b-4f3d-80cf-b20f63b671dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad6cb630-d134-4a5c-a4db-a191405ff21d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38d8b180-0a0e-4ee8-b044-c1536127d89d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "84c09c59-6138-4b53-9817-91d2fbc7ec0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c4426d1-35ae-4422-8122-4eaed2cfeb0b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f225a9e3-a522-4216-9099-6082b4c7cb24",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5825d76e-df69-4d33-ac94-6a6326120703"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f249297-917d-408c-94f9-569ba43ee30a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d27570f6-5cb6-4004-b1a5-e2e1a5072b81"
            }
          }
        ]
      },
      {
        "id": "5707e380-5cc6-4547-bfbb-d8e9522ec3e9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8a1b242f-987e-47b2-b93a-bf1f0c9671bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6b6dfe1-551e-4381-a248-23955f6be3bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e2ce0b99-6434-4143-8470-e0b4c513cd67",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb4f4bf-66e9-4d14-9bfd-809bc2940ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8011d0c1-05c4-4743-b256-cc72bd10f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2317f5-6d1f-429a-ab39-4973a66f95e4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395bcb2d-4a0f-42a9-8d7f-caba70c82098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f6aff4b-659f-442c-b96c-c5bac3f8e8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d79cfc-0a82-4354-a09c-21669774e860",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9a5aea-a705-4f35-8c56-b1a24721e373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "264532f0-d722-4035-a4cd-ea02151a745d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a518ae9-7550-4915-802e-ad26d714a102",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d008343e-920f-4cfa-bf1f-719d089c3393",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237ad69d-d1e7-49f0-b89c-542f1dd1c659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7c59750-743b-4619-83c4-24d0e266f7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4f3ffa-a0f7-4812-88ec-ca95da2c6862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dee6ce-c3a7-4410-a90a-6800c362b88f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5d51c2b-1755-4d76-853b-6921b6a1a390",
            "name": "Positive Testing",
            "item": [
              {
                "id": "237c30f8-083b-4236-a6c7-9c1b8ec5013c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ded993f7-e787-4d3b-bf50-2cedd0bd7bcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b1131cd3-2f2a-41df-b1ae-906fd0c36373"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f3d030f-d5ea-41f9-8e1c-5b851ae005ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3194579d-ea0a-4cc2-80fa-33e6a93d1fe7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e74bd96-4323-4f2d-9383-5d74d2cad13f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13ee0cf5-0f0b-41a6-8dd9-e23b2412fb85"
            }
          }
        ]
      },
      {
        "id": "b26782c3-6fe3-4bd6-bcd8-429be7444c12",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "259e626b-4a7e-45db-8812-0565b6cc100f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cd66605-bb55-4243-8cba-35bcd3b70c88",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "35a4814c-5917-4015-bee9-5ad779ba318e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2199edfe-b97e-4bff-97e2-a58a8e963e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c9585d-4407-4a6c-b87a-75e8b1ddeca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22ff487-7424-4303-9922-0f941a35216c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "880018fd-3564-49c0-adf0-a4ab93c26641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400a079c-2236-4229-a3b4-780c9a3f1298",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c36070-ed3d-4481-be8c-5df7a0927146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8388837c-e194-4ab4-9a37-ebb511c33d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecf0fe1-caad-40f0-971d-4a363a6e846c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1072a383-012d-40a2-9cc3-46b45ce5ddde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080ecce6-d6c5-4c91-9f59-5ab832994646",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cebaf1-009f-47e7-b264-7514480f534a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bac176e-8f6e-4b92-9dba-928e0934b571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c76189-09ef-4378-b459-2c1fcbdaaad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "662d6266-071c-4537-99c7-fa8b22edb526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde26aee-558e-4bc2-953c-2119967440b5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e14997-e9f1-4c85-bc7c-af3b9c61afc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b64845-7efc-44cb-8933-1625830371fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc9c2e3-3d23-464f-8617-d0efbad5843c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "065c11cc-35b7-4e9a-84d0-2e15f60493bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e570c784-edc7-4504-81de-2ccc4cf85278",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1a8de4-69fa-495e-80f8-b934857cc787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e444815-8e1a-4f86-b9a6-3e65c6eb685c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8311e22a-d6b6-4c92-bf39-824f56c0bca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a12989a-caf1-491a-88ae-8d88e746f420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6021b4ff-e4f1-4b96-bde6-63241bca7783",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f7b067-50cc-46eb-b376-a6c65d7b81a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedcad82-5467-434e-af76-405057806716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe4f3ee-a722-4f2e-8bf2-d6034e2745a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aec963c9-9a67-42c5-be14-6bbe120d2f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd65b483-b65e-4800-8d95-c625c89dfa57",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac32b09-9def-4b6d-92c4-d3ca4cdbcec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22948002-079f-4fe8-8033-6a9c6cc6a633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1b5b5f-29ed-4c7b-8778-922650a9ed5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7144d065-5105-4e9c-bb7a-45afe711350f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c3f85f-f818-4e45-a37d-0e9154336eaa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d3f113-17a4-4067-80ea-d796fff79033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01ea309-0d23-4de5-bf64-0329cf929d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e24eed-84c1-451a-b9fa-d97c5e519648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d97c2e5c-3be4-4a2f-b058-f84a47437cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a9431c-8482-426f-b57d-44b520a0379a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ddfc65-4d8c-4467-a42b-95659a64a23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ca114e-e4cf-4522-8644-b3b9e7d27d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f3e38d-1e93-4814-835e-bf955c1dc849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a90830a8-8e6a-4166-a240-ca0fe71c0486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc483c01-a57d-4487-b322-cde7d22aa905",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00568a3a-12ea-4a35-a66d-f21c4333fdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f20fd6f-e81c-421a-9f55-183fed9ad7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2752b31c-af76-4b76-b703-e98dcddc930a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c53c384c-80d9-474c-887a-4b4a6e3c30bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cad4be5-3a93-4d30-8718-8d47738ef717",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a42325e-5b5e-4daa-9fdd-0b343665ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71625618-028a-41d0-8e4f-3dffa3cc6be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabe0bc7-39dc-404c-b6eb-cba9d423de0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f474f952-57d9-4ea4-b83f-ef10630d8344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a54b3ad-1d1f-4e3d-8d89-e03a600f3fb8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb851ab-384d-4c31-8a33-62b32a0ebdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a758aaa-0344-41b9-95e3-7977a8603b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9be8c8e-5082-40c7-86b7-3db5be63e7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e4f1b20-9f06-4de3-a6dd-7ee8b617dc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9368bcb1-5c95-4986-9c43-66cd5fd07b48",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811863c0-e8bd-4e87-8818-9fbc29fd9793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2418c08e-c52e-40df-96bf-46df430d6453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa8547a-6770-41c4-a1cc-875456557730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98d29407-bd56-4b6d-ba96-733950541dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59cc400-a923-4dd1-b3ec-453b3bfe7049",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d574307b-2b55-4400-998d-b0d900ab8435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff3dfd0-97ae-42cc-937c-345f9d395127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f485c508-9276-4574-9e64-ee67201962f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfba7466-f4d0-419f-bd76-2040990346e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81184918-dd22-4a47-86a6-1eda28422554",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e384aec5-4dc6-448d-a759-230a93fdc4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc4754d-0d12-4c13-a849-5d84f89e07ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b2ca4f-c67b-48a1-8487-025024edc625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cbe1be1-1574-4644-a9da-632657b8d7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87450401-a795-4ebe-ade8-25028143fe50",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d66770-c87e-410b-a10a-1f79a42a263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa49c3b-a73b-4a25-9ad4-b1125fd18f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e2910c-6a42-448b-82fc-38746866730d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a010b032-0d5d-4a72-b2e3-21e67be89ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b6f463-54f5-4d1b-8e6b-707480fcf907",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d813c51-9d89-430d-add2-b10e97a3c88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdffc00-70be-471a-8524-85ce9cf907a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65f2c66-b3fe-49a6-b045-408305f1b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fec14bb7-fd64-4203-8dde-40fba559b5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9a223e-b000-412e-ab82-a84976e23b86",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eac183-7a39-4324-a94e-c88fe3614dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f530d4-08c7-4bf9-825f-d4af2d851ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1530f8-20ab-41d8-b6c2-90eefff5bbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8804afc-ae42-4c1f-9830-123cd4921cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993ead0e-c48b-4d1f-8929-3488816c3edf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97d248c-2b1e-4de4-86d3-921ec0e9efee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41885d91-7486-41fd-a109-4a4961b60893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19a0e00-006f-4a9a-ac6a-7c173b182fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b936896-af08-4164-967e-3f9dc609ed87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4940b8-ed48-44fd-a2bb-a6b70ec3d6a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efef0486-6029-4ecd-95c1-7bac59f348a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fff4823-5cfc-475c-b309-f4ba3155907f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6c6f77-312f-4f65-881b-34c582cd1d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf05914c-1d18-46ff-a8b1-02617f31fe0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fefab85-1bbf-4440-8b15-26aa89d135f0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5348ae8-2bf7-4960-a6c0-a09ff5d198a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92554c13-d256-425c-8bd2-ceabca857cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f746f0dd-aa3f-4db5-8f44-b83690e1d815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "521d07b7-a484-4fd9-93ae-446a76466519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ede8f1-2de7-4010-8ba3-200ec9c8459d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf269b1c-44dc-4c00-a709-eac581a8debd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314e1e32-f63e-4e76-988c-7d20d3d34ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312be189-4956-4f0c-be62-a38fb6f3f8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66354623-fc6f-435d-bee7-f2f2832924f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162cb1d2-d4d9-4b7a-b458-1ba3b80c6155",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cbc06c-6a3d-4efb-b422-26b15ff1f2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a3200a-137f-4918-91ee-769d2f20ba02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f88cd6-7a65-4414-adcb-aa34aa481725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01afd55f-6d08-46bf-83bf-54968a8db152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73210437-3539-4cbc-b127-d003cb96f602",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315e8ef2-f572-4f2f-a632-8cfdce8c3987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487c3b3c-ea06-443f-84e4-0a31655f9b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0b63be-f6ce-47ac-b1e5-9d03b01bbe45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c1936e-070b-4990-b6ed-ff246a8dafa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171af90d-aebf-4f6c-888f-de07e1be7cb5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b239520-442a-415d-be97-b2e3c1d86c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839e82fd-4f07-4f30-905c-1c56a50f0ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f59c0d-6d60-49ab-949f-18866fc54640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28875379-b694-45a2-a015-fb53a9b1a25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3479bdfa-0f43-40b0-b329-71f283c6c08b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc0bf83-97ad-41b3-8434-942f8ccd7d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a389ae-6d57-4a17-a0af-12a2e4457acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f09897-f679-4a44-bc46-350c2d254174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba26d7a1-9a0d-4849-a42a-398d84e93e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a797956-1a96-4408-b220-e4b27babdc31",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd277f6a-f9d0-48e2-bf07-98370a19c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa03902-5b66-41cd-8288-67254406a8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ae22dc-37e7-4d90-828c-8caec8d19875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "596bd541-00a6-4fc7-a769-8e232ab9251a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8540b41-c0cb-4c68-ad50-c1df3b155de0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187ea8d5-7915-47af-930c-3ed577dcb43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b65734b-40b1-4942-8e0c-a9e065aa4685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514cfcee-5e21-4c8d-bbf4-bcb9556e1aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c196dc0d-ca59-419b-a213-2d262a76b12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb36e52d-e956-4663-86d5-7fe4887059d8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244e8d38-27fa-4837-b612-893e0079d8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0767de2b-91c2-409f-bdcd-78ebac08a07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d008d1c-8101-4571-873b-dbd9bb4aefa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16bc73db-f75a-4325-a226-679e5ab624b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a2d16d-77ca-479b-bed2-2d5d59ec410d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81d10cd-506f-4cb3-963b-ae78200130d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673b970b-7328-42c0-b6a4-dd0ad3686b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5856d7-641d-45d8-80da-d06da9efad61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aedc095-d085-4ea2-8ea4-5e077feae5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d832a46e-a303-441e-94f2-9c2ddc5973d5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea2deed-21f4-49f3-b628-da41ac68a472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe3d927-8163-4b6f-b2e9-9f7c15e01ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89be682-f3ff-4410-834e-bb95c03ec7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64e10908-cfaa-4d9f-93bc-347e4c879c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aa8e22-d7a5-4a14-86f9-b42a4be9fb59",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8559aff-7ff6-4a29-acea-cd4548c368b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e95270-278e-4806-ab0a-f0a2c5546898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb96c18-1bf3-4e98-84d7-83d1a167662f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c87a67d-3d25-4f3d-854a-ff1111a25b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaefad3-3c89-4a5c-b1e9-8e2035e68f81",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0c4467-5e42-4346-b16f-5f0df6fccd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8e6818-b2a2-4752-a71f-073e7549ea7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f119271-e691-4f09-baa2-869821b75504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f128acc-1d2f-423b-9ee1-e11506e15d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81e4357-db2f-465a-a147-95c31d45a37a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1787a376-84b4-4176-92bf-076edb90cc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39754c7e-906d-462c-9c6b-8b42877370f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4105b245-5b23-498b-aea0-d81f0254f82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "768be86f-b6e6-4485-8545-0a2a151269b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582ea0b0-c76d-4ada-a217-93303157a1cd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c51315c-f7d1-4854-929f-79d975299e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152a0d48-c63e-427d-ae53-8c0d22218126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a3cabe-8ed6-475f-a185-b9961d224b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ba35ec04-06c7-421b-b2a8-8327ec6c7dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c628ac-cc50-4f05-b6c7-458ce0522188",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f7a9c4-8b5c-461f-9bf2-f76d1649a8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49aa9e1f-ffcd-4315-a83a-641ceaf9a37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac680c5-2cca-46db-9182-69f12353983a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f7143f-de7f-4e45-a992-c39e5e145eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558d0555-322f-4f51-a174-b96dbb7c3737",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60159b71-490e-47b3-b12d-04632d07e9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03bd451-87bc-452d-badb-a62e55cbc624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09bf287-36ee-4ec2-b7d7-07d549487dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbeb5ac9-3462-457d-bdba-79b29e54bc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ca818c-be6f-446d-98d1-754750fca3ff",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa99e0d-3034-44ff-9523-0f0556c06b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de9dcbc-aa4e-49e5-9aa8-51211d32ef95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c31543-a53c-4e0e-92c8-ef5f8acecb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f137da8c-c59c-43fc-a44a-d4527cdf28cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8064cd80-4eb0-4d8b-ba29-3b5c177e57ed",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d717eb62-6d72-4952-9bd1-5e64a601c932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a528473b-c1b4-4c59-a0cc-66598f56b1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2050692f-a0af-4f3d-a0f8-1fb32de93694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14d113d5-50a9-48c0-a4ca-c2e1fd773d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf1313c-5e26-44e0-bd00-82b6184854b8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92da1b50-94fe-4aa6-bdec-f3d6b0a65e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bf327a-81ab-4b56-84a2-9c83f6512653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304ae1d0-2745-4211-9478-026a419805e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55553943-184a-4956-be5c-bfe17d6f39ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748de80e-1a94-48f1-8862-1c885bfe8295",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1446bf-8de4-4587-a95a-1c4f43b0f975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01ab882-934f-43ab-8364-455c12168ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341fce19-bc4c-4a5d-9b8e-5bd5b578fc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9b7d9f-5f5c-43ff-97af-722a5df3ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff15763c-aeaf-45d2-a5a4-7c85a4461747",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b98a57-cad1-4096-9ea3-2fd3677bfb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d7cb27-ce2e-4a21-b5d2-5e8f26d0e1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6173623a-a775-4e58-aab4-22d580350b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6527fdc6-d153-4ef1-98fe-7dd77df44ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890ec23a-189a-47c3-b002-e9e03feea348",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae29e3f-efd5-4d2c-b93a-3a775621f9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6c90d2-7570-4f2e-b620-dccf91998e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba37beaa-42ae-4a6a-97f5-a3f5e3346f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc43999-d0b5-4ecb-93c5-301c69440522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf58568d-6b2a-438f-aa3e-f2db5cd9d00c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d6ce85-0215-4f8d-9843-cfc46aeebdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcd0ed6-2079-4b47-810d-92d663061b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af71415b-c717-4f4b-bd03-094efc313b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "449d6224-6464-4af9-be75-051b4799096d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad12854-15b6-4161-8d1b-b35b25ffefc4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1f6575-675c-4e0d-9b3b-1680524811e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31616bea-ed2a-486a-98bd-7af530c4c2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018af99f-c424-4f1d-8c43-58c95d150c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8bf4e3b-e273-4688-9dde-33ac5234d302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe414d9a-a1c3-4765-9138-e888fb0fcba7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416c60dd-d3bb-4cb2-a947-41b61da588ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3eced4-8683-433a-a3f9-5eac39d20bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b3de04-06d7-45ce-8c0b-c4ab5b50f703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88e20cf6-fdf9-4565-a0f8-24d3d8b50f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8e5dfe-f751-4e02-b9ee-ac4361ea644a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22d2e01-6d5e-48d1-9082-405096e2c808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3456c5-9a9b-46f7-bdc2-9f0e4b779199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d3a8e2-22d4-4570-a424-44ff456373d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b0c6dc-5101-438b-87e2-5e715e5ea124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d330296-29d5-4429-a2ad-100697b8947e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c0ede7-f94e-4d4b-bc99-4364aba1e3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8566dd72-2add-4336-8339-fe94d5c88bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a335eb0d-6c3b-4a50-afe8-3609e1d823df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad58b009-ee45-4db9-9ec6-94aeebfb347c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24b85e0-b9bb-4049-a508-da73ab620d5e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54797da3-c4d2-4abf-b365-292bc85c06d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2527158a-27ed-4c75-90e2-0bc66be039d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62238ef-9de7-49ff-b67e-a2e4f8ede994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78ece6b9-5a17-4202-916e-4b4aa1d8cae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7061e447-ad3e-4627-951a-8c25f2a6e9f2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336d94c8-3a82-4f8a-8002-d20ffc57e813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2891b68-5c2a-457e-b8c4-b3ac16bfce45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f5ef17-0c20-448c-ad9f-d89e15ff2f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fec1511-88f2-48c1-a960-b67c339001e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5f07cd-014e-4428-851a-b95da8daa3c2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282e8a4-592f-4c0e-8a5e-fca8532aff3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43efeb0c-0505-454a-a0a7-3d0f5ca15d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e2a6b3-0063-4e9b-ad65-dc5bc8da3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3c2264-99e0-4429-a03e-45671e50b28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4df1488-a814-417a-82ca-ed061300131d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9201c0a7-f91b-48dd-bc12-2d2f828a78d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb24f090-29bd-4c86-96a5-6f3103308764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e03ac6d-dd15-4c54-8e30-07c9d17ea8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f17c4d7-55ac-4dbf-9a06-0de5366626c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361107e5-033b-4549-8dc0-274d100e59d0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd1fb0a-522a-43be-ac57-f4d5bc8b8e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba5209b-76d4-41e6-a8ab-37afa8923cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29c0133-55a0-4f67-a153-6256d3f29993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb74cea-d52d-43dd-94c2-c08c58859aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcf8e7b-1bcf-47b9-80a7-8bd6dec1e1b5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b96860e-de17-4a41-85a8-07c95a491c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b558dc7-1d5f-4029-8c16-2d14896efe2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e88403-0318-4599-9f7f-41d2270fffc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67cfc3db-9bb7-413b-94ce-982ac40813d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f1ecc2-6b44-44f6-9e2d-f4adc6859355",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb9c397-cd2b-4ad6-8b78-02bfc2bcf20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9950da6-5452-4bf1-8cbf-3f601f0c2c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c266c024-2002-41cb-acdb-9b92930c1b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "654822af-d851-4953-ad24-0c14af890fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b681884c-1be0-4ca0-bf59-2597984f3f30",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b306dd79-1664-4df1-a1ba-59d4dd2d10d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf75b05-2b91-4d3b-bbad-65b5a29735bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdae86b-0cc6-4682-8207-06b04196670f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fa36b2-7a7c-4359-a1d9-9bdc69fd8baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d5bcae-3e53-4dd8-b1d8-4f9945c0c0ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23935dec-e270-4015-89e5-6ff03488569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575efdc0-4ad7-41a2-b415-4a5dcc2ee229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e313165b-5a0c-4f2d-8c96-dc8a776657f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d43a08c2-a63e-49d5-bfa8-87ef6faa7418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fb1136-2f3a-46f1-9178-6547f6556168",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44edb058-a68c-4e60-a88e-43861255a004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4bf95d-8a0f-485e-8a0d-bd5fc87df83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d911b598-75fc-43a8-b1e9-abfb49513324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f731f011-6868-4b07-822f-7fcd1fb551c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895681a6-52cd-40fe-9ab8-747065803f1f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e686c514-8adc-45b3-b911-89c4c01e1dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4e5472-83c1-434c-ba86-99330b299a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2197c9de-36fe-4aa7-b273-ca52a7b7065f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8a7c8d-4f80-4d1b-b228-1eea21f32719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b4ad90-4ece-4341-ad2a-b4966d272f44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500b0e36-8a21-45ca-9793-803493454bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e15af9-051d-4c97-b948-08e53a6381ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a237cde1-d8c7-42ee-b80b-c97fbd1e2c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee133f12-f9da-4e3a-a964-63ff88d9fd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2ae4b6-c4d0-432c-a490-c6f6b4678d29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7dd002-01f4-409d-8301-9762272e6857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e4dbd4-3326-46e9-9765-8afa5692921d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc307a7c-cd51-4e23-88f8-682fd95ae314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5476db2-3e40-412f-bd9d-c4b0ab16f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19caeac-780b-40b0-93ca-787b2243037b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5fc4dd-35b9-4fba-84be-bc8ae3fb659a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11636399-4ee7-448a-bd65-31bab08e8b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10e8d42-24c2-4b9e-971d-3fa0fe0ee177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "98821fff-b9cf-4633-92b2-c4f8ae33b927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72ec140-c1bc-452c-b8ab-41d9f2e4768c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff34e520-b383-4cbb-965e-6f169f6125d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c71b2a-81a9-4ae9-989a-f300929c3c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d5ce01-1b32-47e2-820a-973e9550d2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "794a0e93-fe83-45a0-bf6e-f3042f8151ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2853ad5a-1550-4625-a3fd-f6d8e14b69bb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcecd911-0206-4679-b3d6-c7e58655349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720ef98d-7750-47c6-9e61-af07e60e4898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee52db6-1cda-4788-8a51-5895a8266509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd284ee-6e16-4da7-b1b2-78b7db74998e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bf9e0f-e74c-4fe0-b45c-89085a449f8b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d4d49-7d19-4aba-8e13-3fae45e7e0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b572e2-98a4-4500-a2d2-a5fc43ed8823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164bc29c-8294-4d02-a729-d9a189e08f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7952ae9-c859-49d3-97f1-7e327e98f986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d78e62-9a92-44c6-8164-98f254cd8693",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49e77ef-4195-4555-9d06-75b337f4bba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7437864f-4e5c-4fd8-b844-22c2c43000c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94abd89e-b1bf-4347-9176-af69eb51cb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "495a4f55-e890-4790-b428-c78d19134480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4e5eaa-edeb-48f4-b3ca-3f296d4b8eaf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20604e00-3d18-46b1-9124-7efa31e221f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3fab0e-eb23-455b-a65b-4affaf9bb613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f0150d-9f30-4223-89b4-734ee81d7d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3a8da6-a3d2-44be-b53b-60c6b449bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b279b04b-d1cf-4065-90c0-55230e4d55a8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46eab47-a38e-4915-95fd-8f61c04bc247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45db214b-41d2-428d-bcb6-d62cdc4be61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae309df4-076c-4dfc-b9b4-2b466c03b130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "90950a7d-91d2-44e3-b0d9-b9383d30d867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809d1c5f-ad77-4fe9-bc0a-218f6388170c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defdca93-90d7-4489-8437-a086d72c694b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf6e42c-1b1c-4e20-80d8-b4d46639e571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a87ddd-0e9b-4657-ac0e-6046eccc089c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df249f72-2759-4b72-a034-4f29db793c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37b187c-ebb2-4f27-969b-4b5f69ff1af1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2928d190-1f60-4c58-9450-b144ad14ce20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5ad9b3-9b80-426f-8978-525231f4f80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb75801-e240-4b2f-8520-7d8c9e9c2468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d518e33-e399-44c7-b599-143e10efb266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691f40d3-825d-44da-928d-888e3e0d856d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e023b3-fe60-4096-b0f3-0f6eef70922c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994dfb62-5513-4f6d-bce1-42a5849c28f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06186a8-c6d0-4596-8987-18fc63d57279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4436ace-57a2-48a9-8e5d-b1fb77ef097f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65efa61-8b74-418b-8913-22698ee6701a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abc1f72-af5e-4fcc-b02a-0870a57306cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec50c570-272c-4969-b465-596bb13b3bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74f72ec-1e03-44de-ba05-f2551bcbdbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e7a5f2-43f4-48a8-9549-cec85932ea95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e85c940-44cc-42f6-ad36-ce02126bb2f8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb5a40d-f591-4fb5-a765-8711011b1415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17ff94f-bf7d-4d8c-bd2a-4cb724b34810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b841495-4e38-47cb-a3f1-c3dcd985483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "566de8cb-569c-4509-ac2a-61ce23de123d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f606869-881d-4a40-adbf-65dc3dd2d98f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d795f0e-9687-481e-9bac-f5310a3f9af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c458a84-7f03-4887-9ca9-1813befe02e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71eb6a8d-26a3-4b94-99eb-8a9b1257caa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6ac555-34d3-4c77-b30d-35b8c32ddd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016adeac-90bc-4402-b8c9-f7f3f4cd9a64",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72186cd-7061-421e-a4b6-6ff4a2deb6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2962a113-7a9c-43ec-b6d2-86e36a52db72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6603424-b682-43f1-8f65-b7d5e00fc601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f06fe1cb-5857-45fc-8266-9a1025d64a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3846678c-37de-430f-8ed4-d7687f4c1e48",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9169ebb6-bdde-4b8b-a581-5baaf9cd9ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407050c4-2241-4c62-bb34-c2d2404a84f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c07832d-15d2-442e-a391-c8bd3f4f7e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e884d62-f35e-4440-9400-127971d6d65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec97384-bb3a-440c-a2f3-93abd6236dee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a0eb28-80a4-4c4e-87f3-bd11d92f1226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a92ba2-8dd8-4a82-bab5-120c3f5eeadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85983c2-5298-4980-aa93-ff053f16efdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0180cb22-7cb1-4e69-ab94-014752123442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cdd6f9-5e0a-428a-8ad4-6c1929f20cfd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fe5c7f-19e7-4f71-95fc-ca2745c9c0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb707e47-a553-4bc5-8eed-c26354eb78a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9fdbee-7f8e-4754-9a79-8ad57c6a419d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3971061e-65eb-4200-97ad-3c693ef9d1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27126a4-c514-49bc-b599-79ca56a875e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cba03f-cd52-4e8d-9019-870eb564a5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40982955-fb48-4af3-adc2-054cea1d7218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a0434e-e91c-46af-93c8-38a895968de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75dde993-b28b-4e3f-82da-6623dd2f7503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1b156f-ea97-4983-860f-e0cfadcf61c3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff4f3f9-ac93-406d-84ae-0d3e4a081a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1628b2f-fcef-4d5b-ac82-45205817a307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd48758-a403-412c-8f49-1ad74ccdb562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da733e67-8e97-4f1b-8827-b09d29cef90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bcced6-01d7-4311-aef9-be400897d43d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4309d0f2-504b-475e-af7f-ec615066ac34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1895cf-1455-4af6-8393-14de7c970f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb35611-87e1-4f27-b5c5-f95bd66484f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "916acdd5-f99e-4721-980f-71f8b9a56670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669aff60-451e-4533-ba75-0e22a79265de",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099fbde6-3aaa-4e73-990e-49955e97c387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5d902c-9ca7-4b47-92d4-7cd1e5e0522c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6173fb1c-9103-4a02-b68b-3d90a9810228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6595ffd8-140a-4340-9476-66963c96716f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e32d1e-1f37-471b-8479-7432533d006e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754c9cbb-9881-46b6-bfc9-71007faf0859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deee6753-b0b0-431f-bb10-a3769c896cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5133df49-02a9-47e0-a45d-4df906a96ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a3dbaf-d39f-47f1-8067-e76185f0b62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25725ae-52ab-451f-81e1-43f79ea0dd00",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79260a67-b960-4e1d-9838-7d4cc3fef4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb74f095-049d-4c40-8f80-23525361c418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0357d735-4a85-44c5-8a05-0861817a2a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c69bf8-bec9-468e-a3d6-ef0f5ec2c65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced173e9-769a-4bc9-a4f5-c2dd7a22f843",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa22436-7f60-48b5-b6e2-23d4a86a7f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78021364-b434-43ff-a739-537792505296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea44af2e-019c-4627-8fa7-ffeed455e961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d55f2453-97e2-4701-983f-8800e11826ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09468db8-c273-4576-826c-9dbaa484e309",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d3d2a0-00a3-4343-9278-c600eef48587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f1d7f9-a072-4875-9528-3b4cd817875b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219164d0-d1be-4e28-81f2-d7f308440c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c55e306-2b56-4e80-974a-41d1c81ca890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429e7d78-d92c-4b67-a380-e8fc78c104cf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98272d7c-b6bb-414b-90b3-7e7678d8272a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6576c72-137f-4f5a-9b62-12295171e1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601ae18f-d9b8-4e64-bc8c-5b03ca707467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1abbc20-4b9c-41aa-a2f2-c0f4e0841552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1ec329-ea33-427c-9517-d0195bc018d1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9a382-59bf-4edf-8f4c-ad71f23f1402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eec6c7-cbb0-4684-8f8c-4bd97c6342ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ff9f70-19da-4318-9d09-c6c97c3e18e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "278f78df-d28d-411f-9f09-7049cb006ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3731421-8304-4c3d-bd8a-49c4f2f9513e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95555c7-7c5b-4aee-8a68-82d8fa2b7683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b221208-9d02-45cd-900d-9488b89a5f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e7dc67-514c-4af3-ae0a-6cf3962e50af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2c4874-8fc9-46c9-964b-f6a01a0f1ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68da767-d610-4a5a-9841-a582debaacfa",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b2de45-573a-427c-b506-ed5f9c211028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c038bee0-4980-4369-9e0c-89fda414d900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfae767-986a-47c3-8c9b-eff22188c612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0b449d-8614-4dd9-be95-fad4dada2433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb53c5b-10d9-45e4-ad29-1e4ff7dbdb65",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89cecad-b0d4-42bd-a327-50d631088e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07f0212-5631-4b1a-a267-3f6b2e6a848b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508a9d07-e56c-40a9-9341-d577afbb0410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "15f96c40-7d61-48a1-8d24-39d38569345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df300871-786b-49bd-bc02-275aede89f50",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63549b7c-da08-4fb0-8cc2-15e1a873928f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1d3cdb85-9dd4-4536-b448-448ca682bcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7811f0-19da-4af4-b8e1-ee2cc8c87a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7dc97c2-3e6c-4966-824a-08b841923929"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9f41afc-42e0-47ac-b5ce-dde7b59dee3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c16000e0-330f-42a6-a02c-f9f7b2888af9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa2e3b7-2d8e-4202-b044-455859fde330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5a01604-d970-4148-8616-1e33bcd86825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d3dd5-b4ca-46d4-be6c-83cba26bbbef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cf3f1f8-36c8-4398-87ee-915d62d75291"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7ca5525-a92d-4fae-879a-3eca8bc1e7b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df4c2d33-5feb-40c2-8385-3de221bc3443"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "161beb8c-4603-42f0-b88a-d8a05f385e70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d8130f6-eb09-4916-be4a-3963b1d7b4ae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c76b4c68-db78-4417-a76f-1d0b634c07da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "879867b4-23b1-4480-9b57-829c7d11caeb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11545a2b-7df3-4922-a5bb-5c9a2e8c9d3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "784fd2ef-a086-4de1-bf96-984dd7054743"
                }
              }
            ]
          },
          {
            "id": "50734312-aed8-468d-9e4b-dd51bc846478",
            "name": "Positive Testing",
            "item": [
              {
                "id": "677079fa-e6e3-4bc3-921d-59853b494f3e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b24aab5-f754-4181-97df-afcc6eaaa359",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6fea8bb1-6da3-460b-91fd-54b423150dce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b37e059-a24b-4c63-a18a-b6adb6a95e54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d131862a-d2b3-4b36-9bcb-eac5350a0f79"
                    }
                  }
                ]
              },
              {
                "id": "5d17404a-8bf7-4b9c-93de-19b2050c578b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4718087a-c0a9-48e9-a115-a8a66d8a78bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fb7e849-78b7-455e-b209-9fe6dc64f9ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9c872d-3acb-4d20-97b5-dbf9dd9af174",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b3cce55-1ead-45cb-a057-4a72b03dd803"
                    }
                  }
                ]
              },
              {
                "id": "7b048085-c3bc-48e3-8fad-a53ea87ac168",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2efd6ef1-3eba-4899-b8a1-7495a8b21810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1769d6f7-6bde-4c4b-a89c-11564bb2110e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0eac176-d926-4e9a-aa55-1b51b8c32067",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7810c7eb-6ca5-45f6-986d-d15cce51a2e4"
                    }
                  }
                ]
              },
              {
                "id": "254fb45b-353f-4d83-a834-dd0bd365989a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ea0c4d9-ad19-4420-9bc9-d3d9b65120f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "358d66ae-a85a-451a-8fd9-020e175c0471"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a7329ff-f399-44cc-83f0-bf5613d9c7a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "45c12d49-0ac5-495a-8595-98462facdc93"
                    }
                  }
                ]
              },
              {
                "id": "ec1ef835-fee4-4e54-b582-500bb889b673",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19552010-65e9-477b-9751-5b41968d602e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5853ba93-5f1c-4cad-b7b2-edab1d5d3ab8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "755a621c-0df1-4554-abd5-ea61e362e99f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fe5c275c-d113-4ad3-ad7e-e19e7aa90f31"
                    }
                  }
                ]
              },
              {
                "id": "2c6d8e2b-8004-4c73-9dfe-334aec555891",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f853050-a07b-4049-89f6-87700221df9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbec159c-4d91-4012-bfdc-8b077320e1d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38ca4722-7491-42ac-827c-e1f7b39aa8aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33115dce-2824-4ce6-803b-0bcc644aab9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c38846cc-2eab-4dd9-af50-1a8e2cf7a15c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c9fb3b2-a316-42c7-9687-f7720532bb6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f7106d44-6744-4b74-82de-e523875bd6cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b5b84bb-0cc7-4720-8097-25d879eedead"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "448638b5-2e16-443d-9803-94dd6ab2058e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0d61e481-0019-49f5-bddd-923c3d9e79da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad4d4d1d-11c6-4e0c-b265-f6aea921186c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "751fdaf5-06ef-43f7-b32d-e85db670c020"
            }
          }
        ]
      },
      {
        "id": "042cb9f1-82a1-4ba4-a1f8-d0e9742d505d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3994f60f-ea61-474a-b20f-35a0c80ff0a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "077cb797-a544-4fc3-9bde-eda9888d597f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a865d64d-85a3-41fe-9153-78f9180336d2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82db4862-3393-4585-90a3-a6870ebd0f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ea5ffb-43c8-4974-b1a1-bfc9840673c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebfecc0-e9ec-443f-9b6b-b7f4959c9e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "48433f3b-df14-49df-9d51-7f1ae7e71d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87853bf5-83f1-450e-802d-6b755608546d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8539354a-731b-4ad5-a7dd-a9cab301e25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb8c8d5-668f-4f7e-9b18-ac7bd57aabea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ad6e95-0243-4abd-9911-8c6661f08669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "350e16a1-dc78-443b-b642-42e9e1b40c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30710c03-18b4-479f-b86f-40840afffa59",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a64a4f-8382-4909-90cb-667372d5b3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdd4f1e-85ad-43a9-a955-b0b634595e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2818380-a742-4089-a83d-9f34c46a2953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2f047a-fc8c-488e-a4d7-523432c2dae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4b682a-c9c9-4059-8e94-2ab5271288b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c6fa49-73bd-490e-93aa-7f04262cdf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7842542-f27d-4297-bbdb-33acdc5d6323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23272daa-5309-4e57-903f-500ce0dcfcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f36da0f-c8f8-47f0-8e70-4a5ccee59235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d2f53a-ef96-464e-be3b-1883c032bd9a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0314cdd1-803e-4be0-b7c3-1726a1f8819d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c4bc3e-b001-4e84-8fe5-bfb799417a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef57ac89-c422-4f7a-a19e-481c3fe37d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3947779-1801-467e-90b0-aa311bccf1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d1411d-b612-4f62-bcc7-27b6dea78fff",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7a74f1-cf4d-43ec-8f96-585bd1d02fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903c808f-7d56-453e-a70e-4035d0d08f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e8b303-32f8-49f5-af3c-d5fcba19f9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38c8cd95-6704-4e7a-a9fe-163ab5f5bae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae924fb-ca65-4b52-b401-e6f3d96f8182",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585ab13f-b25f-4e79-97b0-4e2e4e882147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1851b595-e101-40fc-bed5-990b05ae4f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85238776-2437-4c34-9f93-a0404a537a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2162428e-8440-4949-a870-c6e43bf4cfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bc77b5-2ac7-4819-907d-74b79cc1d689",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630c5770-2da1-4bdb-979e-177ee70d6358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819cc0ba-e743-4465-9e23-82d1b41c36ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b04d36-e123-4444-beee-9dd0d6a481a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42e057ae-d754-4c41-969b-3b1a47e05fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450795fe-6536-45ac-bb10-8a956b8451fb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32246182-ef93-4a67-b4b3-bdd2ea76c8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9149fb16-9b04-48ac-bee3-ce06570e116c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5295acba-61e4-4553-b4b3-9e4e64f86ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9777fe-0c55-4756-ba04-01c7df24c3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e1ff45-ecab-4103-9012-22018dee78bd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba425d5-53fb-4dc0-98ae-cc30610289e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4ab19a-9728-4a70-93ef-378f383c901c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725b86e9-12d6-4453-bddb-94f0c7ac7e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4b8821-24e7-441d-8b2b-7b3d5e51e56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f619cbc0-c749-45a1-8b43-afa319d332d4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689f24a6-11fd-47bc-bedf-11feeba31691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0f8a0a-4fcb-49af-b9c6-5389a67d2fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8428e301-5697-4431-82e9-885cdba2cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b14ed97-6b34-4063-a37e-fdfd5d82ff39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95642c2-bcf5-44c5-9146-c80ee508014f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02101ab6-7e4b-402d-925c-3b9797dbd3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d139d8-694c-4f4b-8315-e82600670709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87664c23-2d60-45fc-be38-6ce06358a50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02e8134b-7057-4d20-a2ff-74c50fb778c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330fab63-8630-4690-8da6-33681cb78877",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22785f37-575e-4c27-a9b9-60d013f565e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac5c3fd-0bf4-46a5-83d3-535830eada15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f01a9a-a490-4741-b4a3-49c8eec1f4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23853255-ade9-4094-8c5c-1919c4f1fd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848dc7cd-836b-407a-abe3-7ba6579870f8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d9f3c6-cdeb-4f1b-b9ef-8e6292cd84bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ee7cdf-1ff5-4f24-8b89-4698568a9f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe86173-96d3-4919-b0b9-eedd1d666f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a4d6af-5be2-443b-bbd9-1c49981b9286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee01665-bd97-40ab-bd4e-487008e293d7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5655fe97-d9fb-42e7-99fb-5f23bcce1433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781ba975-3559-41be-9701-369bba27be99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d43c157-3a86-47dd-8b04-3d232433d654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd44804-ad0e-4bdf-9871-0b021f828c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9f267f-5e14-4a09-aa11-41d2293707f4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1055e8a-2a15-424f-b2fe-4dbc7a0ee191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35528f03-f895-4184-ba3b-33c58d6b0cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d58755-7c90-46a7-9054-ab1c5211cc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4c8b7f-c7fa-4e53-adc5-21615219d1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a027fa5d-2ff3-40be-83bb-3a55ba534f85",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31249af-6753-4161-9bf5-cad2ecb7cc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23af887-47ce-450f-8382-155ee2fc076d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b1c479-4eda-443a-86c0-fc74121987b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffe78f9-2ddc-499c-ae0a-6526f92fe0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0456f9b2-07ab-482f-8e53-d1fc6de33979",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c82f2-feb1-4737-83cf-9b32f852cd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5ab9b2-41fb-423e-8ede-12228e61a744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dbebbe-a560-41c1-9b01-4b89d6d4ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "383a3032-e319-4fd9-a1ac-78ae7cf8588e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cb04b3-5e18-4d49-9d9a-a4512d19d0f0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d8f77a-5af1-4aa8-9095-a8fecaa1a3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c645e1e-2282-4f0a-a61d-a9ca9a63f637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361262ff-c84e-4ce1-b985-f2b2723de2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1cecb3-8fdc-43b1-9f71-d840cf433d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8930c80-e26b-4652-b390-8af70bb6ff8c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a7644a-6b9c-4f93-a7b4-ec98c9e6d018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f05910-e26f-4af7-a55a-0cd1aae68894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244ac6b2-b1c5-4f1d-8c9d-798a51da7c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06fed493-83c3-40d2-b53a-4f1944884374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a64c85-33c1-4c05-ad3e-ffeff8fa432e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f09f4d-a3c7-4757-98f3-9993e8d17aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ff043e-8886-4518-8bdb-fd1296d769cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a18b02c-1080-4ed9-a918-3b15e0f10063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bec3d254-fbcd-46ad-bea0-55d5359fc316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e394a50-72c8-4e74-8b18-d4d9d886c155",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb022783-08af-4c6e-981d-ebf3fd998dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674343d8-c9ca-4a64-8220-d516501c9c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcececf-4785-4837-bfbf-5c5bbe7bf9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccfbecd0-718e-43aa-9eee-8d83274b0693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d986ef98-806b-45e6-a629-a57f93764e52",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e5a188-9f12-4f3e-849c-ca7b62c1e13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a87642a-4ffe-4e24-b5a7-0f6fcf05f213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374b96d9-3811-48ec-9d70-e21c3bd721b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ff3ed2-8d9e-4ca7-864e-83937e8ca9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321e3007-e5fe-418d-bf6f-f0d567464f0c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb93b1-f296-4046-ae26-bf67dcfd779d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2ff230-4fee-4474-812a-9d994ce328b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179720b9-3cb4-44f7-b519-d0895df0e4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93116315-923b-40ac-ac9e-fad2402fcfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9ad46d-ca21-4ba6-8f59-76460192d3de",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83925fd5-50af-4c49-b0a7-457197db7cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0aff157-2e3c-4028-9530-5fa06318f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b99b890-107d-430a-9e71-102bea187f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82cbee21-f58f-469d-8993-214ec2f67cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c4d742-fac8-4221-823d-5862870431b0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af5f258-eb37-43c5-860b-104731fe64f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2931b3f3-b439-4e9d-841f-0106da179b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8846e9c4-b1d4-40fa-b4f3-f096d57cbca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3e5a38-3b59-4099-a8f7-4247f60ce982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db176b24-482f-4a2c-86ae-0c369670bdab",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cc0c0e-8408-4628-b792-cb6b2979b35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e48e976-2800-4351-8c0f-dd1c498498ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269188ed-5059-43ea-acf7-8969df77a38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfffe3c-8724-4bc2-add2-fe44b9ac5dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2d840c-5cc7-4102-8b65-77baeb1603ac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54807011-0037-46f1-acbf-0895b22149f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb696eb-8034-4603-9d07-88f63c00843d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38911271-2bef-4311-9452-240cb0b1d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7ed465-ffde-40b0-89db-38db2a64468d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cf7d14-ba3b-4adc-bd27-618b7140ac19",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3593aed3-dd93-4346-adb1-228ad12e1ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d479c6-7ac7-436d-8782-3458d166a030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29f7c27-3b6b-4f59-befd-6116adffbb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0862e2ed-f2bf-4427-923c-5dcebe1cbf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba85376f-5633-4714-9eb1-ba5952697b72",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1632a48-9619-4e44-bbf0-5523d90a6632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c08765-8e8c-4c24-a3cc-6f69513e2ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e95a0a-0188-48b2-8d07-a6304048a47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0722ce1d-8882-4ca4-b54d-66b8a3eb7b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00cab40-4716-4853-8d22-471c4b8701c9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61595bdb-21d9-4d6a-8c63-dc82383ebfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805ab7de-a135-45bb-b69c-7ae81a1596cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8876b5c8-d1ab-410d-a422-176ff8d948e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82efd22f-c71c-4958-ab0a-4214ec15d144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90d7959-0ce4-4d03-ac36-bef1e5101e80",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003682c5-3c22-46fa-bb4b-a986a201cdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e250301-bfa1-48cc-947c-06de2e49dea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01509749-d3a8-48df-9c7f-b0fb04b5b729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5db8fc8a-f0a1-4355-af4d-5a6f9e8c4f89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90cace40-5084-44a4-acf2-494274d88509",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8811a91-9638-4fc4-9dd3-bfc50d77cfe4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cf50c5-afd7-49bb-9463-7cd882b6a3ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f401e907-6a21-47bd-8eed-abaf42ee5446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b1e3ba-11f0-46c6-8281-d7f3f23ebf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8c0bac4-ac68-49ad-b99c-60f27373c313"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "958fb0ba-878b-4551-9abf-e1a3c639ed4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00c700f6-15ed-48be-903b-361213ce0040"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c779d520-3e09-48bc-bf6d-104a55b185c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3105a375-0b0f-4a58-9143-a9298e9c0410"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f6b400b-073c-4725-b886-34c1600ee497",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "23cc73a8-d54d-4119-ada8-43409b7e4e6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "892a5d38-e21d-4547-a329-325c21e887fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbb37bfb-5cc2-44e6-83d7-858907dcfb89"
            }
          }
        ]
      },
      {
        "id": "079c24f3-c133-4675-9b71-5dfbfec9a8d4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9c3bcae3-8bdc-4ddc-bd9a-2a2ef0a7d8f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2310428c-8ce1-4626-b027-30980b78408c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d587e93c-1835-4476-a1e7-cc01d2099b38",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22120b2e-455a-4e66-94e8-7037e09314da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a7ea78-af40-4b59-a2fc-a4f6e59d9efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c494e8-c39b-4f0d-bac2-f4fd333425cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3352b788-eae4-4814-8027-b427c1835308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d92f29a-1805-4f48-a25d-ddfe6509f26f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bbe101-b062-49e1-8ded-a8142a072ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8350cdb-0846-4367-8d05-ba0c8197aa3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0feec309-265e-46e1-b5d0-78a3c66bef92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e86b229-3318-4254-95de-94a8e9781190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0146067c-0ace-475c-b64c-3903268c9750",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce314b3b-d2f1-4e58-8d83-fc54dd5c4b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f75bd2-48aa-47a0-a3d7-0161cef85768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a7e67e-bdae-4802-8b04-2a1f1f617d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecac0749-e1b9-4d50-ab57-110f43963ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e448aebf-13be-4eca-bfa8-fcd3e928ebb2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09e3212-98bf-48b4-bf07-971382d8af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3226ef3f-2cfb-45bc-9eb0-4659c38e132f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1d7d24-eae5-45cb-b6b1-b70e3999914f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91b96abf-6eb6-4488-86fd-a9cb23be09b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a357875-44c5-4992-b476-e4fdccf9cfed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d9ddd6-3d21-492c-b3d6-26362db57e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5c08f7-30b8-495b-8d8d-766a4a39b397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94c640c-2ab5-48ab-9909-78a8f62e2806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bdac892-d39a-4e42-95a6-2f70afa90cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ee96e2-917a-4e28-a584-39161629a41c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c494cf7e-31b8-4135-87c5-7d20a85d0d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2920403c-10e6-4313-a8e1-3dacb330a70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d0e996-00e6-4cd2-b934-88d50c0a2adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0225d3f-8a9e-4487-96d5-845cdf125a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72792787-9327-47fa-ac85-bdd190a1d59b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd24c64-9a2f-4f82-9f9d-0b3a7b100f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3002a093-b0f7-46b8-b41b-68199c905052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f00917c-cf0b-4077-8d40-96cefd0d9f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f844b9fd-c125-4f3f-a496-66bbd9e26590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbba225-5055-4323-9f68-0724ddf848b6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c91691-8934-4623-a2b8-626876034e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe1e347-95d2-41e5-b0d3-154daba2d4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cef791-0272-4483-8dbd-c3df40a8c870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9d69e6-969b-4bd4-ad96-fd41799273ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca14cbe9-707e-40dc-bcdb-1f61fdfa4736",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c64724-dec3-473f-b239-7a75a87ed573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e5c151-fa91-4189-886d-4bfbdf14f6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145b4f8b-b5f1-42d7-a094-027eac527f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f0a314-f6d7-4595-8aca-022798281518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875886ca-e209-435f-b999-d7d0ff9c003c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edde79a-c5ad-49d5-bedd-e324c566fcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965422ac-bfe9-4bc3-8ab1-7cad75f3a0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762418ea-d125-498f-8f41-b5a9f67f92e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4500c5-4c3c-4ead-bb83-40d164fa5543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2deb4899-ec13-4f28-bd98-9d78e9f04bfb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e338f150-a2a7-44b3-b599-73a8dc21e015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291795d5-2be2-4096-afc5-a0c25ce43aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1da6514-e9b7-4c4b-970b-764990687225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "860b6764-b586-4504-9b2e-e80f64e397bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1853da9-0c67-4d7f-9b4d-7d663099b49c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3f7097-be16-4188-bb51-01bd04ee2540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62354c3c-57d4-4b7a-b3dc-4fb98f369819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70758531-3069-4b0a-8ce7-7a95b6e68523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c695777b-42f0-4ec8-9464-04ca37b46202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a22ae1-5c14-4590-90ca-85b301fa3d1a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953db50e-cd59-4cd9-8de7-a24de66997d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8fa59-b71d-4763-97fb-60ee7e283cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4322f2e0-6781-4fd8-89e8-dda60821f3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21622869-70bd-422a-af61-682709d4f184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4ddf83-83f2-41cf-ae56-b002822cb9ee",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f122351-aace-4a45-8ad2-b7f529dbd91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0a06ae-93f3-4589-bf50-a8504e8a8e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90654378-b455-4045-912f-47593baed416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1182dd-55ac-46b6-9b54-ece0c08e7271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da274b51-16d7-4050-a5fc-62174925b1d6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d3c7d0-1555-4522-82f5-06aa25063fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f650d109-0699-40c8-86a1-de8f7d839e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e495fc-1fec-49c5-a1a5-3501b7ed626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "78be1e39-1c29-4421-9033-10a8eb5f0f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135d39b2-a3b0-4e98-a773-65292d5e3197",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07407612-e68d-48a8-9242-7603d1d9c74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bce773-ba7a-42ad-9fe4-ce938f529139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf13fa46-15e7-42e7-b80e-ab2e812a1ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1b8e1e-068a-4e79-81b7-341c4eabb514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc16842-6894-45fd-986d-a66705a66737",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72619301-4a34-44f4-925c-4d2241f00242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f93c17f-cd92-454a-b914-5dc2764307f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf57df3-d652-4bd2-9012-c585353923e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae31072-ca72-4a33-9831-e182fcb60946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9989ed78-30c7-4444-9d9f-36965abcb33b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a967f795-ef6b-47b9-a647-9dd0f35b647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5171961b-8a53-4f5d-a3bc-f3a46f1b69b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efd32f6-cea1-475c-9b43-0aa100dd6b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "baf01383-e7b5-4abf-84d1-734435590039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110c7839-92cc-44bb-97e9-421d2544cd09",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f68497f-755c-427e-9262-c7200598bec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73facd8d-6302-4696-8f44-fe4b31bd6352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a10ac06-f2c0-49a2-a404-dae6b1f67c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd25de0-2e46-4ed2-a96d-adad13eb6e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8add9287-2957-4aa5-a1e3-64b86a4a3b36",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d56f228-668b-45ea-9dfe-7790bc5547bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6763f6e0-1a00-4344-842d-545aa911f48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007b71b1-2ec1-4732-b9d3-7dcbb73a2cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "336184ed-466e-4d89-94ca-b6494b721912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231f488e-2f6d-4842-ae93-6f81d1a66a99",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6050f91b-0688-4ec4-8f53-d6a9b74b8e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7f8dc2-6448-4f41-ba42-3a3c88a1f9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325a6eec-5af6-4160-97a0-9c371e30fee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eea59e1-5908-4c84-8aa7-7962446d52e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313f87de-1145-4165-8639-a1e1dcba6f4f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fac928-596c-426f-a061-6777e8a4a0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ab2796-0c4d-4742-a382-5946b45e496a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d27077-52c9-4b8e-a774-8c4dba8b37dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3165ddc-4691-48aa-887c-09a254189f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056e20c4-de47-48d8-9214-023f6321ca48",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f84a09-461d-473f-958a-71113225bde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e418be-7227-40d1-94d8-d8628d802238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f608bdf7-fae5-4b0f-9274-0a2a4d5a8528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea01708-4654-49ed-91be-a171eb14d688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4186b971-ca6d-4b91-a208-236b7b6c6efc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d91849f-32e8-4765-8d4f-3eb444af6a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef855f6-7bf7-4fea-b3c9-dbe69606bb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34add839-6c31-436f-a337-5934dccad5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ded578ff-6f50-4e4f-8a1d-b9484a0f8173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52f9c26-3399-488a-b69e-70c249b09979",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6d3f33-6df5-4ac6-abe8-574422abe520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5635280-d34d-4ccc-9312-2651594e2269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd36dc5-7b1e-453e-b2af-2f4f13d88a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b521b1d3-a545-4671-a252-2fefacd4cf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f510d4d4-19af-42e6-88e0-6e297fc5475e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ea6b6a-4602-475f-bdfe-b4cec091ba3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719b544e-f43d-4932-b03b-59a527b187c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76788e9-b4c6-4b0b-928d-acc8a7916001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62edabd6-2add-4a61-896f-6d6658032fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a431091-8e39-4af7-bd47-0fc5deea3f73",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76caff9a-d38e-4fad-b33f-714fcece0f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308011d7-0670-49b7-ac00-9cb4650daded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971b8b37-4552-4897-a40f-8b80a6ea68ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50372424-a5f8-48f0-9368-c2ac57f95a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc74669-f849-4d3e-9725-81c1a18c1333",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2cff32-8b0c-46e7-9a8b-d2efa32727b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a09f4ec-e120-4b00-bc1a-7f2c9d527d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de04a17-8e22-423b-9d7d-f6f62b60f294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88ccc517-3f55-4c5b-a6e5-15986a04a420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b792e26-89b5-4c0a-8143-c00bf37cabbe",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71976d2a-7198-4bd7-91ef-8d3b3e6bfaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721e9128-ee3e-4c8e-bafd-78b7e7b05d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e8e070-7925-4cb5-a741-65e2cd0dfc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb6ad63-86c4-4c59-84e7-8427fa874c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ff5233-49b4-4c34-9021-ac8318774d9f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771de8d1-daca-4550-a2b1-065f5e2501b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1250079f-d092-4b9c-97b5-56002f5089b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e9627c-1440-4b2b-8eef-e3e11de5f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a6ff2a-3ac9-44bf-9993-1cdd94b9f6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db7ca7b-375a-417d-89fb-3b723b065321",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59b8094-ced3-4a29-999f-07cf75df4cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a98c203-98d4-4d32-a5ce-ff777b70f918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8d4d97-547d-4103-ac46-3c040b5bea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9fbd78-1456-421c-a4a1-44c852647712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d08449-0d9c-4ef5-b8d6-89532ed32072",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaae185-eabc-409d-a748-63ed529c42b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764691c0-3e42-4c80-b12c-29e87d7c9b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c60d3b-79cd-40d5-93dd-764a7861c57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "328f3e09-cbc6-4d2c-a9a9-a70198fb9e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2190609d-96ed-4f4e-80ed-eb4fe167194d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a027f2-286d-48dd-a7a5-a40b172971fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78ee64d-cd92-4a7e-be43-af252e1d215a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de49f85b-181b-483e-bc41-c42345616e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab00441-baa9-46a8-b516-29af50f01b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77ac100-f6d2-4715-979c-534153e06c18",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307723bf-275c-4878-8977-f902cbd1ed4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2c6470-b379-4ed0-bb39-8b836a87e8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f544da5-4fcf-42fa-88b2-9b88b74dcd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd59ca6-58e5-4db8-9d63-b01db72103c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c165e6a-5d9c-4282-8e62-3c8d3560de66",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c43f262-cf8b-40fe-9829-f7af7f92d449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bfc64a-d9b4-4db3-a6ae-aff74668e93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e4043d-ef4f-41aa-802b-f7334ae96bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f55fb4f-9143-4a51-8843-a569ae307325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381428d1-9805-4ca2-9b39-8ce3b3efb3a0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b70fd2-4bfd-4ce1-8ca6-946844b55f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee46a12-4d9f-4253-b239-f19c168d2fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eee5ff-4fb9-4669-abf5-c19b105861d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6895d0-d81c-4409-a722-24d77d33fbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d66755a-8ac7-424a-ba00-5801b051d294",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aa61b1-2117-4516-9b8b-a8b3fe7510ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b16c3a2-b6e9-48de-904d-da120a206941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1a3965-9277-4ef0-99af-90a9ff3d942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73185f46-21e5-4468-b2c6-3ca27374c72a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6cad1e76-d2b0-4a16-a3f7-27bdc2e5683c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "307e0db8-2721-4f46-8bf6-ad89607e8584",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec02122-b00b-4efe-be40-f23e74dfd38a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d985cc79-505d-42e2-807c-4bac431edeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2faaf2c7-23cb-40f6-b72f-a9de2ae8e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc4d721d-4451-410c-9595-40ec67f8be68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06ed478e-0715-4837-9bdd-2277edc217d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3944a7dd-0803-4911-a06e-f56107582c27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04be6213-f097-4041-8386-caf9c38146e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b237c759-56e3-4e2a-a127-6200b0083225"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2094bbf7-1da6-46bc-8d83-8d9db0dc27d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9766a363-44dd-46c6-8ea6-7555e982be7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c682fee8-d871-4a65-8883-93fa40ac5511",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dddbd36e-6a58-4ff9-bd83-10a211f900ba"
            }
          }
        ]
      },
      {
        "id": "78b4c18d-9b3f-46e9-9233-5ca7d500bbf5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9b6f2743-75ce-4417-9806-8db48c9a369d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "524b51e8-9023-403a-ad4d-2a376c9ba637",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35887206-8fb6-46de-bd1a-525ee84916bc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa042a1c-02c6-4f71-a206-710559ecb976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1a2bed-408a-4c60-b294-337b8a26b0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba40f204-5cfc-433b-87e5-493f4a393bff",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2fe193-b8e7-4732-abd7-75452abb5b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fcef63-b0a1-417e-8826-e776f034f553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c12195c-0b2a-42ab-8347-a294e60a195b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260f6e1b-fab2-4f8d-9012-83ce08e0640d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b2c12d-e653-4e61-899c-393f9e1d158a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e4326c-179f-4fd1-a081-545550445f7b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedeae84-0a12-482c-bf76-d3b7b608704c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eba04a3-a67f-400b-9bc0-92ae3ebf8452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe739ef8-f71f-47af-95b9-2d9c42a9561b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7153f84-f86e-4970-9c29-f533a20e1fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4508a6c1-bbc6-4795-9a71-daad5de74337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b504034-243d-4c80-b98e-f9a5d0576517",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e783d99a-b444-4020-811e-2b52b4849cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47b6f51-859a-4e6e-81d8-ca35fa7fff46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9847610e-efb2-4aaa-8a9b-3cd07719e798",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b1fc14-1a77-4583-a6f9-cb0e40f4e6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b470861e-7573-4ff0-8da9-7c21f3756e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87533653-f554-45fc-a305-5cec1f696962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1c7bd9-ab50-41dd-87ea-2df44993cf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedb92e5-602f-4b97-ab8e-fa3b5042b5c7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a65d5f7-4553-43f1-9831-e5f11d58d137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e77ac6-9b0b-439c-9e58-1d267757a2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b2f4d8-564e-4e91-863f-e64115d9bc4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3fca81-fe4e-4d92-88cf-3e397781e005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4f4759-98ec-4f89-b835-621b7a0dc780",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07963f56-dab2-4cb0-b416-91609d854e4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a38ea5cf-8387-47e1-ad0a-9250b8c59b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a50a4c2-3e91-459f-9ae8-973f4f4d2f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8dda4f-cf9c-44f9-a480-a94cbfbb2749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dac2fbd-e675-4471-b334-2717411b5ccf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1657070f-8be5-4b52-8204-d302ff4286ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39aeab96-89e6-447a-afd1-680f4a3d0087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3417d48b-bc30-44e8-9b3a-4fc07d81a9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a32c3fd-8052-403a-8a89-a16405b90543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8173225-86df-46d2-ae0e-bc6bdc091446",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609cc33f-b005-44cb-bd76-d4e7ee61aad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e328e412-bb0b-4293-ad61-0c31bb5971e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5674d8-78d1-406f-be1a-da36d4d8da72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdcf337-5bee-4048-a265-ecdb846fd743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db678d2-8d6b-4c24-bf79-9bedf4972b07",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7420cc-d4ff-4e1e-ad0d-304610e784f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb765bdf-5aa3-436c-bf31-8fae6b9294be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75c9957-63a8-4f42-b383-1d407ba83165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a908cac4-833d-451e-8566-f1b2bbe83794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c76defe-d3c4-43a0-a728-5c158fa2ece8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce831f32-fd83-49d5-b27d-ae90071e0f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff576057-d98a-480f-bd2b-d4960efc7aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d2b289-c5f0-4d83-b231-3caf996cf75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20840af7-719b-4e6a-9ea1-5a89a4b90b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd7cbb4-66de-4446-9987-45143cb69f4b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030c3b58-4cb3-4334-a8e9-dfcf89d27e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d115dd-b3c9-4916-8a6c-cbdfd8539fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b5f2c-0f92-4eb7-8d2a-48b61bdbacb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80da2303-2c33-4bf9-9966-81fa046f9126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba77cc77-7c43-462d-92a2-6e58cc7334f2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519711af-939e-474b-8324-a4b5d54446d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cac6c1-24a4-470f-9406-d4d8c90c1b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc0bdf5-87a0-44a9-898f-ac9bc028109a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5e6781-5694-4930-9262-6a31c1d4c188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f8de76-a280-4600-b9a4-8d590ff6e3fc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2cae5f-8f62-4700-9784-a19ea9d77f02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd664e2f-42bb-4022-8450-1f70984e7122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cece58c0-9d72-4a37-8ada-3e1e00abb777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9857fa-2d82-441c-9ad5-3310fc008811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0d4875-c6f6-42c8-9598-20b7300b8271",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8432b247-20fc-4e15-82e9-179c43de6ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693de82f-eb72-4524-a5b7-444b11942e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d0c3a9-b1dd-48e1-b66c-7ed05e438101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3411dde4-2518-42d4-9864-897e2bbf6692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe31b9a-2773-4d5a-b2c7-1e3ebb195d74",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1ff1f2-9379-437a-892b-ac5fa46a319f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4fd84b-09ea-44a8-93ad-d752a27c2efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9841a894-f6e5-4eb7-878f-b19c3c75e4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7b5ad0-f9ba-4ca4-932b-c2b0ea32750a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80d80c0-9d54-4be3-8579-723d444698b4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04a41dc-4053-49e7-9b30-9c8c41e838dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9686918-cd14-4320-9054-49118fc315c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a81190e-cc2b-4ae6-8f89-c49d681583fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa04015-4fc6-491f-bfc6-38cab2ba33aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fe3c0d-6809-4dd1-a9d0-5468841361a5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b56bf94-4905-4411-9c9a-251aa8f68149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2b69b3-39a4-4775-a526-946b865e450c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecc3073-9d97-4c11-9953-da27b3fc38e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324b56ec-5983-40a1-8d57-bfeb3cef91f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6498e621-12d6-4f86-a5ae-0a88bef5ec80",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24462feb-268e-4b86-9df3-29755a29856d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633737c5-7e4b-4f20-9a65-a4eeb56eb3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a99a63f-0b51-40fa-92d0-e0da7e3b025e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c0eca6-5c8e-4605-bccb-2e1decb1310d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f6d376-e0a9-4d65-abd8-79e410c6a209",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36fe9e9-8e1b-4cb2-9e30-4e3c8a6511df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebc5dbb-c2fe-48ce-96f5-6f3b3f622cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a18ab51-f4e8-4c1a-9d03-0793611d4e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b94d80-c2f2-46a6-9b1d-d197995f585f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a448121e-a313-495f-991c-661cbedbeca3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568ca8f7-99bf-44a4-a069-9a64f41657d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a68ddae-7927-40c3-84cb-d65eb1682b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a8ca85-0cc3-43a0-ab9e-38d9e92a7192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddba34b-85fd-48d7-9380-20880b2a6c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0c29e8-19f6-4005-b493-1896bc7e2b7a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be332f40-4e5b-4f93-8fb0-b1d31598d577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf7f17a-1889-481a-bc0c-623df9028987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f48793-0f09-43a3-9786-490592fd544b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1504eb-5266-46df-8e6a-eef77e448f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53337780-48d6-4206-9707-365dc1197756",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce8da9f-1cf0-427f-bd44-c2406459761f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e97df3b5-2868-40b9-b7eb-12edc3b0063e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687c71e4-beb3-406d-9bdb-5842910bd514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296901a6-3059-430d-b86f-90b8086a37b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c395ca-a3ff-4340-8a38-adc5d85eec3b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aac64f-f973-407a-a75d-eb92d4cc08f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dca6122-465a-483d-b7b7-c4c86db178b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05b5d77-9a92-4e1e-8358-dfb9a95b3000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd90498e-98ff-4f8f-aead-16e48cff8d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4825d3-f65c-4757-8b85-7040c84fc5c6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5352172-0ac5-493d-b2c0-d52577ab3923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07aca318-ad70-42e9-9147-5ebd10e799e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a753539-8f8a-436c-9c38-6b7e26e0547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3266d028-d2ad-46a5-85c7-70407b0207e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90437db4-f160-44e1-a9f0-971bcbaf2c07",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264bc364-8d24-466e-a232-d094ed12a2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69435ba8-0928-4942-b7fa-3a0e62317b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27222c0-3644-4520-887e-e3d0ce29e690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163a2837-6ebc-4c8f-8c78-468c213cd4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c289a5d-9f23-4b94-84e6-953232b48166",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a974b3-357f-4103-a0e7-4166fbca85b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03d47f5b-722c-4983-a481-2fe1504362a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef98b28-977d-4e6f-ab9e-a16a6b0512f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bef0bc-2493-4d13-8bbc-445dd7f838dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae4c537-21a0-47d9-9dee-376487da8f79",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e82054-b541-4447-953b-273e0d440bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be779d01-174f-44e7-9196-83cc1177058b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa389ad7-d8c2-4135-a02a-d32dc22a1690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8c4344-8240-440a-b9f1-fdc0d9e08c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6478dbd8-2cd4-4e00-a9d0-fa104edc2d12",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f5a797-91c7-4ef2-88e0-36b5ac0abcd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "865e12fb-ba95-407c-963b-bb9198ee3372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df101ddb-7087-4bd7-9cc6-9811227b90a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14615da5-cd25-48ac-84f9-d9709c6e7784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baed14dc-8d8e-483b-b0e0-7b167b1b6e26",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594fb8ed-6337-4346-9e47-ea2923ff001c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5656c4-fdbd-43f1-8893-f83af7adb130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf7a3c1-4c6d-40f7-8230-4fe297d78482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c71cde-188a-44b3-889d-2f103294c108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14e4dc1-f047-47db-9a92-ef283443f0f7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cabb66-c0a7-4e29-bd2a-559091e6db85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b45227b8-029d-4520-96bf-8fde6fce6fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf4a102-c2a4-48b4-8151-ba0431671212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eecfb3-4db5-40f3-86a2-a69eb7d68819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec207cf-7e60-4dc1-812d-70bed0d6b32b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad224b6e-5586-4305-9ced-4b9ec89f45dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad9baa5-c3f8-475e-a150-fc6cb758f319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62efafdf-a59b-452a-ba5b-82ca2a36eac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56aefc1d-8758-4dd7-ad61-98c87d5a88a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465dd597-6bf5-482c-a027-49379e8a439c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9967b85-d2e9-4d5e-bce0-6a080c5a11c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5e99fd-8d99-4cef-8ca8-592d64a359fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746b44b1-7900-4e71-a1ff-ab832bae5515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902c4eab-6200-48c2-81c6-bc0bbd7dc7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09dc6a9-9a41-4509-ae04-71190f0dcd81",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ded9775-0212-45ee-bec9-be8a69316fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d332b4a-ab3d-4b26-bce8-b1a63a4402f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e32b96-8ace-45bb-a9d2-7db367ac8258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7300a85-5d7f-4399-893d-4178d2268446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d9ddd1-340e-46d8-a2b5-d08fea3780bd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f025fe7-7308-48a4-83bb-87d28ec10855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fbc1ff-e921-4848-b089-14b245709fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6ef03c-c376-4c6a-a533-0a765f57370a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316da2d7-cf4f-402c-8f4a-86e124667487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c73ea4-17d2-43e5-ba8a-72e32ec23ae3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44770c17-162d-451a-9445-4213929eba11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d81bd2-cff2-4bc9-aa8b-d16f32252d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e2f770-b548-407b-8217-f865866d77ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0653e7-3252-4591-8f4e-41235fecfab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341a9e71-e0b6-406b-8a52-ac93f7574e18",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea30268-2d8e-4335-8d16-0b5059e04a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4a8800-1bbb-47c7-ab29-0bf5be0204fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8472249c-d079-4452-b7af-3d5227045749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f998a82-c954-42dc-859e-05c03b1b4281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cad072-a381-44f8-8ff1-71ccc7dd2c35",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1313f5-4efa-4cc7-84c6-553836629056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ab3dd6-063d-4197-85b7-dfc7db18f719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a83fb4-aa78-497a-8bed-b50446de9264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3537516-69cf-4ad6-9987-c4e205a1ee61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6223cad-3e89-40b2-81c8-d601023c0f3a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59482553-054a-4c2f-a090-f2d714b63ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167d4cd3-e5ee-43d7-bac2-eea279b34531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd727ff-d9f1-4921-bfe1-0a1cb3f59d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a6cd77-03f8-45d0-a8d3-c295f6683a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96135e9a-7b3d-4f1c-95cc-a7882bedaa27",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3f9883-e3cc-4ad6-a008-d4af2deab463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1eb80b-295a-413a-8c69-72589c85e1d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067afd82-9f88-4014-803e-8138252173a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14336891-6a7a-4e13-9d2c-fc0dcd3aec59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea49e84b-34f1-431e-a697-05a218b4a303",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f20516-79f9-4ec6-a2d3-a9fdbddfaa0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21800712-7c59-451b-a983-45ae1e87fff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdca609-a187-4f88-af28-a4a70a417010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50a6f3b-33a0-40b4-84ca-37df20ce13ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54e99e0-68a1-47c3-8554-728e5c162429",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ab28db-39b9-4044-bc94-879e75c958d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186abece-1f1b-4165-adfe-2083bc31306d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f26e2a5-d8d7-41af-9853-015622aebc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b02f604-5279-468a-b951-6aba4ac2905e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd30b8-14c8-45cd-9bc7-2e4ed9e933d4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83383d21-d536-43cd-88f5-61508eed209b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1aa354b-707c-4e55-b109-310f07f0707d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba2687a-7933-4181-bd42-3aa8d307d7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fb1853-a367-4aa9-9149-284578c50078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474042d9-0ffb-4e8d-b657-aae30c5689fd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8c9e16-8112-4c3f-9e53-89fff816613c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be243764-6f33-47eb-ba48-3fe8b53a9c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219cfebf-ef04-4c10-9818-3bfe10ec1a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689bab9f-0c30-4b87-b3aa-1a52a08ed256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f5105e-f0a7-47cb-a6b4-584f80be2edc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1655310e-accd-47bf-b463-8b79c2b17ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3833fa35-e594-438c-ac38-683504acbb14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f084404f-6234-4d88-b224-59194562dee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc16815a-3e82-4878-b2e7-48da2b393916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3a6187-56f7-4377-bc7e-364afef7bd18",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b209f0-7d3c-41f8-9f48-72d98415f6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d491c43-1998-458d-b9e2-f5c7f0e3b64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b18a5a7-6e72-4acd-8ade-a84813157e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549e00dd-2801-4957-a69d-7d31d5ffc0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca757d6-fcd5-48b7-bd6b-ddd431f91292",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbac4944-6fce-4a7d-bbe3-6a4c90d21df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1572fa88-10c3-4d3a-843e-20d4189f0499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7456631-8c75-4fa4-bb65-28883a89a4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e354b0-2b65-4ea9-99a7-d8cb34f08e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f35eaf-1518-49c1-b61b-df34b24f547d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12df2e7f-d967-4e3f-adbc-df47ae21e9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77088601-e90e-4778-bb57-5e693f206c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce3ee8b-797e-4308-aecc-4603096e5b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c1051d-193e-41db-92aa-6a8deb84b8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889dca45-1a03-4912-8cdd-d9c5da156d7f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0f58cd-f777-4df2-bb0b-87588f45812d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e64c706-0986-4c3b-a9f5-738dfcb619cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e42bbb-009e-4896-b042-1206e00e7a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8055d084-e0de-4f09-9742-3e20884800d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9c962c-f882-4343-85fc-0245bffcaaf3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5f29d3-2063-4d8a-9746-115a1c2f71b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd00c4c-1953-49c4-978b-4a87974a528f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee9a718-8fa2-458a-b4a1-3cba5ed3f0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d04628-7a79-42d4-9353-d24737b018a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad11adb-fa13-46e1-b79d-96788213a6d0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e940cee-f025-4df0-84af-cb63dc6d19c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9bcb25-49ec-4223-b1b4-c7a482bbf996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eebfe5-a8ca-460e-8e1e-d6d5a213c43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83c6c68-878b-43b7-a39a-47f350ba2c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba7aa0c-2f43-4364-9fc3-c8de9e3d10e1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a071e098-0c33-4d64-bee8-308078f336fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe23463-bf3a-430e-b844-89d4b6518cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac871dc9-188b-4ff5-85e5-f3239f3f6fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bd4b65-9451-432e-88f4-b16ca976c075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5259a619-6939-4bd6-a07f-05ec4a618941",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0f0e97-b2cd-4629-9f27-0eb02e5076e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15062be3-ace1-49bd-9d1b-f532352b90ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414fd9be-df17-4f59-b555-c23a59ca1446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a2c18c-9a22-4245-88a9-e905db8b336a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c47d08-2871-403f-898a-3ee09d95a38f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922decbd-d301-4285-ac3c-11b5e398dcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1d9ee2-2692-4deb-a091-fb5d6b989d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0427adb9-411d-4ff1-ab30-52c9ec733e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672fae96-b651-4642-a2c1-3d01e57526b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44cad01-2fd3-440e-9ce9-3366b5cc7745",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eebadca-4b62-4f72-b69f-aaf877b5f48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9716df44-5c7f-4676-aae3-44c1b0875643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fbadcc-ab98-4eb9-a215-d15a9a1a9901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7156a82d-b32c-4708-bc6b-57e9264012a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634c21c8-09df-4d3d-ae79-4a2f941bedfe",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85560574-6ef1-4ae7-b540-c4e4c68291cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800a4d26-d6a3-48bf-bb07-c9a4bd806c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65054f18-9dc7-4010-ae2d-9ec702fa94d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66835689-68d1-4f33-909a-bfdac8d8f985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bb7097-3094-4702-94cd-0864e5f18d0a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a191a8cb-7ecd-49cc-9938-ccb65433a563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae036756-aa25-45d0-8ec8-5a2805d8761d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0750a3-dc4f-428e-9f2a-c506a09db07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe27566-eefd-4d5d-a281-016c84cab024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34716024-f385-4cb0-b366-101e61d1faf0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccba096f-6652-4d3a-baed-2d4906678fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e63f46-4667-4f95-83e6-f7ae70a77979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33b9754-d17c-4485-a8bc-f11614092e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e5dced-be9b-4e94-a8a3-d87abd48632b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42df7a91-e681-4e51-9dd5-7233e4691da8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8f779a-f94b-43cc-84e7-1b0164141e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72611113-7887-4e31-b660-d58594a89eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15b4163-f37a-4a50-b4cf-f68566c3ba9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d831f8b-3677-480f-af70-a2dc1838f402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ab31a9-b371-4834-9ddd-15f370e0f405",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d293129-0473-45df-98ae-02d19e27c113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8409916d-16ce-447c-ae0a-a315b30cb7a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd50dda4-4f5f-4a6a-9ff3-7fc7d8d7b0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4774e6-1b97-4d42-9d96-59dff08c91ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8ee491-9349-47f9-8c39-2ab739876e0b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454f208b-e7e6-498e-94b6-ffae77456c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab595b2d-a9e0-400b-8ea1-6cc4528c762f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7583b460-a6de-4567-8186-9a6b1b9b8d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30d4761-d8ef-46bc-a27c-fccc16b931be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300ec7f8-3c2e-4524-a588-75cbbe9b87ab",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e93a41-93e4-4135-af79-4f63bb198ea4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e382a5f-c58f-471e-8c6d-d5005d525755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a82d212-d3e7-43b7-bb47-d7ab917a5a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8acf1e-aee1-4a68-bfe5-5112675cf854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33891ab6-fab1-49ff-a3f7-200222a01947",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18e05d8-20b1-4d96-81b1-749fb7388a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0b1f3c-76be-4bab-8b2a-335bc6c002ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073bb518-81ca-4585-830c-afefaf9fe42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b4859d-f58d-4a50-8e83-2e7298e9a9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41eae3e-034a-43d1-b3b9-6787fc758f22",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad784c6-4abb-4b67-9b75-267ac0fab7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de908b4-d1b7-4d9f-9f16-e837680904cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb70970-21f8-4041-ba62-7ea5715ff0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255c67d1-dba3-4864-be2a-cbe2675aaf91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692d7e1d-d686-4f08-9cc5-ac3cc1487ccc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce71caac-5d0e-4bdf-8560-b8ab1c61a9d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c36675-9756-465f-adbc-2b9bbed74b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78f7028-dfef-462d-bfa9-6c8558cd923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c611f4-c2f0-47a1-9e52-b3e74281e5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e8f3ac-3996-4e81-b0f5-b823a770d35f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b47d84-f79f-4a46-99f5-9edfec7692d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fd2e667-c054-4c11-94e3-fd5c3bc90877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4e27e7-e3ba-4dc9-b9ab-8f1502f6623b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d26eaa8-95ae-4f96-996a-98e6ce48241c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785e1cd9-d8e2-4b30-9a78-b55d89452090",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279ecb6e-8159-469b-b430-55922c45b649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a70e74f9-8dd7-45b1-bc4c-24eb0acc39d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47153cd2-8763-47ff-a3dd-b2e3426f79ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a96997f-2448-4bfd-b56b-a1fe55148931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45404a36-976e-4c81-b56e-df61a20bf199",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8e96ab-0195-4fc7-9f02-0f94bbc5ca8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dab57ba-a857-4399-bf8f-bd5e17b4d0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b700bd4-34d0-4243-ad65-7f1b7cee3503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34ced3e-eeaf-4705-8b83-9b6fa0182807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92220ec4-53b8-4b7e-863f-b73f331d9b3b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9e484c-d1d4-4618-b769-a5d22ab54296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a772ae5-c6cb-429e-86ac-d04b4aa261ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8641cbcf-cb1c-412a-8eb0-8157a84b45a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fc269e-b0b5-4446-9abc-97b7c84efef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce86dacc-e301-48eb-ad86-f58affb822c1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e206a89-5faf-4cab-9ef0-5823a961cae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1123dd-a408-45af-ba90-cc7f9c0199d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af9fd77-bc84-435f-9aa5-91e45342fa92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11593df9-168a-44a2-a446-35dee667facc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393599c4-f8bb-4ec2-92c5-ba93d6432900",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aace8a8f-2c7c-4549-9f54-2f45a844fc8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd7dca4-b56d-4bcc-a2e0-ae36173b56f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d599a38a-b053-43f5-b063-28a6174d74a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3629ee61-2b51-4935-a9a7-bcab2d0b6f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5b43cc-11d9-44aa-a199-f5ab11368674",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942139ce-91c5-4a94-a780-79bafad5ad33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101b3f5d-cd50-4d46-b326-d124273babd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ad3743-f38a-4dfe-87ef-47f91093c9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5a871d-847e-4d98-9d0c-5bbdf59fd3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ce32c4-7ead-44a4-ac00-af6f875ca17c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3048139a-8bb6-4263-b2d0-1474dcc5b8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847fe23b-e580-4636-ac16-41876a23c557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4663ca4-fbec-4d4e-bc4c-44122173e375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1959d91-1940-48d8-a569-b8242a32ae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b41684-1a22-4a78-913e-3373daf22226",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeeafb9-3d08-42de-b52c-ba68012c4f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd0c7f4-5a1a-429c-8b10-bb6c742b5444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2a2c02-2a4f-4d86-8533-a986e31803da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2bc642-f640-459d-a8b5-06cd49186c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63f35ec-1f0f-4389-af88-689ca6ebe4bd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4356253-caf8-41c9-8790-d81abac32cd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae8a45c9-4089-4f4b-b748-50727d488c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfdce2d-24e0-4872-80bf-65e96adb8b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d734d4-dd12-4f92-8a6e-8b241bacd2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f87320-569f-41a9-8c1f-3f8fc1b4bb3a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f98fee6-ac04-4073-9a52-bc4edf5acb11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf2ec30-2635-41f7-b1cf-2ae3da63933d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272a34e4-641f-4673-991b-3c5d585a5c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57346216-884d-4d28-a532-907be985b6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d552c1-04f4-439e-9d72-56bfbda0e274",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2677a15-1a35-40ce-b409-ed39f0cb7ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2328f9ff-4d27-4cf3-b11b-62f8cbd5877a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fda3b6-6013-4bfd-8560-48102b062b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14a85dd-c5b6-4531-8f8a-4e071d039b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c7335b-a0a3-4b2a-ac04-4970f744bd2a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf384d2-328b-49ee-929d-36d2d0d26eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "585a80ca-250a-48e6-9379-6f6119f22e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650981e9-11d3-40ca-98a5-4fe89a71659a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c76ff39-a9d5-4266-bd62-4fc6b4cbb18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63381bae-30f2-4da6-8500-d8a0c08ac818",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64e584a-1f47-4cdd-93c3-05bd2a873603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcbbf3f0-92b9-42c3-8df3-c81d167c68b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d6bb61-4905-4f47-b25b-133aaa51679d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e50836a-8403-446d-b2d7-c4cfbc22c69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac48395b-97c3-40d7-ab15-16a6205a5490",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0168d27a-e198-4ddc-acfb-6a62ac65393e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4194d914-7b9d-4667-ba73-f1ca5ecccc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4f79c9-3b0a-4311-823a-a9a2184b18f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca6319d-bf69-4a09-9d67-ed4a5ea98366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4efe04-18d2-4eea-9ee2-102401f5b270",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e872b59-9442-4720-8f42-b8291bbf26d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a80b4e-22d6-414d-b51f-467c54e7b4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef7737-854f-4f1d-9ec3-94a7269f3862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e89abd-a8d5-4abf-b452-d42164452b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08b8f80-c78e-4636-875a-b5cb73235f88",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b586d81-34a0-4301-be28-75db40c87fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e033a127-0639-46e8-9a8e-4bd0e42cabc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd108936-19f8-48a5-a02c-765603dedf49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fbd183-d30a-4163-88a7-6441d3c6152c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1569aa86-3393-47b7-ba27-8024799a32b5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4ebcb2-2d49-4ad2-a3f2-7a758dabc9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e5cc43-c40f-4c73-84cb-70cb86c38a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251144b0-4bc3-488d-9969-7defcc550bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2599dfe-2e77-40ef-880e-717c00e1a928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a41dbf0-f37f-465d-8d30-07dda49a099a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149b1ee2-b854-4041-9204-7057c09b7fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df69da8-8158-453f-91cb-71b4b4dcb0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45783495-56cc-4cc5-9406-da214a8c6c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bb18b7-9562-463a-9db3-244fc426ab74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3ba537-93ae-47de-997e-77af784c44e8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ed3b63-bf2d-4034-8c9c-7b2364048329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a208bfbd-1d3c-4603-a595-10941f81b452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ea62ce-e5ba-4108-8413-4e00f73bf8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74bb0f3-96e6-4ec3-8404-24210c5fc82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6992ae00-c9f1-4537-abf0-024f2231b3d8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0794d94-c042-4a12-b6c5-8b30905ec81f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb90d23-50d5-488e-9a70-36cfdd76d9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006cc437-d989-45cd-b4d7-435933dfe5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120ab895-9f61-4429-96e6-a326ee3617a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c332f7af-3075-4437-b56f-86a041acb34e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfef004-de51-421c-ab0f-9e4219d80381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efd8e874-28e4-4e59-af69-a1767f425bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dd77f8-72e9-49c4-a82e-462f9be10cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b74ef2-888d-4b52-9fcf-5357b6bcf94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c271fca-1cd9-4fad-8cb1-33aafc779c55",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7095f1b3-8000-45bd-a4d6-bd0fd45e15d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f2b9cc-3821-43c6-ad08-f5aff51f2bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56b476a-67f8-48a9-8eee-bc0c8e95276e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fb82dd-8c9f-42fd-8560-f691ad8fc6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e0d061-0daf-4be6-8d83-c3b62287ad86",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6049477f-8217-447d-ada6-650ddfa58847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9b5d47-12a6-4b31-8203-6140f4d17d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881cb503-6c63-4fc5-bbbc-c4ed33e93af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c550950-9448-4b12-8d6e-608856994e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59084393-8ecc-4437-a6f4-dee5b1111c4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3631d8-a0a9-4b07-a672-7bf8e263fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcf8f1d-e84c-47d3-ac45-d44aba644a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe8545d-1b47-48d4-93eb-713cd4424191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b54d9a-c63e-4f38-a96c-c415f4d71f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172c4cd5-92f0-4e08-8cd1-23948e262aa2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c997f239-c306-4090-8f44-be262ca0d064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a533c33d-8652-46e2-8bc4-41ab1c49bd41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db227c03-9d81-492e-ac91-26d12180c8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f94022-553a-4aa3-9c42-d8dea34b023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28fa34f-04f3-4d8d-81d4-1696a59c767d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c99ce3b-d89f-4f60-a5b6-036f35adfb4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32bc8f72-4b1c-459d-9340-d253eecd9879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f7dd50-0f61-4b32-9325-fa31fc500634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544b2c87-4a52-4229-ab77-50485c06be0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb60826-e60c-44b6-8965-1d5fc9f71df8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b0f96e-ab39-4781-b14c-abc55c4d7502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57506075-a675-4849-b7fe-0cb024a32717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76457086-cb71-42d6-96e7-8cd4bfca58c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c01c98-8620-481a-902f-dca87dcc0457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b68a75-4668-46b7-9604-dcb686360910",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bae42a-bb96-4694-865b-0233960e863f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f704a94-7d4f-4b7d-9b05-b8bf686c1da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33bfa1c-a4a5-40ee-9a6b-09b41ab7a1a1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712e22e6-aa2f-4b4d-9911-fb13d98940d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845c7b02-9a3b-4b50-9525-eaa381935a25",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8020fb-7d49-4938-ab88-2d54963033b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4185a816-b815-43a2-b71e-bb798fb3f5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4905a13a-1f04-454e-a040-41df192f5ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa3d07f-a61d-415a-aa24-946ef5d9db1d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7e5ef09-bfa2-43f4-9a09-dcf1d89ff637",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93691d76-7fd2-4d55-b57e-43efe8dce668"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7bbc569-a926-42c6-9481-fe89d0abea58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bac58c73-c7f4-4011-aefa-d2f1e46cc86d"
                    }
                  }
                ]
              },
              {
                "id": "5097d70b-06e8-4d07-81ce-a889cbd56721",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0d88315-f3e8-46d1-b065-7735e223744b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bee407-b0d7-479d-afd5-26d21f430100",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2400cffa-2360-4a61-8b3a-b67dc00356c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21192781-3683-4031-b1d5-0a8653260333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c4ed249-562d-442e-9c94-d20ba2d93937"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dcc2b2d-a08d-42cd-aebd-027b6205430f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55edd96a-3f32-4afb-998f-af180c7267d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "271a0454-7b73-440f-87f8-d1e4aa5485e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeeb16ce-798f-4145-b3ad-d67a00d399f6"
                    }
                  }
                ]
              },
              {
                "id": "248d9cf2-921b-4d02-9594-5fdae22c5943",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ba9e5c5a-2fda-4c1a-bbd3-8ff4417a088c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c308e865-876f-4d9e-bc10-80c52d375b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6a04ecac-629c-4419-9f1c-05948aa3b2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55cf251-80f5-4fd2-bbc3-bc06c96dc96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ded4164-7ff7-42c3-9d6b-ce9314608b20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dd481b9f-22d9-4042-8c50-609f27917b1e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "142aa7eb-672d-4259-9909-73e2c1578e1d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bec24be-a6ca-403a-b3e7-4be9a2d7e697",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83d4f377-f4c2-433a-a6ac-fa186ba6b0bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b0dc275-48b5-406e-a2eb-434fc39e04d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a36136e-7d7b-47ad-8b3b-84cb287b2b75"
                    }
                  }
                ]
              },
              {
                "id": "e8cc48a6-a535-4ab0-b3ec-b639a319287f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08f82684-95b0-4020-b7f6-6099c4310230",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "95e51098-b78d-4380-a06c-cf6ce6152c4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acb5af4d-5a4c-41cc-8412-829ba3475387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2508b3df-366a-4d68-82a0-c01a17e8646b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe1527f6-770b-475a-8998-37887d6a94d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fd5736a5-09be-4089-b97b-fca189c82e38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa2b772-302f-4c55-b948-0f486f4ff600",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2552326-9dd4-4264-a903-b3bb1ba4be46"
            }
          }
        ]
      },
      {
        "id": "9aa51564-825b-4ef8-9ef1-81b09b539660",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5eeed744-966f-4c89-aaac-79d1a171c155",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d51e1c00-a4de-46e4-b862-f906069f2981",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c583dc1d-0b39-4631-b8b9-5fdc065ea9ea",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc75bd01-2ae6-4e30-a5c7-c9d121e18bde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "edd6e067-b547-4853-99b2-248419e5fd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7eee1a-2b4b-4e8b-913e-0d225e6463ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63656e9d-c3a2-468a-91f5-bb2a9da18145"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31e84d7c-153a-43c3-9d2b-80d52fc61b00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63e89a24-36b6-4b59-82a2-a5b3a17b987d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c928d4e-180a-403e-abd1-1bc42047ff3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15258d6b-edb4-4c74-b4cb-5742abce2e17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb774f22-0d46-4700-911b-f08664bd3030",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cdef09e9-3074-43e3-ae44-678a377323ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f784a9c-f574-46b8-af3f-a5c73855f5d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a558723-b9c0-4125-b47a-9936187ce3dc"
            }
          }
        ]
      },
      {
        "id": "43698212-e282-4ae2-baef-28b27c6c8c6d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a120b155-79fb-4ddc-9bee-a4781a48b021",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a34c2d96-b637-476a-86bc-cc9fe6a0f391",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18bdf534-ea95-4e21-97c5-943458a661a6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9938702a-354b-4f2c-9be0-506ca201eee2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "585407a4-10ec-4fb4-9a37-8e8f9897c7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3164aa54-5288-4310-999a-b381d8b64e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d9cc2f7-45e3-436f-a4cb-20643407d844"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57a022e1-3c53-4aa3-99ae-dbcc173fc978",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fae9aa0d-8d5a-43c5-bee4-4f1bfbbcaf38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22b5bd5e-4f83-4508-96a1-3889b6f5d64b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6d16e41-2a93-42b5-9b79-5c941b87e7da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e27cfe5-f551-4c60-814a-4d929daf2366",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3529096c-4c21-47be-8914-251ea193e23d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34624cb4-5cfd-486f-ae16-8e93a57714ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9a14c78-09ac-4a08-ac16-52efae9c24d3"
            }
          }
        ]
      },
      {
        "id": "ba7cfe3a-f4b8-4aca-8d16-67de687b8e9c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c69d8463-3a61-4e7f-bb5b-ba0af7e24ccf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d1ad262-3715-4ee1-aabb-f75c8d1da001",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7a40c7c-884d-46a7-be42-8b05e9b43c20",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c2cf1d-88f7-486a-a98d-57bfd7914e6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "627f7122-01a6-435f-8293-5d09f908fdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6652d13-37b1-4eb1-966a-d0cfeadc7306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38a2a673-ad93-45e9-9607-f98930cdc7b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f044c9fc-a3ec-44b6-96d2-2d9d69361e7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b88e1773-2e17-472a-8176-3fc105044574"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4c00f75-96bc-4d83-9d07-77fa7ae7132c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77bfbc57-8d56-4bf8-b748-74f421059c76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e5fbd02-da6b-43ca-9dc1-7a3783216656",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cfa195d7-931c-42fd-96ed-e3cbeaea60ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5a937bf-43f2-468c-be53-4cda6b6a6558",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "907a338e-35ed-410d-81cb-4d90a0908483"
            }
          }
        ]
      },
      {
        "id": "0af84f26-3e9e-4169-ad80-ef73ca3cfe6a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89f8ec9e-25b5-4e5a-a4fb-98f1d59a01ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e7fa2d5-f5a9-4602-a661-5f1355dca49b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "42200571-322c-4757-b9c5-9a4db7e20315",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "246b518e-8dc9-40c5-b709-ef357be88f8a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0097e729-bf5b-481e-b17c-a27593caf736",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 90.26056338028175,
      "responseMin": 7,
      "responseMax": 2149,
      "responseSd": 246.50731153849412,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693182788016,
      "completed": 1693182827023
    },
    "executions": [
      {
        "id": "21d7729b-36ca-4fb3-85e2-695d05d37258",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ad3b57f7-253d-4bf9-aa37-61e85b6bb69f",
          "httpRequestId": "6a8ff8ee-86a5-49aa-bab1-1d2feed8a0b1"
        },
        "item": {
          "id": "21d7729b-36ca-4fb3-85e2-695d05d37258",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ed62c0d3-8fdd-4e62-b41a-cf0ce6828ad9",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "50896186-9bb1-4446-8e74-4587ff94601f",
        "cursor": {
          "ref": "f0c1b7eb-9593-450b-82be-7aa5ede5b08f",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d1d43839-870c-4136-89eb-c2de75406137"
        },
        "item": {
          "id": "50896186-9bb1-4446-8e74-4587ff94601f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e600e359-3de7-4168-a4a0-596eebe3df87",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "d80fe7df-cca5-4e84-a6d1-a6d395accd02",
        "cursor": {
          "ref": "c91d60bc-03b1-432f-9c62-a582ac2702b2",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "baf7127a-b0d9-464b-9d86-170ef833d4e7"
        },
        "item": {
          "id": "d80fe7df-cca5-4e84-a6d1-a6d395accd02",
          "name": "did_json"
        },
        "response": {
          "id": "b5b887ad-2e1e-4c68-82d9-2e8e05cc790a",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce0b99-6434-4143-8470-e0b4c513cd67",
        "cursor": {
          "ref": "b6955bc0-3408-4f9d-b200-6b0fa64c3def",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4f99e5e3-0e75-4697-a876-7bf8ce3fc167"
        },
        "item": {
          "id": "e2ce0b99-6434-4143-8470-e0b4c513cd67",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a10d171-ba05-41e0-b6b7-91f2dc3a7e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce0b99-6434-4143-8470-e0b4c513cd67",
        "cursor": {
          "ref": "b6955bc0-3408-4f9d-b200-6b0fa64c3def",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4f99e5e3-0e75-4697-a876-7bf8ce3fc167"
        },
        "item": {
          "id": "e2ce0b99-6434-4143-8470-e0b4c513cd67",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a10d171-ba05-41e0-b6b7-91f2dc3a7e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2317f5-6d1f-429a-ab39-4973a66f95e4",
        "cursor": {
          "ref": "888d5377-6d9d-4337-b837-dafbbe224573",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8da14962-4c22-436e-833e-ee88e301c9ff"
        },
        "item": {
          "id": "3f2317f5-6d1f-429a-ab39-4973a66f95e4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9b6f8b39-51e1-49be-9bdf-a3341c702675",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d79cfc-0a82-4354-a09c-21669774e860",
        "cursor": {
          "ref": "133e0f08-d385-4cb8-8bbb-dc1ff35e7dcf",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c9df493-7635-4a80-bbfa-89b8fd291500"
        },
        "item": {
          "id": "64d79cfc-0a82-4354-a09c-21669774e860",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "32dc942b-b958-4f38-80c6-8db7f5bda355",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d008343e-920f-4cfa-bf1f-719d089c3393",
        "cursor": {
          "ref": "7546a557-f2d6-435c-9c60-a7c51e35d9e8",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "931fd9f9-ab84-4297-8661-957b8739f298"
        },
        "item": {
          "id": "d008343e-920f-4cfa-bf1f-719d089c3393",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "710c184b-3469-469e-ab9f-587f1e3e023d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237c30f8-083b-4236-a6c7-9c1b8ec5013c",
        "cursor": {
          "ref": "495e1d76-a42f-4bdb-8acf-b8a91898c1e6",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e62dc0dd-d2d5-41b8-a707-0011402b270a"
        },
        "item": {
          "id": "237c30f8-083b-4236-a6c7-9c1b8ec5013c",
          "name": "identifiers"
        },
        "response": {
          "id": "c559765a-052b-43a6-904b-8d89102ad3ea",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a4814c-5917-4015-bee9-5ad779ba318e",
        "cursor": {
          "ref": "f4be74a6-7d86-4350-8d11-a0c9a305bb14",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f08b6599-e1ac-407f-bbb0-f10d753f7734"
        },
        "item": {
          "id": "35a4814c-5917-4015-bee9-5ad779ba318e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "382d98a0-08b0-4d5e-aaf0-4832701a4c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400a079c-2236-4229-a3b4-780c9a3f1298",
        "cursor": {
          "ref": "04de69d3-57d9-4c6d-9e60-6e5d636d5deb",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c740ccb5-b6c7-4559-b277-8d2fbdc13508"
        },
        "item": {
          "id": "400a079c-2236-4229-a3b4-780c9a3f1298",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "186cd5de-0bf9-4012-b077-03251999f69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080ecce6-d6c5-4c91-9f59-5ab832994646",
        "cursor": {
          "ref": "e1044931-f9c6-4d64-817b-f16b8b2ddd37",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8b102531-8a80-4187-9582-89cfbb7e7d92"
        },
        "item": {
          "id": "080ecce6-d6c5-4c91-9f59-5ab832994646",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "04b8c099-ff9e-4e37-9d1c-6b5b0e9f78f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde26aee-558e-4bc2-953c-2119967440b5",
        "cursor": {
          "ref": "ef71fa91-4149-4350-8b51-21aafc8cbabb",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a3049815-3dc7-40f6-aa2f-30695c715f31"
        },
        "item": {
          "id": "cde26aee-558e-4bc2-953c-2119967440b5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4d3f6751-5ce0-4371-8870-afd0ff6b5f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e570c784-edc7-4504-81de-2ccc4cf85278",
        "cursor": {
          "ref": "aaf8c925-4b27-423e-a6eb-52951617c584",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dc6e3901-2229-4ce4-b853-6e4cb6680490"
        },
        "item": {
          "id": "e570c784-edc7-4504-81de-2ccc4cf85278",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "20f85839-c42d-4613-b45e-3446a4cf7241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6021b4ff-e4f1-4b96-bde6-63241bca7783",
        "cursor": {
          "ref": "183c9d7a-e8ae-490b-bf30-92e057791988",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b4b323c3-2f56-43a4-a85e-29ac99c71912"
        },
        "item": {
          "id": "6021b4ff-e4f1-4b96-bde6-63241bca7783",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "70182797-9dbc-45eb-bb86-448ea25c1b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd65b483-b65e-4800-8d95-c625c89dfa57",
        "cursor": {
          "ref": "b609ae1d-8462-4b8d-b2f0-a668f39fc1f1",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "37d38092-b173-4532-b4b5-76a67d62e7dc"
        },
        "item": {
          "id": "bd65b483-b65e-4800-8d95-c625c89dfa57",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "685b5282-9a09-4c79-b650-79b4ab592eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c3f85f-f818-4e45-a37d-0e9154336eaa",
        "cursor": {
          "ref": "988f7c74-f9df-48b1-bc34-25945dbdcc13",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ed5c93f2-e13c-43bf-a315-a57d64b7ef35"
        },
        "item": {
          "id": "59c3f85f-f818-4e45-a37d-0e9154336eaa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0acc475d-51cd-4b21-8a5c-314a81ef105c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a9431c-8482-426f-b57d-44b520a0379a",
        "cursor": {
          "ref": "bd4efaea-8460-4f55-a431-0883da2aadbc",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7dc1d838-cb05-413a-81f5-70842002e272"
        },
        "item": {
          "id": "f3a9431c-8482-426f-b57d-44b520a0379a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1e977e8e-88f9-4667-8d57-02f8e2d4300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc483c01-a57d-4487-b322-cde7d22aa905",
        "cursor": {
          "ref": "1d15f4b2-6a67-4f59-97e0-b81d8d2a2211",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "329952e2-9c24-46c2-8c03-a39fd6946e41"
        },
        "item": {
          "id": "dc483c01-a57d-4487-b322-cde7d22aa905",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c8f1f4b9-f06f-4e24-8754-15b429518f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cad4be5-3a93-4d30-8718-8d47738ef717",
        "cursor": {
          "ref": "d6519ddb-b9fb-4d1e-a0cb-f17b99e7661a",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7b994dd-cc45-4bc5-8893-fed7a61f5349"
        },
        "item": {
          "id": "1cad4be5-3a93-4d30-8718-8d47738ef717",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e2d5f811-c4f5-4b46-9d23-bad3278fe333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a54b3ad-1d1f-4e3d-8d89-e03a600f3fb8",
        "cursor": {
          "ref": "ed79db3f-f2c6-49b1-84bb-97fbdaf00e54",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "97a3f32d-c681-4db8-9fef-22452e7717cc"
        },
        "item": {
          "id": "8a54b3ad-1d1f-4e3d-8d89-e03a600f3fb8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6809e74c-4d5a-4a05-9c81-7d2d98fb9bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9368bcb1-5c95-4986-9c43-66cd5fd07b48",
        "cursor": {
          "ref": "4b3ceacd-8cfb-4678-8a18-17294a7f24d5",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee279fd5-b50b-422f-8ac2-a5ee19967a6b"
        },
        "item": {
          "id": "9368bcb1-5c95-4986-9c43-66cd5fd07b48",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6552b9c1-14e6-40fc-8057-20045e718b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59cc400-a923-4dd1-b3ec-453b3bfe7049",
        "cursor": {
          "ref": "dc700b06-139f-4fe6-ab87-15ab1768980e",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b9217663-05be-41cd-a862-c1767ab52c7f"
        },
        "item": {
          "id": "a59cc400-a923-4dd1-b3ec-453b3bfe7049",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d19c397c-c245-4a99-bdd1-d2361c24bf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81184918-dd22-4a47-86a6-1eda28422554",
        "cursor": {
          "ref": "bebedcc8-1765-4a09-85a3-f4428561902f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9caa4040-75da-49e8-a944-a2da5893eea0"
        },
        "item": {
          "id": "81184918-dd22-4a47-86a6-1eda28422554",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec7acfa8-be99-4ac8-bcde-992e4e65bb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87450401-a795-4ebe-ade8-25028143fe50",
        "cursor": {
          "ref": "8e40fdfd-95d6-4bb1-8628-ae65e3076763",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f5ebb0c0-405f-4d4e-9960-1c553ea836ed"
        },
        "item": {
          "id": "87450401-a795-4ebe-ade8-25028143fe50",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "eb2d19fe-5779-43ea-baee-1cbfc729546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b6f463-54f5-4d1b-8e6b-707480fcf907",
        "cursor": {
          "ref": "68fcfc9a-98f6-4804-adfc-4799eaf1a0cb",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1af4989c-60b6-48bc-8c33-3dda49a0db83"
        },
        "item": {
          "id": "b4b6f463-54f5-4d1b-8e6b-707480fcf907",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "782ba3fd-306f-4f94-81bd-dd4ec2d4bea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9a223e-b000-412e-ab82-a84976e23b86",
        "cursor": {
          "ref": "be94ee3f-59ea-4b0a-868f-c1e434e0d447",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ecee978f-906d-4579-a6cf-a6978bf17c23"
        },
        "item": {
          "id": "fb9a223e-b000-412e-ab82-a84976e23b86",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5628b0f3-bbfe-4434-aacf-3a3c73949cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993ead0e-c48b-4d1f-8929-3488816c3edf",
        "cursor": {
          "ref": "ba2049a4-ed9b-4b2c-99fe-04826202b580",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5a99d316-ca11-4084-8ef0-b911b3dab815"
        },
        "item": {
          "id": "993ead0e-c48b-4d1f-8929-3488816c3edf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ede37414-b544-4bb4-b62f-b64e3ce2d335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4940b8-ed48-44fd-a2bb-a6b70ec3d6a8",
        "cursor": {
          "ref": "ff488d33-e19b-4200-8985-6b86cfdf425c",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b195b35d-0668-4302-a4b8-238989d0e6fb"
        },
        "item": {
          "id": "bb4940b8-ed48-44fd-a2bb-a6b70ec3d6a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cbb2bf41-45ef-4c48-971b-d591c998deb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fefab85-1bbf-4440-8b15-26aa89d135f0",
        "cursor": {
          "ref": "52565cd2-3fcd-4818-831e-8d51eaa644c1",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b642dcf5-415f-4f94-84ec-17ef88c42f56"
        },
        "item": {
          "id": "9fefab85-1bbf-4440-8b15-26aa89d135f0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9da39f74-8a27-46aa-ab5f-17963cfb4e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ede8f1-2de7-4010-8ba3-200ec9c8459d",
        "cursor": {
          "ref": "bbe1649d-a366-4547-92d8-0ea0608524bf",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b795dc1f-3883-4152-b6f1-c67634309938"
        },
        "item": {
          "id": "45ede8f1-2de7-4010-8ba3-200ec9c8459d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8d4ee2d2-0dd8-4a42-97da-46ddae8fda6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162cb1d2-d4d9-4b7a-b458-1ba3b80c6155",
        "cursor": {
          "ref": "97cbf6e4-8491-4606-8553-d9fed22bcfc5",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "eb5e7983-a931-499a-ade8-9b6877d2f5e3"
        },
        "item": {
          "id": "162cb1d2-d4d9-4b7a-b458-1ba3b80c6155",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "02d04c7a-fadc-41a1-a490-d48ad0237888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73210437-3539-4cbc-b127-d003cb96f602",
        "cursor": {
          "ref": "53a10136-97c5-4a71-a9a2-710462c596b6",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8f857cd9-f272-46d2-97f3-f0acc2552f04"
        },
        "item": {
          "id": "73210437-3539-4cbc-b127-d003cb96f602",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "81b21562-c04e-4ea1-b8ed-c7cf86e42de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171af90d-aebf-4f6c-888f-de07e1be7cb5",
        "cursor": {
          "ref": "4542e0f0-ed70-40bf-bbb1-d12c0b0e0c68",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "940911e2-a63f-4169-af27-66bd0351608d"
        },
        "item": {
          "id": "171af90d-aebf-4f6c-888f-de07e1be7cb5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "14a39c43-a4d0-4139-b079-a63154d4a250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3479bdfa-0f43-40b0-b329-71f283c6c08b",
        "cursor": {
          "ref": "90aaaed1-2549-42ad-9f43-894e1000cacc",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2e7184e1-5f1f-4983-afa3-571dee2db330"
        },
        "item": {
          "id": "3479bdfa-0f43-40b0-b329-71f283c6c08b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8dc6a22e-f69b-43d8-9d00-6bf2ad5ebd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a797956-1a96-4408-b220-e4b27babdc31",
        "cursor": {
          "ref": "d5ef4c5c-5683-457c-a705-3ff5af416ef8",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f04525e3-9af9-4bb0-a240-e90f69071153"
        },
        "item": {
          "id": "3a797956-1a96-4408-b220-e4b27babdc31",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7ff208be-ac89-4153-9fe7-53be7787dca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8540b41-c0cb-4c68-ad50-c1df3b155de0",
        "cursor": {
          "ref": "91d5e76c-8734-443e-b84c-7d9d18adaac6",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "522d6456-14b9-449a-b851-20052cd6f8df"
        },
        "item": {
          "id": "f8540b41-c0cb-4c68-ad50-c1df3b155de0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "74662226-38dc-4b16-96b3-ea68e7f9aa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb36e52d-e956-4663-86d5-7fe4887059d8",
        "cursor": {
          "ref": "c6233ded-a808-45e3-95cb-7d6782d00c89",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c0e21db1-d50f-4eb4-a40e-d4eb55a8fd64"
        },
        "item": {
          "id": "fb36e52d-e956-4663-86d5-7fe4887059d8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9d55a2c9-4323-462e-9837-0855869d64f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a2d16d-77ca-479b-bed2-2d5d59ec410d",
        "cursor": {
          "ref": "78b27329-6345-442d-8017-b9f77f706796",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f08d14ac-9003-4b99-b095-3880df764efa"
        },
        "item": {
          "id": "90a2d16d-77ca-479b-bed2-2d5d59ec410d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bed67904-9dad-4e44-a3ae-bea008fc8184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d832a46e-a303-441e-94f2-9c2ddc5973d5",
        "cursor": {
          "ref": "133e2bcb-f67d-4b0c-8067-7bcef05f644e",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "930d41ec-6064-4150-a345-90cf5d544d31"
        },
        "item": {
          "id": "d832a46e-a303-441e-94f2-9c2ddc5973d5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b53e22c5-dcff-40f5-b35a-1aabf6e53f18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "08aa8e22-d7a5-4a14-86f9-b42a4be9fb59",
        "cursor": {
          "ref": "7be4b300-b147-4c21-a4ec-ed5a5b355bc4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44c441e9-3f34-4368-8fb9-92f6fb3cd5c2"
        },
        "item": {
          "id": "08aa8e22-d7a5-4a14-86f9-b42a4be9fb59",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "59b7a456-2801-4dff-bc28-3ed4bbba81b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2149,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8aaefad3-3c89-4a5c-b1e9-8e2035e68f81",
        "cursor": {
          "ref": "c6d40c1d-e42d-4a92-9360-2841e45e8fed",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6522bff1-d37d-4f19-99eb-a88b560ed172"
        },
        "item": {
          "id": "8aaefad3-3c89-4a5c-b1e9-8e2035e68f81",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "957bca31-f538-406d-9576-dc10677d2f78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b81e4357-db2f-465a-a147-95c31d45a37a",
        "cursor": {
          "ref": "906ab5d5-d404-4b1d-a650-a6a9b2018c12",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2a33be32-2dd6-4b84-a165-a263d7ea4830"
        },
        "item": {
          "id": "b81e4357-db2f-465a-a147-95c31d45a37a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2101bf99-d1ca-4ffa-8a31-d0de7d1e0a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582ea0b0-c76d-4ada-a217-93303157a1cd",
        "cursor": {
          "ref": "9830ff53-b8e3-4ff8-8348-d1f5b309156a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "61f07082-72a2-4525-949c-af26b9dd8b03"
        },
        "item": {
          "id": "582ea0b0-c76d-4ada-a217-93303157a1cd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e23f40f5-4ac2-4cf6-88a0-c8b429931a4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b9c628ac-cc50-4f05-b6c7-458ce0522188",
        "cursor": {
          "ref": "f3371f16-c59c-438c-9514-c053cb09ca18",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "870579fd-8a98-4d6a-b434-47a3c1c36292"
        },
        "item": {
          "id": "b9c628ac-cc50-4f05-b6c7-458ce0522188",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ae1a9eaa-d737-47e6-a36b-f4914b74cb42",
          "status": "Created",
          "code": 201,
          "responseTime": 1566,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "558d0555-322f-4f51-a174-b96dbb7c3737",
        "cursor": {
          "ref": "bebcdea7-bcec-4903-9a93-9f6a9743cafb",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0f1ebda0-1be6-4244-b7ca-a0f893dd5165"
        },
        "item": {
          "id": "558d0555-322f-4f51-a174-b96dbb7c3737",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "350c4694-7d18-4fce-a118-4ef511c72799",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "22ca818c-be6f-446d-98d1-754750fca3ff",
        "cursor": {
          "ref": "3a63fc3b-cc1e-4aaf-a3a0-1c657a835d8e",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fb478690-c38e-426e-8702-fd32d6d2d240"
        },
        "item": {
          "id": "22ca818c-be6f-446d-98d1-754750fca3ff",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e6df6d1d-b331-4fc8-a098-176748b2ecb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 846,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8064cd80-4eb0-4d8b-ba29-3b5c177e57ed",
        "cursor": {
          "ref": "dc47a27b-053b-4a1f-b24f-18c21c22428c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a45a1982-f66b-4677-92f9-a527147356c0"
        },
        "item": {
          "id": "8064cd80-4eb0-4d8b-ba29-3b5c177e57ed",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "27ca07a0-4970-4f7d-bd1b-0eab8cad2c68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0bf1313c-5e26-44e0-bd00-82b6184854b8",
        "cursor": {
          "ref": "f6e9f195-4f3b-4db3-a7f0-5d8f10430145",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "af9f20f2-a3f2-4ae1-b202-3e0eeb1e00fa"
        },
        "item": {
          "id": "0bf1313c-5e26-44e0-bd00-82b6184854b8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "618e8bee-1902-4453-8940-c398700d4e58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "748de80e-1a94-48f1-8862-1c885bfe8295",
        "cursor": {
          "ref": "b8af4b7a-8eea-4c9c-8f18-988c8515b3e9",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c366fa9a-3e5a-4163-946b-45ec0f1172db"
        },
        "item": {
          "id": "748de80e-1a94-48f1-8862-1c885bfe8295",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c122fbc1-9238-4112-bb88-e7f0a7e02929",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ff15763c-aeaf-45d2-a5a4-7c85a4461747",
        "cursor": {
          "ref": "eef14867-3ec4-48ef-a060-c187938a9498",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fa055c8a-7284-4412-b47c-d5dffa59ae95"
        },
        "item": {
          "id": "ff15763c-aeaf-45d2-a5a4-7c85a4461747",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "715d68d9-a212-4cae-9e9e-f0a402adbd71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "890ec23a-189a-47c3-b002-e9e03feea348",
        "cursor": {
          "ref": "bab65357-ebf3-4dda-a781-c874e4e365de",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f99167c2-b102-41ae-9b6f-226270070f7c"
        },
        "item": {
          "id": "890ec23a-189a-47c3-b002-e9e03feea348",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "36186147-4bec-4e83-991e-f61c706266c7",
          "status": "Created",
          "code": 201,
          "responseTime": 1060,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cf58568d-6b2a-438f-aa3e-f2db5cd9d00c",
        "cursor": {
          "ref": "2cd9fbf4-bcca-4208-a4b1-4fbf1aa301af",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "01aaf816-0447-49ed-b734-64eb0dba32d7"
        },
        "item": {
          "id": "cf58568d-6b2a-438f-aa3e-f2db5cd9d00c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a84fc307-bd8b-4044-9b11-3eeccc37afce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad12854-15b6-4161-8d1b-b35b25ffefc4",
        "cursor": {
          "ref": "40e559f7-f7d1-4a87-8655-9691dc15cc19",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "13404385-565d-470a-bb2c-1ddaf7fa1c85"
        },
        "item": {
          "id": "0ad12854-15b6-4161-8d1b-b35b25ffefc4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4121b074-5acd-4a19-9c80-cfb6341565ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe414d9a-a1c3-4765-9138-e888fb0fcba7",
        "cursor": {
          "ref": "53353482-188a-4427-a773-1f269cb7652d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f18672cd-1413-4cc5-8222-89cdfd88f8f9"
        },
        "item": {
          "id": "fe414d9a-a1c3-4765-9138-e888fb0fcba7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1f65ac30-caf0-4e7f-8765-3cb4ffd64665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8e5dfe-f751-4e02-b9ee-ac4361ea644a",
        "cursor": {
          "ref": "b00a30ff-8c1a-4e95-af85-a6c590a44520",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "369b73af-f928-4ded-a43b-f2a55bc0f065"
        },
        "item": {
          "id": "ad8e5dfe-f751-4e02-b9ee-ac4361ea644a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4d748914-be33-45f2-adb9-5fa6abdfebc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d330296-29d5-4429-a2ad-100697b8947e",
        "cursor": {
          "ref": "be27a77d-da61-488d-9347-337442f0d35f",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4488e442-af52-4882-8901-9ff76d052fdb"
        },
        "item": {
          "id": "4d330296-29d5-4429-a2ad-100697b8947e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "93098b99-a9d7-45a9-bfec-f3c9cc993a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24b85e0-b9bb-4049-a508-da73ab620d5e",
        "cursor": {
          "ref": "d40e7992-3951-4808-9488-d2ca4a6ad743",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d3179c8f-7d16-45ee-949a-1c46afe98470"
        },
        "item": {
          "id": "d24b85e0-b9bb-4049-a508-da73ab620d5e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "723ad8db-78ca-4acc-9421-68c2f8caaa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7061e447-ad3e-4627-951a-8c25f2a6e9f2",
        "cursor": {
          "ref": "abfbe160-8746-4aef-8579-30b27bcf725b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1081e0f8-88c9-4a3b-b4fc-a2f82d1641b4"
        },
        "item": {
          "id": "7061e447-ad3e-4627-951a-8c25f2a6e9f2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d581b16d-557a-4442-a3f0-39d32bac9efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5f07cd-014e-4428-851a-b95da8daa3c2",
        "cursor": {
          "ref": "8b310c48-a3a2-4e1a-8ffa-dfb801782f8f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8abfb144-ad50-4838-ad94-4732183d2a75"
        },
        "item": {
          "id": "db5f07cd-014e-4428-851a-b95da8daa3c2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b15ea23c-54dd-4ebc-a491-23c8e231f0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4df1488-a814-417a-82ca-ed061300131d",
        "cursor": {
          "ref": "feac2002-0800-42da-826a-68e9d2b6a280",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "795d41e1-4014-46de-966f-2b3b521a0d32"
        },
        "item": {
          "id": "e4df1488-a814-417a-82ca-ed061300131d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dd971dd8-3d33-4a1e-981f-640590d1bf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361107e5-033b-4549-8dc0-274d100e59d0",
        "cursor": {
          "ref": "8efbd4b8-ebce-47f5-8a0b-5031221d58d2",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ce92ba4d-60a0-4c0f-a6d6-55d8659f7a62"
        },
        "item": {
          "id": "361107e5-033b-4549-8dc0-274d100e59d0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a8a3076f-72d9-47ca-9f71-5f753cb04fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf8e7b-1bcf-47b9-80a7-8bd6dec1e1b5",
        "cursor": {
          "ref": "a2a0a87e-4be7-4733-83bc-f46ec7a4e081",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ace547b0-df7c-43cc-a424-7dca7844d433"
        },
        "item": {
          "id": "0dcf8e7b-1bcf-47b9-80a7-8bd6dec1e1b5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bab2a9dc-37ed-472e-993f-470a127340bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f1ecc2-6b44-44f6-9e2d-f4adc6859355",
        "cursor": {
          "ref": "8e6827d7-81da-42ef-8b6b-fe0ee2f7d271",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6f6bfebb-1f72-465c-9492-8016f724c6d1"
        },
        "item": {
          "id": "10f1ecc2-6b44-44f6-9e2d-f4adc6859355",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1a770c88-c40a-4e6e-842d-b4585079862c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b681884c-1be0-4ca0-bf59-2597984f3f30",
        "cursor": {
          "ref": "4bb3f23c-4513-4a80-8d9d-4d30c4b7c65a",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8efc05cd-1b59-4f91-89fd-133c3cc8e608"
        },
        "item": {
          "id": "b681884c-1be0-4ca0-bf59-2597984f3f30",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bcd7d9dc-54c4-47cc-9619-5ce606d72b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d5bcae-3e53-4dd8-b1d8-4f9945c0c0ea",
        "cursor": {
          "ref": "24012815-c4d2-4046-b23e-1b57e489603b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1b35c936-4bdd-4ae8-92bd-8ca36231786a"
        },
        "item": {
          "id": "11d5bcae-3e53-4dd8-b1d8-4f9945c0c0ea",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c274b439-c41d-4f26-907c-aae6c3536eab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 772,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d6fb1136-2f3a-46f1-9178-6547f6556168",
        "cursor": {
          "ref": "6754a4dc-4887-4af1-b199-cb4ab34f03d9",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "45f3c765-3600-4db1-9dc9-30182db9a0f2"
        },
        "item": {
          "id": "d6fb1136-2f3a-46f1-9178-6547f6556168",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4230d13d-d857-4140-8129-6095a91574b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 816,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "895681a6-52cd-40fe-9ab8-747065803f1f",
        "cursor": {
          "ref": "eeca1da2-1a3e-4dd0-94ce-b8dfe1f6004e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dbf45079-8a7e-44d1-9bc4-188fb3b43e47"
        },
        "item": {
          "id": "895681a6-52cd-40fe-9ab8-747065803f1f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "77cabaa6-dfaa-47c5-8a12-87ca28b14fa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "69b4ad90-4ece-4341-ad2a-b4966d272f44",
        "cursor": {
          "ref": "56cc626f-6b43-4798-8792-89a1dbe477c5",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ba007575-2fef-4d5d-8ec7-b16d1a345e78"
        },
        "item": {
          "id": "69b4ad90-4ece-4341-ad2a-b4966d272f44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "30cf3617-9c83-4b02-864d-6c83a018eaf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 790,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cf2ae4b6-c4d0-432c-a490-c6f6b4678d29",
        "cursor": {
          "ref": "8e846024-2d8e-4bd1-b084-9762bb3bcd28",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f9aa6442-181c-496e-93d0-df41ae574bc8"
        },
        "item": {
          "id": "cf2ae4b6-c4d0-432c-a490-c6f6b4678d29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9a9241bf-0b93-4ab7-bb89-959090ea665c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e19caeac-780b-40b0-93ca-787b2243037b",
        "cursor": {
          "ref": "c14555d6-22f2-4701-9ca7-2cb101990659",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "62c24f30-dc1f-4b37-9adb-c21d5369f971"
        },
        "item": {
          "id": "e19caeac-780b-40b0-93ca-787b2243037b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "86e297c9-1666-4992-b898-7c759b78ade5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72ec140-c1bc-452c-b8ab-41d9f2e4768c",
        "cursor": {
          "ref": "06b94d54-e734-41f0-bfa7-c5ac62687351",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e201e5bc-a977-48be-82e0-39191af0a233"
        },
        "item": {
          "id": "f72ec140-c1bc-452c-b8ab-41d9f2e4768c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "de10ce16-00f8-4cb0-9198-7bba60b15a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2853ad5a-1550-4625-a3fd-f6d8e14b69bb",
        "cursor": {
          "ref": "0cc6d252-4018-4b89-8882-db232ff0f442",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "275d9631-cf40-44d5-a451-c40bf0a5baa7"
        },
        "item": {
          "id": "2853ad5a-1550-4625-a3fd-f6d8e14b69bb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8a8ae94c-0b23-40a9-8193-5c0c88d59452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bf9e0f-e74c-4fe0-b45c-89085a449f8b",
        "cursor": {
          "ref": "0b6bed2e-b804-4850-bc5e-e12b3f62382d",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f2e0f795-bfc5-457f-9db7-965ec2f3c0ed"
        },
        "item": {
          "id": "84bf9e0f-e74c-4fe0-b45c-89085a449f8b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4252f878-a343-4a0a-b6f0-19375fadbd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d78e62-9a92-44c6-8164-98f254cd8693",
        "cursor": {
          "ref": "24a0c77e-61e3-4c2b-8a2e-1b9f08f395f7",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d5b5df33-55a6-4422-8166-558d8d56d89a"
        },
        "item": {
          "id": "a8d78e62-9a92-44c6-8164-98f254cd8693",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "465d26e9-9d0c-4402-9e98-6a6015425a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4e5eaa-edeb-48f4-b3ca-3f296d4b8eaf",
        "cursor": {
          "ref": "4beac848-7ee6-4123-bc08-687960469c43",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "04d1e726-7c82-4e51-b0d1-00bc9e2411ea"
        },
        "item": {
          "id": "9c4e5eaa-edeb-48f4-b3ca-3f296d4b8eaf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "78eac90f-2295-48bc-bc16-7e4013253073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b279b04b-d1cf-4065-90c0-55230e4d55a8",
        "cursor": {
          "ref": "2eb9f0ff-98f6-44c8-b89a-e3d5f06ef616",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cce97f32-0e6a-47b5-b661-c4000fd33bae"
        },
        "item": {
          "id": "b279b04b-d1cf-4065-90c0-55230e4d55a8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6e0ff575-d254-45cf-9ef5-2cefce6bdc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809d1c5f-ad77-4fe9-bc0a-218f6388170c",
        "cursor": {
          "ref": "f74a91e1-41d1-4d9e-a1a9-256ec86d6e51",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "13b65c86-e6fa-4b9e-8aea-4ab30237d63f"
        },
        "item": {
          "id": "809d1c5f-ad77-4fe9-bc0a-218f6388170c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "23f6985c-75ce-49da-9ec1-02c1cd073011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37b187c-ebb2-4f27-969b-4b5f69ff1af1",
        "cursor": {
          "ref": "21f1d5d6-7bb1-47a0-8f99-492eedbef0c5",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "15087164-93d1-4b29-8817-1ac822d99af9"
        },
        "item": {
          "id": "d37b187c-ebb2-4f27-969b-4b5f69ff1af1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "94773f31-2ed4-4d32-af3f-270304a0f713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691f40d3-825d-44da-928d-888e3e0d856d",
        "cursor": {
          "ref": "68721f17-2148-4da6-be27-ef073737dc0b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "16548894-8819-40bb-9503-b0f1074c042b"
        },
        "item": {
          "id": "691f40d3-825d-44da-928d-888e3e0d856d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e99f2d82-2f40-427f-948f-a425195d93db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65efa61-8b74-418b-8913-22698ee6701a",
        "cursor": {
          "ref": "b6fd748b-5440-498d-b3b1-1517b4a56c12",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9606de06-9809-42ec-a360-9d584d1967c8"
        },
        "item": {
          "id": "a65efa61-8b74-418b-8913-22698ee6701a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "176b78c2-64ea-4392-a0d5-74fb22796d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e85c940-44cc-42f6-ad36-ce02126bb2f8",
        "cursor": {
          "ref": "0a6be536-0c66-4b50-a9e7-af69f4b25c94",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "71d281e9-22d9-44b0-8c43-48c10e76af68"
        },
        "item": {
          "id": "8e85c940-44cc-42f6-ad36-ce02126bb2f8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "78f62a8a-22d1-40fe-b545-0352490b52ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f606869-881d-4a40-adbf-65dc3dd2d98f",
        "cursor": {
          "ref": "0dcc0377-4c4e-4a66-ba94-75c7fa9852fd",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a91c03f5-0314-4b57-891c-dcfd75983040"
        },
        "item": {
          "id": "5f606869-881d-4a40-adbf-65dc3dd2d98f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "214ffd68-bae7-4967-8e87-7da053274205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016adeac-90bc-4402-b8c9-f7f3f4cd9a64",
        "cursor": {
          "ref": "19b82f0b-6b41-4030-a1b5-5cf4b227a8ef",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "98a0e81c-09ba-458a-9c1a-66a6ed75c024"
        },
        "item": {
          "id": "016adeac-90bc-4402-b8c9-f7f3f4cd9a64",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9109fb12-653b-42c7-b7b2-0cd32e2b9825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3846678c-37de-430f-8ed4-d7687f4c1e48",
        "cursor": {
          "ref": "e21345d3-f12a-42da-acb2-9e70f380ee45",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "af512fb6-b960-46f7-9536-e59e8865dd6a"
        },
        "item": {
          "id": "3846678c-37de-430f-8ed4-d7687f4c1e48",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dcd8dd8e-5fd9-4f0f-915f-564021a10466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec97384-bb3a-440c-a2f3-93abd6236dee",
        "cursor": {
          "ref": "1cd62520-7e65-472a-84ff-c5467d4fbf29",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "01e31099-56ff-4ff2-9599-b51c23460af0"
        },
        "item": {
          "id": "2ec97384-bb3a-440c-a2f3-93abd6236dee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "45aef820-f64b-4256-8b9f-a9048148ddfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cdd6f9-5e0a-428a-8ad4-6c1929f20cfd",
        "cursor": {
          "ref": "3bf80bce-2a3d-4776-bd41-fbe16efa7f5e",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "47551ab2-f281-4c98-9a08-577320dd097e"
        },
        "item": {
          "id": "21cdd6f9-5e0a-428a-8ad4-6c1929f20cfd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "236e4b6f-d55e-4043-8876-64ef939fbb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27126a4-c514-49bc-b599-79ca56a875e3",
        "cursor": {
          "ref": "09ee281c-35dd-4b1e-a8ef-45a7130ea305",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5f0cd80d-d7cc-4ea2-93d0-9a340995523f"
        },
        "item": {
          "id": "e27126a4-c514-49bc-b599-79ca56a875e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7e4363f4-45fe-4258-9f71-f4f7c1bc3bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1b156f-ea97-4983-860f-e0cfadcf61c3",
        "cursor": {
          "ref": "61934a81-e393-4d46-9614-d1ddf4861ea2",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c068146c-cfc8-475b-97cc-30cd4918f441"
        },
        "item": {
          "id": "3c1b156f-ea97-4983-860f-e0cfadcf61c3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a8b79b8d-3bc0-48ec-866e-5162fea78cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bcced6-01d7-4311-aef9-be400897d43d",
        "cursor": {
          "ref": "9e8f33ea-7c53-4372-8d77-aefccbe37f7b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c8c5f10d-cbab-496c-92d4-02c70a1a43bf"
        },
        "item": {
          "id": "16bcced6-01d7-4311-aef9-be400897d43d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a461abb7-f2c3-4863-8769-c00dcd34c46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669aff60-451e-4533-ba75-0e22a79265de",
        "cursor": {
          "ref": "422cff7a-ac20-43f8-8504-019ef41cf620",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ffa407b1-a080-4d69-9f2a-7cc1293e95cc"
        },
        "item": {
          "id": "669aff60-451e-4533-ba75-0e22a79265de",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5a192317-3736-4c66-a0a5-c5e1748f4bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e32d1e-1f37-471b-8479-7432533d006e",
        "cursor": {
          "ref": "169820e2-b2f6-4908-97b2-d816e1cd1097",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fb8160c9-84bf-4fcd-a939-3799954ca485"
        },
        "item": {
          "id": "f1e32d1e-1f37-471b-8479-7432533d006e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bbf74ed2-382f-4eaa-9451-5299fb6ecb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25725ae-52ab-451f-81e1-43f79ea0dd00",
        "cursor": {
          "ref": "ce685a04-a0bb-43ef-a36f-652f9bc79ce7",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c53432c0-fb02-4bac-b46c-ba62219c8219"
        },
        "item": {
          "id": "b25725ae-52ab-451f-81e1-43f79ea0dd00",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c78aadf7-3e47-42dd-b1b2-ebb419a8cfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced173e9-769a-4bc9-a4f5-c2dd7a22f843",
        "cursor": {
          "ref": "303061d4-20a3-4aa8-8bda-569e78ab70b9",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0ae77443-38f8-4a91-9237-4f4fb8149d96"
        },
        "item": {
          "id": "ced173e9-769a-4bc9-a4f5-c2dd7a22f843",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e822897b-2bde-4eba-b6d5-c05d40753de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09468db8-c273-4576-826c-9dbaa484e309",
        "cursor": {
          "ref": "625ded9c-3d27-4795-9015-d160d7c53dde",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a7b08aee-5c8c-4b6f-86bd-3b3cfa46b784"
        },
        "item": {
          "id": "09468db8-c273-4576-826c-9dbaa484e309",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5cbaac55-2b05-4e03-a7f8-058f4cfd5d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429e7d78-d92c-4b67-a380-e8fc78c104cf",
        "cursor": {
          "ref": "92b76265-76f4-4253-8cef-3b311ee2071e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "006d3f41-ede6-430b-bb1b-f0d87432d24c"
        },
        "item": {
          "id": "429e7d78-d92c-4b67-a380-e8fc78c104cf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "894c20bd-1df8-4ec4-bed5-a49fad1a3825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1ec329-ea33-427c-9517-d0195bc018d1",
        "cursor": {
          "ref": "ade1033d-949e-413c-a37b-fa04dba364f0",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bff167a9-ea70-4cf5-8908-c614db99a067"
        },
        "item": {
          "id": "4b1ec329-ea33-427c-9517-d0195bc018d1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "21e805ec-0420-4b3d-81fa-dd8106158dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3731421-8304-4c3d-bd8a-49c4f2f9513e",
        "cursor": {
          "ref": "7ac5a83b-ff18-419a-b964-42c8bb8f9005",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2bbaa989-df1f-436a-8c75-b68ce44ec62a"
        },
        "item": {
          "id": "a3731421-8304-4c3d-bd8a-49c4f2f9513e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f571db4f-fc4d-492a-9da7-47b8fa72ba6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68da767-d610-4a5a-9841-a582debaacfa",
        "cursor": {
          "ref": "e3fee074-6774-4a44-bcf4-4021afc0ae99",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "439e54bd-9382-44e8-bdb5-81a83e7c72dc"
        },
        "item": {
          "id": "c68da767-d610-4a5a-9841-a582debaacfa",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ed84afe0-ff14-40eb-b49e-a243beef0389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb53c5b-10d9-45e4-ad29-1e4ff7dbdb65",
        "cursor": {
          "ref": "19b6eeb3-cd64-4099-afde-8e6f259fdb79",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cfa8fdd9-a676-429d-a6f5-d83824186342"
        },
        "item": {
          "id": "acb53c5b-10d9-45e4-ad29-1e4ff7dbdb65",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7cf8a62e-b2cb-4cfb-b2be-997d6acdca04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df300871-786b-49bd-bc02-275aede89f50",
        "cursor": {
          "ref": "624b1ee2-bcb6-4a91-a2a0-5a773795557f",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "93a70539-6564-4e0e-b8ab-144198baf479"
        },
        "item": {
          "id": "df300871-786b-49bd-bc02-275aede89f50",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5064be3f-5de1-4e2d-9036-3e2c08bed07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16000e0-330f-42a6-a02c-f9f7b2888af9",
        "cursor": {
          "ref": "3deaa5d0-c8dc-4707-83af-c68f1ec0692f",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b919b805-0e39-47be-90bc-b61ea2a62910"
        },
        "item": {
          "id": "c16000e0-330f-42a6-a02c-f9f7b2888af9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c13babac-e462-4fae-b8ed-bdd8b9396d88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677079fa-e6e3-4bc3-921d-59853b494f3e",
        "cursor": {
          "ref": "a619c752-7f78-40aa-b9d1-4f39bd7cd75e",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "afd0deff-b68c-41e7-8312-99d72befcbb1"
        },
        "item": {
          "id": "677079fa-e6e3-4bc3-921d-59853b494f3e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b7c1859c-6b8d-4cda-baba-054a5fe0286f",
          "status": "Created",
          "code": 201,
          "responseTime": 1604,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d17404a-8bf7-4b9c-93de-19b2050c578b",
        "cursor": {
          "ref": "4a5449ec-011e-4c06-b293-75c65d030b89",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "602c2cec-d1eb-4632-91b7-e3f02e6abd38"
        },
        "item": {
          "id": "5d17404a-8bf7-4b9c-93de-19b2050c578b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0fac46fe-45a6-4d7a-af9a-cdcdbd2c82df",
          "status": "Created",
          "code": 201,
          "responseTime": 1043,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b048085-c3bc-48e3-8fad-a53ea87ac168",
        "cursor": {
          "ref": "048373f9-bf55-42ac-aa79-e3dff3265f76",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "654a2e95-e65a-44e2-826d-d49c7de41436"
        },
        "item": {
          "id": "7b048085-c3bc-48e3-8fad-a53ea87ac168",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a2d22d06-a437-4dd9-9e2b-305a66ea3bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 1030,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "254fb45b-353f-4d83-a834-dd0bd365989a",
        "cursor": {
          "ref": "867ddea6-1d71-4496-826d-a2b96e42c5da",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "822e4288-7f14-4ca9-b073-07bd44b0edc4"
        },
        "item": {
          "id": "254fb45b-353f-4d83-a834-dd0bd365989a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6d967800-593f-4ba3-8a93-cfb514b592b7",
          "status": "Created",
          "code": 201,
          "responseTime": 1069,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1ef835-fee4-4e54-b582-500bb889b673",
        "cursor": {
          "ref": "8309f14b-2c39-4316-b52e-7a607b3bac18",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5bbc783c-bcbf-4846-9c48-0597cf268d36"
        },
        "item": {
          "id": "ec1ef835-fee4-4e54-b582-500bb889b673",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bbf5c2a8-1550-40f5-9b1f-203eecb91191",
          "status": "Created",
          "code": 201,
          "responseTime": 1101,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6d8e2b-8004-4c73-9dfe-334aec555891",
        "cursor": {
          "ref": "06e981fa-485c-4256-8a54-e206769a0e89",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ce450e9c-11c5-478d-b747-3fb420daef7e"
        },
        "item": {
          "id": "2c6d8e2b-8004-4c73-9dfe-334aec555891",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b8287da5-f0bf-4420-a79b-7769051c5dba",
          "status": "Created",
          "code": 201,
          "responseTime": 1107,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a865d64d-85a3-41fe-9153-78f9180336d2",
        "cursor": {
          "ref": "8e6d6fbe-0b25-479b-8d80-9d1063a6cb3c",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b008eb54-0cb1-463b-be7e-54fdf1c6ae09"
        },
        "item": {
          "id": "a865d64d-85a3-41fe-9153-78f9180336d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cc3eabf9-3b7d-44a1-889f-256d4982192b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87853bf5-83f1-450e-802d-6b755608546d",
        "cursor": {
          "ref": "b9b8fdd3-c2ca-4209-be7c-7c609c7ed2d2",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07fdc05a-4de3-4287-964f-54417e687582"
        },
        "item": {
          "id": "87853bf5-83f1-450e-802d-6b755608546d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c9159f83-4a0f-4b8a-a433-b080e6d98992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30710c03-18b4-479f-b86f-40840afffa59",
        "cursor": {
          "ref": "8c90d5e1-e557-478f-84ad-c4692d31c91b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1ad2558d-6190-41e6-bafb-4b72bc33205f"
        },
        "item": {
          "id": "30710c03-18b4-479f-b86f-40840afffa59",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2984fc9-1753-4d07-939d-0fae213d0a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4b682a-c9c9-4059-8e94-2ab5271288b8",
        "cursor": {
          "ref": "e2dd4224-7bf1-46eb-b79c-c57f6e7b1eca",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b81f811-84f2-45ca-9138-3aedf4c18902"
        },
        "item": {
          "id": "da4b682a-c9c9-4059-8e94-2ab5271288b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cb2e4b6f-4bc7-4b73-be02-5d5cc0d86d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d2f53a-ef96-464e-be3b-1883c032bd9a",
        "cursor": {
          "ref": "5b5c0464-86c7-4a5a-8de3-f8b79b8ced1b",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b4f1d6ce-d808-460f-afa6-b75a02d01cb9"
        },
        "item": {
          "id": "c9d2f53a-ef96-464e-be3b-1883c032bd9a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c84b731c-d20f-4a49-adf7-782e72ec9e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d1411d-b612-4f62-bcc7-27b6dea78fff",
        "cursor": {
          "ref": "2ba4ed0f-672d-47ac-b925-dcbf96dcbe52",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "94538802-d1a3-41fd-bd40-7887cebc2891"
        },
        "item": {
          "id": "18d1411d-b612-4f62-bcc7-27b6dea78fff",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "992dcb8d-6f36-40be-bc41-b536c3d995ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae924fb-ca65-4b52-b401-e6f3d96f8182",
        "cursor": {
          "ref": "436383cc-61dd-4305-a944-13e17cbbd237",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1caa2fcf-8d7f-4ae2-88e1-bd806cd91e09"
        },
        "item": {
          "id": "5ae924fb-ca65-4b52-b401-e6f3d96f8182",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "485bad29-8e80-48a4-aac3-c91bb29bdebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bc77b5-2ac7-4819-907d-74b79cc1d689",
        "cursor": {
          "ref": "7ee963c7-aa2d-4e06-9c55-48fb69710ead",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "97ca470f-f22c-493a-b453-f27359eea3d4"
        },
        "item": {
          "id": "e8bc77b5-2ac7-4819-907d-74b79cc1d689",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3cc11629-5145-48fa-9d02-97df9f0d6fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450795fe-6536-45ac-bb10-8a956b8451fb",
        "cursor": {
          "ref": "b148d7b6-4173-42bd-b96c-2b1047deec5b",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1fba8c11-a7d8-44fd-8d49-a1989c39807c"
        },
        "item": {
          "id": "450795fe-6536-45ac-bb10-8a956b8451fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f37c653a-847c-474e-bcdd-26d8748703f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e1ff45-ecab-4103-9012-22018dee78bd",
        "cursor": {
          "ref": "fca8c1b0-f923-43d1-ae2b-7ef52b2687d0",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ba5a94d0-722e-4895-bc94-d9fcbfdc4363"
        },
        "item": {
          "id": "b6e1ff45-ecab-4103-9012-22018dee78bd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b0236715-e25a-4927-9358-e28948327963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f619cbc0-c749-45a1-8b43-afa319d332d4",
        "cursor": {
          "ref": "51ccc410-f914-4110-b2eb-83323b061845",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c1651c6e-5e3c-46ef-b3a3-1b4c20421bfc"
        },
        "item": {
          "id": "f619cbc0-c749-45a1-8b43-afa319d332d4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c9abf1bb-d606-4e7b-bf8e-2a417a0fb98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95642c2-bcf5-44c5-9146-c80ee508014f",
        "cursor": {
          "ref": "3a5c275b-5684-4d53-89cb-1f56297122e3",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "eb604b66-4419-42dd-8592-645ec701154f"
        },
        "item": {
          "id": "f95642c2-bcf5-44c5-9146-c80ee508014f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dba1c885-1f0d-4db9-b175-1601f006e332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330fab63-8630-4690-8da6-33681cb78877",
        "cursor": {
          "ref": "cc6a163c-ab31-4fb9-ac08-adb34851389f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "20ca29c7-fff7-45af-834e-f5e1e0e4589a"
        },
        "item": {
          "id": "330fab63-8630-4690-8da6-33681cb78877",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9302bf71-8a2c-4d6f-8d1d-2968d8d02fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848dc7cd-836b-407a-abe3-7ba6579870f8",
        "cursor": {
          "ref": "4b2afe79-1be4-4248-94cc-9d71d5bcc5c2",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "07acaa31-df49-47f9-b5c7-0082e9c38113"
        },
        "item": {
          "id": "848dc7cd-836b-407a-abe3-7ba6579870f8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0666faab-3a5a-4565-a822-86e3c9da37c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee01665-bd97-40ab-bd4e-487008e293d7",
        "cursor": {
          "ref": "b351f2df-b119-436f-9891-3f20a1175041",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "75c2a7be-c048-4217-8a2e-ed5349b9eff0"
        },
        "item": {
          "id": "4ee01665-bd97-40ab-bd4e-487008e293d7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "866a7f08-b35a-48c1-853c-7f9da763ea21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9f267f-5e14-4a09-aa11-41d2293707f4",
        "cursor": {
          "ref": "d5283b3b-62bb-48fd-8217-bed75d0a8e17",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c7a0f3de-5093-431a-809f-ac9cd72281e3"
        },
        "item": {
          "id": "8b9f267f-5e14-4a09-aa11-41d2293707f4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "095a525b-d906-488a-8e7c-812fe795073b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a027fa5d-2ff3-40be-83bb-3a55ba534f85",
        "cursor": {
          "ref": "4b73dbc7-8888-4a3a-aa97-ad2429d298c6",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ad29fee2-6abf-41f0-84c8-b1872313dc4d"
        },
        "item": {
          "id": "a027fa5d-2ff3-40be-83bb-3a55ba534f85",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f2c59c16-72f6-4fe3-845b-aceb87f81f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0456f9b2-07ab-482f-8e53-d1fc6de33979",
        "cursor": {
          "ref": "a9e40ae2-0e69-4935-ac87-963209ed3514",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c5ae81a0-df98-4557-8fc3-5872418a6aca"
        },
        "item": {
          "id": "0456f9b2-07ab-482f-8e53-d1fc6de33979",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7d69277-4cc0-4e31-95ef-8320a3e08f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cb04b3-5e18-4d49-9d9a-a4512d19d0f0",
        "cursor": {
          "ref": "21682b7c-6855-4464-954e-3251fd725221",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0e4378c8-16fc-492e-a188-e10491e9c16a"
        },
        "item": {
          "id": "d8cb04b3-5e18-4d49-9d9a-a4512d19d0f0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3eaf8754-43e7-4551-920b-252c1f054f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8930c80-e26b-4652-b390-8af70bb6ff8c",
        "cursor": {
          "ref": "14da45b3-1856-408a-9fa0-6605049a5f46",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cb284212-460c-4db8-b403-e98c0979d82a"
        },
        "item": {
          "id": "a8930c80-e26b-4652-b390-8af70bb6ff8c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "26e16ec4-d24d-4583-bc0b-83add5ddcb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a64c85-33c1-4c05-ad3e-ffeff8fa432e",
        "cursor": {
          "ref": "3d43d03e-7c6e-4c04-b247-cacede69a373",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "33a5eb2c-8b9b-4d37-9928-7a1d12bb1ccc"
        },
        "item": {
          "id": "e6a64c85-33c1-4c05-ad3e-ffeff8fa432e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5e14efd0-4322-44d5-8eaf-e05e5a7a7f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e394a50-72c8-4e74-8b18-d4d9d886c155",
        "cursor": {
          "ref": "58651c3b-aa23-4416-898c-49c470fa585f",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3d353a67-b958-4a17-8a13-f4f4c77e1147"
        },
        "item": {
          "id": "4e394a50-72c8-4e74-8b18-d4d9d886c155",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f4e52fc7-a39f-4374-ae39-09744293c4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d986ef98-806b-45e6-a629-a57f93764e52",
        "cursor": {
          "ref": "c30f8629-6a5f-4cbe-95e8-c18849c2da96",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9db4b82f-d201-4c3a-b464-68de2aa8b265"
        },
        "item": {
          "id": "d986ef98-806b-45e6-a629-a57f93764e52",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6cb87186-8e34-4ea9-af1f-b0e4eb8d8430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321e3007-e5fe-418d-bf6f-f0d567464f0c",
        "cursor": {
          "ref": "6749535d-5fcd-4a16-afad-5eb46b23f236",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "194ad338-763f-4e7d-a92c-9283d9093deb"
        },
        "item": {
          "id": "321e3007-e5fe-418d-bf6f-f0d567464f0c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "783b1799-1883-4541-a32d-5c1919105dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9ad46d-ca21-4ba6-8f59-76460192d3de",
        "cursor": {
          "ref": "9fe791bd-25da-45b8-8b40-7c15ef531228",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "44288082-a389-4689-9c1e-bd66ad2c7c64"
        },
        "item": {
          "id": "8e9ad46d-ca21-4ba6-8f59-76460192d3de",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c940ce23-e413-41dc-8e44-f3dcea30dba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c4d742-fac8-4221-823d-5862870431b0",
        "cursor": {
          "ref": "b2746076-ca34-4138-a728-6d75d3c10cb5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ddbc8fd0-7132-4171-bcc5-0ac929c2e4a5"
        },
        "item": {
          "id": "c1c4d742-fac8-4221-823d-5862870431b0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "30443aea-995b-4fdb-b324-68ff84c55cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db176b24-482f-4a2c-86ae-0c369670bdab",
        "cursor": {
          "ref": "529bd041-0bd1-4bc2-aa79-67f375583289",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fc4981b7-2e2a-46e1-8775-0782b8c25ccb"
        },
        "item": {
          "id": "db176b24-482f-4a2c-86ae-0c369670bdab",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "25672109-2ebd-4a96-9e5b-bcc4037f745a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2d840c-5cc7-4102-8b65-77baeb1603ac",
        "cursor": {
          "ref": "30f0712d-2627-4acf-8b20-faa13690dd05",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0e7c449e-f9cf-497d-a30b-17b0963c32ef"
        },
        "item": {
          "id": "ef2d840c-5cc7-4102-8b65-77baeb1603ac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e19878e6-c468-4a72-853a-35032321ec81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cf7d14-ba3b-4adc-bd27-618b7140ac19",
        "cursor": {
          "ref": "2a81f610-23fd-4a42-88c9-fbe1fa25e3fc",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "da0d9c76-581c-4260-b461-147be7bad6c0"
        },
        "item": {
          "id": "00cf7d14-ba3b-4adc-bd27-618b7140ac19",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dabfcc7b-95af-48cc-aa16-6e0f7f7b625c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba85376f-5633-4714-9eb1-ba5952697b72",
        "cursor": {
          "ref": "253de909-0a05-4c7d-a80b-c1f86a22e20a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4746c573-10fb-4a1c-8a37-4c8777d5a2f4"
        },
        "item": {
          "id": "ba85376f-5633-4714-9eb1-ba5952697b72",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "00add9e8-7a85-4950-b91a-005bc2015971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00cab40-4716-4853-8d22-471c4b8701c9",
        "cursor": {
          "ref": "719bfacc-8168-4efb-8bab-158f6fe09765",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2e3d8132-a342-4037-9a38-65871b089f81"
        },
        "item": {
          "id": "c00cab40-4716-4853-8d22-471c4b8701c9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b18f106a-22a0-41cc-bf5e-e4418476a669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90d7959-0ce4-4d03-ac36-bef1e5101e80",
        "cursor": {
          "ref": "87183d2e-5226-4b7c-a59b-02708373e5df",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c2e11bca-3928-4ee1-a670-02d776b33848"
        },
        "item": {
          "id": "d90d7959-0ce4-4d03-ac36-bef1e5101e80",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1db26449-8992-4393-a9d2-4ef159849d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8811a91-9638-4fc4-9dd3-bfc50d77cfe4",
        "cursor": {
          "ref": "a11e3595-de0b-41e4-93d4-1b513330fa15",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5acbf413-a427-4ccc-b5f0-94a31e5688c4"
        },
        "item": {
          "id": "f8811a91-9638-4fc4-9dd3-bfc50d77cfe4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1faf9183-2e53-4c27-8ec1-90a0fce23999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d587e93c-1835-4476-a1e7-cc01d2099b38",
        "cursor": {
          "ref": "38d62c0d-7e41-4f11-8a0f-f798fcd5ea5b",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1492295-2633-4bd7-8935-db90630038c1"
        },
        "item": {
          "id": "d587e93c-1835-4476-a1e7-cc01d2099b38",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "81bab7f0-9c3c-4c1e-8f84-cf2ff410ae35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d92f29a-1805-4f48-a25d-ddfe6509f26f",
        "cursor": {
          "ref": "9cedf91f-d7e5-47a7-9254-a2952d3b8f83",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4b32b3b6-3b3f-4a42-bf1b-e4d8f2992715"
        },
        "item": {
          "id": "8d92f29a-1805-4f48-a25d-ddfe6509f26f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e8e56fff-c618-4e66-a1f2-4254bf0be0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0146067c-0ace-475c-b64c-3903268c9750",
        "cursor": {
          "ref": "578941e4-3d7c-4362-b686-4e636f633a8b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7bf76c5e-f04d-4484-94b7-77ae1339690e"
        },
        "item": {
          "id": "0146067c-0ace-475c-b64c-3903268c9750",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b40c1cc2-67cf-493e-8dde-a1a4efbe3ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e448aebf-13be-4eca-bfa8-fcd3e928ebb2",
        "cursor": {
          "ref": "65d7cc23-d503-410c-90bb-10cc64fb4741",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8b7ec26d-4a20-48d3-8ac1-063e0af61ab1"
        },
        "item": {
          "id": "e448aebf-13be-4eca-bfa8-fcd3e928ebb2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8a63bc89-bcd9-45b0-8333-17c5c8043140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a357875-44c5-4992-b476-e4fdccf9cfed",
        "cursor": {
          "ref": "b8ac9f6c-4f97-419b-b508-925c09ed8865",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b1c639f0-d31b-4200-a6a5-d4003f491f33"
        },
        "item": {
          "id": "8a357875-44c5-4992-b476-e4fdccf9cfed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a548f172-c9eb-4a7b-9160-dab830592f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ee96e2-917a-4e28-a584-39161629a41c",
        "cursor": {
          "ref": "a838daf5-1bea-4f5d-a052-4ffecdc88e3a",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f469ee65-a3c3-4533-83cc-55836a82dc4a"
        },
        "item": {
          "id": "00ee96e2-917a-4e28-a584-39161629a41c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "27e63493-0aa1-42ca-9dcb-bbd70ba1de60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72792787-9327-47fa-ac85-bdd190a1d59b",
        "cursor": {
          "ref": "1b5fcc1d-0a27-44a2-9df3-432f70805718",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ec31b592-4f88-4ca5-bd29-88a5ac73d7e6"
        },
        "item": {
          "id": "72792787-9327-47fa-ac85-bdd190a1d59b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cbcef1eb-83ee-4f64-819c-93ef30acccfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbba225-5055-4323-9f68-0724ddf848b6",
        "cursor": {
          "ref": "2aa98afc-c390-48df-b405-7901e8b533f6",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e6f918e9-b2de-4ca7-8413-65446bcf051f"
        },
        "item": {
          "id": "7cbba225-5055-4323-9f68-0724ddf848b6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "05b0606a-5fc5-4c43-8419-de7b0b69daee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca14cbe9-707e-40dc-bcdb-1f61fdfa4736",
        "cursor": {
          "ref": "7a10cdd8-f4a0-483e-82bb-0ca13244c49e",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "675f0e7b-20de-4561-82dc-743c5f45876e"
        },
        "item": {
          "id": "ca14cbe9-707e-40dc-bcdb-1f61fdfa4736",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "010c9487-4805-4ad5-a6c3-43480baba263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875886ca-e209-435f-b999-d7d0ff9c003c",
        "cursor": {
          "ref": "f07b6666-5b85-4cf5-9553-43063e3abed4",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dddc469b-628d-4194-aac4-faeafe98c953"
        },
        "item": {
          "id": "875886ca-e209-435f-b999-d7d0ff9c003c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "53f839b0-46c8-401c-8344-c0b12c7f3e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2deb4899-ec13-4f28-bd98-9d78e9f04bfb",
        "cursor": {
          "ref": "c855cc79-1e82-4164-a6fc-6f6bd6c36c46",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1b9a2a16-27e4-4e1b-9ea7-9bc8f55086bf"
        },
        "item": {
          "id": "2deb4899-ec13-4f28-bd98-9d78e9f04bfb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "020b3836-6007-4037-a393-6f8b9f31a73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1853da9-0c67-4d7f-9b4d-7d663099b49c",
        "cursor": {
          "ref": "25a75d95-f5d9-4a5a-915d-7d6b9e2577c2",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "798b86c1-6300-4b79-819b-5547a8e1a35d"
        },
        "item": {
          "id": "e1853da9-0c67-4d7f-9b4d-7d663099b49c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "034fbc96-16c4-47e3-a7d8-5cc6ff37ee49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a22ae1-5c14-4590-90ca-85b301fa3d1a",
        "cursor": {
          "ref": "e5139f1d-0e3a-4779-8ae8-3b562f7e0ba8",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ca37b87d-58e0-4197-b8b6-f812cf52776d"
        },
        "item": {
          "id": "36a22ae1-5c14-4590-90ca-85b301fa3d1a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "176aab0b-c6e2-44dc-adda-7566f96e76a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ddf83-83f2-41cf-ae56-b002822cb9ee",
        "cursor": {
          "ref": "886cbd4d-f47c-46a5-b7c2-bc8c5be66ab0",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "15b09c30-51ac-44a1-9981-3fe754f447cc"
        },
        "item": {
          "id": "2d4ddf83-83f2-41cf-ae56-b002822cb9ee",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b56e6168-a0ba-4437-9f7e-0c6c9d4ce463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da274b51-16d7-4050-a5fc-62174925b1d6",
        "cursor": {
          "ref": "f0101bb2-4527-4bef-8b5b-7374ae32c138",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5892cf19-ccd0-46ad-80a7-6a5477af17dd"
        },
        "item": {
          "id": "da274b51-16d7-4050-a5fc-62174925b1d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6b3c4c21-6531-4baa-8789-47f91214f6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135d39b2-a3b0-4e98-a773-65292d5e3197",
        "cursor": {
          "ref": "3ad65807-9257-4b38-aa62-ca8ef78ad8e5",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ebd7e8d8-dd80-4e5f-88bb-d8d61f3609c5"
        },
        "item": {
          "id": "135d39b2-a3b0-4e98-a773-65292d5e3197",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7052d715-56d9-4400-9437-b9564bdc5c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc16842-6894-45fd-986d-a66705a66737",
        "cursor": {
          "ref": "65abc0e0-ccc3-4b77-9adc-7d7d094cae62",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8fa932b7-38ac-4a26-801a-8d5f317ab921"
        },
        "item": {
          "id": "8dc16842-6894-45fd-986d-a66705a66737",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "89f2430f-3617-4cbd-a8b8-330ebe357b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9989ed78-30c7-4444-9d9f-36965abcb33b",
        "cursor": {
          "ref": "03617a74-b54f-4399-a5bf-b7e2b9956db6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cce6d427-a4fb-414d-bf84-5229aab36b47"
        },
        "item": {
          "id": "9989ed78-30c7-4444-9d9f-36965abcb33b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0155fe46-a23d-4d38-a8c5-29c48ed7c296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110c7839-92cc-44bb-97e9-421d2544cd09",
        "cursor": {
          "ref": "ea9f903b-be71-4e5a-af82-08150ae614c3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a5e558d2-792d-4f87-9248-632be46460ca"
        },
        "item": {
          "id": "110c7839-92cc-44bb-97e9-421d2544cd09",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "88be014d-8e57-41a5-be36-a877482b6936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8add9287-2957-4aa5-a1e3-64b86a4a3b36",
        "cursor": {
          "ref": "22260cc2-7f61-4442-ad2a-4ceac6659004",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "de527dfc-a0d7-4a88-8bf0-26595a838c96"
        },
        "item": {
          "id": "8add9287-2957-4aa5-a1e3-64b86a4a3b36",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d0c5537f-167a-4680-8025-2685a44f18b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231f488e-2f6d-4842-ae93-6f81d1a66a99",
        "cursor": {
          "ref": "b309641e-f5fa-4da8-9df8-445168d19055",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5935baab-5135-43f8-b1f0-2d2f887f1f57"
        },
        "item": {
          "id": "231f488e-2f6d-4842-ae93-6f81d1a66a99",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "28edad35-1a27-4cd4-b130-89a19378c41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313f87de-1145-4165-8639-a1e1dcba6f4f",
        "cursor": {
          "ref": "e135125d-067b-4579-a74c-be8d32e20050",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a0965c45-92e5-4efb-a3d9-0ba87c0998df"
        },
        "item": {
          "id": "313f87de-1145-4165-8639-a1e1dcba6f4f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "99eaba5d-298b-4cae-987e-6c5fa5435c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056e20c4-de47-48d8-9214-023f6321ca48",
        "cursor": {
          "ref": "472df7b2-b9e8-4070-bac2-01c828b1bd43",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d44d785-10e8-4028-acb5-799b91a34722"
        },
        "item": {
          "id": "056e20c4-de47-48d8-9214-023f6321ca48",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "556f1d33-ee78-4872-9e6a-23d1e35d6c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4186b971-ca6d-4b91-a208-236b7b6c6efc",
        "cursor": {
          "ref": "e6bcd39b-e757-4dca-86a1-bdd28734da16",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "27661ca6-399f-4eec-aae7-37195fc4d9a1"
        },
        "item": {
          "id": "4186b971-ca6d-4b91-a208-236b7b6c6efc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0e0e74ba-63fc-4c22-908b-04909d290897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52f9c26-3399-488a-b69e-70c249b09979",
        "cursor": {
          "ref": "41aae79e-67aa-4178-9376-288536e19bfa",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9a4452d9-16da-4f1a-b58f-632ca80cfc09"
        },
        "item": {
          "id": "c52f9c26-3399-488a-b69e-70c249b09979",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a99c19d5-3855-4737-8b59-f42d45a259dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f510d4d4-19af-42e6-88e0-6e297fc5475e",
        "cursor": {
          "ref": "5ad239c7-37de-4f7e-815d-60e9aee460c9",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f05c0812-412d-43b9-9b34-33d8f3847f41"
        },
        "item": {
          "id": "f510d4d4-19af-42e6-88e0-6e297fc5475e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f22b5969-d9e4-4490-b19b-18142e9a46e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a431091-8e39-4af7-bd47-0fc5deea3f73",
        "cursor": {
          "ref": "b2f2dfd7-781f-405f-8eac-d8e02bd7a914",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cd317e12-b6f4-4f07-aac0-fbf1d54212bf"
        },
        "item": {
          "id": "0a431091-8e39-4af7-bd47-0fc5deea3f73",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eb7a4f34-d964-42d7-836e-b08124fbcb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc74669-f849-4d3e-9725-81c1a18c1333",
        "cursor": {
          "ref": "0d55122b-b20f-4781-9262-64c5251554d2",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "96099531-08fa-4dc9-95a5-6758b7558085"
        },
        "item": {
          "id": "0dc74669-f849-4d3e-9725-81c1a18c1333",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9e200cc2-bcbf-4339-aa5f-d13b7b6a725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b792e26-89b5-4c0a-8143-c00bf37cabbe",
        "cursor": {
          "ref": "1c2c15ff-7db2-4d7c-a5c1-13bff98c2f91",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c05e2cc7-c045-439c-a98f-595b9d6b8af1"
        },
        "item": {
          "id": "5b792e26-89b5-4c0a-8143-c00bf37cabbe",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ef3da267-6413-4429-bd1f-2dc8d70426f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ff5233-49b4-4c34-9021-ac8318774d9f",
        "cursor": {
          "ref": "fa12c1c8-f10b-474b-a942-006b22234d1a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d48c7e40-e637-4985-8b4e-c094c318712c"
        },
        "item": {
          "id": "c3ff5233-49b4-4c34-9021-ac8318774d9f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57a6c7dc-95da-4df4-8ac8-fbb0706c8aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db7ca7b-375a-417d-89fb-3b723b065321",
        "cursor": {
          "ref": "0e5e40e3-c9dc-4ee7-8a5d-58aeee97fb5f",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9283e7dd-3623-41cb-8574-72f2bd909188"
        },
        "item": {
          "id": "7db7ca7b-375a-417d-89fb-3b723b065321",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fdd44a60-1a55-4481-83d7-a78a5ac24361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d08449-0d9c-4ef5-b8d6-89532ed32072",
        "cursor": {
          "ref": "0da5ceb2-5805-4886-a3f2-bb66c9e52813",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7bf9cf29-8352-4c8b-b9cc-a3fd1f6c7c58"
        },
        "item": {
          "id": "c5d08449-0d9c-4ef5-b8d6-89532ed32072",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fc8ee181-01a3-4bca-a2bb-ddc355687504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2190609d-96ed-4f4e-80ed-eb4fe167194d",
        "cursor": {
          "ref": "afab2cb4-8c55-408e-a1b2-ab07f25990a9",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d061e643-952c-475d-9a4b-840e4a4e2cdb"
        },
        "item": {
          "id": "2190609d-96ed-4f4e-80ed-eb4fe167194d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8c7f71a4-53ed-4ac4-80ef-9dc7480a5064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77ac100-f6d2-4715-979c-534153e06c18",
        "cursor": {
          "ref": "d8a0a20c-a7e4-4b15-8d58-1d341b7f48b0",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "96099954-65ce-442c-95b2-37cc215c1f22"
        },
        "item": {
          "id": "e77ac100-f6d2-4715-979c-534153e06c18",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c077fc90-db9c-4137-b671-61f35f625cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c165e6a-5d9c-4282-8e62-3c8d3560de66",
        "cursor": {
          "ref": "40962027-5692-4430-bf16-e09291cae9e6",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fe5367c9-6bd2-4512-a448-b2e6265e92ba"
        },
        "item": {
          "id": "8c165e6a-5d9c-4282-8e62-3c8d3560de66",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "bb3f6ba5-52e5-4f67-a6a9-f9b26fbf4d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381428d1-9805-4ca2-9b39-8ce3b3efb3a0",
        "cursor": {
          "ref": "3a6012ae-e41b-4eb9-8bcf-2692c6fa046a",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5afccc05-f8c5-40a4-bba8-ca505fcb5178"
        },
        "item": {
          "id": "381428d1-9805-4ca2-9b39-8ce3b3efb3a0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5fc49571-e938-4b88-9ea5-b83b30b0baa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d66755a-8ac7-424a-ba00-5801b051d294",
        "cursor": {
          "ref": "544253e0-4015-4975-b821-a0f41b9d68bb",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1a139b81-8c39-4973-977a-80909f5e28b6"
        },
        "item": {
          "id": "5d66755a-8ac7-424a-ba00-5801b051d294",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5db49789-aa0f-4f94-bedc-22eb8fdc5681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307e0db8-2721-4f46-8bf6-ad89607e8584",
        "cursor": {
          "ref": "035c5e64-611e-456d-806c-2200467ba891",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bdf04919-1b98-40c0-8cbc-c4d59f675380"
        },
        "item": {
          "id": "307e0db8-2721-4f46-8bf6-ad89607e8584",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "da2e61ec-e45d-416c-810a-393ef7c9e3c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35887206-8fb6-46de-bd1a-525ee84916bc",
        "cursor": {
          "ref": "df7cb9a7-a27e-4144-9855-dacec04efdf8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4431d70e-d14a-4fad-8de2-12f4cf971afc"
        },
        "item": {
          "id": "35887206-8fb6-46de-bd1a-525ee84916bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d04daece-6805-4778-9c1c-5de9c8d5afad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba40f204-5cfc-433b-87e5-493f4a393bff",
        "cursor": {
          "ref": "e366d46f-8748-4616-832d-ade0410822ce",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7e4d2294-8c97-4de9-878c-1391816c4dc3"
        },
        "item": {
          "id": "ba40f204-5cfc-433b-87e5-493f4a393bff",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "988905d9-1516-4e25-a02f-77bbf70716f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c12195c-0b2a-42ab-8347-a294e60a195b",
        "cursor": {
          "ref": "8553a1d6-c42c-475a-91a4-3eb765e38fe0",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bc06ad39-8f3e-4dd1-a02e-2dc6c699c887"
        },
        "item": {
          "id": "2c12195c-0b2a-42ab-8347-a294e60a195b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6e896243-944d-452a-89dc-70c574134737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e4326c-179f-4fd1-a081-545550445f7b",
        "cursor": {
          "ref": "c27a935f-c80e-4d7d-b752-39883973a315",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "983d357b-4176-4f67-8857-7a6b4fa22ad9"
        },
        "item": {
          "id": "b3e4326c-179f-4fd1-a081-545550445f7b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "96b30226-53ad-4b7f-a151-3093f9160816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe739ef8-f71f-47af-95b9-2d9c42a9561b",
        "cursor": {
          "ref": "24b8a7f8-e3af-4a99-afbf-f9a65513f241",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb2483e4-e2fb-417c-9b4d-924d682999de"
        },
        "item": {
          "id": "fe739ef8-f71f-47af-95b9-2d9c42a9561b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "83541438-517c-42fe-9542-9b029c570264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b504034-243d-4c80-b98e-f9a5d0576517",
        "cursor": {
          "ref": "f26ba6f7-343a-489d-8e30-1f713d3709a5",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "adea1de0-e353-4204-92b3-0dd12a280c93"
        },
        "item": {
          "id": "8b504034-243d-4c80-b98e-f9a5d0576517",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e81675e6-c6d8-4af1-ab55-dcf0bb04989f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9847610e-efb2-4aaa-8a9b-3cd07719e798",
        "cursor": {
          "ref": "534875f6-554c-4f12-a841-b414ce959055",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0b202b84-3749-4de8-a22c-5e05e001ecb5"
        },
        "item": {
          "id": "9847610e-efb2-4aaa-8a9b-3cd07719e798",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "823aec1f-c331-430f-b637-9f867fdef3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedb92e5-602f-4b97-ab8e-fa3b5042b5c7",
        "cursor": {
          "ref": "7fbfeaa4-6beb-4153-8a83-c9486a839929",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cb2e8752-f264-40b8-928c-83ca6f881442"
        },
        "item": {
          "id": "fedb92e5-602f-4b97-ab8e-fa3b5042b5c7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "875e40dc-b301-4517-b2d3-f095a9566bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4f4759-98ec-4f89-b835-621b7a0dc780",
        "cursor": {
          "ref": "3055170c-77fe-491f-a710-c45e643f6f9d",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "61ea341b-0c6e-44d6-beee-e06ecc122591"
        },
        "item": {
          "id": "5e4f4759-98ec-4f89-b835-621b7a0dc780",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d522ab7c-30d7-425a-8267-150aff793bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dac2fbd-e675-4471-b334-2717411b5ccf",
        "cursor": {
          "ref": "a104e45f-e83b-41f5-94df-61dbfd9ddcdb",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e8465e72-cba1-4d63-b854-9e08df4c9ef1"
        },
        "item": {
          "id": "0dac2fbd-e675-4471-b334-2717411b5ccf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "125c9069-0609-4f60-a060-161f47b75e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8173225-86df-46d2-ae0e-bc6bdc091446",
        "cursor": {
          "ref": "f5ee6b73-ada6-462b-bf7d-c4550c79829a",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fd706d08-f47a-423c-bc8b-19b997e1e086"
        },
        "item": {
          "id": "d8173225-86df-46d2-ae0e-bc6bdc091446",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6741df7c-6069-4b36-a2a7-37e4f14ff2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db678d2-8d6b-4c24-bf79-9bedf4972b07",
        "cursor": {
          "ref": "52798af8-f552-488f-b44f-b53c76d48a58",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "395106ac-8679-4f27-ac03-80122c1722e7"
        },
        "item": {
          "id": "9db678d2-8d6b-4c24-bf79-9bedf4972b07",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "590e5e1d-b3c6-4031-9a10-76872283fe39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c76defe-d3c4-43a0-a728-5c158fa2ece8",
        "cursor": {
          "ref": "c61bb247-1587-40e4-b484-f26c254458ed",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c27e0980-674d-4d6f-802c-7e9daf44ffe8"
        },
        "item": {
          "id": "1c76defe-d3c4-43a0-a728-5c158fa2ece8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fe9d3508-8df5-4554-aa42-c8a32114cb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd7cbb4-66de-4446-9987-45143cb69f4b",
        "cursor": {
          "ref": "19199771-2389-49a9-958a-2f58e3b010da",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9099704d-d86f-40be-a68c-b2f37d8f52fa"
        },
        "item": {
          "id": "fdd7cbb4-66de-4446-9987-45143cb69f4b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "63c69d90-8886-4500-948e-76b1c83c31c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba77cc77-7c43-462d-92a2-6e58cc7334f2",
        "cursor": {
          "ref": "7d1258d4-1b5a-4d3a-aec3-b1dc398ae563",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "53e2ab32-3fb5-4afe-92cb-f518ff844a66"
        },
        "item": {
          "id": "ba77cc77-7c43-462d-92a2-6e58cc7334f2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d3e77f4e-5a1d-40a0-96bf-4c4a506e2a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8de76-a280-4600-b9a4-8d590ff6e3fc",
        "cursor": {
          "ref": "46cde8d3-56bd-44cd-9479-8e0f11df65b6",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e95765b6-507c-4a54-ad6f-a0dd195db93b"
        },
        "item": {
          "id": "78f8de76-a280-4600-b9a4-8d590ff6e3fc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c7e3aac6-1523-4377-8409-63bd3a7d7327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0d4875-c6f6-42c8-9598-20b7300b8271",
        "cursor": {
          "ref": "fafc7a8d-90ce-4db7-98ee-fadb853dea8d",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3c1048dc-1fa8-47bc-8563-0a0a90eb9399"
        },
        "item": {
          "id": "8c0d4875-c6f6-42c8-9598-20b7300b8271",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ea55af74-e3e6-4d5f-b7d2-13dc5d5d1316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe31b9a-2773-4d5a-b2c7-1e3ebb195d74",
        "cursor": {
          "ref": "c947f2ed-7ce7-4b57-adc8-32c65a3e6545",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e029d084-f15a-4722-b9ce-a8265f0fb149"
        },
        "item": {
          "id": "5fe31b9a-2773-4d5a-b2c7-1e3ebb195d74",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0310565b-4370-49f8-9483-66156629ad12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80d80c0-9d54-4be3-8579-723d444698b4",
        "cursor": {
          "ref": "56f56033-8a4b-4e52-9428-4e9ad970753b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "86287167-dd5d-4fa5-adde-4f4113fd5402"
        },
        "item": {
          "id": "a80d80c0-9d54-4be3-8579-723d444698b4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "65c1a7fe-465f-4734-90a0-f6641d6f3dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fe3c0d-6809-4dd1-a9d0-5468841361a5",
        "cursor": {
          "ref": "2f00628c-5f16-4d86-9e21-beb8ac5a1995",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cdf44978-367c-4f9b-a5f4-739148427c0d"
        },
        "item": {
          "id": "53fe3c0d-6809-4dd1-a9d0-5468841361a5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ae516454-596b-43ea-9242-8a16bf8cf443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6498e621-12d6-4f86-a5ae-0a88bef5ec80",
        "cursor": {
          "ref": "4173c426-ce8e-440c-b38a-e9e5ae703df5",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e87db780-f880-4a5c-a1ba-f553f8e50365"
        },
        "item": {
          "id": "6498e621-12d6-4f86-a5ae-0a88bef5ec80",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cfa4d871-0744-4b88-8ccc-b09d92caef94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f6d376-e0a9-4d65-abd8-79e410c6a209",
        "cursor": {
          "ref": "49fe95f3-5632-43e0-be38-3ecc6f8249bf",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8ba41748-5c51-42e1-9d01-5f9c40c136a6"
        },
        "item": {
          "id": "68f6d376-e0a9-4d65-abd8-79e410c6a209",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4b4f955d-a487-4765-bd68-2c92a104e9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a448121e-a313-495f-991c-661cbedbeca3",
        "cursor": {
          "ref": "2888a013-6fec-480a-b156-b12f7990ae0a",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "58d01d87-6aec-45a3-902d-8140bca5dd53"
        },
        "item": {
          "id": "a448121e-a313-495f-991c-661cbedbeca3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c9fc6d0-7a79-4337-a402-fad89724d069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0c29e8-19f6-4005-b493-1896bc7e2b7a",
        "cursor": {
          "ref": "a6316acb-7d7e-400b-b740-80e1417c1254",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f236da50-139a-4192-b0c2-3e35c2a3d3e5"
        },
        "item": {
          "id": "4c0c29e8-19f6-4005-b493-1896bc7e2b7a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ec078dff-f9fb-4db5-9b4c-0a35f9123a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53337780-48d6-4206-9707-365dc1197756",
        "cursor": {
          "ref": "eb0be88b-08a9-4b60-85d0-7592d23ca628",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a2709a42-2460-4853-8004-396392a7830f"
        },
        "item": {
          "id": "53337780-48d6-4206-9707-365dc1197756",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e4f4efaa-794a-46a6-b74d-c006b61cde1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c395ca-a3ff-4340-8a38-adc5d85eec3b",
        "cursor": {
          "ref": "1361d23e-2233-4b9b-94fd-0c469eb80f48",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "913c594f-93f8-40b3-8a22-bce14b0f546e"
        },
        "item": {
          "id": "42c395ca-a3ff-4340-8a38-adc5d85eec3b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ef44c3bc-d984-4536-b6ec-e17672f927f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4825d3-f65c-4757-8b85-7040c84fc5c6",
        "cursor": {
          "ref": "a7f56edb-2c9b-43cd-a4b6-b1a4adeb7012",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4544f15e-53d7-42aa-981c-bb5c54e7ecdd"
        },
        "item": {
          "id": "0a4825d3-f65c-4757-8b85-7040c84fc5c6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1bc089a2-11bc-43b0-aa82-0e51688ff523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90437db4-f160-44e1-a9f0-971bcbaf2c07",
        "cursor": {
          "ref": "7e7db730-7d8c-4a31-ad45-8c7567ffdf07",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0dde46bf-3e27-4b12-9ed9-1a397a78f585"
        },
        "item": {
          "id": "90437db4-f160-44e1-a9f0-971bcbaf2c07",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fef81e9c-2475-4761-8166-5a2870f448ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c289a5d-9f23-4b94-84e6-953232b48166",
        "cursor": {
          "ref": "563818f7-0abd-4809-8076-2f6011eb5958",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f4573e0e-b03f-4231-bdc7-290defc39470"
        },
        "item": {
          "id": "9c289a5d-9f23-4b94-84e6-953232b48166",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "14c2fe0c-5ec6-4471-a246-e7fdd80945af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae4c537-21a0-47d9-9dee-376487da8f79",
        "cursor": {
          "ref": "1cff2365-09a8-4e30-8d48-cf5539e9c4b4",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96e23cb7-7ab4-42a2-970f-6ca11e126380"
        },
        "item": {
          "id": "bae4c537-21a0-47d9-9dee-376487da8f79",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3465748b-9456-4acb-a318-d124c1b1d3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6478dbd8-2cd4-4e00-a9d0-fa104edc2d12",
        "cursor": {
          "ref": "a4b3214a-a850-43a8-9b6f-5f098e651f7c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "440fb255-d0dc-4300-8d24-b09843b8c9a2"
        },
        "item": {
          "id": "6478dbd8-2cd4-4e00-a9d0-fa104edc2d12",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bd80666c-ce3c-46ef-af34-a9aa07837c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baed14dc-8d8e-483b-b0e0-7b167b1b6e26",
        "cursor": {
          "ref": "620a9ad6-64b2-4976-a982-5e17fe3eadb9",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a5e11478-44a5-4203-9ac3-13a4a4d32450"
        },
        "item": {
          "id": "baed14dc-8d8e-483b-b0e0-7b167b1b6e26",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5bf9b5cb-1415-405d-94c8-f548b67362b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14e4dc1-f047-47db-9a92-ef283443f0f7",
        "cursor": {
          "ref": "f2a25fc5-e389-4f11-8366-8e4a75ff4a43",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7870b087-175c-4fb1-b158-7732c927b8f2"
        },
        "item": {
          "id": "c14e4dc1-f047-47db-9a92-ef283443f0f7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c4539d9f-63d8-4ec3-9c8d-2e643c2b84c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec207cf-7e60-4dc1-812d-70bed0d6b32b",
        "cursor": {
          "ref": "90882fce-440d-41cf-a6e0-3dfa99d35a94",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7a2f59e0-0539-4800-8f8c-302ebaa1c776"
        },
        "item": {
          "id": "fec207cf-7e60-4dc1-812d-70bed0d6b32b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0452e4f4-c475-419e-a0a8-7f03323d40e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465dd597-6bf5-482c-a027-49379e8a439c",
        "cursor": {
          "ref": "03adedbe-31f0-4047-bdef-f92642afb7f0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a3684627-cc74-42a9-b734-74e39e8f61b0"
        },
        "item": {
          "id": "465dd597-6bf5-482c-a027-49379e8a439c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5e8486f7-1848-40e1-b53b-e68f64d92f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09dc6a9-9a41-4509-ae04-71190f0dcd81",
        "cursor": {
          "ref": "fbcb943f-8a2f-4ee6-891e-f35aaceeef16",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "84798ed3-9559-47d4-8481-22995b885d8d"
        },
        "item": {
          "id": "b09dc6a9-9a41-4509-ae04-71190f0dcd81",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "42c7d4f6-5f9d-4b26-b028-c61d9a61868b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d9ddd1-340e-46d8-a2b5-d08fea3780bd",
        "cursor": {
          "ref": "1a0c7f2a-9e5b-47b3-8f88-292d2d9e9f33",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "79c8fa5d-1323-446e-b8c7-c1e50fce0a64"
        },
        "item": {
          "id": "77d9ddd1-340e-46d8-a2b5-d08fea3780bd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c1b94522-9f40-419a-9c6a-9f3c3eaded06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c73ea4-17d2-43e5-ba8a-72e32ec23ae3",
        "cursor": {
          "ref": "b025e250-8f13-4423-ad49-bc901bb9cbeb",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "72a3647c-d799-434c-8c6c-7dfa76a52a47"
        },
        "item": {
          "id": "29c73ea4-17d2-43e5-ba8a-72e32ec23ae3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df08d11c-e0cb-44a1-9441-5cbb40e15e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341a9e71-e0b6-406b-8a52-ac93f7574e18",
        "cursor": {
          "ref": "02f4e4bc-2fbb-4b73-88ce-9d569772f3e2",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "68e58349-329e-4750-8698-5d602cc84b73"
        },
        "item": {
          "id": "341a9e71-e0b6-406b-8a52-ac93f7574e18",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "457d3642-305a-4510-907c-3a6385047c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cad072-a381-44f8-8ff1-71ccc7dd2c35",
        "cursor": {
          "ref": "a730c811-8352-4bd1-8827-924ccc4ce1c5",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f91fcc52-0a0c-4830-a4f8-6c397be1f092"
        },
        "item": {
          "id": "31cad072-a381-44f8-8ff1-71ccc7dd2c35",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0cd405f1-8dad-4538-a825-dec06ab9f773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6223cad-3e89-40b2-81c8-d601023c0f3a",
        "cursor": {
          "ref": "11912e5d-bc67-4c81-bd5f-0d8c10106ae2",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "98a635e5-1def-401b-8e1b-56edc5f79d71"
        },
        "item": {
          "id": "d6223cad-3e89-40b2-81c8-d601023c0f3a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "502847cf-8676-4237-84e1-b1687dc336b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96135e9a-7b3d-4f1c-95cc-a7882bedaa27",
        "cursor": {
          "ref": "2c35cd9a-2e10-432d-abf4-c8904b8036ba",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "937d07b7-08df-4a88-9ed5-7b7fde8e4213"
        },
        "item": {
          "id": "96135e9a-7b3d-4f1c-95cc-a7882bedaa27",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c3dd194a-5120-4428-8b72-ea4c8650c382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea49e84b-34f1-431e-a697-05a218b4a303",
        "cursor": {
          "ref": "33a04351-6801-4cba-ad4c-813ec99bdc0c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2aa9abc8-59fe-49bb-92c9-4d7d39c46ee2"
        },
        "item": {
          "id": "ea49e84b-34f1-431e-a697-05a218b4a303",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "33601cfd-57c8-445e-bdae-1fbbc93aabd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54e99e0-68a1-47c3-8554-728e5c162429",
        "cursor": {
          "ref": "b6ee2a0f-3273-4667-ac5a-a861f5703499",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f6ffba41-217a-4e90-a609-66d8942eff35"
        },
        "item": {
          "id": "b54e99e0-68a1-47c3-8554-728e5c162429",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b543bc7a-ef2b-4cf7-80c9-ff4a8fd27f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd30b8-14c8-45cd-9bc7-2e4ed9e933d4",
        "cursor": {
          "ref": "8d0e6ab8-93f2-4874-b525-a0f44fde0825",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "babe3f83-03cb-4cbf-883d-f5571493c8e0"
        },
        "item": {
          "id": "8cfd30b8-14c8-45cd-9bc7-2e4ed9e933d4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "06cccec6-5807-482f-94c7-0097902d40a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474042d9-0ffb-4e8d-b657-aae30c5689fd",
        "cursor": {
          "ref": "30387c6b-17b8-40e3-8754-2d47c8244640",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7c55e3cc-228c-487a-ab8a-15785f7f94be"
        },
        "item": {
          "id": "474042d9-0ffb-4e8d-b657-aae30c5689fd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3890b638-98d8-476a-97bd-e2bb0360420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f5105e-f0a7-47cb-a6b4-584f80be2edc",
        "cursor": {
          "ref": "772c1713-a522-4dd3-b7ea-1c094da81bcc",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8a2157e9-4230-4f39-9b56-03a9423e7713"
        },
        "item": {
          "id": "72f5105e-f0a7-47cb-a6b4-584f80be2edc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "02e7c3f5-730e-4f83-b5f4-1d5639ba46bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3a6187-56f7-4377-bc7e-364afef7bd18",
        "cursor": {
          "ref": "07520ffc-c21f-453e-af35-8edf072e9091",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "270a96ae-a2d6-41f8-ac50-20dd7443d045"
        },
        "item": {
          "id": "4d3a6187-56f7-4377-bc7e-364afef7bd18",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6624ffb7-6a4f-45be-bfa0-783a7551605a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca757d6-fcd5-48b7-bd6b-ddd431f91292",
        "cursor": {
          "ref": "c904ebd4-820f-46f9-9a42-d0d8219b6919",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a83a2feb-0c5e-4305-acf8-6d15cba13440"
        },
        "item": {
          "id": "dca757d6-fcd5-48b7-bd6b-ddd431f91292",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9a554f66-8429-48aa-845c-4db58b892c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f35eaf-1518-49c1-b61b-df34b24f547d",
        "cursor": {
          "ref": "b99b4a6b-dc6b-4371-84a6-0b50bf458187",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4b013b11-7fb7-4f90-b1d7-8e6867c8bd7d"
        },
        "item": {
          "id": "87f35eaf-1518-49c1-b61b-df34b24f547d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7ba1f5be-3743-4e19-a0ad-9c1f6cb9945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889dca45-1a03-4912-8cdd-d9c5da156d7f",
        "cursor": {
          "ref": "bc987383-c9ec-4281-9d88-f0ce4e7615ce",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9301da84-16f0-4729-b4f4-05db5b18fe72"
        },
        "item": {
          "id": "889dca45-1a03-4912-8cdd-d9c5da156d7f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "894faf74-735a-4142-8043-f5e5ab59d30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9c962c-f882-4343-85fc-0245bffcaaf3",
        "cursor": {
          "ref": "80777b42-a420-4006-a927-cfe86a4cc2ba",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2df7c465-4a7a-492d-8fe1-1a28384cb5dd"
        },
        "item": {
          "id": "da9c962c-f882-4343-85fc-0245bffcaaf3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c3f4c595-d666-4973-8042-7d73540f990b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad11adb-fa13-46e1-b79d-96788213a6d0",
        "cursor": {
          "ref": "b65a2bb5-e12f-4988-befa-c4aa3c05cd73",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1bcef63d-8d2b-4797-aaf1-6596aade2005"
        },
        "item": {
          "id": "2ad11adb-fa13-46e1-b79d-96788213a6d0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5b08dd2d-27c4-4bb4-9dfa-73e53f2692ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba7aa0c-2f43-4364-9fc3-c8de9e3d10e1",
        "cursor": {
          "ref": "5c0fac02-0b89-4b54-aa4d-5b95af134c37",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e4f36881-95da-4f2c-9a33-ca5c6cd9cae8"
        },
        "item": {
          "id": "7ba7aa0c-2f43-4364-9fc3-c8de9e3d10e1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3b25eb3a-53f6-484d-bc08-376b4898f046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5259a619-6939-4bd6-a07f-05ec4a618941",
        "cursor": {
          "ref": "2fd9dc56-12c4-4a37-a3aa-b69cb937296d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bff02bfc-a51e-4daa-8043-76a0f48cf67f"
        },
        "item": {
          "id": "5259a619-6939-4bd6-a07f-05ec4a618941",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "94e711bf-dacf-46b7-952c-e23d0c597b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c47d08-2871-403f-898a-3ee09d95a38f",
        "cursor": {
          "ref": "bc55f207-998b-40e4-bfa3-239f59885ad3",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "249b3c02-1932-450f-accd-f9d27b8e77fc"
        },
        "item": {
          "id": "f3c47d08-2871-403f-898a-3ee09d95a38f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ac49175b-55b9-4e5c-8be2-3393ad69e4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44cad01-2fd3-440e-9ce9-3366b5cc7745",
        "cursor": {
          "ref": "fdd30ca7-a529-44b1-b13e-05d8936dbe7c",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e0774e8-8225-4980-a34f-a90d9f7744cc"
        },
        "item": {
          "id": "d44cad01-2fd3-440e-9ce9-3366b5cc7745",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "26a2a70f-ce8a-4ff9-98ac-8bb21a947194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634c21c8-09df-4d3d-ae79-4a2f941bedfe",
        "cursor": {
          "ref": "0c63007a-fa19-4f65-8cd7-58effce7b096",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "26bdadda-4be7-47ad-a6cd-7a802dd97e9f"
        },
        "item": {
          "id": "634c21c8-09df-4d3d-ae79-4a2f941bedfe",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "991e898c-0e4b-419d-b9e0-49515cb20b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bb7097-3094-4702-94cd-0864e5f18d0a",
        "cursor": {
          "ref": "d721cc44-ecd2-443a-8859-00d6202bef30",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "76500660-bddd-4990-920d-1825e2d223f4"
        },
        "item": {
          "id": "75bb7097-3094-4702-94cd-0864e5f18d0a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d9975b6a-87f5-4ab1-b32a-34ae4d0bd601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34716024-f385-4cb0-b366-101e61d1faf0",
        "cursor": {
          "ref": "422de8e4-371b-4b0b-9035-29f4fb340267",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2ab71b38-6549-4b1a-a52e-8323ca2341cd"
        },
        "item": {
          "id": "34716024-f385-4cb0-b366-101e61d1faf0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9d012d39-e264-476a-8b6e-df37f314f06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42df7a91-e681-4e51-9dd5-7233e4691da8",
        "cursor": {
          "ref": "81c38857-f4b6-4985-b51e-cb402f474790",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "149d03fd-7720-4333-876a-90220d39b085"
        },
        "item": {
          "id": "42df7a91-e681-4e51-9dd5-7233e4691da8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5695a9cb-e749-4185-aab3-6bbb0402eca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ab31a9-b371-4834-9ddd-15f370e0f405",
        "cursor": {
          "ref": "be81045d-2f82-47b5-85ad-2b13e8e0a5cc",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "78bc14d9-c31f-4456-9440-c3c39efe360d"
        },
        "item": {
          "id": "18ab31a9-b371-4834-9ddd-15f370e0f405",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cfed32c8-6926-4d2d-97a5-7d82c7f5f7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8ee491-9349-47f9-8c39-2ab739876e0b",
        "cursor": {
          "ref": "5dbd8dc8-35b9-4571-9f05-ad3549364fbb",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3c35e4d6-4d63-45d5-8143-53feffeacd02"
        },
        "item": {
          "id": "5f8ee491-9349-47f9-8c39-2ab739876e0b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ceb863fc-0ba2-43a6-b054-870ff83f8101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300ec7f8-3c2e-4524-a588-75cbbe9b87ab",
        "cursor": {
          "ref": "ff2ee3b4-c588-4ce6-9547-20a2e63ec27d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "be23116d-c331-47ca-99d9-ca17885ab76e"
        },
        "item": {
          "id": "300ec7f8-3c2e-4524-a588-75cbbe9b87ab",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ee54ff92-f84f-46d1-84d0-57bdde18f401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33891ab6-fab1-49ff-a3f7-200222a01947",
        "cursor": {
          "ref": "1d6df7a4-9d70-42ab-a178-2c2c8c0e33fc",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2757755c-dc57-44da-83e4-2fa9fc3cb2a0"
        },
        "item": {
          "id": "33891ab6-fab1-49ff-a3f7-200222a01947",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e9811bfc-862d-4f92-8fc7-e6e693f114ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41eae3e-034a-43d1-b3b9-6787fc758f22",
        "cursor": {
          "ref": "8945ff2e-9934-4e09-a77f-0fb6a8f5d278",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "05f2df98-ab94-4585-b987-42f42c1c4976"
        },
        "item": {
          "id": "d41eae3e-034a-43d1-b3b9-6787fc758f22",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "681d3593-e4c9-4fc5-b278-77d00f0bb193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692d7e1d-d686-4f08-9cc5-ac3cc1487ccc",
        "cursor": {
          "ref": "5e09a886-fadc-43c9-84e2-a8f4e24a8cfd",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4bbc0bff-6dc0-4ed0-987c-b82a53796e7c"
        },
        "item": {
          "id": "692d7e1d-d686-4f08-9cc5-ac3cc1487ccc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "06b9032e-6c80-4850-9f77-94bffdd80629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8f3ac-3996-4e81-b0f5-b823a770d35f",
        "cursor": {
          "ref": "7954c8f9-b9ab-4881-8aeb-a15647ea09fc",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d16b02fe-5dce-465f-abfd-37a6cb020d8a"
        },
        "item": {
          "id": "a5e8f3ac-3996-4e81-b0f5-b823a770d35f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "90046c92-413a-4388-b3a6-1b6eac84cdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785e1cd9-d8e2-4b30-9a78-b55d89452090",
        "cursor": {
          "ref": "3780fc85-7801-4cf1-a3b7-b1e8b9a14eb5",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4ddb0455-6771-4b5b-98e1-65b7fd143d24"
        },
        "item": {
          "id": "785e1cd9-d8e2-4b30-9a78-b55d89452090",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "35a8911e-a04d-4932-9c73-269ed8e82af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45404a36-976e-4c81-b56e-df61a20bf199",
        "cursor": {
          "ref": "e7669e7f-9189-4a1a-90a0-9d8d2063699d",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e32b36ea-f0b7-4127-a66c-021ea0cbd39a"
        },
        "item": {
          "id": "45404a36-976e-4c81-b56e-df61a20bf199",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ddf29d12-236f-46b7-82a3-68200c184159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92220ec4-53b8-4b7e-863f-b73f331d9b3b",
        "cursor": {
          "ref": "9a55002e-7cbd-45f7-8343-0658644b6dea",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b5de51aa-3ccb-448a-911e-6ad772db6b51"
        },
        "item": {
          "id": "92220ec4-53b8-4b7e-863f-b73f331d9b3b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c07edac2-684e-4763-8626-05eeb32664bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce86dacc-e301-48eb-ad86-f58affb822c1",
        "cursor": {
          "ref": "d0eb3b73-1974-47e5-8433-edf7741bd94c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bb2ca3a9-fb3b-4901-bc31-1d657b64043b"
        },
        "item": {
          "id": "ce86dacc-e301-48eb-ad86-f58affb822c1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "15fff6ef-5fb3-47e3-9d8d-b715b1303fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393599c4-f8bb-4ec2-92c5-ba93d6432900",
        "cursor": {
          "ref": "16ce131f-539c-4de7-a576-235097b04c4e",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f1e21f71-24a9-4ee6-ad1e-2fc9b537bc1e"
        },
        "item": {
          "id": "393599c4-f8bb-4ec2-92c5-ba93d6432900",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ede277c0-3e44-4ed6-80ec-ffc3de3d4980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5b43cc-11d9-44aa-a199-f5ab11368674",
        "cursor": {
          "ref": "ada1c2cc-6521-47fb-b9eb-2e0c48a8d4b6",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "076bb7af-d7f0-40ed-a6ae-23dc55f75b86"
        },
        "item": {
          "id": "ab5b43cc-11d9-44aa-a199-f5ab11368674",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2ecdf242-dedf-4aaa-b4ce-b127033c093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ce32c4-7ead-44a4-ac00-af6f875ca17c",
        "cursor": {
          "ref": "0faaf755-69c6-4f4a-9f6a-711d528bb349",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "244674f9-bf70-4f99-8263-65638ebcccad"
        },
        "item": {
          "id": "04ce32c4-7ead-44a4-ac00-af6f875ca17c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e9180b12-1d55-409f-867a-2cf6116992cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b41684-1a22-4a78-913e-3373daf22226",
        "cursor": {
          "ref": "c00eaea6-b690-43d0-a5e6-4600151912f9",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a84d3b78-db4f-4626-8040-185a3c198e5c"
        },
        "item": {
          "id": "01b41684-1a22-4a78-913e-3373daf22226",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "15eb7905-799e-4e20-bd25-56edcd8ba84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63f35ec-1f0f-4389-af88-689ca6ebe4bd",
        "cursor": {
          "ref": "6485ce4d-a3f4-4231-9195-e306419e5c50",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "58a418c4-7492-40e6-8f9f-df2740d5b06d"
        },
        "item": {
          "id": "a63f35ec-1f0f-4389-af88-689ca6ebe4bd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c4395681-bd61-45f6-920e-9f91748d19f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f87320-569f-41a9-8c1f-3f8fc1b4bb3a",
        "cursor": {
          "ref": "7c984338-6567-4e2b-96b3-b78ee8dd5ca0",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "546f321f-c11f-4ba6-94d3-9ccc1a60ce1f"
        },
        "item": {
          "id": "d3f87320-569f-41a9-8c1f-3f8fc1b4bb3a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f9b9ea30-655d-4c6a-b948-a6f834d88d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d552c1-04f4-439e-9d72-56bfbda0e274",
        "cursor": {
          "ref": "c7c0b45e-78d3-4599-843f-2d446b710881",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9f8b8cf0-9ca7-450f-bb7d-bfdfd6147611"
        },
        "item": {
          "id": "b9d552c1-04f4-439e-9d72-56bfbda0e274",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2382377b-4508-4061-b3c2-8018e05471c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c7335b-a0a3-4b2a-ac04-4970f744bd2a",
        "cursor": {
          "ref": "064d5457-ef8a-4f28-8f64-f3f263f79ee1",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2dc3017d-c078-416d-9ef9-65a7337fdb7e"
        },
        "item": {
          "id": "94c7335b-a0a3-4b2a-ac04-4970f744bd2a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1f60eab6-4535-49fc-a611-433cb4253a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63381bae-30f2-4da6-8500-d8a0c08ac818",
        "cursor": {
          "ref": "10a77b0f-3092-4155-900e-d76a977485b8",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8b9bc9c7-e0ed-48f3-a839-e2801ee25559"
        },
        "item": {
          "id": "63381bae-30f2-4da6-8500-d8a0c08ac818",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ae9efc68-4ef2-4649-bf21-3beee3828259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac48395b-97c3-40d7-ab15-16a6205a5490",
        "cursor": {
          "ref": "b5412f3b-3bdc-4c24-b9a2-1078b9ec6d7e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f267e3bb-e992-484b-b5a9-2cefe2e87655"
        },
        "item": {
          "id": "ac48395b-97c3-40d7-ab15-16a6205a5490",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c9b6bcfd-09a7-4650-81d2-9f0b76811ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4efe04-18d2-4eea-9ee2-102401f5b270",
        "cursor": {
          "ref": "b503989c-6321-49a2-a2fd-556b23c7a394",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9346cfab-8f60-4129-b563-e4eb735b6d64"
        },
        "item": {
          "id": "7d4efe04-18d2-4eea-9ee2-102401f5b270",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "932a8e23-63e7-40ea-a045-8e5ba66e36a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08b8f80-c78e-4636-875a-b5cb73235f88",
        "cursor": {
          "ref": "2dc7c9f7-5083-476a-b2e2-42341194ea01",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2433cd4b-4608-42b8-b1c3-ee3ba3df3e54"
        },
        "item": {
          "id": "b08b8f80-c78e-4636-875a-b5cb73235f88",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ae59a760-9f88-4d66-ad1a-e6df130dc27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1569aa86-3393-47b7-ba27-8024799a32b5",
        "cursor": {
          "ref": "b44055e4-c0b0-4e1b-aedc-7e401def4c2b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "647366d4-5b3e-4ca1-a3be-2c4b5c536fae"
        },
        "item": {
          "id": "1569aa86-3393-47b7-ba27-8024799a32b5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bd8473fc-71f0-4f45-8455-f4bff5d66c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a41dbf0-f37f-465d-8d30-07dda49a099a",
        "cursor": {
          "ref": "448460ce-83ed-41b8-aa92-3882a879581e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5b07b627-d1a2-43a4-b62b-80549d9a5471"
        },
        "item": {
          "id": "6a41dbf0-f37f-465d-8d30-07dda49a099a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "994514c4-454a-4a72-b272-5833e6c99b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3ba537-93ae-47de-997e-77af784c44e8",
        "cursor": {
          "ref": "675875cf-fd91-478f-b451-4357ec408f2b",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "86e5ab85-0846-424e-903d-1b8283b538bc"
        },
        "item": {
          "id": "7e3ba537-93ae-47de-997e-77af784c44e8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f82d6bfe-996b-411d-8d0c-a31025c80db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6992ae00-c9f1-4537-abf0-024f2231b3d8",
        "cursor": {
          "ref": "31d37059-8f5b-4782-b72d-087830fad75d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9413658b-be39-4056-a5e8-0329032fec10"
        },
        "item": {
          "id": "6992ae00-c9f1-4537-abf0-024f2231b3d8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3974fcc2-16e0-400b-af0f-586868d8d037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c332f7af-3075-4437-b56f-86a041acb34e",
        "cursor": {
          "ref": "fbd64e7d-1a35-4a84-a714-b4a98037a7e2",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "66d66406-f36d-4011-8d37-329c2fd95680"
        },
        "item": {
          "id": "c332f7af-3075-4437-b56f-86a041acb34e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9c9707dd-7d58-487f-a8e6-0a6e1dcc615b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c271fca-1cd9-4fad-8cb1-33aafc779c55",
        "cursor": {
          "ref": "ebe7cc23-a8ab-49b1-a669-44388dac2cdc",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c16466d3-fc81-4446-ac9f-c50d4b7c4499"
        },
        "item": {
          "id": "8c271fca-1cd9-4fad-8cb1-33aafc779c55",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8bd07e1c-3f8e-47ed-9230-ef9c89bc9540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e0d061-0daf-4be6-8d83-c3b62287ad86",
        "cursor": {
          "ref": "adb0ddf9-26de-4a2f-bc56-adf23ff85406",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6700c9d3-61cb-49a4-9438-04e92d21a16a"
        },
        "item": {
          "id": "57e0d061-0daf-4be6-8d83-c3b62287ad86",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2968c742-486c-487e-bb5c-58b7e65a85b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59084393-8ecc-4437-a6f4-dee5b1111c4c",
        "cursor": {
          "ref": "92bdd395-225a-42fd-a5e2-344b3cc7146e",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9a163c00-d226-45a8-89ab-46dff95a0e44"
        },
        "item": {
          "id": "59084393-8ecc-4437-a6f4-dee5b1111c4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b564c29c-c260-40e6-ba52-a8e8e823c672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172c4cd5-92f0-4e08-8cd1-23948e262aa2",
        "cursor": {
          "ref": "df50eefd-3070-4e5b-bc61-bd320b5230e4",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "07d66a63-4730-4bd7-b9f5-a98ece726fe7"
        },
        "item": {
          "id": "172c4cd5-92f0-4e08-8cd1-23948e262aa2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c837f822-8e2b-4824-a0e4-49436cf51f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28fa34f-04f3-4d8d-81d4-1696a59c767d",
        "cursor": {
          "ref": "0d771dd2-79fc-455b-b9b8-acd028bc4c29",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "34156441-b2c5-4f2d-80e0-005dd978973f"
        },
        "item": {
          "id": "a28fa34f-04f3-4d8d-81d4-1696a59c767d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4a4432a3-5cb6-4f8d-a8ce-9ec7bd37b9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb60826-e60c-44b6-8965-1d5fc9f71df8",
        "cursor": {
          "ref": "944154bb-4902-4fc6-9cbb-1fa68f3f8faf",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "de2c1fd0-8d26-495a-b9bf-02900846bdf0"
        },
        "item": {
          "id": "8cb60826-e60c-44b6-8965-1d5fc9f71df8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a259c1ce-2925-4798-8ebf-1eb2160cb0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b68a75-4668-46b7-9604-dcb686360910",
        "cursor": {
          "ref": "23198ff4-0a07-4312-b277-521876dbc58b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ab3adf3a-4241-46be-844e-5e8cf7ac123c"
        },
        "item": {
          "id": "84b68a75-4668-46b7-9604-dcb686360910",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7131d01d-bb93-4a7a-8227-dfe86a52a48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845c7b02-9a3b-4b50-9525-eaa381935a25",
        "cursor": {
          "ref": "3830fa80-7fb4-4f9b-9cf8-8ef6e8a126a7",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "92dee9e6-8901-4473-8b97-1a23600671ad"
        },
        "item": {
          "id": "845c7b02-9a3b-4b50-9525-eaa381935a25",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "89bfb298-bd02-4ef5-ade4-78b4c1cd622a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d88315-f3e8-46d1-b065-7735e223744b",
        "cursor": {
          "ref": "2b8359e0-63b7-437c-b3d0-cf44eb8b8add",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d472771e-a37f-4295-b0e3-1cc09c290ce3"
        },
        "item": {
          "id": "b0d88315-f3e8-46d1-b065-7735e223744b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a5d7a991-223b-40c8-a4a9-a51ae9f1c53c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9e5c5a-2fda-4c1a-bbd3-8ff4417a088c",
        "cursor": {
          "ref": "dd3df738-cd21-4d70-a610-e4c2dc64d934",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2e9ab689-ae7e-4f62-8cc5-eff0067f154a"
        },
        "item": {
          "id": "ba9e5c5a-2fda-4c1a-bbd3-8ff4417a088c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "22eda112-49b5-46dd-bcce-671307abe52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "142aa7eb-672d-4259-9909-73e2c1578e1d",
        "cursor": {
          "ref": "3317a4fe-8186-4c26-a768-3290ad2e8934",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "97363741-138f-4679-a16f-8a4672ef8541"
        },
        "item": {
          "id": "142aa7eb-672d-4259-9909-73e2c1578e1d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "638992bd-055a-40db-b3ab-76bf43194371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e8cc48a6-a535-4ab0-b3ec-b639a319287f",
        "cursor": {
          "ref": "7cdeaf27-90de-4617-9419-64b9d762c1a7",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4fc3b8ad-cab7-48d6-bd46-a93f47b4a5bc"
        },
        "item": {
          "id": "e8cc48a6-a535-4ab0-b3ec-b639a319287f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aecf01e9-d102-49d5-9b34-eac763a4ffa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "c583dc1d-0b39-4631-b8b9-5fdc065ea9ea",
        "cursor": {
          "ref": "22eb9168-9f36-45b8-9e3e-1c343e3905ea",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "32c1d2b9-fde9-444b-bc14-e578b23b0941"
        },
        "item": {
          "id": "c583dc1d-0b39-4631-b8b9-5fdc065ea9ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "408c3f72-979d-4515-bc47-9c8a7cad3fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c583dc1d-0b39-4631-b8b9-5fdc065ea9ea",
        "cursor": {
          "ref": "22eb9168-9f36-45b8-9e3e-1c343e3905ea",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "32c1d2b9-fde9-444b-bc14-e578b23b0941"
        },
        "item": {
          "id": "c583dc1d-0b39-4631-b8b9-5fdc065ea9ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "408c3f72-979d-4515-bc47-9c8a7cad3fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bdf534-ea95-4e21-97c5-943458a661a6",
        "cursor": {
          "ref": "df66f57a-e4ea-4e7d-80f7-59d8fc13ccef",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "019d4ea9-84c8-4152-966d-a6f829cfddf6"
        },
        "item": {
          "id": "18bdf534-ea95-4e21-97c5-943458a661a6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8cd8c72b-7da1-4154-ae80-773be1ed58a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a40c7c-884d-46a7-be42-8b05e9b43c20",
        "cursor": {
          "ref": "92a4db3b-1299-4210-8846-0e6650014797",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "00c2918d-9cc3-472e-9966-3ea2b3f1178e"
        },
        "item": {
          "id": "a7a40c7c-884d-46a7-be42-8b05e9b43c20",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "060e25c6-76ef-41d4-a582-a11064140792",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}