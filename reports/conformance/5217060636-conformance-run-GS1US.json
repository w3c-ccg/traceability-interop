{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1c198d49-4879-41a2-b053-87e494d55a70",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7885681a-c58d-44d7-8121-f65c2d9b88f9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb0e1dfe-91b5-413a-85c4-e5d9077fe354",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "71063b3c-1143-4833-8f59-a02ca3965116"
                }
              }
            ]
          },
          {
            "id": "1d5e6f90-5a3f-405a-afd7-3218ea2e4bc4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c131604-a297-45b2-8585-c7707e601c9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6767c4eb-9681-4eec-96fa-ed4961cc8f7f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2839c69-4423-4ec5-8bbb-052a7633e15e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c1fc4525-89a1-444a-b1e8-490a747b37ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a05ad47-a114-4559-a3d4-fd7b1eab0144",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7550d7eb-2e39-45eb-af15-19863ac86807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "122b64dc-63ef-4696-b9da-b00236575adb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "77eb19bf-e5b2-4ba0-830b-3c9b3b44bdf0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb6c1c74-bcf7-4cec-98ef-9bdef19a1992"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4b030925-29ba-46fd-9210-4cac7fa76f80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2428dd94-6eb0-4704-bd8a-a5b910fd7550"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5df227e1-454f-4688-a71e-bac17f826502",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dfd2f1fe-4e11-428f-8b22-3300791078fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4cb596e-224e-470f-af77-d5704aed0d0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c699a589-96e7-499c-aa26-8be8b53d60ff"
            }
          }
        ]
      },
      {
        "id": "36fa58d2-f8ba-489a-a62b-3e1e4fb3d313",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0b1a5d16-1c90-4c1b-91fa-de7a2894cea0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4bc65ed-e4f3-4783-b0ca-6d9767d0536a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a0d9c9f-2043-4585-94fc-587b0878a132",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52a8056-4e7f-46c4-be1e-09d9ff2a9307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57cd9d0b-3bd0-4238-8923-4b57ae9cf446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b31cb6c-7ea5-4d57-a3a4-02cc2c1fd16c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225a03fc-8c3c-4c09-a27c-8d2329df582e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cc2cab1-6d17-4803-8244-222d280156f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7cd5a8-b96d-4ad7-88ec-c26307e52abf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d23a220-ef89-4ef8-aa37-f6cc1ffca535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48ba4ee2-c3b8-4e80-9427-7fc237c969d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cc73592d-9b12-4753-94b0-d14468121df7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecb84309-bb77-4339-b149-b64d9520e0a5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc604ab6-508a-43cb-a04f-3654c9b7f9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff52a764-2e5e-4ecb-9d5e-1dba5c9fe2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b555f5c-ede4-4e8f-8c95-d185bc27b840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886ad668-5aba-4a48-939d-92c150a7fa91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f52a2713-34dd-4cb0-9cbb-a1c1199e5669",
            "name": "Positive Testing",
            "item": [
              {
                "id": "52d27f32-63ce-4a66-86f0-ed638e08960d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e420f6e4-47b5-4a6c-87ee-aabb5472ff40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "099f73a0-b688-4771-ad0d-43e47ebeb28e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "254c4384-c07d-463c-985f-ec409fc2f8a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b625eb7d-3dda-4613-87e8-2e69b9f22e2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55585dc1-1855-4eb2-8d6b-2f2da19e5bf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6aede76f-51ef-4eb5-a1f0-b66a3d8c93b0"
            }
          }
        ]
      },
      {
        "id": "8699debe-9c74-4e12-a291-c2d9edde78de",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "02b09b4e-cd88-47d0-907b-2e61f84a8423",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91ead5fa-af0a-4e02-be09-e6d9ca202324",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd81b3db-d0b9-4889-9484-eddf958bdfba",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56a5fff-0331-4214-8327-98203ea8fbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f13d90-06d7-4c4a-9dc6-b16ab2749965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcccecf-55fa-4422-ab2f-556d82c04c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "045a3fd8-4615-452c-b17b-77a0bfa45ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a32243b-9bf8-4e36-ad28-d43196335f4a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa041cd-3725-4275-9314-7b5da601ff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae32ab55-8a70-493b-83b9-a2b4a9a67dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2085e9-3aef-4a64-baf5-dd2c9abd0204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a9cecb2-ff41-4c46-8aeb-08582f187cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22681dea-ce3f-4d2a-88b1-396946f01a85",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917629ba-294a-4241-a5ab-d44af6c942e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b1973c-1aef-443b-b779-ee47333187b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1056e85-fbe9-4fb1-986a-c5bebb1addcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "901cae86-1476-4d5e-a62c-c62bd77812ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88661ae7-3a6d-4bf7-b44f-eea8be4bcdce",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be598746-1bd5-4e1f-8a96-0be142ea4ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55207c7-c015-49af-9a65-34646dbc8912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c9125b-8892-4173-87b9-191ae32818ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd270945-9d31-47e6-9254-82e099ce25b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71e00cc-0de0-4100-8362-1eeb648af0d3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531eb537-ac89-4cd4-9dbb-d1267838491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d56d96-f920-49d9-a90f-0010ee9833c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20689534-de62-4138-bb83-a7a2a1a3a4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66a0a7d0-8198-459c-bf52-42405ec44b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff0436d-fc92-4497-812f-7ac7401e679e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c1b8aa-c21a-41b4-9d0e-7df49154d857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00ea6d2-4df7-469f-bdba-59812dc30dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf88354-3811-4aa7-a513-4edd32d4d5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "526c6104-e06b-4a1b-89e8-7f082fa33b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f379793-c657-4867-9acb-cd1b9efcc88b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b97d5c8-2a44-4bc0-9642-4fa4074ff95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6652b4a4-eb46-47da-839c-5e4ba579c870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22421ff9-7fdf-4c6e-bc77-de50079c684c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a929b79c-1fd2-4a25-8877-e81183e15d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e48ea83-5020-4e8c-8dd3-9a0b12956d39",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc40b5e1-9adb-4eb1-8425-7cf8d1b4dea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4412ae2a-9574-4edd-b77c-ce568b54f86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405e046d-9a4b-49af-a14b-84700395d07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a67fc088-8f9c-40a6-8a50-ae3709703f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d17315-2856-43aa-b5c6-57576178cf97",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a825ec-a520-4489-8409-4eff93e1ab59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8b1fd4-ba1b-43df-98de-cf6d2cf6df69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b37650-e7bc-4f18-b47a-6478a32b8535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3fb4e10-ec30-44a7-a8e5-159bfb05a57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c1ed20-cdee-4632-848c-f1cbac8a0a4c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e066ce-149f-4950-84b1-a32102caa59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a82517-190e-4f4f-8050-a50141955466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2b2174-6633-4e46-bd7f-cddd7e419ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c94b271d-3773-4434-8fde-d1c2c5ac3e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aa60d1-5941-4ebc-be43-fa0b0603c295",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2d8679-7f70-4513-b2d9-198abae44d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a1c6fa-693e-4bf7-83d5-35c9f12942d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270f8422-1666-45b4-bb70-24bec5e50b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a23d9eb1-3f8b-4270-93a2-56282570764b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a9d4d7-c7a4-4e4e-bfc8-bbab27e28355",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa27d7-7e0c-4bbc-8b00-4ab4864cd65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aa8d84-60ce-4c2f-a887-5ca65d1a3dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fcb8bd-9e47-428a-b155-4d795c931ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3134ab4e-e693-44b9-be41-71ee77013dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adef3c17-9761-474a-9ed1-a73438c812ae",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4e8832-9644-46c2-8728-8c5dbfe7c816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66da83d4-6723-4cc9-be54-3462e875dfab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec6b729-1c56-4223-be4b-1542ddcc9f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9626890-a635-4e72-9723-c39d0ac18cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891d4cb7-36d2-4441-8d3c-7a58c54ab024",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f96a93-428a-49a6-8238-a7c20535bf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b09452e-31f3-48de-b082-870659961152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201b4bb5-a018-4636-8689-afcbb57c0426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8cdd29c-e11d-4345-8d7e-c8b06d07e604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f9068c-d4d7-43a2-a5ba-213a37044759",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c6144a-e165-44b2-b340-6153fc94fefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4b5a2a-9059-431f-a380-34278c14c4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d33775-b9dc-4efe-b4b1-c337fba082a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "970d6d9d-a9af-49df-9e2d-6ec17eefcea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7df7fe-c7e5-44ca-9543-cc75cbaabbae",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2210a4e7-3636-4270-9c55-2d0271b9476e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52583d53-856d-47a7-8d75-a8658a149661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec769871-e3a2-4049-a942-64c36190e7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20fc853e-e142-4524-af35-b38f48f74f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b878cb-9b18-42c7-af95-744e3ca89429",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea2bb1-6f13-4c00-b64d-241254f1faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e784c3b-7846-4276-a419-cf71b12164e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cda8f5-5600-421b-a4ff-a93776f4b5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8b75bea-2f42-439b-8f92-123d8e03dc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfc0cb0-6eb9-4c23-93e4-663e896d36e5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7a24cb-d0e1-47b9-a286-ecadd83b984f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b36fc5-2fc8-458d-80ba-20afda825059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b241e7-8654-40cc-948b-2a978321ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d9b066-5ba9-4480-8ef8-dc86485f71fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eceee55-2bce-4206-a62a-390a21dc7391",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648ee2b8-3f88-42c3-8096-62104e8f81f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f883eb-d8ef-4f84-893c-fe3b7ea7c72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e972b75e-a07d-4bcd-91cb-5b06b18122d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7959b01-8ed3-4865-bbb6-e7c540a65252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47eb895e-87c2-40af-b93a-6bec84b33cf5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9030989-5e2a-49be-b5ad-96e9f0d10354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4766cae-8ad9-4177-940b-9dc181c04aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ba6b4a-1a5f-4163-b5f7-620396f1162e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1568a07b-2098-4c86-88e6-f359b7289863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8e0b78-8f4d-439b-af1c-f97a34ab17f2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59986f08-1e71-4bce-9717-667b2d8f327c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143e595f-2c8f-4c2b-b0c4-29b529ddf36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff8e49c-c39d-4cff-a144-21b0346bbee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d96d991-84a4-4834-8fe0-1e4f3f9408c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46049a7-63f5-4e31-9940-3408d0ddcb1e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afba19f4-6768-47d9-8a86-8ccc3a433170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9c4465-c8aa-49ca-8d53-512ecbb29f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76bc182-4659-464b-90bd-c32fa1c380e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7489df-328b-4c03-bd86-d06275c496e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344e7d6d-c19f-4f1b-b8bd-e70c28d474d2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd2785d-d53a-4469-a432-ec28a87f1a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4986582-fb08-41db-9b18-99a70decbb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b5d1c0-d4d5-413a-941a-1476ec379bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5decbd-13b5-4cda-b355-af134399a18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf99f07b-0307-489a-a4fb-3a0c54e4c9cc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a9f571-484e-43c3-8668-e50949082448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5b059e-25f8-435b-873c-82b3661a9d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dba34e-1f88-4db0-a460-ee34b4a46381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8449a95-3472-4733-947f-2920840de962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f97d695-64bd-44bd-98c1-cb7246435a64",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83ae3fc-797f-4057-a193-a9b5e3591753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a527bc6-5f0e-41c0-903c-af5346675a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d058cb-0254-4e80-b39a-60c32c4c81a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8feed91d-6066-43e7-8e2a-fb1f761e434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f333d841-8c25-43c4-9cf6-97194d85ea63",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06a61e5-2b2c-4e9b-a86e-5102f71532c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba4c6e2-3b19-4a87-b42a-1a1c3eb85968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a51cab8-d467-4d90-8984-678e3ed06b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da93870-ad7b-4349-ac99-f41bbb6dd4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37734c8a-f917-4d67-b884-74b1603222f1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65bccc8-747c-458a-91e2-eb14d0de5f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b37cde9-fc47-4da7-a7d9-0bb02562cb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d28a951-f8c8-402d-8c9d-13f91e2e2b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9e3662-8a1b-462b-950a-43d8a7ffccbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b395d7-9cfe-476f-907b-d38d19fe298d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ab23cf-5949-4180-9e3b-831ad3681819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272f9e9d-68c5-48f4-9e6f-f0e5fccdc00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d800b1c7-2ef2-48f0-b59d-fdbc8c918a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "556a7ec4-ce77-4a95-8dc4-e6e88b8a474c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55fb2b9-e356-4e9e-8146-9343f1616d28",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2669b01d-8eee-4e74-a8bb-6add996717e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c25b99-a1c2-4fde-b0b3-72ffe704cf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7881d6-298a-4b55-9387-485a1b9ef874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5594e5-f6c4-44d4-8503-790133d7b51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9bff9c-2a72-4e44-ba53-e72997aadab9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609607f4-8959-4a22-93f7-438130fafc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf34887-5c44-482d-a4ad-e28e8ab52898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e955087-d7ac-4eb2-a575-ffe89a5fc749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1942d9c4-db72-469c-8d57-7244d86a12b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565a2864-6a7a-4c71-90ed-fd59b8061ccb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda70ee5-b409-412d-9aad-799e5b16297a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bc1562-6513-429d-9e35-3d9b4a15e072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea20e6c7-b4c1-46cd-87ee-4553c86a3a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dde6d0c-a07b-48c7-9a26-db0a43a98d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51143199-f8a4-4563-b9a7-57aae84d5833",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7c156d-5b90-4270-be1f-656e27d8ae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b72836-45ad-4a0d-9e98-ec248b3d1d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a715f712-88ee-4e4a-8abb-c42b0429b7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a72653b-fd06-4330-9f29-57522f1f336a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b2fc69-6f2b-4023-86ab-2294b9bb1041",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289ff69c-8330-404e-b5ba-675ba58ab415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43023ef-4141-4ec9-900c-8576620fab0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b460e-959e-447b-8a3e-0ba72e6a1f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21196689-4749-4cce-9ad8-10efea1e6ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d12f044-f8c1-468c-924b-e2ba560b9ed1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceab39ce-6fd5-4edd-a5c1-dac1f56d708f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcbe857f-a086-49d0-993f-ff026fa04586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7ca68b-3a69-409e-823b-86813cfe657b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34824fc-2b28-4fd4-a972-c1770316ac9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eccbec0-987f-4884-82d7-2f2558fe439b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765b98cb-caf3-4067-b33f-b37e13350635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9c7539-c7e7-4410-bfd5-cf212ff548ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e110fd2-0011-45a0-b3cf-5a440839b984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8f93aa-6bd4-4973-8004-5d5ebf9a6f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f07adad-4a5d-4cb5-9b88-6d0ccba16b1d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045a7229-470d-4069-bc91-c85879a59583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56556828-4d65-43e7-bef6-31f180d89643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f51e3c-2115-49a9-add9-270c0b415e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f93f2ff-c82c-4632-b71a-b01c4d21e323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19e76e6-e94e-424c-8d63-163cb1fb2ab4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973bc3c5-5199-4485-8932-d975613da3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91742f3f-01d1-492c-8f7c-d679b310109c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105e5539-d0b3-4321-9ffb-af7a2e761397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de0c562c-0f2b-4b05-a5f0-130991a32f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2030b87-96cd-417f-bbb2-388aa65faba4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760686ff-c379-4668-91f0-356a6fa62bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f92453-8dea-4d15-a331-90838efae1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca07af5-61c7-43b4-b258-c3dd11727f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea02422a-f98f-4134-813b-aec75983ad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1a2672-2686-4fc8-bbeb-da8d11471a40",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27674b2d-767e-4931-b257-d4e365e8e6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba05726-a88d-4839-a387-18ad543717e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af90f2b-5ced-415c-a209-8bff74e8996f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1a040c-e1ba-44df-b073-94164817bb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec9c88c-41b9-485f-98a0-6afda995d0b5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d006e4-971b-4c85-8f92-2670558b1dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ccf9fa-df45-4c50-8fe2-07a9f788ba97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25012e97-7602-4114-8929-45a9139ed650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9a567c-3601-41c1-b7c9-696aca21eebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3664d243-746f-4fbd-b520-2ca2254320e9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae07a7a6-b804-4c4b-8dfc-86aa00bb1464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352b0cb3-e970-4b37-a86a-3b8d863a0d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3500719b-861a-41ea-8ea8-b115c1955130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9564dc-da2c-460c-8a70-55804c7f3c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8be8e-d336-4710-a077-f80ba1608da5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3989772-f06b-45a6-ab46-c282b2ef919b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3efe4c-ed9b-4b81-90b4-905089307a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202d8203-9ce0-4554-a682-a8424db2554c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b532afac-8fc7-4f21-8343-cd46d77e10bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc6c131-4187-44a4-b345-068786abba15",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bc702b-6e8e-459a-9d31-2c46f28c1631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860e1c76-4647-4cef-bb60-0efb6eebc94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aabb1eb-a450-4a87-b8a1-5869226fcb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "19a43f0f-9c19-48e6-8cc1-69cedd8b7182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2885410-3c6c-478b-bfe7-bdb4109cc564",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c811eea-cdfa-4e8e-8730-b05759226176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672efd14-c0be-4873-ab82-75a560e3b53f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1792c2ef-9191-45cc-b282-02bcacbc6734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a84b16b-98f5-4d21-9e2f-c3c32aaafaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de734045-36a1-421a-99ba-62ff3a27c5f3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08b4a8d-23ed-4b82-b519-c9582140fdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d64eee-b777-43e6-8f98-6a2d07642183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c1a5d5-6468-440c-9595-adbec23288ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b4552e-26dc-4901-aef2-6b3797eff6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05701513-acdb-428a-b149-ed96f7d8876a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db245ff-b5cc-4448-a6d9-d2b56d4698e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddbaaaf-5d97-465b-9d6c-0dcdfce9bb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f7a03d-5933-4468-a8b0-7dc5da51ae99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "828ca428-8208-4768-86f0-b23f604c0b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1c1964-4e50-49cf-a890-b4fce8c74652",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527b5a03-dcfe-4d5f-9891-2ccf940930db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644c5bdc-4604-48a2-b7d5-24a93b7f3a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328b08a2-b268-4efa-9b0d-f37194264130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81108e2-5c9d-4dd3-a7f9-b17679760136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3c115b-bfe2-417e-a594-7ff5da111c38",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c333ccc-fac4-4fb9-bb71-7b7b7d43aa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4414c5-91d6-4acb-873c-353da4f9380f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df94153-a7c3-4993-a7c4-e1742a35aacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6d6bdf-57a3-4fd4-ba34-baa5ddf60768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0884a3d9-c1d6-46ed-b483-3dfc10bc071b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7d949c-4aa9-4f90-9bd1-149684789429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ab3163-bc8c-4b44-9524-ed0d378c3f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fe80f9-3d67-4bb4-ab5c-7f219f5372a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "876dea86-fb3d-4d1a-8083-187007dcae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d0d726-bbc0-4162-a38e-33d5e721de70",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32e783b-22bb-4d15-8f1c-7329912c5eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1161e28-4b1e-48ac-b758-f865bd71acd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1398d041-4197-42d1-bc15-9f776825b0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b59069-aebd-498c-a0c6-93e12d981bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d406d1-3f01-4ac6-b48f-5d6d39f86ff8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827fce62-bac4-402c-89f5-43db74baa556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7434edb-8e44-46ac-b863-7c2f1c64d5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed485604-8d38-432e-8aa3-eaf477c1933b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e62d475b-b9b4-429c-9044-7630ac2363be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee83196f-b0de-4279-a022-d75d855440ee",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4d687-83e7-42df-9c10-f4c2cc8fa931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b45070d-9d20-4535-94d0-aa1a59ab8bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6e5585-d32a-4ed2-9907-23bd7cc592a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6575fc5f-301a-4970-bb87-162e40fba213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39e22c5-2a28-4292-acd9-15c3c0d0926e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e80ba92-d3ca-47b6-a72c-7ef482438b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de549ef7-5ea8-418f-b83c-304d47dca7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10db78f-5be4-4aa6-99b7-91cfea3b2328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "246baa70-4919-4a04-96bf-2f9789366911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190ad172-4fa8-41e0-8d3b-427a1f01d447",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc810a26-78bc-4013-94e7-c3a209bb1de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5108a821-ee99-4bf2-8852-fbfecb3917d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63616e8-42f3-4210-b5b0-7c7e8cca69e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0738bb4-de3e-48fe-a6ab-239ed2d9b21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6a3442-8c51-4162-8267-53312595a9bd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eddefe-7ccc-451c-a54b-dc3411d28eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7aaaf2-b77d-4313-aabd-02b2f432ef8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14da4c93-69a3-49d0-8710-7fb0fa5305dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7e466d-17e6-4c10-b068-4623c70828d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13095d34-9b1f-47d3-98be-4f0f76d930d2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5987c7-a9fb-4d89-9e52-48e7be999ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae28d869-810b-404e-b8e9-e6504669b2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98319685-4f34-49bd-b142-d17e74dc0f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfa39c2-9b64-4fa3-a3bf-f843c82615f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca01b95-3f38-4e8f-b826-205ff88702cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a8f8b4-e605-46a7-9c53-c6dbe8f2f9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8216b016-d682-4be1-a650-39352fed4b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81522bfb-4ab4-4aa2-aa49-0ebe876a427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "16c3b7cd-b888-4979-aa9f-b3afc54a03f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0a488a-8537-4227-8382-ab1344f4d285",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4f0693-c39c-4042-b38e-52f6efcc345f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c069f4-c646-4c03-a2b1-c75616bd0b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ce1fb6-7c43-4669-a81e-aac057d1a244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "206dfbb0-d524-49fd-b70d-247ce65e7011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fae835-f22e-4e8f-8d1b-5b21f2d4335b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a29a36-9088-4ab9-817f-1a3e975b418e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bc84aa-8ffd-48c8-bae9-16c17326cec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784f2a1d-5e1f-4126-bd09-31ef6ee8474a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c84114f4-3db6-40de-b879-113369f57641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e2081e-1963-4df1-9f2d-d6bb6f443d26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eac1e5-796c-433f-b602-d5e39ef3b2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdb647b-e903-47c9-a5c8-f8bcb19e1c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0734b08f-f3be-4357-8f24-d35572abdb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8325f6d6-6f73-4281-a712-ccfe117ad053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de567f85-f659-428f-9086-e0b41312a2d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9540d0a-cf1e-4fb0-af60-0139e1f8d8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdeff0c-3ae2-4e97-8d68-dcece9309904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085b7f83-c4bf-40d3-9b60-e1aaa12589c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6af535b2-8670-48f0-9ca0-28829a10f825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b786dd73-6649-4d81-9e39-ce238a958527",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ce5505-f828-46b2-a009-0c0ddfbc48f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb83d3a-f6b5-40e1-89b2-8f47aac506be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d21ec3-ffb9-491e-b22f-4d4e6598c026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "03a9bffd-65e5-4937-be8d-18138c3a8b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f30c45b-0686-4ada-a0fc-231f907883c5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c355f1-67ad-4859-be45-bbbe4b8ee70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd3b779-b268-45d6-9beb-fe1c0c78534e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95395ba3-5cf3-477c-8ba3-e1cf6b6731ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa566e2f-486e-4c36-bf57-260ef3c57801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31d08b4-6ee0-4376-b7c5-85cb0e6c10af",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bc60ab-2870-4739-81b4-52278698bf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a658440-6545-4419-a858-25a12e1e8776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cc364e-4b0d-4008-ad23-84ce969c6b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a91a808c-31b9-4243-9d2f-f951665d0c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d2af04-cf19-4f7c-a5e3-5b92c3a5e01a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a62adc-2f3e-4aca-8685-16e8d4c88f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7191730-ae0d-4b40-83d0-318b727061bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a229b30-303d-4587-8d0b-4e408442c0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bffd01b4-1de2-4a72-8ac2-737e43795ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36052415-e7ce-44c1-b1b9-faa12e208492",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66620233-5810-4556-bae7-32745d9dd374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465d0ed3-c95c-4d38-b21b-1eebbf1219fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923aaba1-1fd3-4134-a6d9-1324f31ee6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eff4bcd-1e01-46c2-af74-75593424338a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56eb5b70-a0a5-4f2f-bb7e-1cb6198b3c61",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2d9646-15af-4a22-91b4-2ea13c326d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cef956-af39-4493-80d9-03d2b9ad7223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5975052-eb99-4c63-abd8-fd57dbab1465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e59e0303-c8d3-4213-8f15-145873001bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539883d5-164f-4472-aa0d-d3ef777587cc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdfb462-2be8-46c0-a431-4c07cc27a0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ff11c4-2b2e-414e-9d22-8c3cb279e0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292bc6c5-fc16-4b9b-88ae-fcb18fb6526d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d20833-ffa9-4a81-9fa3-6b149b93a212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e55ae3-4f67-4ef3-8dae-c762afc2cb62",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db18eede-093b-4c35-b44a-887cbbb59e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a3f57b-ec15-497c-a190-e255fdc748d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e8b5e1-7336-4cc2-97a8-954809d804e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56819065-32c1-4cb8-8149-053f1f77562c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132bc89b-a954-416c-8f26-39de35efdfc9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1ba951-12d4-4cc6-851d-c08968449b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc27773-6e53-4ca1-8144-ac94c6f7f89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5debf9-b4d7-487d-b32c-f574f9237a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e01a1ed-dc35-428b-a082-7b735e26b9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bca2f9-d6e4-435a-ac03-3bc247ec1db3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de157b6a-0baa-4653-bf31-46e359feb240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50fb6ec-3988-461f-999a-3a90e7a32e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec8d92d-4c53-49c4-9fd6-0799cf3dc7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7742df-f75e-4c2b-93af-f439d587ef17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ad921a-3701-4a22-92c4-e83fa9809d67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a167e87-a34b-4abd-9c0f-9a8587529b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c82ace-bb68-452a-aabd-e02f76bd8976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee6f27f-a283-4139-b679-1f03e3fb158c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "815486c8-e9e7-44c5-b4d0-73dfaa3c9b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0685425-60b9-4e0b-869d-37aa3aaf6c95",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f9f63c-1901-424c-9549-767050fb577a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e344e04b-62d7-4e21-82fc-2599103df2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f1567f-56c0-4378-a5d5-411deb25a424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4940dcf-67fb-44de-93bb-d186372db212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb022808-f226-4520-9c1a-a93727e9ad2d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a398e94-b7a2-4c3e-9063-23a382e3dbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6499842-0b1e-4182-9032-991b246e8201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e22e0f2-b1d0-4505-954f-166e4ebdf00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8c59fb-9c37-4bf0-9caf-742055841a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a2e47d-b678-443a-b28c-44ddc4ff59b4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee50ee1b-737a-424d-9a20-7ee621b3c6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1678b4c-cab9-40a8-9068-f9846e05a901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533c27ae-915c-4153-ba2c-6ad5e60b2ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3bc47d-3da6-4250-b2b1-54fdbaac7ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec31acf-8aba-44d0-9ae8-ecf9c5c5a526",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da600b82-f940-41f7-bc83-adf8d7a71b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68499815-693c-4fa6-aa25-c6551bbea0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2a1b29-d39c-4bb0-9a77-a517a4135aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f520ccb6-de79-4155-b885-26d559a87c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61477484-deb2-46b2-a337-0c1450169c01",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327ca95e-f0c9-4937-ac43-6d2aa235047e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cde0173-8a27-4fa6-aa73-fe4795caba79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29db1d0-94d6-4f6e-a66d-ff281cbecbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d75f5ba-50b9-4687-9ee0-d4c6f9f59f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40d86ca-f574-44f2-b27f-130bcbef48d0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0d0b29-727c-4bf9-8cce-d5a298fa663b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2fabb0-4541-4d40-8ea4-e08a7027fec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf47f234-75bd-42ea-abe8-1c76aac9e34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b83966fa-2a9d-4194-90e5-b07491e6b636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51308b44-5e9b-45c5-93a3-3769280971a6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b9b52-612b-44a0-b6f7-6f282a069c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806c303c-a051-4cbd-86b2-1c607788236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b5966f-83e9-4fee-ab5c-f1c7400b8d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2709e3af-8e7d-46ef-93d4-3f5db9af1f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1549b55-d257-4064-95ab-cd14cf1a26c0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc26bcaa-abfe-4f64-a737-9a477b81a4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf5a517-4fcf-48cb-bf8d-3b94b76eb444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3257f8cd-44e8-42cd-808e-e54751f647a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e357a11f-78cc-456f-9afe-72fc3f82e340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e4c2a6-9740-4d0c-b872-bb4873534ab8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c125aa6-f4fb-4433-8af2-b9e4a626dafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d157a851-9b1f-4a6e-bd3d-719a884453f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0656c1c7-383b-4022-b499-b7bdfadeca67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e340ef32-db3b-4220-a6b4-2b7276a6dc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2759b549-ce58-4bbb-b768-af9cff68005c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e83a54-4b81-4c77-88fd-75fa2d0c3a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53241a0b-36af-417d-83f5-e98ff5f00676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eda3814-d0f7-47d6-919c-3e728ac5d297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06a9af7b-355a-4086-9188-95854182c36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104133e8-c372-4899-b3fd-5e1ca64830aa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a943175d-0acf-4c7b-8375-e9250e89cc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89eba0f0-cb0c-4ccb-84e9-a0b733b92d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2db16d-9c05-48ee-acb6-c9dd23d9235e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c72735-386a-4e50-a8fb-2464f00b64c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8afeaf-1336-4b5c-b2bd-5dbfba6c3978",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55788ca0-a956-46ac-ba4f-123190ef8505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5e2135-1307-44f4-bf2a-b878bb141123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d3705e-2749-4a73-8630-645f308d4d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a53de8-ba3c-4369-9592-bc43feaecccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82b0ae9-9c00-4d78-ae6f-6e58108ae9f7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2dca73-8a35-491c-a20c-1c6d6e68eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f58ef9-cc8b-451a-bdd5-d444fe3a71d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96092e54-d1d5-42fd-8973-3c660f8ae0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e85edf7-27c8-4ea7-8ec7-75378e3427bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccf138b-ef12-4a6b-9e74-5ff108ff1c75",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b698b05e-82e6-4325-b68f-bc2236119940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e5147e-f723-4051-841e-174deac183b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883e11ff-a5a3-44ec-a683-3407ff0436bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53745d0-ed51-457b-a76d-2cdc90af372a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0a1f8c-4191-4231-9228-d66e834e0c0a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52af613a-ba5f-4c5a-a340-b8bb39182b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d36df3e-e544-4620-a0ab-f879ea82f90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981c778f-19b1-46aa-9a1a-d554451702a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f673800d-0bb6-4599-8fc4-52680fc0e9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37813b01-a2a2-4b93-9e59-1caab594bcf0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a3c4fe-bc76-46d9-b785-1250c3af770f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34254ba-ad88-403f-b0e4-9d2655e5de8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d08fcf6-daf9-4d59-9394-ee5620c55f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f195b18d-a6e5-4b4e-a453-f4b8adf4361e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3cf296-3e18-4477-9c54-182cfdbf654c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72164e81-6cd3-4074-a795-de58f512abc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf740a33-b6b1-4703-b4f3-78853cd54a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171e80f9-15df-46ef-806f-ced4bb04e483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce28e93-e216-4e85-9660-700fdad5ddd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6e9696-1520-45f2-b174-76bd7e1726c6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9740d8d-d28b-4673-a84c-0ae6e3005ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87f4fa2-daeb-4811-a712-087d618d9d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fbfdc5-09db-4f35-b8d2-8b676df1a153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fddabef-0a80-4dc5-9783-0d4e5185a05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759dfbaa-5536-4267-8023-d6002a4e82bd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35947dc1-0c07-465c-b4d0-f41a6b2905f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2d22fa-cbb8-45c4-a5fa-f3e359009996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2277dc-79e6-43f7-8864-5b822d920486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e00b899-eb9f-4517-b8b9-55b98b1cdb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9739ac0c-6610-4a28-8c6d-801ffe973a1a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9a32e5-ec30-45d2-baa5-62cec77ff1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e76ac7a7-db7c-45b4-b123-25717222bfe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09880002-3003-4b51-99b0-4a647883d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4bfdf0-365d-4d88-8284-56c91b99edc3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e390458-0abb-4d1b-9b30-291b7bbbccd9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc18c4b2-e0d1-4e43-a403-ffb3d4b0afdb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2001b0c0-3a7f-4fe6-96f9-5234ad6d69b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26f4bbf1-9a08-480e-a8cf-9a0f8fc4b86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f941537-81a1-49da-a3e9-12f0183a039e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "161169dd-0a86-47b0-84e3-d8abb490869c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be6a736c-717a-402c-8ccb-c1ca214b70e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4396597f-2ef2-4276-a0b5-577ba2cf805f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a94129a-9e16-432a-9bb7-50a3927674f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c83696a-bdd3-469b-a0bd-f7ede78db309"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "418ae146-0883-4d9f-beca-735c4e2419f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5dc59c5e-df59-45ff-af78-0bffc3459435"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "66e545ee-faea-4458-857b-aafe14e24938",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8a98178-8ca7-4917-8f82-64b68ab40a1a"
                }
              }
            ]
          },
          {
            "id": "182a361b-83d6-4428-b445-83f225a954a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5787de75-4658-42a2-8211-cb0cb0437990",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f14ba2d3-8711-4160-b368-4964adba5bb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ec2d18b-f167-4b8c-a117-5ef86a658f12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe686bbf-db92-423f-be31-db256298e9bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99a691d9-0791-4f0b-8bc6-f05bdea0fd79"
                    }
                  }
                ]
              },
              {
                "id": "ac796d63-6153-4384-aaac-0b68f524e537",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c0eced8-a153-4c94-b2b4-c5887b96b962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f2f6c06-6dd4-4ed6-bc5c-bdb0e6346212"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4628fb9-1338-4484-aab4-eee44f4d7026",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e6a7a0a-9d0e-4465-b431-057667c605a2"
                    }
                  }
                ]
              },
              {
                "id": "bb502454-d354-4485-8558-9f6453772c46",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2225ae3-020b-422a-81d6-4344ac1f3a87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60323ebd-2238-4a96-afc6-e1e7d58ef0a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a00546d8-d8ac-4ec9-998c-f8a268822b8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2050adc-6b31-442b-83eb-88258a7fad59"
                    }
                  }
                ]
              },
              {
                "id": "f454ed78-263a-4f30-98b5-cf5c5f30124f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af3d6f24-477b-4ac0-9929-7a90d1721b9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f53208a-9274-4fdf-bf0d-411018835683"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4eb585c-e59e-45f5-abc8-f1fa209a23a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "450aba16-542d-4111-a250-fce4c5f03f4d"
                    }
                  }
                ]
              },
              {
                "id": "9750973d-93d6-4e3a-8fac-aa3065fc664f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c2b7086-ff1a-444f-9745-b67969ae99f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff5fe90c-e1ad-4370-873d-ccf7939f3ba6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9c87b23-217d-422c-b8b9-ce431a1cb329",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3eef8adc-1402-49fe-a16b-98b366d59b5b"
                    }
                  }
                ]
              },
              {
                "id": "13fbbe0d-b93c-472c-8890-c874f234ebb6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9ac1323-f691-452d-9581-6f99d472af1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9777044a-4ba7-4b44-add5-2f278ae47015"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35e92a59-07d6-4e44-9619-8a0d8ff98444",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a167bccb-fdb8-4080-9539-dcc57450f226"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45ed534c-b272-4639-9ee9-503d4ec359a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10054c7c-da7e-4c45-8495-e0cf2e62b30f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01550b29-f09a-4816-8a63-0be446092dab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24093b47-06cd-4260-86d7-6010a1a7ee67"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6858b6f3-1fb7-49b9-be5c-6033229b6bf9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fe7ef54d-9c40-4576-a349-dcf7761fc71b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8036e929-17e3-4909-bf6a-6bc2f57ec78c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6fa8c0c6-e0f4-4e98-9e49-c2c29c9ed1ed"
            }
          }
        ]
      },
      {
        "id": "3f62b4c7-e497-461e-9b64-554da1f3e848",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2da79905-28db-4afa-9318-5f96a147470b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3277b615-e162-4edd-a887-58a596fa48a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a6ca154-bb3a-4c11-9bee-ed6d6b893a4d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d691b9-aba8-43f2-b924-42883dd36607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442a19f5-a1d2-4e46-baee-77ea9111ce84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a039bd8-cef8-45e9-b1a2-ae05c3ce80eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf94eff-f77e-4406-a3cc-370efc023701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2d4db2-165b-40fd-92d5-8250dba12ecd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7185f5f7-1a78-4dae-848e-194835303cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9ce104-ece6-4dff-b7f9-0e19b0d83565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db5c906-eecc-467f-bd59-8d93d3b00e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c48dc5e9-2781-4311-b8a1-397195f7f1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8e18df-fc43-41cb-a8ef-4415c222fff5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac0b865-7b41-4686-9892-4e9042d0484d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76c3ba4-e8c5-461d-bd2c-2fe5c1829fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18db477-6384-48c1-b764-bf17c0608396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2988a99-d1ba-4c73-a57a-696cc751d11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913a6731-5ec7-4f39-8f27-b00af1956c49",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba26e8d6-f6ec-4174-b060-52cfed4fffb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e404fa39-422e-4e8d-aa43-c9d23948f965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d5560-eea2-4d8b-a667-c958eada2e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01607028-a2f4-4600-980b-c24bca87e888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d3d917-b01a-4fb2-9f38-9b90a40bdcc7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a56b6bd-3e8b-45c5-a414-cfa07d9e069a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964fbca1-893a-48fc-858c-665feefc0c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df76dca3-47ca-4487-bdbd-35c6858730c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f75d6d3a-aef6-4417-9ff4-fd1f51d7d180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e62043e-ee16-42c3-a6c5-0a6476f48738",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c19efe5-cf44-4637-a407-a1aee307454a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c99d62-3b5c-40d8-b993-518899a6b043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c08c315-987d-4841-9b4d-b35bb0c2bacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd164cf-f639-4f9b-bec6-7fac367a6727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8050047-ea48-42f5-8ec8-40211c0f5034",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e72fd63-922c-4ee8-b3dd-3a367ad1e00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1311d410-56d1-4651-ae27-e57901fb7a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a0f54d-fc29-489f-b4c8-3a7812dfd993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d80b2c1e-21a4-4478-afb4-ed32f910badc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4e772e-0461-474c-b303-ef57f86a5e77",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beded158-f008-4e46-b18a-eef8eedda08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb3c85b-1908-472b-8f58-0ffc3c9ad333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7dd270-768c-4189-95c9-2e3b888e0291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8622e2-6d31-43ae-b378-402683674fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd33c68-2f7e-4f5c-bbb3-ab11b88c9392",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa4c203-27cb-4ce2-b7de-75f684cd8244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb4f871-675f-4758-8108-66bb4103b23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94ac095-1f3c-4dcc-af03-0fb9b763e20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7c5556-f8bb-4b1e-a028-46dc67a9555f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f35629-e08b-4c0a-a9c2-b87ae5571832",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86a3f3a-bc22-405f-bb8c-0cd99e598ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922be09c-50b9-4261-a0ee-ba00caa9bf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc840c02-135a-47a9-a535-c364b26b6be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f08c108-605b-4ae1-81da-f1890056e729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef76c24-a0a6-47dd-ac2c-32bff92f4e78",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5239cf3c-76c8-413d-b1b5-d2dbd4bb4ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1104d83-c55e-4f5f-ac3c-d3146daaff3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc40312b-9bb8-4bbc-ab90-48fe3e07cf09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "76d93c66-406b-41f6-bbc9-f5decea409be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14245f08-9760-4aa2-9c92-d21788480263",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5a8a3d-dc7c-4b2f-a939-4c2b4e4d68a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c93970b-578b-4576-ae5d-c9455d327ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729f9b94-e549-4e8c-89f0-4436339aaae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "274a2b00-5d3b-458e-ba13-1e0219bb5e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbee0ed-3159-4759-a9b2-1b7733eba59d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871dcd01-f678-4052-818d-daec1e2fa84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b036535-44f3-4c0c-9078-04a1318646f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a9287f-a18f-4f11-84fa-c6d54ccecf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "577863c4-34c9-4c04-baaf-6e8772d2671e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4852fa12-9beb-42bf-ae2a-1429afcb8a8d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6990fdff-c9ce-419b-89d7-5e3c6b001c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a93cf2-3889-488d-a87c-4a9053082fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd082e65-cd14-46aa-8f7f-28b93b8ebea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1efe1962-7775-4982-ad36-e0dec9311193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36550d0e-6202-4d83-8326-e5edcd775c89",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb0b75-f17e-4ea8-bc9d-d962aa61cdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c1b4ff-51f7-4d84-a5f5-bbe280be24e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ba5d5-5200-4025-b3ac-f13306ca8ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "759fa3c7-3be6-4e4c-9499-9341e73e0373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bac886-4f65-475a-8975-70bfff1ac69e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd7d7c2-03c2-4ad2-b6ef-29e208cad1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f429a3f-2435-4789-aa15-8e51528b59d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17648056-c919-4ff8-ab0e-8877f2163212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "49282d54-e8d8-41cf-8dc7-f82ea03abfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa7b0a6-c36b-4c5f-8da1-feb97c7851ac",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d58d2f-2477-4159-bdab-477629bb69d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3451b5f-0d9c-487d-bf74-3016de7e88b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2570d8-7bed-45bb-a84f-2e671d9a3ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa06639-c52f-4c1d-8f95-0b2a8ed25a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc19694e-655e-469f-93bb-772d1c5e29f6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8396309-2b01-491a-a277-a85fa98cf46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0582ca63-18a9-4674-96a7-3644ba7d52b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed9f0e1-716b-429d-a96d-5e0391831a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e392efe-ee1e-46ae-b829-1b11654c77dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e217576-9995-4868-b52f-c88f1e823fab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeaf159-918d-45f6-968c-5cc7f469f88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc04d0f-ba9a-4c13-b5bd-029e40f51871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdc8d14-768a-461e-a0fc-256f2af9877d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e7af3-b59c-4369-876d-4e0b8d22ab55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c089502-d03c-4b94-a5d8-dbaf61833050",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0f8476-7f6a-44de-8a75-316d491efd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e306cf4f-4bf8-4a6f-89e1-424e46867a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e0b19e-a5b1-480b-8414-ab02dea00f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5779bc-8255-408f-a7db-b6bf61060d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64c641a-2bbb-451e-a484-86c4d809e757",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6019c5b7-15e4-4fcb-b22d-fa29489c8bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afea6e2c-a2cd-43c4-9d14-42c7c5f518e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708432b4-9f15-4bfc-b447-7390722e74f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d09299-c238-4b94-b5c7-d3edaa8bdc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1a0750-0e9a-459f-b262-1d86a1c12836",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84573d7-5ede-4c91-95dd-e8c38e5b9add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c93e538-c338-49ad-9986-672547d000a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298cf7ef-8de9-402d-899e-d3703b1b27c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e92219-6f1e-4c4e-98db-2c95c8e575b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99022ae-a858-43a9-9282-2dd86f845b3b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5ff27b-9e07-4f3e-bf50-fd4feae39100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b182c25-5e9a-4ff1-bab9-7704c39e046b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0687ef-4a4c-4be2-b857-f7e07258ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0647677d-b536-4f1b-9d17-c46288dbadee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d20bf5-b041-4eca-88b0-b17ffa0ba707",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b70f77c-ce54-4006-9696-b2371a5f48aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2243c69-0582-4d83-8ca7-b2587c193a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b8b4a6-55ef-461a-99b1-af4e3ae2786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4eee60-bedd-4cb8-a822-586b88196bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38171976-481c-4063-b9fe-e5fd968120e3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944e2647-7057-45c8-ba3a-1e9af36a0055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387357d6-136c-404c-8eb5-86a0167b2dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e266cb-c6d9-4c67-867f-0af2dacb3f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05699551-532d-44a2-bc87-c1a92d237838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4f6752-7aec-4bce-9699-4ac19cd0ebf0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9d8b27-6c58-40e6-a06e-01e509d6265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd40268a-db20-4fde-8287-7f78ed4950a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d926af5-acfa-4e3b-ada3-65dee79b468b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9afdef-10ab-4198-9a7b-056ff8e8944f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81d1528-96fe-4d09-a1de-31b30fde930b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c6e9df-7efe-4620-b374-62465c759e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb4f8d3c-b272-4db7-96d1-f8d41d7585ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff6c8de-4f8e-4a68-a4f2-40e8b64a60c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "263a13dd-07ce-4fc6-bd94-809d6d62e538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0480605-d921-4a26-9f43-2401e6310d49",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347b4600-2a91-4086-894f-d470f9e6a310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2d0697-0bf8-40f9-b481-1cf5cbe00da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab9b391-c94f-4be8-bc2d-7406f54d40c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b92f14f2-fe2b-45ab-8e53-303ba65b3ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8e8290-1dde-4c39-b269-9510948502c2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83018a6-5972-4018-ba00-39d9116f608e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f913c911-cf88-4b17-bcf5-5d59700d59fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1813d29-66f4-462f-9df7-8a09501e7563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1370c66-6b03-4e71-b508-54e71386a187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eff20dc-ee6a-47b9-9c08-d08f0818a399",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a56763-2194-417f-948a-fd21432deabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a8fbcc-d92a-4155-8ffd-cee7ab2be0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe57e1a-2760-48ba-ad91-c6a0685411ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbee31b-50f1-4fba-a3ef-379dd814b43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57928785-1d78-43e7-85d1-15dfbaa2e7d2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528cf1ba-4315-4239-bdb2-30e674a924d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a8ef3d-18c5-40e2-a30b-3daad4b0b4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9abeaf-3034-4155-955a-59e12efbdbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "376c0a08-1f4a-4068-b7e0-b5601a4e2771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26430904-9b05-4c77-899a-b8760deba83d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638d1512-d9cf-4311-9ada-0ac6f77d9aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab2c1fd-23a8-4bdf-8f52-4797c77d24ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d5ad83-3bc3-4c80-a783-77007123bb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d28de418-ad6c-421a-9d9c-1ff6efe82bdb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0846fef-33fc-466f-9802-c52b73aaad2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6794073-d1a7-4d82-a69a-212af6a90587",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5171e81-f7c0-4177-9908-6f94aae38153",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a72b229b-8fd5-480e-bb6e-c1ab47d04c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c98382-fc57-48fe-b3c6-67a36ecb0c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74ca524d-059e-44ad-8322-c8e7506046ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "397cd6db-125d-440e-8fd3-08b3424c7ac4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d80c5779-cd1f-4218-8b45-b39c20c75daa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59a47cb0-300e-4fa4-b73a-134e7962c534",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de16e1fe-18b5-4c39-93b4-19774ca6a27b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4ecf759-82cb-4dfc-b2e5-8f89e42b6f3a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f92b5f46-3946-4e7b-a72f-5764ed4a0d74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ad110c8-fa8f-456e-9cba-79ebee55cddd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55d5b365-133a-446a-8f00-ee93678ba166"
            }
          }
        ]
      },
      {
        "id": "0266755f-2939-4906-a7e3-3845fbe3180f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "039ad6c2-d142-4b9c-8778-b8a8eaa01e4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bf718e3-cf7a-4936-8a1b-422c6dfece27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "108057cb-5ffa-43e2-896b-019d2582f090",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc25eb5a-947f-4d17-a298-6a0177fab2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16aa22b0-ce48-46cb-b588-cccb19b8a361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d6c220-35c2-4add-b138-7d5951ba7837",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c88bf5b-ace5-40b0-9600-81635c762fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fc7720-747d-494d-8db4-76730c71017e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d3b6ef-9723-47ea-b411-71e4b90fdc49",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776d764-e83b-4ae4-adfc-1961325814e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b488212-b4b2-4e47-97d4-74431001985e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fef569-5632-4b83-a358-b092cef34b66",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8ec60c-a07a-417c-afbd-c12fbe5720c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193647be-800e-4bf1-80f9-ceb7c1271919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff56798b-842d-4ef6-8951-596f472b963d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46f7e7-7ba8-484e-9441-eb8131b904db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b56be8-23bc-488c-802e-56eaf96edfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a596c72-c97a-4b0a-9fb3-d35775c33d76",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0410bed-3b35-4b9e-bb72-c820b9b08959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ae9a23-a884-4cb5-b508-8b9a19fd484d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb83b1d-31fc-46b3-aa26-0fe4c81aa388",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c83fd70-842a-4b61-acb3-bdc8b5f7946e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b7d1fd-80f8-4268-8bb2-422b60772b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b16dd4e-a8f6-4baa-8ead-f6b330c559da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d65b68-273b-4f66-a56f-49a778bfed32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3716e978-d6df-4ff5-b0f8-b7ca687c5794",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946a7b94-3af6-4d01-bc30-c2ca99d87877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe7aac8-80ca-469f-805a-de688b5d6b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532e83de-cf22-43bd-84bb-5b0481c50742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d4c0a7-389f-46e6-bcc6-399b9d645dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79a2662-b152-48a0-acba-ba6484de0690",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43aacc6-3af8-407b-a0ef-bc6dc1af3b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff582bd-515e-49c5-a738-e21b13e2b2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba44d1c8-4e7c-41db-a4ef-18291852b833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc1b781-278d-4cd0-bf01-e909ad9df538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b4cae-c623-42e8-8cd9-c0f5c33eb85c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96b38d1-5951-440f-9094-f40bd183b3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc46170-8442-41ee-8235-6a1c4f88369a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22ad1be-cf7d-4188-bc15-3bdbf83dbefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d081a4a0-3789-4cab-b618-bc108cd6b1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d9d65b-6647-466b-9052-eaf936905aa9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d1b8f0-631e-4624-9ddd-ee27bc51d6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59547510-2f7b-4f27-8bef-5a475210d6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84736320-e906-4635-825f-6e98499ad5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d3dd44-5f0b-4792-a7fb-9f93cd256846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a840ac2b-f917-4466-86a9-daee4081bbb5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7334374f-f22e-4f8c-a940-aeb39215b402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62bf377-0e3c-41cc-8cdf-7467dae67b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984661a1-7ab0-4a25-b39b-71586a0d97ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51a89c8-21e2-444d-aec8-9a9a8bd0ddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51178b5c-d193-4d2f-b120-03d9f677cb84",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a61c29-f383-4456-b951-8a90a0e9153d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0350ab2-5711-41e6-8c41-2b1d80097b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc6ebb2-1281-45a6-b88a-333db56e4171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e3fcac-b0f6-468b-b0e8-03792ea29037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0caa6f-3472-46a1-8823-bcb4b4968046",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866bff31-8be6-4040-a34a-397a24846897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f73257-2bc4-474a-a081-1176990bb2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1abd2b-1fbd-4612-8d5e-b874609a75b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71300d2e-d300-49ff-8ab6-4975fdc9eb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57894ca3-2261-4e13-aee1-395083ba76a2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37778d9c-f9bd-43b8-b359-46fb35d076c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518a9627-206a-4c4b-bd3c-1f7473f037aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893693fd-2db2-4de9-958c-a5cb5b489558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f401b238-5daa-417b-897d-5b6702f0dbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5904a0d-20da-4ef1-a809-456355619e94",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee118ac4-3118-4532-b23b-00e858f25073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5da74b2-05c0-4af5-8e7d-dd130e80fbf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c940ca4d-27ae-418e-b5c7-16b4b09d7ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a7c3f0-6181-4ce2-b376-953a52e1b5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12c1a14-cb8b-48d9-9e82-c40f962d6135",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9535b442-205d-4d2a-aa34-0cd20c29656c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d825501-165d-499b-906f-e5e6c18fed94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6af2194-31c8-4a35-a0d7-20df8699e85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd81c530-06f7-4e01-ad3a-413843fa9644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a51b41e-c34d-43be-be1c-bd18b2f871cb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ab3a3b-cb23-4668-ba3b-866d7095338c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e722969-cdd5-4fc8-8f36-9ce18e92a50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc6cf44-ad96-49cf-a97a-3463f26c03ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bee475-5167-4eef-8abc-0e5210627084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f14a2b-1803-4ea5-8fa0-825b5a4e1330",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d4b2e3-8163-4553-be2d-0f9a69b0a40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e857b822-3f2e-4d5d-8bd4-ff03d8db353a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c503136-9e6b-4aa9-b2b2-e468707d91ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7600f9-bf60-45e6-b61c-7aa822049e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959f1ca4-5ad0-4a15-bc23-a0fc97a2bd2f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8561377-735a-4ee7-8fbf-d793325898c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32866d92-ce8f-4ce9-a0d5-946f45c67749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0e1d6d-0cfa-4e71-a546-52208f25d19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ab560a-3704-4292-9715-547d21bceff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ffe49b-3ef2-4531-9a25-8a55e180ccde",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aae649f-4703-4d14-805f-6d1ac0b135a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9ff491-dda7-4452-9a59-eec6fb1c8015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53376e0-fbb2-4c25-9dfb-b6c43416b189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441ab0b0-9fca-4b03-a9f0-4f4930fbd5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfed74c-38d7-4241-892e-d607384d3377",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b93b36a-cd28-4e8b-96d4-87ce61067dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cff80ae-17f2-4b0a-bebc-e0ef9ae345cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28361758-afa3-47f6-9af1-ffa583b246d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2131031b-414c-4979-a3b5-234a319b7f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4045bb5e-8aa3-4b66-9a0b-d0fb382efb04",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecbe0fd-9f90-436a-9d30-44d2b160eb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7697c4-0e92-4383-bd79-1678ad7b007f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fef8a90-b4e4-49c4-b0f6-268839b56f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4a6fea-fec1-494a-af39-8da06b0d0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf2710c-ebf3-480e-a5f3-adf798ac9a57",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f237d338-545e-41dd-a159-5b39f4c84d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8af3544-869c-462f-8c1c-c4a848fab5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4affc521-9662-4d72-8b67-3d2f78304f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc033c40-d925-4534-a8f9-26e8e5985ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a80ca2-593c-449a-a46b-12f1433e780e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd25c0f-ec98-4942-8edc-0f0ae7205ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c756f6f9-8cfd-4fac-991c-8ec17067b488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1dcef9-7da8-4830-bf8a-9c7fde24d6aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85aa0024-23d4-4f59-9d86-71a77e7ba375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe61019a-1150-49f6-be10-a66ec289b21e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b55a66-c7bb-4319-984d-a2bb876402ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10e6e5d2-5322-49eb-995d-e156604ddc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0952da31-204a-4f78-83e3-1a15680d6300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f615fd5-4913-4c7f-8ac2-9ce4eba47f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91e7e89-6a36-425a-862b-317fc95a707f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e78a9f5-6274-4a03-a42e-cc51c4d55f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937bcd8a-c1bd-4f1f-b8cd-1606ea129671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0be730-d05e-48f4-a56a-db4145f23072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8834c7f0-a402-4226-91b6-d0c82b98db7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd872d8-b8ef-4588-860c-c1496c34daf0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe0d697-7510-44ca-befc-dd0778272879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cade30-69a9-43c1-b8f9-579d316dbd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08bea50-2135-423a-8175-4ca86e7b2117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a13b3e-ec10-4639-809f-72ee8ac7908a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf68264-c44a-4c20-b262-ce7dd79e7741",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f6eb2b-9316-4b67-b661-7a6aa5f9b97c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac6fdaec-c0b7-499d-992d-d48c3aeb5748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b58459-aee9-4a31-8730-68b780782f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55c1cf5-30f9-48fe-afe0-cb7b9736b92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7af4b-37fb-4363-9953-3ef8f5e65e73",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb37f7b2-8467-4c9f-916c-8d0bc19814ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "837a7490-8983-4469-b3d0-c5a6666db009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23a033f-9d2d-4b9d-a73e-27bccec17656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a9f2a6-6bff-40a5-9d87-c049d6c36abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d92f85-b5da-4e59-8e6d-14bfda754247",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f264f3d-9e10-466d-a2d9-ea7b4e17e611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2849ae0-1221-43d4-8d48-fa7126743536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1c06c2-6ba3-40f7-822c-fb9fc66d28e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfa5203-d582-43fd-91c1-cecd91afe96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6853428-7c52-4b12-8633-6cef485ddcda",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2e62ac-dbbe-4cf8-8d33-d965970b1535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3312c437-8858-4a37-aae1-dbcd7b2e72be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f246c5-8eb6-4dc3-a405-e83e580509ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c5584c-4175-47e4-9a23-255e4d2482fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64037bb0-5b05-4ed8-9650-eaaab00070bc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973c34b3-66d9-48c5-a6e0-c59c360b6536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3237ac24-4281-4128-b3dd-c2c620d8380f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b286f3-f6a5-48c2-9720-908a7bedf0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6dd4fa-14b2-4d4a-a9ba-bddfd85eefd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b898253-269f-4e2e-aafa-8783a0dd8e5b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2e86da-4bbf-42d2-a2a5-afda1f98ff61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c2e26c-c945-48dc-aebc-2746859d66e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1932fd45-a0f0-4dd9-9d40-7dfaf6c0fa56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d548ca-caa8-42ef-80d5-2841fa81eae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28adbf3-13af-447c-8f20-b9bcc7b55ef2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f958759-8f35-4a2b-9df1-0ee235f61107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcb1077-bbad-44ae-a4c4-58f6ede466e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b7b17d-f7fc-4b4f-a64a-984353e143dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7280f4-9fe0-4da4-8f39-91fa3c99fc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35598402-aa6b-4a76-a3f2-681322f6712f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6860bce1-430e-481a-98de-fc831aad8c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f9049d-2561-4e5f-bd4d-dce124499501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd4c2cf-df15-436d-9752-76d0833cd77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adefc59c-79dd-402d-af62-855a0d2292ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fab1c3-6ec2-4a7c-9c8b-68c0412292bc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5ae4e4-247e-4bdf-a6a9-faa5d999a949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003eab9b-45c3-48c9-b9a5-02ab744a2969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f2303e-c3da-49c0-8a8c-c83247b9e34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f74fb5-435e-4fd8-8b8f-714ac95dc65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfce1cb0-1e9d-4fbb-b2e4-ea35e731f2b1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8a113c-b719-448e-86cd-68a3f7c6abb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a1895f-93d2-43a8-b6b7-49653076a722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc53235-8fef-40d0-ab6f-ce9a7e7eba95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5754cc-7d60-4403-ba38-77db9f093c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bbad0c-1cef-4a1d-abd9-30fa62d9574c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6880339a-dbee-4467-b729-f48c26ee0877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ea4930-11c5-4c3b-8a42-eee9df1dec0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02237053-4f35-460d-a12d-9e82faf2ca18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32952b3d-f3ea-4d94-b29e-bfbdfb168477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2644af2-3e89-4b28-923e-5d15c33ec1bc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4f5314-6db4-424e-b29b-a5d7388c9e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f87c33-4b7a-4b01-af87-5025558e912c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538f4b18-7dad-492d-82d7-f68464dd7c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbf57a8-b631-4020-b717-50dc8a95759e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4633ad1-c919-4c43-97e4-07703b6ec094",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d7a59a-762b-4b67-89be-6ddb18fe4472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbda1b2-df99-4693-ae3e-a09d3ad412ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b1e880-0a3a-44e0-83ba-0899e78ad346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f4a51f-2415-4403-b0b4-f2e2d103ac2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16a4c9b-fa21-44f2-9e6d-5858f6e0f4be",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a1b904-b2b3-433f-a47f-9703633e1441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e545e082-19c7-42d6-a1bd-954807883f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "277d0092-1b20-4bcc-b924-0c66da1e2e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5928255-6648-42ae-bafe-afa6dd7c4dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c560c906-8608-4235-9b0f-3b610d1c58e2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b88bfc-ee8a-4bd1-a2ec-a13474755144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8e3004-b033-48dd-95dd-cd4d9021c444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989333b1-97ab-41bb-91d4-98eecc3aa866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6068b999-a3da-4042-a6a6-82a9acdec233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eb7466-d5b4-44d9-b9ed-613c1042e4b4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1882cd1b-5029-4f2a-948e-a03daf2151d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89fb443-c750-4ab2-bec0-3f6c841736ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e047e80-7f72-4658-aee4-61322013161c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e27cc9-5e85-4615-aedb-eb41b24df7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419978be-5929-430b-bb93-de665e758a6c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21660cba-68c2-43ca-921e-3bf5bb30d4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96e92e0-eb34-4b2e-a333-e5af57019091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7636fbb8-9466-4f54-99d1-40dd48b8b361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4689693-f44e-4b43-9be1-e53d2ddd0cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c06146-bd77-4659-b44a-80e105635eab",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d37e24c-96cf-4903-9b1a-f0c473361b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27928a6f-5e6c-4f49-82e3-e3ed845775ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe20442-fb61-4db3-a4d5-8e6540a8ce68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48e1a0a-8273-4564-ba4c-4dcf3008d938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674af849-242d-46b6-8796-98ccc8398d68",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8483e9-bb0f-4678-ae4e-b075f5349dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291211c0-7be8-46d0-8c6b-53b15df32dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22529e5b-7e26-408d-a889-fb8e3f01dded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ba9d6b-6694-4b9d-92f9-9c1b58635b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0510399-7c1b-4aaf-b318-baa4048fdd02",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14934df-56ae-4e4c-a9b1-a918179e127a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9dd44d-23ee-430a-a466-7a39c386ea3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b76632-e489-4eb9-bb5e-7a22e2133428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b38532b-8450-4ddf-8b73-10d91647802b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7371159-1d87-47e2-8e44-51c113e0f5a1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92228768-0db6-4b64-ab61-3413cd6c3962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc0b529-e34a-40a1-aece-fd6094d9aa4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bad314-0e1e-418f-afc8-42fe8f0c1490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7106da50-5076-4696-bbb6-4eb66074dfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb3ed67-a4aa-4ece-acf9-b0c827c39ee5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d38e23d-efd4-4042-abc6-354ee4d3fd65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e6ea95-7e61-4f78-8278-7b820601c715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6aac66e-68f4-4d2e-9c53-e6421439ba4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5638e6-35f0-4903-a69d-23449135a61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e70804-c868-4d1d-9711-fc192046cbe2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c790620-df20-4c9a-832f-302325431ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66be3e73-6f25-4fdf-866e-e41398dcf2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37c773a-5f03-41ae-bc15-9ba2c98f9748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2292e17a-9c20-4300-be66-27fa3e53569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b574d7d-9023-40c7-8568-f8963921683a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2326f1e2-4de7-40fa-a967-00c09c8504fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53935e40-cc85-4cd4-8349-651846c769ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089c2ac4-94e9-4c16-955f-e9c1e1cdc13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8891f17c-1c1e-4fa7-afbb-08d86de5cea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4ef60b-67e5-43af-91c2-35425916e2c2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c089a021-7a8c-4a41-aa92-b040da10970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca393874-838d-425e-abf7-a23c18705a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d31a18a-1a36-4a59-9858-0879946b14e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21022fa-0211-49a3-a0c3-746e092ed8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706ed71a-c9f9-4b5f-a8e8-50119f8232d4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b8fa4f-1153-4ef7-94fe-3d127bfbee13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b98a66-b6c0-4a31-b24c-bed0e3b4979a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9952259e-4eac-4d38-a486-0a00de3c3678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fdf372-eb19-497d-adfc-343cc1d10725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3515c97f-133a-4dea-96b1-d5d81525b02b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a746875-967a-44a9-be7b-e44c0f5a4c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dec02e5-1695-43e4-896c-f27a4fcd0247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c669cba-efab-4c17-a22d-07a6c77dfaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94506931-cb50-4247-b8d8-60cb97ccbe17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e7aa87-9e3f-4a5a-bb3e-6a6670a8dbca",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ff1c84-bdff-4ced-88fb-ada6be2fb35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bf8f28-9715-4a8c-abb3-b361585bcc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c55bcb-70c2-4bd2-947a-8ac66f646f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929c8660-d88b-4c66-b36e-801553ac6b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cae677c-150e-4682-9d11-1a999406ad52",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ff8642-221e-4271-b601-3cff884d99ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d18eb3-aca7-4743-a248-7ef23387cb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bd6eb3-dcc0-42da-a206-299f44632ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ebedb2-642a-485d-b9ac-c60ae9399cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc252a7a-a97d-4806-b596-911227904a68",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697026ff-52e2-427d-8bfe-4aa31f2f8168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d009e08-249e-4ec9-ba8b-082f419531d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd46964-6d2f-479e-9db5-aad78c8e34c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b291310e-d335-45e3-a224-e0e77241d057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8824ba0-8b89-4080-a547-38a5e2d1592d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9061fddf-0bfa-4f0b-9d37-e818f96a7f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faddd4e0-dbc3-4b03-a1b8-7cf47fb816a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a623cc1-50d4-4048-9bbe-d3af9b685cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497415a1-dc41-4b17-bd1e-d3607e6f1163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c0e1b8-c4dd-4450-a5c8-0b374492b1cb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e8e485-7f3b-4aea-8783-7aa96ad86afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5025111c-058f-4d2e-81a9-354393051564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f50afe1-ffe3-42b6-9915-128bcf28e5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de53110b-5d34-4756-946b-7f6fb78f3128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bb251c-f3f6-4194-b5a4-1acd1057a6cd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72826b4-cfa3-4ad5-9cd9-559ce78ee0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc6b875-64c4-4b6d-a06b-41abd514d988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41adda1f-d85f-428c-84bb-7cbf6556e590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bba65ad-40ce-45bd-93fb-c46f4ac12064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7089967b-859b-4ce4-9e2c-6714bf7f87ab",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a3b381-7ae6-4015-afcb-697978c1fb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48397528-9d9a-4bca-ade8-61426fa0ca24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa405b52-d2ef-4722-89f8-dfc648f72067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e73a72-719f-4b77-ade6-403f1fc3775d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7daecf-1e14-46fd-b5ab-65c9e045015f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3692d66-7f70-4d40-ae51-409ec899ca3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029a95b5-973d-418e-96e9-dfeff1c38c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19feb03a-3940-44e8-be7e-3dc0a7b7c2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040779d0-55e0-4689-96fd-c9af428c0e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c435b8-6872-4de6-8c3e-cd119b2376fd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000221ca-778f-4865-97a8-e0a69a5dd4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12222a0-9f67-4189-8ec3-18a641bbae8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5960be8d-291b-4f78-a03f-7952b0acf801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0720c8-63e4-4e1a-8bdf-1c830a6cb938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cd8bf0-b06b-444a-9fe4-f9d5b8f57609",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec180089-4d04-46fe-8d19-c98c43bee1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd65b750-1c64-4b5c-beca-4fc058cd00ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246c67ae-36b9-4499-a1cd-7d735dfc74d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53f518d-e72b-4960-8091-fb8d8a52eb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637da3fd-a9ef-4671-bbcb-c389b1177d88",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5491378b-b831-4276-8a4a-160e4a1d8aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033b6058-9474-4839-9688-724a6a0be1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aeb7928-2b8b-4e1e-ad6a-37c8d9f3b97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c55370-878a-499e-a50c-bdcfdc6d65fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d61ec3-cff4-4d36-91b9-e0a7a2d61d48",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f60118-ad80-454d-b3f4-eb99aacfb709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5994639c-bd34-4cc5-8d89-f9dfcc3cfe07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a455263-1508-40d0-890d-cfa97672a238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530dc5ce-40df-40c0-808b-2cff955c0dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d90a647-450d-47e7-8686-efce6b90bec9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac124111-57eb-48a3-bc36-90f15ea460c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adfee251-127f-44f8-8fc2-cdf04e13b51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d887b77-9092-4faf-ba06-5ea7cacffc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95097ce5-2ff5-4feb-ba95-70c3b2ede724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc81e01-eb37-4240-9701-976dd225c26e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cf3689-7776-4439-83e4-4cda11623f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03d79830-73c4-4d70-a064-b717d9aab9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe57ca31-68f3-4088-bfbd-ab4a9b3f73ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9020ffa6-ee41-447f-a49e-04265b6876e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed9fa49-6735-4c0e-9180-69e576d04e99",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7e9743-86ca-4627-b15c-43bcfb39c3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72784503-9e86-4231-b317-116b78d42918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1764d9-b040-4371-b027-4203c63c6d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b41822d-5274-451f-b38d-9739ef000a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07361da4-c51e-4722-860f-75f5f2b38dbc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3a1d76-5e51-4d7a-aec3-b783b9d2ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daca413a-aa76-419e-95c1-38eee59904e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2027f987-d642-43f4-8de4-916e4a52580f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9610d24e-8003-4b89-9f10-84319f3c19ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0c36c4-90f3-4c62-9a69-02b834cff8c4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da38b9ff-0212-41c5-afda-30a36c7fc545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22ff1a6-6588-4601-a75d-82d88afa1493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17722831-067c-432d-99f7-4b620adc16ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122fea83-4de9-404f-afd6-14d26e5ce897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c10a0fe-3fea-4427-af08-a9cb2cda92e3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b9d7f9-70cd-4377-a4fd-b78c421ddff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77094f43-25bc-4e47-9cea-961a31b517f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eb57e4-299f-44b4-8fa8-438ac5ac431b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa081079-e0c3-486d-9b84-722bd4be6854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d292c98-b6ae-4e08-9d0a-8882c0cb7637",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ed06c4-b8d5-44ff-ab1a-ffde1fbd68f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26888bfe-e870-4363-8114-784f6ca49d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b7a9d3-6f05-4fba-b566-f303d971c1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab221ef7-cce6-4fbe-b4b0-2b715d8c872e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70771fa8-2ab2-4492-8755-bb06febc30a1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab8083c-8dd1-474b-b353-cc682790f576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "917c66c2-b39c-4973-99d8-9e18ea1bbcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1449886-fc99-4e79-ba34-3488d6c3fee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275b41ec-1d18-460c-a5b9-d2c543e626e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27ab7ad-dd27-47d8-a7ce-8626d9b30d4a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3402fdcc-5ab2-4eb0-870b-af5ea162c483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95e74d0d-8163-49fa-b0d6-18d83ed4e29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ae1462-c99d-440f-84e9-c18c3469f105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8394f8-2cec-40ee-9205-20f7d4fd6a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1fa5d9-5875-47b8-b5f6-bd1715043693",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe5eb44-6847-4711-83f4-7ce5f4dcdfeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886017cc-cd9e-4bf1-afaf-818227574c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae52973-168b-4c60-b3f7-3407aaba626f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456a9e37-d5e6-48cf-915a-f155e51b4947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0c9902-934f-4d0e-92a5-5352768554f6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e4004c-72aa-487b-836e-12429a2e4231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d199b88a-0b26-4ec8-898c-80ea1daf601b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375d98a0-e935-4908-8f17-644269e9664f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b70a73-a1f4-4533-b4ab-5d9bf91b59ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc61cd2-d942-48a0-8aa2-244f562c44b1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8928dd6b-f62e-4184-8a52-18c0e3b22e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bc51991-b67d-4ca9-89d0-c178c3d0b4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161fd53e-cc5b-4b1b-9d94-130c8822fccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0056e72f-6750-4700-bbb0-d2191fc1a556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b91872a-af36-4f06-b62f-32c6eeb5a6a8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c8167e-e6f2-4c62-9848-9be91e56f073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1178636-840c-4bd3-97cb-9b1617030664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3ce1e6-7661-435a-b0d4-388848aade58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a54744c-33a6-4f39-909d-dcde329a9db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ec7da2-ff1c-4e21-a93b-07ca7f3c33a0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bce0f16-40a2-44b7-a9a9-c8951144de0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c6b9475-d370-4af9-839f-f1a80462a38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b97afda-ca88-4b9d-b1e9-dac4010ef14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe78bdce-6b3e-4eb1-b080-3047f68b05f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f742de3b-40ca-448f-b9bb-897d6261be26",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf42d37-d9a3-44a6-856b-ce47c625aa20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1473ae8b-0d21-4bb1-af11-c20e975fa74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7094516b-c65a-4fd1-849b-9cceb3156d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ca1ea9-40a5-4610-b64b-9c0fa78e92af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8e171d-59f8-4e3c-9eee-7ede906ce61a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c43797-a0e4-444e-83f0-910f084c4dac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc83aa22-5dde-438e-b74f-76db8261d687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa28e4dc-5b43-49b6-b7ef-4099d515acfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8d2f6f-3a57-4839-8d04-bc7632c5c3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b7ec3-ed77-46af-b1d8-8f832925704b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f5065a-50cb-438f-bb4f-625420052937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c53623-06bb-4c87-9200-c42f9f39895d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d24035-5af2-45c6-821a-8edce64043b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3ac31a-52da-4947-8a20-c4e5ef8b23d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e791a82-bc47-40bc-bd70-d25e057f0cca",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69cbfe0-70be-44a2-94a7-281f853fbef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b70bc200-bc8a-493b-b805-f0503d8980f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c2b1df-5004-4d35-ad6e-a6a0b75ad55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe115ad-c2ce-4e25-90c0-a5b9df80894f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379e335d-b73d-44e0-b24a-47c7034e6f36",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8c2ac1-a7b5-4713-b73e-0550d4cd166c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe532f5-8bdb-4d78-b937-d8cff9c74269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd58d308-5a09-43ac-a3e1-fd2bacd1851b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42119fcd-ebc1-49df-a73e-95b221f40ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6143e67c-5cb5-4225-94da-daa8a82502de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7a0e7a-bee5-49d6-be57-68254b47cdbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a4baaa-5922-41c3-ae54-d598c0224faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdebeac-5eb4-4bca-af16-7bbf94c34e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdaa5b76-b2d8-4915-bed7-aa67bab31b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acec0c0b-3e63-4fac-be92-591b25496dcd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e03bde2-64f5-4b6d-849e-539217119655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7180dc-7819-446b-bb67-7c8b86846f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81975220-bc10-4af0-a494-6bbb84187735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8b71f8-dc7b-47fd-90bb-1ad591cadc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab8d52f-1776-48b4-8c54-e77859255024",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187246f1-acc3-406e-a7d8-38a0c88260be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0e5b72c-497e-4d43-9d25-9aee69652367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010d3f85-c631-4373-93b6-9478f38e667c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a44382-65f0-40cd-ac20-128ad085b500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32f2bde-58e6-4ed7-9fb7-dc8086787a9e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ca5d58-b432-4d3d-966d-1f47448a20c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32dc085c-c37e-490e-9468-09b1ba4bffd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c966365e-9baa-45d8-bbb5-125359076471",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c68668-8964-4131-b0cd-c7ec54870519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1eb5a93-498a-4ab7-87e7-dcf88c35eedf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343ed689-575f-4b0f-b392-592db3a5084c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a46c9a-13b4-47d7-ae53-f57fde7fe073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec62eab-50b3-416a-8fcc-ecf8d7ee2bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f13d264-dec5-4205-abb2-914207ac9671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26ab28c-dd0a-4df7-8ae4-3438cf30240c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d4f6b1-691f-478f-97fa-89b7d3300fd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04ac4f8-7a2f-491e-90d0-bc543235b4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bfa95a-523f-49ba-a36b-83f7247148fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5264e1df-b9d8-40cc-91c6-019e30181ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2527a5-3cfd-4ccf-a58d-939b80037072",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdaf90c-e58e-4c26-b62f-64858e8608bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b0f4f3-e7d9-4021-bd63-b19bc1dec2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48580332-a0de-4983-9850-f3a593487532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74083ed4-995d-47e9-a2ed-81253e7f6b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05a09b6-3c2f-4f27-b692-cae43b9d0d64",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f02b713-5bc4-409c-93cf-993b55deecf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005ad83a-5479-4f35-a2c0-7d76323f459e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4fb2d3-f103-4541-8d04-6059740e2b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf46b58-82dd-4502-984b-a5261ebfd943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e45352-f2a3-4375-a551-4d64b9e0e729",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0589e-c5d0-4e7c-b726-3cd8047dc2e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05eeb588-adee-4a3a-ba61-dd13d986e949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af48dce-991d-445e-a81c-55f3efc7d871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0210114-726d-4781-ab79-016636599762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0e9b25-f47b-4d48-9ac6-bbfecdeb0334",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b0347b-8153-4463-968b-020087c1ae2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53bda9c7-9a35-4e74-913c-812d26ae539b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27632170-f05d-4676-a078-5d9df8acb919",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab49db9-087e-481a-b4ca-29a08e4bf8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65231e64-729e-4304-97af-4ed5c86480de",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7886b9e0-0585-4c10-b004-92ea4c7b1d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa1e799e-7586-4fce-afba-50bddbb21b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1bf3a5-6cd8-4610-98ff-a5fecc2d3836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158cd986-db96-406e-8459-b8cba098cfe1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f75ac2c2-da20-4c3e-83ed-5089556eac4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79404d63-6ca6-464d-94cc-b0e99e67da45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ff2fd54-f47e-4b76-a525-625b40db4feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d3ff352-9dfa-4e01-b4ae-e0cfe029d632"
                    }
                  }
                ]
              },
              {
                "id": "541f8283-473f-423b-bb76-2a3190272286",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "846fea21-ccca-4bf3-846c-99be0c29b262",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4378a76-9903-459f-ac16-dcab8a5ff531",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "839a0075-fedd-48d6-8105-15b57ef0ece9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4bf5c3-635c-4f55-a200-d08cbeaf53ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "065b1b09-2061-4f67-91f6-55a0c4e559da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cffa3d3-c94e-44d9-9ae7-5978aad93d7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3602a9da-de73-4bb6-9fdb-413f9d39eafe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3c13a43-a2f4-450f-801b-b402f9d15247",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3a6c9a6-c3c0-434c-a3e3-9ca343571712"
                    }
                  }
                ]
              },
              {
                "id": "3cf62dc4-7978-4a1c-8816-7385797025cf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c363bf02-398b-42a5-bce6-fe598338f912",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27582e7-f45e-496a-8250-1482558df721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "63b7b85a-405e-4d56-ae28-344a0c8abc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e775de67-34cf-4cff-a90e-9a281f698d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a45e73-8ee7-4f83-80da-a03fed4be9d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d7d566e-81a3-4f90-a025-1af101ced8f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9882ca14-dcaa-41b5-9746-85b50d989947",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ff89afa-676a-447d-94bf-ed4c41f27087",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f288f8d-5005-4fe4-8926-6cfbb64d2c1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc5a024b-92b1-48dd-9e3d-d234c546a962",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2da7660-4763-4f65-887f-8da803df5910"
                    }
                  }
                ]
              },
              {
                "id": "89944165-b567-4f46-a0ce-86dc7404275b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "110066b9-ab9a-4b96-a262-34e7d406351f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ef48611f-6f27-43a4-8017-b9a0fd79b367"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ca6761f-a8b1-42cd-a6c3-8e6f2b9559cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0a4cbc5-bd71-4ff3-ae3c-a10e041e499b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53a49afc-45c4-4e16-9b61-9949a969b04f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c5e5036d-641e-4d69-994d-22e603cb2aa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4a19f48-d032-4c74-b0fd-8b9072a56e30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92ffd528-a583-409a-b5a9-214c4e4962bc"
            }
          }
        ]
      },
      {
        "id": "2b437d5c-54ec-444b-9ab1-0cf0f2cc7ecb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "14af11b9-6bd1-453d-884e-cb713479ca0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "479286e7-eb4c-49f4-bd46-db16bc9a64ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18ec843e-33ed-4074-afd2-481c3ecbab33",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee97f84-ee04-4a6c-89d7-e89a22040348",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b868211c-dec7-4ae1-bf16-98544e023954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e183a79-a7d4-4abd-9b76-6c030dfeab70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da866efd-e13d-4a11-ad87-48d38d0c4690"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8cc294-5f82-483b-9ed2-ba5e9369b252",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d3abf43-c063-4207-93b9-809f73d3736a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d12270d-87fa-4309-848c-c0cffec8b89d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f9f90d3-382c-436c-aeb6-f08fc1d22a82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e00eb735-2537-4c1c-affd-f97831e34d73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3589aa44-4d55-4205-b8ac-d2e5c9c1b6d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e9a6887-2f72-4998-9df1-dd4422b1358c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7a5518e-c33e-442b-8d8c-8db954414dbc"
            }
          }
        ]
      },
      {
        "id": "f2ef918a-c08b-4bb8-9de5-5a5e52bb30cf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bdb696e2-f48e-40a0-a360-7cfdf3929eed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1eae081e-268a-4895-ba78-c7af676d9c1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a4d6471-3a5c-4203-859f-9927594d35a3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866d605a-750f-4498-84cc-c912fff4e2c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b0ad53b-faf2-4d66-a762-3e830658d96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "250b52cc-ec96-479d-9d80-b16d39a73f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a88ff671-3929-493e-831c-3199f82b490b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96b65074-3666-45dd-9706-d04e10c24edf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "394dc849-fb6c-43e8-8c33-2e5c2ed4170e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41655015-16a0-4428-9356-70a75be10888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e0fab3a-7fb1-4e7c-8853-5e79a489c88a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a5aeb7f-49d1-4a4f-a0df-2af006803218",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0265767f-5908-4a59-bc30-31a97e0ca0db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60e537a8-1147-458a-a2e2-b307c3833da9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d433867f-709a-421d-ad73-6edabce65275"
            }
          }
        ]
      },
      {
        "id": "799766a2-dff4-4253-a359-aa79ff9ba82e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a9d2626b-ea5e-4d5f-beb8-f48730bc8506",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d77bc53-b420-4979-a18a-d2cf3ae05024",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "331b691f-00d5-475c-8b8f-7f844148bda2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f6290-cb6a-4ea3-8129-4328cb552fc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd1f0b8e-9877-4d17-8075-693d20b0539b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b2adea-8b8a-48c8-83bd-99808ad805dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1df12d1-2f24-43bb-b752-6dc0c91238a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "feb974bb-c413-4ec1-8150-7c7cbc2b4a28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6b9c6ce-3f75-460b-9247-22ff0e12ccb6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21c43541-ed96-4da6-94b6-65b99dd6e1b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "686a158e-882d-41dc-ab7a-c0bd28a9cf63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "866f17d0-2231-4f04-a734-3f8ad9e8b89d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "729a1c7a-0525-4425-be9b-5b229339e056"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cbe2400-4986-4a08-a3af-b2adf8aef42e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "986b5720-6027-496a-b26c-abee26f3a4a4"
            }
          }
        ]
      },
      {
        "id": "3cbd8de7-281d-4fa7-90c5-30ce8de84e2c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4a8fab1-f607-426d-9631-0fb3b93b597b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c1a3b6d-fe02-4513-9b19-937523ad2c39",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "423e7ca2-690b-4e59-8841-26fe942bf9c3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77c09535-ad4d-434a-a0e1-c5cf91b3a230",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c135990-112b-4008-afc7-e0aab3c561e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 336.08943089430875,
      "responseMin": 10,
      "responseMax": 12952,
      "responseSd": 1098.7588675012755,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686271529264,
      "completed": 1686271625208
    },
    "executions": [
      {
        "id": "7885681a-c58d-44d7-8121-f65c2d9b88f9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c3c338a9-f060-486b-953f-a53984070f55",
          "httpRequestId": "b7c62cba-8137-47b9-9b93-cf3144148271"
        },
        "item": {
          "id": "7885681a-c58d-44d7-8121-f65c2d9b88f9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6a2624e4-e8b0-400b-98c7-14d8cb108ee2",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "1d5e6f90-5a3f-405a-afd7-3218ea2e4bc4",
        "cursor": {
          "ref": "4fd533cb-b2bc-40d2-8fb8-813d27087cd0",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e529c35d-5b64-4ad5-817e-912982aabc86"
        },
        "item": {
          "id": "1d5e6f90-5a3f-405a-afd7-3218ea2e4bc4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2d0d02c3-05b2-405a-8ced-9f0d642cab37",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "9a05ad47-a114-4559-a3d4-fd7b1eab0144",
        "cursor": {
          "ref": "c1beaeb4-9de6-4bc0-aa50-4f2fffee5b36",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "49f766b4-1e33-4b1d-a0c7-fb8ea8a7a968"
        },
        "item": {
          "id": "9a05ad47-a114-4559-a3d4-fd7b1eab0144",
          "name": "did_json"
        },
        "response": {
          "id": "812b71a0-aa69-4ef7-9d93-9dfa72326b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 490,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0d9c9f-2043-4585-94fc-587b0878a132",
        "cursor": {
          "ref": "0878ed59-2e50-4dee-865b-b58db20d6b55",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70bcba78-c701-4801-9c04-537c4fd4e232"
        },
        "item": {
          "id": "4a0d9c9f-2043-4585-94fc-587b0878a132",
          "name": "did:invalid"
        },
        "response": {
          "id": "bce85736-1730-4352-a67b-e6aa0fe143da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 751,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4a0d9c9f-2043-4585-94fc-587b0878a132",
        "cursor": {
          "ref": "0878ed59-2e50-4dee-865b-b58db20d6b55",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70bcba78-c701-4801-9c04-537c4fd4e232"
        },
        "item": {
          "id": "4a0d9c9f-2043-4585-94fc-587b0878a132",
          "name": "did:invalid"
        },
        "response": {
          "id": "bce85736-1730-4352-a67b-e6aa0fe143da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 751,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7b31cb6c-7ea5-4d57-a3a4-02cc2c1fd16c",
        "cursor": {
          "ref": "bc349005-f08d-421d-a203-eb27c776255c",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "96246a19-11d2-44f4-bf70-02e508e001e4"
        },
        "item": {
          "id": "7b31cb6c-7ea5-4d57-a3a4-02cc2c1fd16c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4f6fd134-b6bd-4034-b4c2-b557885d9dce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7cd5a8-b96d-4ad7-88ec-c26307e52abf",
        "cursor": {
          "ref": "265a8850-68fa-42fa-ad8b-2642eefd1c3f",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c6e51a22-07db-41ae-ad59-b45b285a51b8"
        },
        "item": {
          "id": "ea7cd5a8-b96d-4ad7-88ec-c26307e52abf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "baf95fcd-a5c2-4ed3-aaf9-80291aee6c0e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb84309-bb77-4339-b149-b64d9520e0a5",
        "cursor": {
          "ref": "af38c0a0-865d-444f-b589-2df638787910",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6b049dc9-702c-4f4e-a1aa-590bd29e87be"
        },
        "item": {
          "id": "ecb84309-bb77-4339-b149-b64d9520e0a5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8a3791a7-c018-4c5f-aef1-d11ee38a7d5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "52d27f32-63ce-4a66-86f0-ed638e08960d",
        "cursor": {
          "ref": "6d98954d-3d8a-4e5d-9336-bd9cc01ed1fe",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ab07bb13-8964-47df-af13-ea6774563ac2"
        },
        "item": {
          "id": "52d27f32-63ce-4a66-86f0-ed638e08960d",
          "name": "identifiers"
        },
        "response": {
          "id": "7646f9af-ebff-4ddd-a9dd-76068fd369e3",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd81b3db-d0b9-4889-9484-eddf958bdfba",
        "cursor": {
          "ref": "3ceb8265-b1a3-475d-9db8-9360d3ec11c4",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6d6e2240-61be-4cf7-9d59-1edad3cbf90e"
        },
        "item": {
          "id": "bd81b3db-d0b9-4889-9484-eddf958bdfba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ac524c83-a580-4507-b82e-5d4231d6e1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a32243b-9bf8-4e36-ad28-d43196335f4a",
        "cursor": {
          "ref": "46e56afa-3438-44e8-b9f6-e77380a133d1",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bd529b15-24a6-4e0f-aaa1-dfb46c92067b"
        },
        "item": {
          "id": "6a32243b-9bf8-4e36-ad28-d43196335f4a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "130c6aff-3d62-4b53-8464-7bcf54c3ab0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22681dea-ce3f-4d2a-88b1-396946f01a85",
        "cursor": {
          "ref": "431981d6-f9e9-4f43-96fa-a0203f7641fe",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "787a4edf-affe-4f7a-a8fc-c3cf73de7e4e"
        },
        "item": {
          "id": "22681dea-ce3f-4d2a-88b1-396946f01a85",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4c3a2850-45e4-43a9-aee1-34698c58b943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88661ae7-3a6d-4bf7-b44f-eea8be4bcdce",
        "cursor": {
          "ref": "a83c7b70-6b7f-4fb9-8231-0f1dc14cc35d",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c431fb92-b64f-483e-b96b-326882f1683e"
        },
        "item": {
          "id": "88661ae7-3a6d-4bf7-b44f-eea8be4bcdce",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f13c6e70-ac2d-4712-a7bf-7716c66f9c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71e00cc-0de0-4100-8362-1eeb648af0d3",
        "cursor": {
          "ref": "01deb522-1aac-4315-86a8-584515214b12",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c1d29aae-c3df-4187-8e9b-ce998852bcf7"
        },
        "item": {
          "id": "b71e00cc-0de0-4100-8362-1eeb648af0d3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4052392f-4458-4132-b885-3723611dee37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff0436d-fc92-4497-812f-7ac7401e679e",
        "cursor": {
          "ref": "2794ef3d-64d2-4a69-8e93-055baaaff4e0",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ebf87976-e40b-44bc-b710-47a9e81de77c"
        },
        "item": {
          "id": "8ff0436d-fc92-4497-812f-7ac7401e679e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ec5ae7b3-e7d9-4e09-af73-76a0363561bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f379793-c657-4867-9acb-cd1b9efcc88b",
        "cursor": {
          "ref": "1a1042e4-e944-466e-9285-8efad5b1c558",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4b99d84f-16b8-4ccd-8089-0e1c7fbfe0f9"
        },
        "item": {
          "id": "2f379793-c657-4867-9acb-cd1b9efcc88b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "69a6f2e5-49e6-4c2e-9ccd-e2c9772e7b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e48ea83-5020-4e8c-8dd3-9a0b12956d39",
        "cursor": {
          "ref": "e7e71e4d-d45f-4f88-a7fb-93e530f6315d",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f25d2108-649c-4de2-9d92-e43c1aac4df7"
        },
        "item": {
          "id": "4e48ea83-5020-4e8c-8dd3-9a0b12956d39",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e3c1cc22-aabd-4978-8f45-f5c1963b40ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d17315-2856-43aa-b5c6-57576178cf97",
        "cursor": {
          "ref": "3301a460-4900-4cbc-b243-67407455c97e",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0feb9ae5-2e26-41f4-b608-63b39550afa6"
        },
        "item": {
          "id": "66d17315-2856-43aa-b5c6-57576178cf97",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "98a8ee98-a54b-48b8-b3dd-85522e5aa348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c1ed20-cdee-4632-848c-f1cbac8a0a4c",
        "cursor": {
          "ref": "baed6eca-45d0-4cc1-87d9-775a7e137df5",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "37808dcc-9ce5-4414-a9b9-7b2f06f9e3f0"
        },
        "item": {
          "id": "01c1ed20-cdee-4632-848c-f1cbac8a0a4c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "eefe89ed-75cd-4a63-88c4-30434e1d34c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aa60d1-5941-4ebc-be43-fa0b0603c295",
        "cursor": {
          "ref": "57750966-0b78-4098-a57f-712dcdf9f351",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "07092c3b-6920-49e2-8b58-7e1f6cfa767e"
        },
        "item": {
          "id": "e4aa60d1-5941-4ebc-be43-fa0b0603c295",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bf4396a6-3055-4f29-811d-d029729ba01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a9d4d7-c7a4-4e4e-bfc8-bbab27e28355",
        "cursor": {
          "ref": "301e788b-4620-4c3a-a862-15b950458787",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d6717eb6-a4e0-489c-aa55-10ee20062b32"
        },
        "item": {
          "id": "f0a9d4d7-c7a4-4e4e-bfc8-bbab27e28355",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ce3a137d-f17d-4329-b4e7-569f87f4c8ab",
          "status": "Created",
          "code": 201,
          "responseTime": 12952,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "adef3c17-9761-474a-9ed1-a73438c812ae",
        "cursor": {
          "ref": "016bcf16-e6ee-43da-9645-ba37298850eb",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f524e0c-c6fe-4803-8c7c-9c89cd4f1fae"
        },
        "item": {
          "id": "adef3c17-9761-474a-9ed1-a73438c812ae",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "54c156a0-d770-4183-b14e-f0ad78503b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891d4cb7-36d2-4441-8d3c-7a58c54ab024",
        "cursor": {
          "ref": "8894ea1f-4c9e-4093-bacb-6c67d097cbd2",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "86113dd9-f433-4a57-ba10-58b804879083"
        },
        "item": {
          "id": "891d4cb7-36d2-4441-8d3c-7a58c54ab024",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "19dbe799-e5b4-4f72-acf6-c69d55630d18",
          "status": "Created",
          "code": 201,
          "responseTime": 5310,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f9f9068c-d4d7-43a2-a5ba-213a37044759",
        "cursor": {
          "ref": "20049910-358a-43a4-a16a-5187828ef3e3",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8e8ed04a-b2bb-4b2d-af8a-3a2cf3df0b58"
        },
        "item": {
          "id": "f9f9068c-d4d7-43a2-a5ba-213a37044759",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "80e80a37-df2d-4f66-ba73-913b7df51a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7df7fe-c7e5-44ca-9543-cc75cbaabbae",
        "cursor": {
          "ref": "cfd04b66-ddf4-47b4-bf3c-10a78193c852",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4f02e2eb-1829-4e4b-8a09-6823b211611c"
        },
        "item": {
          "id": "fc7df7fe-c7e5-44ca-9543-cc75cbaabbae",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5005eaa1-2437-4892-bda8-85164f437072",
          "status": "Created",
          "code": 201,
          "responseTime": 3660,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e6b878cb-9b18-42c7-af95-744e3ca89429",
        "cursor": {
          "ref": "d064717d-995f-42c1-a422-696113d235fa",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ec061bc6-beff-453e-b57e-7579ddcda120"
        },
        "item": {
          "id": "e6b878cb-9b18-42c7-af95-744e3ca89429",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "693fad0b-c031-4e38-9ba8-cbf71bb295ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfc0cb0-6eb9-4c23-93e4-663e896d36e5",
        "cursor": {
          "ref": "64526f6a-a864-43e4-9b51-aeb164b8ace2",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4a704d3d-227c-4ea6-bcb3-f79803fe3d77"
        },
        "item": {
          "id": "6bfc0cb0-6eb9-4c23-93e4-663e896d36e5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "227e4987-5ee2-485b-8560-e5b438f71191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eceee55-2bce-4206-a62a-390a21dc7391",
        "cursor": {
          "ref": "481b04b4-4a9b-41bf-916d-ed5b355c3c88",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3bfe8fc8-75d0-4f09-9ec8-3570661038f6"
        },
        "item": {
          "id": "2eceee55-2bce-4206-a62a-390a21dc7391",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "77db356f-bda0-4a62-ba59-3515e3c58d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47eb895e-87c2-40af-b93a-6bec84b33cf5",
        "cursor": {
          "ref": "3e93a1b0-30e6-4d0f-bc91-cf8df904def1",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2d295e99-e167-4a20-bd12-c8fb43e495ff"
        },
        "item": {
          "id": "47eb895e-87c2-40af-b93a-6bec84b33cf5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5a82e834-f3a0-4372-bbf6-aec8c9edc37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8e0b78-8f4d-439b-af1c-f97a34ab17f2",
        "cursor": {
          "ref": "3241e7aa-6881-453b-82e8-b5b99b16ca91",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7cfc1ea5-e3e1-4f7b-b6fb-dc99a4ca5e29"
        },
        "item": {
          "id": "cf8e0b78-8f4d-439b-af1c-f97a34ab17f2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "58c365bf-4841-4760-9cf8-e7bac761c93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46049a7-63f5-4e31-9940-3408d0ddcb1e",
        "cursor": {
          "ref": "042fa26c-a9ea-4a93-b7cc-6d9b97b0853c",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7fded530-96fd-4aca-9e59-1cadaa5f4653"
        },
        "item": {
          "id": "a46049a7-63f5-4e31-9940-3408d0ddcb1e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c1068896-4278-4b3f-9a1e-c63fecfb656c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344e7d6d-c19f-4f1b-b8bd-e70c28d474d2",
        "cursor": {
          "ref": "f1d05e0f-4531-4a31-b5cb-4035e628cebd",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a0c6d509-1c56-4c85-bed4-641c1a47307c"
        },
        "item": {
          "id": "344e7d6d-c19f-4f1b-b8bd-e70c28d474d2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a5d188db-a2d2-44d5-859e-bfeffc552497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf99f07b-0307-489a-a4fb-3a0c54e4c9cc",
        "cursor": {
          "ref": "024c0a33-72d0-49de-acb0-ea496dcdd2f1",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5888bbc8-62c6-4174-ab82-e4144209346f"
        },
        "item": {
          "id": "cf99f07b-0307-489a-a4fb-3a0c54e4c9cc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e94e27fe-e932-4c7b-83f1-e50c08c5142c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f97d695-64bd-44bd-98c1-cb7246435a64",
        "cursor": {
          "ref": "721a9fa7-e098-42e6-9782-f793f05a7cec",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e8f05a4c-f265-4bc6-8e53-e44bcbf114e8"
        },
        "item": {
          "id": "6f97d695-64bd-44bd-98c1-cb7246435a64",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "65ad41a5-eb5a-4fd4-a849-dd2586c69caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f333d841-8c25-43c4-9cf6-97194d85ea63",
        "cursor": {
          "ref": "c56085d1-d1aa-43a4-a966-82957a7970ac",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe2e27da-34a3-4be9-a00c-e3711bf8c615"
        },
        "item": {
          "id": "f333d841-8c25-43c4-9cf6-97194d85ea63",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "57f0acae-35c9-43c3-9eff-1e9a49f0a11f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37734c8a-f917-4d67-b884-74b1603222f1",
        "cursor": {
          "ref": "99ebd7e9-e7fe-475d-aeca-abf9cf094c3d",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d4c10002-860c-4ce2-bd3e-2ad5c3635b9d"
        },
        "item": {
          "id": "37734c8a-f917-4d67-b884-74b1603222f1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "88a4b478-a6dd-432b-bbab-0bfd944e7a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b395d7-9cfe-476f-907b-d38d19fe298d",
        "cursor": {
          "ref": "149308f5-b429-480e-a5a2-dcf183f3ed21",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9124882e-8153-48f3-b464-3d527dd90f7c"
        },
        "item": {
          "id": "16b395d7-9cfe-476f-907b-d38d19fe298d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0f3d15ca-fe1b-4980-887a-055cd965fd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55fb2b9-e356-4e9e-8146-9343f1616d28",
        "cursor": {
          "ref": "295f44d2-221b-42b3-a821-11fa66d0dd45",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "feeefdc8-d75c-4d1c-a8c9-a33bd57e14df"
        },
        "item": {
          "id": "f55fb2b9-e356-4e9e-8146-9343f1616d28",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d4ddc3d3-5826-402a-92fe-6baed546b33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9bff9c-2a72-4e44-ba53-e72997aadab9",
        "cursor": {
          "ref": "255c406d-ab42-4c73-b68c-ef52b25ad6f3",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1acc7bf4-034d-4cde-9975-72bd1a7cfc57"
        },
        "item": {
          "id": "3d9bff9c-2a72-4e44-ba53-e72997aadab9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a1f0dd80-bcc6-4b25-808b-68c3366b809c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565a2864-6a7a-4c71-90ed-fd59b8061ccb",
        "cursor": {
          "ref": "93e8af49-e69b-456d-95e9-2d69cc93e3ce",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2c7d3c77-6e32-44f8-a447-f43e5b61b822"
        },
        "item": {
          "id": "565a2864-6a7a-4c71-90ed-fd59b8061ccb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "de118ff5-01f4-4945-a4dc-a9d9645a5b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51143199-f8a4-4563-b9a7-57aae84d5833",
        "cursor": {
          "ref": "ca5f1f29-e9cb-4819-a963-712b611cad54",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "591009c4-925d-4ebe-8258-d1794280a1bd"
        },
        "item": {
          "id": "51143199-f8a4-4563-b9a7-57aae84d5833",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "81d985ae-b779-476b-a07c-6075f16fa8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b2fc69-6f2b-4023-86ab-2294b9bb1041",
        "cursor": {
          "ref": "1b167481-6724-43f5-916f-39c3980934b1",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cd432868-7011-4c44-81f0-1504ff3e3c78"
        },
        "item": {
          "id": "74b2fc69-6f2b-4023-86ab-2294b9bb1041",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e2806b5c-4917-4776-8695-a0fe65b2c6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d12f044-f8c1-468c-924b-e2ba560b9ed1",
        "cursor": {
          "ref": "8d501a76-0238-4463-83d7-b8172e9662b8",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "68c5de9c-3de5-4620-a9d8-165c421e6594"
        },
        "item": {
          "id": "3d12f044-f8c1-468c-924b-e2ba560b9ed1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1fade742-9e93-4999-a0fc-6fe6b3bfbd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eccbec0-987f-4884-82d7-2f2558fe439b",
        "cursor": {
          "ref": "c9b8cc44-3ff6-4656-ad21-f9e6f3ea51b9",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cf3a28c4-37a6-448e-b374-76e8aa9ed18e"
        },
        "item": {
          "id": "3eccbec0-987f-4884-82d7-2f2558fe439b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1d26b365-37a5-46dc-83bc-3dfe3bccfeca",
          "status": "Created",
          "code": 201,
          "responseTime": 3069,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1f07adad-4a5d-4cb5-9b88-6d0ccba16b1d",
        "cursor": {
          "ref": "0c0a8343-6883-4f59-ab1c-0d3177dcc9a5",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0163321d-333c-4e2f-96dd-e393959afc36"
        },
        "item": {
          "id": "1f07adad-4a5d-4cb5-9b88-6d0ccba16b1d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f71afe8f-915d-4981-aad9-cecc8a75fc83",
          "status": "Created",
          "code": 201,
          "responseTime": 2718,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c19e76e6-e94e-424c-8d63-163cb1fb2ab4",
        "cursor": {
          "ref": "dca72af6-ab57-4473-8f91-1cb4a0834721",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "68e13d3b-7eaf-4a1c-9e1e-d527837f7ac1"
        },
        "item": {
          "id": "c19e76e6-e94e-424c-8d63-163cb1fb2ab4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b5e3be9a-edab-46ae-8af3-27cfef9bf653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2030b87-96cd-417f-bbb2-388aa65faba4",
        "cursor": {
          "ref": "fa59d057-ab6f-4ca2-88c7-88168fd5869d",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7cdbfa7a-6717-4e3b-9df8-6af9bb690692"
        },
        "item": {
          "id": "f2030b87-96cd-417f-bbb2-388aa65faba4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2e630609-7c75-4f7d-a471-59894c13a1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1a2672-2686-4fc8-bbeb-da8d11471a40",
        "cursor": {
          "ref": "eef50d20-7260-4373-85c4-f5c62e9b94ef",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5e2412f1-364d-45c8-99fa-b89214bcad88"
        },
        "item": {
          "id": "db1a2672-2686-4fc8-bbeb-da8d11471a40",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c777b5d2-10b9-4fb5-9c04-e98aff487717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec9c88c-41b9-485f-98a0-6afda995d0b5",
        "cursor": {
          "ref": "639a5752-0c95-4b1e-9070-3815b7ec1e88",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e8868870-6b3b-404e-81b2-a7948aeb3775"
        },
        "item": {
          "id": "dec9c88c-41b9-485f-98a0-6afda995d0b5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b9939be7-0f6c-47aa-83a6-287ea871b39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3664d243-746f-4fbd-b520-2ca2254320e9",
        "cursor": {
          "ref": "3f5c4c7d-feed-40d3-bcda-ff218ac7b1e9",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c33a89c9-d0e1-4d43-8c2e-69295343d79a"
        },
        "item": {
          "id": "3664d243-746f-4fbd-b520-2ca2254320e9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f9dc7e17-34cb-4bf5-8ac8-5f61c5e888b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8be8e-d336-4710-a077-f80ba1608da5",
        "cursor": {
          "ref": "ef842d39-d11a-410f-8be5-102624239352",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4ffaea19-c917-4731-ae4b-9d736c289b33"
        },
        "item": {
          "id": "08e8be8e-d336-4710-a077-f80ba1608da5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9b49ce5d-3884-45f1-b7f6-78ca943f5055",
          "status": "Created",
          "code": 201,
          "responseTime": 2181,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0fc6c131-4187-44a4-b345-068786abba15",
        "cursor": {
          "ref": "b73a294f-1bbe-4065-9565-18d103fbc427",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e12a0453-27e5-4344-aa4d-2813c77ff599"
        },
        "item": {
          "id": "0fc6c131-4187-44a4-b345-068786abba15",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "611641a2-1fe1-4398-b80e-083288d46d0a",
          "status": "Created",
          "code": 201,
          "responseTime": 2469,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c2885410-3c6c-478b-bfe7-bdb4109cc564",
        "cursor": {
          "ref": "5a96c79b-09ec-4c90-8014-5782982dcfbd",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9e595a3b-b73e-4174-a936-2bf1d274d32b"
        },
        "item": {
          "id": "c2885410-3c6c-478b-bfe7-bdb4109cc564",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ceae308e-4231-4162-ac90-f9d0dc523820",
          "status": "Created",
          "code": 201,
          "responseTime": 2538,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "de734045-36a1-421a-99ba-62ff3a27c5f3",
        "cursor": {
          "ref": "366a4b1a-77c9-48c5-b1e5-b325b9512098",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "78d26853-23d7-44a4-b6d1-f3b000a8eca2"
        },
        "item": {
          "id": "de734045-36a1-421a-99ba-62ff3a27c5f3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cc3259fe-709f-4a99-8b59-71bc0ed6027e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05701513-acdb-428a-b149-ed96f7d8876a",
        "cursor": {
          "ref": "b55eb737-e920-4ada-b6e1-e0a0deac763a",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0cfb44ea-5a28-4826-91c1-d3939f672274"
        },
        "item": {
          "id": "05701513-acdb-428a-b149-ed96f7d8876a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "23053521-6ff8-47a5-922d-d4fcbd7a77fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1c1964-4e50-49cf-a890-b4fce8c74652",
        "cursor": {
          "ref": "e7e4fd90-9a10-4d9c-83f2-6f39ef899aa1",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b1c712e3-d29e-440f-9bc0-255f729dcdbd"
        },
        "item": {
          "id": "ed1c1964-4e50-49cf-a890-b4fce8c74652",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9da9c38c-debd-458e-837f-bdc334302996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3c115b-bfe2-417e-a594-7ff5da111c38",
        "cursor": {
          "ref": "a45f69e3-5bdb-4c34-a2b3-544394ac75f0",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d534c58e-8a52-46c6-8bb6-d254645e323c"
        },
        "item": {
          "id": "fe3c115b-bfe2-417e-a594-7ff5da111c38",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d021c75a-ca42-4b95-aa9c-f8eac2d7b755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0884a3d9-c1d6-46ed-b483-3dfc10bc071b",
        "cursor": {
          "ref": "e489c15f-8be3-4b82-a734-bbe6307268dc",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cf4e46a4-4d30-44c1-954b-47d1eb0d20a8"
        },
        "item": {
          "id": "0884a3d9-c1d6-46ed-b483-3dfc10bc071b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c2a8463b-c8d0-4f14-a0c1-22d7c511e527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d0d726-bbc0-4162-a38e-33d5e721de70",
        "cursor": {
          "ref": "7a2ba5eb-0662-48f1-8e77-bebaae7eadad",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e93f8435-20e3-4bf1-b1f5-e981af19dd96"
        },
        "item": {
          "id": "57d0d726-bbc0-4162-a38e-33d5e721de70",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "30c984cf-f61a-460c-9d21-950e19745851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d406d1-3f01-4ac6-b48f-5d6d39f86ff8",
        "cursor": {
          "ref": "af807639-96f0-420e-a057-cea696d6c835",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ca3bf4ac-2a87-4ec9-86fb-6bb352c863b1"
        },
        "item": {
          "id": "f1d406d1-3f01-4ac6-b48f-5d6d39f86ff8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fd639a0d-7b63-4611-91fa-d67075c615e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee83196f-b0de-4279-a022-d75d855440ee",
        "cursor": {
          "ref": "b17d99f9-34af-4234-9f4f-dd6d3976ce29",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "699ac152-ae3d-4c83-b47a-ece56dc30f65"
        },
        "item": {
          "id": "ee83196f-b0de-4279-a022-d75d855440ee",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "02a8ec77-e660-459b-a3f6-ac4d4ed55b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39e22c5-2a28-4292-acd9-15c3c0d0926e",
        "cursor": {
          "ref": "9b6e30f8-1536-48a1-a4e7-ca1eb6c6ed43",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4d755c75-ba10-4d40-9631-ddb096b2be3e"
        },
        "item": {
          "id": "e39e22c5-2a28-4292-acd9-15c3c0d0926e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1347e25c-31df-4a8d-9358-b216b07e2549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190ad172-4fa8-41e0-8d3b-427a1f01d447",
        "cursor": {
          "ref": "3e26756e-6a25-4a03-8454-36ccb7f0a092",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7b075104-e923-4f0d-8ef0-442b243c4496"
        },
        "item": {
          "id": "190ad172-4fa8-41e0-8d3b-427a1f01d447",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "955235b5-5078-428c-a47b-a9c41f6e98da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6a3442-8c51-4162-8267-53312595a9bd",
        "cursor": {
          "ref": "9eb0ffaf-dadf-4f71-bbb5-626ebe1b4e51",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "08db41e2-15b8-4d60-9259-dd65888d870f"
        },
        "item": {
          "id": "8a6a3442-8c51-4162-8267-53312595a9bd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0fe565c2-3b5e-4271-9eb8-809c83d067e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13095d34-9b1f-47d3-98be-4f0f76d930d2",
        "cursor": {
          "ref": "b43e5163-d2b0-4e74-a5f3-5cef0c2a70e0",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "89ffb364-0368-44df-9b8c-8bb71d3c24f3"
        },
        "item": {
          "id": "13095d34-9b1f-47d3-98be-4f0f76d930d2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "52859ee1-1653-4545-8807-9171ac70074e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca01b95-3f38-4e8f-b826-205ff88702cb",
        "cursor": {
          "ref": "9eca706e-54cb-4a74-b292-d2e832016568",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c87b9698-6e0a-4699-81cf-e0182459fcff"
        },
        "item": {
          "id": "eca01b95-3f38-4e8f-b826-205ff88702cb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2f95d9c7-ff91-4811-b197-1c5238c822da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0a488a-8537-4227-8382-ab1344f4d285",
        "cursor": {
          "ref": "93584131-17e1-4dc7-92f3-52652683173c",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "abeffa13-3f0d-498c-bf2d-971dde8f6f5a"
        },
        "item": {
          "id": "9f0a488a-8537-4227-8382-ab1344f4d285",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "789f2bda-36a6-4ec8-862d-dadb85aa0bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fae835-f22e-4e8f-8d1b-5b21f2d4335b",
        "cursor": {
          "ref": "3299d4aa-54a2-4063-aa8c-59cda1457b08",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7de79d34-33ad-4921-80a3-2949a81c1305"
        },
        "item": {
          "id": "72fae835-f22e-4e8f-8d1b-5b21f2d4335b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2d89064c-ea75-4f97-bb20-7804d63234e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e2081e-1963-4df1-9f2d-d6bb6f443d26",
        "cursor": {
          "ref": "42a489e8-418c-430d-89eb-18dfb5ed8fd5",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1c9cdb58-202c-4157-8273-01a9e7e9ee77"
        },
        "item": {
          "id": "c4e2081e-1963-4df1-9f2d-d6bb6f443d26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "48a6f4e6-dfcd-4f61-bc2f-a1b3e91d5d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de567f85-f659-428f-9086-e0b41312a2d3",
        "cursor": {
          "ref": "ff5205f9-3507-4d83-b10d-311c6d9d58d7",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0559df08-ea11-41a3-925a-df5b40f432df"
        },
        "item": {
          "id": "de567f85-f659-428f-9086-e0b41312a2d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ae732645-a450-457b-b613-dc7449d56d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b786dd73-6649-4d81-9e39-ce238a958527",
        "cursor": {
          "ref": "0a5fc3f8-5fb7-486f-896f-5ae67e89fd41",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7c8eeee6-2aa3-473e-a974-d183d5998487"
        },
        "item": {
          "id": "b786dd73-6649-4d81-9e39-ce238a958527",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "499468d4-e46d-46cc-9c11-33a730c8e409",
          "status": "Created",
          "code": 201,
          "responseTime": 2812,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9f30c45b-0686-4ada-a0fc-231f907883c5",
        "cursor": {
          "ref": "7f3c92d7-0c43-41cc-83e6-5e5161c68a67",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0c5042b0-cd6c-40dd-9d87-a7e53eaf8e18"
        },
        "item": {
          "id": "9f30c45b-0686-4ada-a0fc-231f907883c5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "97b01797-d125-42b9-b0ad-812072c7ccfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31d08b4-6ee0-4376-b7c5-85cb0e6c10af",
        "cursor": {
          "ref": "808675e6-e4a7-46d7-9478-95ffbb01f086",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1d53bad1-e567-412a-99f7-3d29f5e7410e"
        },
        "item": {
          "id": "a31d08b4-6ee0-4376-b7c5-85cb0e6c10af",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7ae3fdfd-613b-458e-b4d4-a3fa9de83224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d2af04-cf19-4f7c-a5e3-5b92c3a5e01a",
        "cursor": {
          "ref": "b9b04278-d927-4b44-99bf-d4884a19efc8",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "badae582-af0a-4942-a5c9-83ff47d14bbe"
        },
        "item": {
          "id": "a7d2af04-cf19-4f7c-a5e3-5b92c3a5e01a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "838f42bc-6c1c-4afd-a765-547f1bb3c21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36052415-e7ce-44c1-b1b9-faa12e208492",
        "cursor": {
          "ref": "9974a334-8ab1-4344-ac5a-0f45efd44d99",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ef4d1343-0fcb-4190-a2ef-06b5e642db15"
        },
        "item": {
          "id": "36052415-e7ce-44c1-b1b9-faa12e208492",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "642d41cd-7094-4b34-afca-e2fc8d44609b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56eb5b70-a0a5-4f2f-bb7e-1cb6198b3c61",
        "cursor": {
          "ref": "3ea280f0-e0e9-4ad2-80c2-1a99360c772f",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "be72d95f-2f75-4955-b808-235fe6cd4897"
        },
        "item": {
          "id": "56eb5b70-a0a5-4f2f-bb7e-1cb6198b3c61",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "35561907-2ed4-434a-8b96-6b763ef95565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539883d5-164f-4472-aa0d-d3ef777587cc",
        "cursor": {
          "ref": "a6000c6e-1605-4344-a2fd-d11bc0e12da6",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c119e687-bd81-49a9-a2aa-72d3dd598c28"
        },
        "item": {
          "id": "539883d5-164f-4472-aa0d-d3ef777587cc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8e14574e-fcdf-45ec-8d40-6e2e5482e69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e55ae3-4f67-4ef3-8dae-c762afc2cb62",
        "cursor": {
          "ref": "803a9d2e-dba2-47ae-a1b1-18972c754197",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3160f2cb-2fb7-4460-ba88-146cae8264fd"
        },
        "item": {
          "id": "81e55ae3-4f67-4ef3-8dae-c762afc2cb62",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6f8b1182-29d9-4a26-ba8f-514816968ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132bc89b-a954-416c-8f26-39de35efdfc9",
        "cursor": {
          "ref": "6b532a83-eff6-49b4-8205-73cec64ac1e3",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "af5d966b-fc88-44dd-87e8-039e0642c5af"
        },
        "item": {
          "id": "132bc89b-a954-416c-8f26-39de35efdfc9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e2ced445-53b1-4f81-be86-4512c1383102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bca2f9-d6e4-435a-ac03-3bc247ec1db3",
        "cursor": {
          "ref": "4ff8f513-e3ef-4775-abb5-e8b10fe7f7f7",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b0b801b9-863f-41ce-981e-5996ac30687f"
        },
        "item": {
          "id": "91bca2f9-d6e4-435a-ac03-3bc247ec1db3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca628dcb-9d79-48bd-b361-e2d48fa9b759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ad921a-3701-4a22-92c4-e83fa9809d67",
        "cursor": {
          "ref": "f33b85ea-fa89-42a1-a618-122b099278d2",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "297ef025-d404-4919-b936-137c8449a183"
        },
        "item": {
          "id": "18ad921a-3701-4a22-92c4-e83fa9809d67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a7e54122-6690-4189-8509-ad34b2ae73bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0685425-60b9-4e0b-869d-37aa3aaf6c95",
        "cursor": {
          "ref": "90d4d681-6f00-4e98-be0d-f4be044368dd",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e6699ade-6b23-4de9-a40f-9e34fd3e3751"
        },
        "item": {
          "id": "d0685425-60b9-4e0b-869d-37aa3aaf6c95",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "87609aee-98da-4361-8a58-14007d5449f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb022808-f226-4520-9c1a-a93727e9ad2d",
        "cursor": {
          "ref": "a239cf58-8d3b-4f14-874b-33ac68e10f87",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c57797d8-21cb-442b-8ba2-39511eb280d7"
        },
        "item": {
          "id": "fb022808-f226-4520-9c1a-a93727e9ad2d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "38bee2a4-9ae1-49d8-8f65-4cde540aeaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a2e47d-b678-443a-b28c-44ddc4ff59b4",
        "cursor": {
          "ref": "2ebc1bd3-a9f6-489c-a8bb-3d59434b3177",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ab9eef9a-9953-47e1-a8d4-ab2b33216a02"
        },
        "item": {
          "id": "11a2e47d-b678-443a-b28c-44ddc4ff59b4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0b61fe91-ab0b-415e-a5bc-d11e528be609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec31acf-8aba-44d0-9ae8-ecf9c5c5a526",
        "cursor": {
          "ref": "0b1932fe-dc5c-4819-9a1e-37764708d0fa",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ca623cb1-04c1-4db3-a775-8732c30d04a5"
        },
        "item": {
          "id": "1ec31acf-8aba-44d0-9ae8-ecf9c5c5a526",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "31df7dfd-2785-4d28-b3ec-5845f9c30d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61477484-deb2-46b2-a337-0c1450169c01",
        "cursor": {
          "ref": "fbf3ce9c-9a59-4fcb-83e9-908bea73225b",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6256ce67-0d4f-4ed3-8222-e3b0c3ca6cf3"
        },
        "item": {
          "id": "61477484-deb2-46b2-a337-0c1450169c01",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "60ac4e64-a023-4ec5-bbb9-5c3703847375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40d86ca-f574-44f2-b27f-130bcbef48d0",
        "cursor": {
          "ref": "9a2b9130-4685-4eef-b220-029f30a09db2",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5fa0e0f-113a-434c-ab9f-fffa94ee1594"
        },
        "item": {
          "id": "a40d86ca-f574-44f2-b27f-130bcbef48d0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81a88ed8-6e4e-4ae7-b4c9-15dbe547dd2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51308b44-5e9b-45c5-93a3-3769280971a6",
        "cursor": {
          "ref": "89c434ed-4072-4a6e-840c-a60e5b50d8c6",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ea9d8380-504f-4d5e-9a2f-47b769e908d6"
        },
        "item": {
          "id": "51308b44-5e9b-45c5-93a3-3769280971a6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8ff54a56-a0bd-4f9c-b103-c5652924781c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1549b55-d257-4064-95ab-cd14cf1a26c0",
        "cursor": {
          "ref": "5fce914e-c488-40ac-83ee-38ad26f0eb22",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e16ab56a-e4a2-46db-9523-ca1243d32801"
        },
        "item": {
          "id": "e1549b55-d257-4064-95ab-cd14cf1a26c0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9814c49d-8db3-49a5-9618-14523bc90409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e4c2a6-9740-4d0c-b872-bb4873534ab8",
        "cursor": {
          "ref": "73a6b332-5c68-49fd-b243-14e84de6aa5f",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eeda0f8d-f942-4537-80c0-e173b76cd6bf"
        },
        "item": {
          "id": "28e4c2a6-9740-4d0c-b872-bb4873534ab8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "34c15f68-415c-4ac2-8ab8-2c6748f2250c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2759b549-ce58-4bbb-b768-af9cff68005c",
        "cursor": {
          "ref": "425dc6e2-0c66-478a-b5b2-5287089dbdb4",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "89a46865-7565-49f2-906c-a61d78151129"
        },
        "item": {
          "id": "2759b549-ce58-4bbb-b768-af9cff68005c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ab0b9681-e06e-4dfd-ae60-1eb80f029f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104133e8-c372-4899-b3fd-5e1ca64830aa",
        "cursor": {
          "ref": "6f95ecaa-8ec9-41ae-8b81-0e507a5d02e2",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "93b4568f-4808-4c9c-a6ae-f5bc9c96d528"
        },
        "item": {
          "id": "104133e8-c372-4899-b3fd-5e1ca64830aa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ad4fb78e-fce4-4623-a7f0-2f2e918f28f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8afeaf-1336-4b5c-b2bd-5dbfba6c3978",
        "cursor": {
          "ref": "01e06699-eb32-41de-802f-02fc8a9d21c2",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "53a89b34-39ce-432b-9596-77428e75ae14"
        },
        "item": {
          "id": "cc8afeaf-1336-4b5c-b2bd-5dbfba6c3978",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "10659aa2-aa77-49d7-ab20-14300196d462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82b0ae9-9c00-4d78-ae6f-6e58108ae9f7",
        "cursor": {
          "ref": "94fef7ee-c9c6-4881-8695-880fbbb9ca45",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3ef0f3a5-d7ae-47e1-8516-1f769dbfc531"
        },
        "item": {
          "id": "f82b0ae9-9c00-4d78-ae6f-6e58108ae9f7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3c89ea86-f43c-413d-877b-b3166eaef929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccf138b-ef12-4a6b-9e74-5ff108ff1c75",
        "cursor": {
          "ref": "a83b9996-0b58-411d-b8ea-350129dad98a",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3e9d068e-fa29-4b98-aeb8-d06fb6b4e5b9"
        },
        "item": {
          "id": "8ccf138b-ef12-4a6b-9e74-5ff108ff1c75",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d9d61911-ab42-4f1b-9424-dc2993abae66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0a1f8c-4191-4231-9228-d66e834e0c0a",
        "cursor": {
          "ref": "6e29ea17-e647-42f2-b7b1-349c95b0b6af",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1b5b6c74-8e79-4252-879e-a69188724466"
        },
        "item": {
          "id": "bb0a1f8c-4191-4231-9228-d66e834e0c0a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3e463b21-e01b-4d31-a3dd-0b9fca4d51ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37813b01-a2a2-4b93-9e59-1caab594bcf0",
        "cursor": {
          "ref": "d6e2a002-c40c-4a1f-b070-4f32b3675a1d",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6a8c4c17-6ebb-4bbb-a5be-621d8876ffcf"
        },
        "item": {
          "id": "37813b01-a2a2-4b93-9e59-1caab594bcf0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "729f4c0b-2355-4773-aea8-34906f0c2664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3cf296-3e18-4477-9c54-182cfdbf654c",
        "cursor": {
          "ref": "d197e584-157e-4b78-8c3d-9c812d3c797c",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f056a54f-24af-4506-8f2e-4db3f8a64fa7"
        },
        "item": {
          "id": "0c3cf296-3e18-4477-9c54-182cfdbf654c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "dc1dfb21-8685-4632-ade0-1eb209966924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6e9696-1520-45f2-b174-76bd7e1726c6",
        "cursor": {
          "ref": "76df1b11-83f2-4e13-bd85-8332bc9087ed",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "edc8b22a-5502-40b7-a0d7-89d39cfe77a5"
        },
        "item": {
          "id": "ef6e9696-1520-45f2-b174-76bd7e1726c6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "eea834d1-1092-46b8-8552-550248c9f0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759dfbaa-5536-4267-8023-d6002a4e82bd",
        "cursor": {
          "ref": "cf6de4f3-7d3b-49fd-8a37-a2cfd35d7afb",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3bd75d35-ae89-42db-a78d-5afc39158e34"
        },
        "item": {
          "id": "759dfbaa-5536-4267-8023-d6002a4e82bd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "20228085-70d6-4e0a-8af1-b4bd9d85e95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9739ac0c-6610-4a28-8c6d-801ffe973a1a",
        "cursor": {
          "ref": "12e45073-fc57-41f9-9a09-42067d8e55df",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4f5298be-a647-48dd-8610-3be29784ebba"
        },
        "item": {
          "id": "9739ac0c-6610-4a28-8c6d-801ffe973a1a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "50f07bad-49cc-48ea-b06d-c5a8aba46497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc18c4b2-e0d1-4e43-a403-ffb3d4b0afdb",
        "cursor": {
          "ref": "0d2ec738-a208-4229-a397-675c18e23a22",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "87241a7f-3522-4ef7-8879-74328d2d9da0"
        },
        "item": {
          "id": "bc18c4b2-e0d1-4e43-a403-ffb3d4b0afdb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8e200ca3-dca3-4b36-af0a-52f5b551c393",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "5787de75-4658-42a2-8211-cb0cb0437990",
        "cursor": {
          "ref": "e5ff1050-cfa6-4a25-9280-d2341b6f4d8b",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "558aa2d2-26d0-4fc5-8005-ae585b1b10de"
        },
        "item": {
          "id": "5787de75-4658-42a2-8211-cb0cb0437990",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cd8d034b-a802-4fc1-9c37-1009c3e4a790",
          "status": "Created",
          "code": 201,
          "responseTime": 3006,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac796d63-6153-4384-aaac-0b68f524e537",
        "cursor": {
          "ref": "513149c9-6a96-412f-ba2d-5fd1ec8b5eb1",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e217e36e-a87f-49e6-8a4f-a65ae56a2c6c"
        },
        "item": {
          "id": "ac796d63-6153-4384-aaac-0b68f524e537",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9fe1ac7d-2c18-44b4-8e8c-3f3d2847ef87",
          "status": "Created",
          "code": 201,
          "responseTime": 2823,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb502454-d354-4485-8558-9f6453772c46",
        "cursor": {
          "ref": "a6a3c6e0-3433-4194-98f9-bfee9fef42a5",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d9fa5e09-e074-4174-8131-37b66fb90778"
        },
        "item": {
          "id": "bb502454-d354-4485-8558-9f6453772c46",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3f2ba366-6d7e-45fd-ab55-9a4fdcd0d0f7",
          "status": "Created",
          "code": 201,
          "responseTime": 3270,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f454ed78-263a-4f30-98b5-cf5c5f30124f",
        "cursor": {
          "ref": "9d2e2691-0eb0-4971-be29-0a846cd4099c",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "48b15df3-2e8b-4726-a7f5-a9e8aa69dd55"
        },
        "item": {
          "id": "f454ed78-263a-4f30-98b5-cf5c5f30124f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f4ae0c16-2041-4dcb-a247-bf0ff9d5154b",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9750973d-93d6-4e3a-8fac-aa3065fc664f",
        "cursor": {
          "ref": "e1f91a25-1788-4c64-b780-a7ae7b25ff7d",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b37db3e0-e01f-4749-a952-29135143ce5b"
        },
        "item": {
          "id": "9750973d-93d6-4e3a-8fac-aa3065fc664f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "465fec8c-d148-4a80-9307-b7b32e53ce9a",
          "status": "Created",
          "code": 201,
          "responseTime": 2651,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-09T00:46:36Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-09T00:46:36Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "13fbbe0d-b93c-472c-8890-c874f234ebb6",
        "cursor": {
          "ref": "9b5fb78d-e269-4c5e-bdc4-e21a6209b269",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1464d1f7-76f5-4c59-b13c-3598bc821728"
        },
        "item": {
          "id": "13fbbe0d-b93c-472c-8890-c874f234ebb6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1bd2d2ef-0bbe-4537-a9e8-ba7dac52a26a",
          "status": "Created",
          "code": 201,
          "responseTime": 2388,
          "responseSize": 973
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6ca154-bb3a-4c11-9bee-ed6d6b893a4d",
        "cursor": {
          "ref": "4c4e6fe1-a24f-4ded-837b-d6d470822dfa",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a6a8f4c6-80f1-46c6-91bc-22190b3ed91e"
        },
        "item": {
          "id": "2a6ca154-bb3a-4c11-9bee-ed6d6b893a4d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cfa8be55-46f5-46ea-99b9-eb511059c123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2d4db2-165b-40fd-92d5-8250dba12ecd",
        "cursor": {
          "ref": "da683b31-0b23-4859-a033-e5a6d3191762",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d8c1ab38-98eb-4fba-a05d-5420c33b17cb"
        },
        "item": {
          "id": "3b2d4db2-165b-40fd-92d5-8250dba12ecd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5eb5f6a6-66c4-426f-af6d-fbfb571c75bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8e18df-fc43-41cb-a8ef-4415c222fff5",
        "cursor": {
          "ref": "13d6a1f0-5876-4242-b428-f3a52ab4ed6a",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "97aef56a-ae55-4e47-b154-b4d7900fef3c"
        },
        "item": {
          "id": "ac8e18df-fc43-41cb-a8ef-4415c222fff5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3ad6f4b8-ba80-4189-a094-08e96075bf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913a6731-5ec7-4f39-8f27-b00af1956c49",
        "cursor": {
          "ref": "79ba4977-69d2-49a0-8de7-ab5d628a8c53",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "af8f786d-934e-4687-b336-269a0611c35a"
        },
        "item": {
          "id": "913a6731-5ec7-4f39-8f27-b00af1956c49",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2b0ed5cb-329a-4db6-a768-dd2cfd9aae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d3d917-b01a-4fb2-9f38-9b90a40bdcc7",
        "cursor": {
          "ref": "03ca5caa-2809-4166-9d37-332dce7f4009",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "af8ec534-11c2-47fc-a830-05a295497d26"
        },
        "item": {
          "id": "00d3d917-b01a-4fb2-9f38-9b90a40bdcc7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0d348845-c7ec-4263-97fd-0645124bda6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 856,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e62043e-ee16-42c3-a6c5-0a6476f48738",
        "cursor": {
          "ref": "6609382c-8fc3-475f-9494-8506f407820f",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4e469ba2-2b6d-4e96-b1b4-3f8a3984377d"
        },
        "item": {
          "id": "9e62043e-ee16-42c3-a6c5-0a6476f48738",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "09b2ec1d-f157-4ddf-b55f-8e413ddc3a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8050047-ea48-42f5-8ec8-40211c0f5034",
        "cursor": {
          "ref": "6a08e63a-5ff1-4b1b-bc5a-011481dfa4b5",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "667ebfb3-1fc3-4858-a02e-fd71a5e1bfa3"
        },
        "item": {
          "id": "f8050047-ea48-42f5-8ec8-40211c0f5034",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1616b283-86a2-447d-b9f4-b10ceb0cb897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4e772e-0461-474c-b303-ef57f86a5e77",
        "cursor": {
          "ref": "ada7ec0e-b949-412d-b34a-e38564dcfb46",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c817744b-b580-493b-8dcb-0b52adb03e6b"
        },
        "item": {
          "id": "dc4e772e-0461-474c-b303-ef57f86a5e77",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5430faaf-55d0-4c8a-afce-bce549c7622c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd33c68-2f7e-4f5c-bbb3-ab11b88c9392",
        "cursor": {
          "ref": "28e44a95-7902-46a0-b19d-5ada64b6887f",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d4854905-6a6b-469f-9b72-b27f693bc42a"
        },
        "item": {
          "id": "9dd33c68-2f7e-4f5c-bbb3-ab11b88c9392",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "01c36f4a-cdff-4c5f-b2e2-3f44cff0c253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f35629-e08b-4c0a-a9c2-b87ae5571832",
        "cursor": {
          "ref": "0421ce06-8879-42c6-908a-c77cbc8795fd",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "95200ec5-d7c1-43b0-ae5d-bb799a255864"
        },
        "item": {
          "id": "25f35629-e08b-4c0a-a9c2-b87ae5571832",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8726c45c-1860-44c4-a91a-de5a4969aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef76c24-a0a6-47dd-ac2c-32bff92f4e78",
        "cursor": {
          "ref": "56dd6dc1-ddcd-4505-8b79-73eeb8610a0d",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dde9f24c-db88-497b-a76c-1e5ae61923a8"
        },
        "item": {
          "id": "eef76c24-a0a6-47dd-ac2c-32bff92f4e78",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c01b00dd-2a3b-4d76-af13-606755e1df58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14245f08-9760-4aa2-9c92-d21788480263",
        "cursor": {
          "ref": "ee9580ab-496a-4fdd-896b-c6a46934d5a0",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ae88d52c-589d-48aa-b05a-f201f387d23b"
        },
        "item": {
          "id": "14245f08-9760-4aa2-9c92-d21788480263",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ec164db1-6efc-4aac-a3cf-0649c7b08c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbee0ed-3159-4759-a9b2-1b7733eba59d",
        "cursor": {
          "ref": "b4e6a24d-6ed4-4832-97b0-ebc8e1c55761",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "11af0736-888f-4e71-a76d-e11c2d77a43f"
        },
        "item": {
          "id": "7fbee0ed-3159-4759-a9b2-1b7733eba59d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fc9a709c-2f28-42c5-a204-7cd48ea728cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4852fa12-9beb-42bf-ae2a-1429afcb8a8d",
        "cursor": {
          "ref": "0fdf1ee1-4dd5-4ad9-b631-0401c217bc1c",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1cd6b76a-d927-4fb6-87c8-a3f1043ec4fb"
        },
        "item": {
          "id": "4852fa12-9beb-42bf-ae2a-1429afcb8a8d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d0f94993-1b02-46ba-a1db-519fb9fc7491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36550d0e-6202-4d83-8326-e5edcd775c89",
        "cursor": {
          "ref": "d0d611a5-3329-4e05-953a-e0d3b997bd9f",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "892fbe3d-526f-4426-925b-c671b1ad35aa"
        },
        "item": {
          "id": "36550d0e-6202-4d83-8326-e5edcd775c89",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "150ac66d-0059-484c-a35c-27c5e934c445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bac886-4f65-475a-8975-70bfff1ac69e",
        "cursor": {
          "ref": "7f097260-e472-4cc5-9da1-addaa9451dde",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "08e0f95d-0bcc-4238-943f-f3dc2df7830a"
        },
        "item": {
          "id": "30bac886-4f65-475a-8975-70bfff1ac69e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1b5055e0-ef67-4c58-903c-36cc2ae10962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa7b0a6-c36b-4c5f-8da1-feb97c7851ac",
        "cursor": {
          "ref": "7bd5779f-7915-4388-abd3-c35fc8423362",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a252a88-8d94-4629-af25-a03b9d12a9bf"
        },
        "item": {
          "id": "6fa7b0a6-c36b-4c5f-8da1-feb97c7851ac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "21f8c690-6053-4ead-8331-c03954234492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc19694e-655e-469f-93bb-772d1c5e29f6",
        "cursor": {
          "ref": "8648b475-073c-4f2a-a5a0-ea2b1dad8e40",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4fae8919-f2aa-4ea0-a4ab-db088ea7c613"
        },
        "item": {
          "id": "cc19694e-655e-469f-93bb-772d1c5e29f6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "42001cb4-7616-480e-95eb-07608aaf7b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e217576-9995-4868-b52f-c88f1e823fab",
        "cursor": {
          "ref": "41779839-dc3f-46d0-9ae5-bd70f3a0b862",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "267c4884-74b3-47d0-a0ab-6821349b708e"
        },
        "item": {
          "id": "9e217576-9995-4868-b52f-c88f1e823fab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3263641e-f2fc-420b-88cd-7de88bc86560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c089502-d03c-4b94-a5d8-dbaf61833050",
        "cursor": {
          "ref": "ba9b2516-0cf3-400f-a559-2b813ff77463",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1af6ace6-6a94-4697-bb84-f6b3a0ffae12"
        },
        "item": {
          "id": "6c089502-d03c-4b94-a5d8-dbaf61833050",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5d6a392e-a8e4-47e4-87cc-2e866e113f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64c641a-2bbb-451e-a484-86c4d809e757",
        "cursor": {
          "ref": "ad0bb421-7253-4d04-ac93-11c4627e7a2b",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9688dc4c-b90b-4371-9e0d-d68938f3b80c"
        },
        "item": {
          "id": "e64c641a-2bbb-451e-a484-86c4d809e757",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9be22692-0383-4a07-964b-ccb637138ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1a0750-0e9a-459f-b262-1d86a1c12836",
        "cursor": {
          "ref": "bb5ba6cd-a5d8-4231-9712-2083f6248891",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "41b00053-5aab-4555-be5f-7f0e06dfb104"
        },
        "item": {
          "id": "4d1a0750-0e9a-459f-b262-1d86a1c12836",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f93d4bde-826e-4804-97a7-9fd6d087f451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99022ae-a858-43a9-9282-2dd86f845b3b",
        "cursor": {
          "ref": "7ef37888-2c90-48bc-99c7-90d2030826bc",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "033ec6f6-fe22-4063-b6eb-5d6a6b67b62e"
        },
        "item": {
          "id": "d99022ae-a858-43a9-9282-2dd86f845b3b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bded45e4-1ccf-4802-9128-de8e82764424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d20bf5-b041-4eca-88b0-b17ffa0ba707",
        "cursor": {
          "ref": "500d1751-9eaf-4ac8-92b9-dd2f62e66f9e",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c0081666-fbde-4a70-b21c-736bb7d4799f"
        },
        "item": {
          "id": "b1d20bf5-b041-4eca-88b0-b17ffa0ba707",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "85adb676-a39a-48b0-a2d3-e6d68f17774c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38171976-481c-4063-b9fe-e5fd968120e3",
        "cursor": {
          "ref": "fc4f2b87-c484-49d0-9c3b-0dca5d829d08",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f2ec83ae-df69-4e50-813d-a464b54976fe"
        },
        "item": {
          "id": "38171976-481c-4063-b9fe-e5fd968120e3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f2e0d2fa-1f60-4772-8822-0eb348175d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4f6752-7aec-4bce-9699-4ac19cd0ebf0",
        "cursor": {
          "ref": "e54b5ba3-f123-428a-a2c1-acab7269e67d",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0a56a3cd-9ee5-4de2-bda7-d42962359d99"
        },
        "item": {
          "id": "cf4f6752-7aec-4bce-9699-4ac19cd0ebf0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bbf7097b-8aec-426b-a6ca-c32758fc26fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81d1528-96fe-4d09-a1de-31b30fde930b",
        "cursor": {
          "ref": "645621f4-2e34-4311-b67b-b4454e1b3883",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d21fd2d6-6946-4efc-acbb-0f2cf607c717"
        },
        "item": {
          "id": "d81d1528-96fe-4d09-a1de-31b30fde930b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eef846d2-f429-4f67-b760-dddff8c67946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0480605-d921-4a26-9f43-2401e6310d49",
        "cursor": {
          "ref": "51c808ae-6c42-4251-ad8a-58f8e5dc8543",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "34dfb24a-4af3-4264-92bb-5e7ee5d3d1e3"
        },
        "item": {
          "id": "d0480605-d921-4a26-9f43-2401e6310d49",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f80969dc-5bfd-423d-9226-5ca35d80b696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8e8290-1dde-4c39-b269-9510948502c2",
        "cursor": {
          "ref": "0dc96017-e909-4fff-bbad-99707c912b68",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b5b2e207-5f61-4850-aef0-a0411bc345db"
        },
        "item": {
          "id": "8d8e8290-1dde-4c39-b269-9510948502c2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5ba8d2e9-433f-4654-99ab-410da7a2884d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eff20dc-ee6a-47b9-9c08-d08f0818a399",
        "cursor": {
          "ref": "c706539b-4bed-438f-8bb3-2041521f7715",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4e23b773-73ff-4f07-9b91-555d90b9a15b"
        },
        "item": {
          "id": "6eff20dc-ee6a-47b9-9c08-d08f0818a399",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4b676a92-cba7-4ea6-aa43-a0ae706ab0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57928785-1d78-43e7-85d1-15dfbaa2e7d2",
        "cursor": {
          "ref": "c9ba301a-95ea-42f2-b05f-f3e2ebcf2076",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "22d99928-a5f8-4d91-bf74-4c1880a1f184"
        },
        "item": {
          "id": "57928785-1d78-43e7-85d1-15dfbaa2e7d2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "99adb319-b34a-4e3e-a61a-dcf73f70c4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26430904-9b05-4c77-899a-b8760deba83d",
        "cursor": {
          "ref": "482e1a93-9051-464e-b65c-4104eaa7fa13",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d952fe8c-26a7-4af8-98ff-fe714db19b8b"
        },
        "item": {
          "id": "26430904-9b05-4c77-899a-b8760deba83d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3f60cb79-b45f-49ac-9447-230e951556dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6794073-d1a7-4d82-a69a-212af6a90587",
        "cursor": {
          "ref": "8e9426e7-6a3a-4a5c-8ebc-3c5b2547e6df",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ec850677-d495-49f8-9e12-88d7733e4576"
        },
        "item": {
          "id": "a6794073-d1a7-4d82-a69a-212af6a90587",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04713c8a-b4a3-4ea8-b633-fd4d58007140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "108057cb-5ffa-43e2-896b-019d2582f090",
        "cursor": {
          "ref": "cfdea274-2dd5-41ae-83dc-0b8518e8ba2d",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1ed36aa1-d9d2-4407-bb80-d42c53cf7fe3"
        },
        "item": {
          "id": "108057cb-5ffa-43e2-896b-019d2582f090",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b6395a95-2d0b-405d-bc00-a729469dd66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d6c220-35c2-4add-b138-7d5951ba7837",
        "cursor": {
          "ref": "da93d034-fa57-4fbc-8507-5b313cad8bb4",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fc70ff9e-9a7c-4931-b127-d63a3e73182f"
        },
        "item": {
          "id": "c4d6c220-35c2-4add-b138-7d5951ba7837",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a09855d2-5989-421a-846a-aeca9efaebdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d3b6ef-9723-47ea-b411-71e4b90fdc49",
        "cursor": {
          "ref": "36ec3c94-44db-4a07-8807-cb1e83a7884d",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fa8fbb8e-d547-48f7-bc51-4fe68275487f"
        },
        "item": {
          "id": "22d3b6ef-9723-47ea-b411-71e4b90fdc49",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8ebcaa96-da93-4360-955b-bed5eff149a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fef569-5632-4b83-a358-b092cef34b66",
        "cursor": {
          "ref": "440a7a5a-1e18-46a1-8129-a0a471031146",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "03c780f7-def5-48a1-9498-86a8cb52799e"
        },
        "item": {
          "id": "f3fef569-5632-4b83-a358-b092cef34b66",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fabd2450-5426-4498-9458-1a253805a4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff56798b-842d-4ef6-8951-596f472b963d",
        "cursor": {
          "ref": "e2ca39ce-7897-4a9f-a979-d9496e45d596",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "91a06836-155e-4e25-8b09-040193972490"
        },
        "item": {
          "id": "ff56798b-842d-4ef6-8951-596f472b963d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "103b989c-0ced-46f5-9c93-1928c5dc278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a596c72-c97a-4b0a-9fb3-d35775c33d76",
        "cursor": {
          "ref": "8ffc37cf-b73d-4c00-a69a-26bdf4de36ab",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "25169daf-1e5b-44f8-8498-64dc19adc299"
        },
        "item": {
          "id": "6a596c72-c97a-4b0a-9fb3-d35775c33d76",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f26bb83f-4f46-4b1a-b6fb-ed3b70d590ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb83b1d-31fc-46b3-aa26-0fe4c81aa388",
        "cursor": {
          "ref": "2c9f9028-68a1-4770-b88b-cb98937793d2",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d8d968d8-17e7-40a5-b14c-9b70ecbb12a0"
        },
        "item": {
          "id": "ceb83b1d-31fc-46b3-aa26-0fe4c81aa388",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "95db5418-dcc5-4d4f-8cda-287dd20aabd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3716e978-d6df-4ff5-b0f8-b7ca687c5794",
        "cursor": {
          "ref": "0ef4855b-92b4-4ce2-b9e7-45d4535c6cad",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4c0c7f10-1c91-45da-be5e-dcbc61c4d6fb"
        },
        "item": {
          "id": "3716e978-d6df-4ff5-b0f8-b7ca687c5794",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "78855762-26d9-4e64-896b-fd99686aae67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79a2662-b152-48a0-acba-ba6484de0690",
        "cursor": {
          "ref": "c6159fd4-52fc-4ec3-bd53-a07fda57973f",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "46a29683-a796-4b20-ad41-59c76aba99f9"
        },
        "item": {
          "id": "f79a2662-b152-48a0-acba-ba6484de0690",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "646bbd68-f106-4dff-a5f2-0352006616c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b4cae-c623-42e8-8cd9-c0f5c33eb85c",
        "cursor": {
          "ref": "499f506e-21f4-4dbd-aab8-f8c896f43978",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "50e3e514-29c2-42c7-9cb7-4c456527f8d6"
        },
        "item": {
          "id": "874b4cae-c623-42e8-8cd9-c0f5c33eb85c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a5e3f0c7-c9eb-4958-a5bc-39deda4fc705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d9d65b-6647-466b-9052-eaf936905aa9",
        "cursor": {
          "ref": "9e945c5a-c987-4cc8-8bc8-15d274ef06ea",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6ddf229d-e683-4c56-8046-8c81b472b0ad"
        },
        "item": {
          "id": "29d9d65b-6647-466b-9052-eaf936905aa9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "85347242-b534-482a-ad1e-161ede3eabab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a840ac2b-f917-4466-86a9-daee4081bbb5",
        "cursor": {
          "ref": "fe79c3c2-d71f-4d4a-956b-8ff5653c5636",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dce7e76f-1b9a-4fc8-942b-ba21efcd46e9"
        },
        "item": {
          "id": "a840ac2b-f917-4466-86a9-daee4081bbb5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9c5b1df9-a642-4dd4-a751-e5408d9fbe10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51178b5c-d193-4d2f-b120-03d9f677cb84",
        "cursor": {
          "ref": "84a3a043-169a-4c63-8bf2-f86488e4ed55",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d2ef6c30-099b-440e-a44b-8fcaab67f11e"
        },
        "item": {
          "id": "51178b5c-d193-4d2f-b120-03d9f677cb84",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7191d2bd-53bf-4ad3-a7b4-15f5c084ebde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0caa6f-3472-46a1-8823-bcb4b4968046",
        "cursor": {
          "ref": "cf306e63-cf65-492c-be09-13cdb2721e1a",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c31924e2-0a3c-44f6-b645-50715f6e116e"
        },
        "item": {
          "id": "0e0caa6f-3472-46a1-8823-bcb4b4968046",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ca873e2d-d318-4d73-a336-8760949afde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57894ca3-2261-4e13-aee1-395083ba76a2",
        "cursor": {
          "ref": "fc4667e8-8413-4556-b905-ca5415506a4b",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e0518d8b-cdde-47b2-b717-fc1878a6c2c4"
        },
        "item": {
          "id": "57894ca3-2261-4e13-aee1-395083ba76a2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "056bbbf9-cd22-4101-ba92-16f29a21c1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5904a0d-20da-4ef1-a809-456355619e94",
        "cursor": {
          "ref": "5ac56540-3ffe-4750-9602-066e8844f082",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a4d209c0-5c5f-4c34-a25d-a004cc2801c7"
        },
        "item": {
          "id": "f5904a0d-20da-4ef1-a809-456355619e94",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b7ba8f4d-1ec8-429f-8923-fc1023e0e55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12c1a14-cb8b-48d9-9e82-c40f962d6135",
        "cursor": {
          "ref": "ce55faa7-08dc-48a0-b72f-ba20e6c3fbc2",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7278de83-c7de-472e-aa3b-8a61e3c895b5"
        },
        "item": {
          "id": "f12c1a14-cb8b-48d9-9e82-c40f962d6135",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "06585d79-b0da-4aae-9dd6-aa0463c48f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "5a51b41e-c34d-43be-be1c-bd18b2f871cb",
        "cursor": {
          "ref": "670419e5-4d43-4ebf-a017-db42c01433c2",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4ef96c9b-ed26-4fc4-a8e0-0f91d6d95f4f"
        },
        "item": {
          "id": "5a51b41e-c34d-43be-be1c-bd18b2f871cb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ebbc9a2c-b740-4a4d-8587-e71bd7146b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f14a2b-1803-4ea5-8fa0-825b5a4e1330",
        "cursor": {
          "ref": "bc73428e-b3f5-4a5d-b45b-396d0eed8e16",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bd686db2-ef82-4028-a803-f5794bd78c0c"
        },
        "item": {
          "id": "42f14a2b-1803-4ea5-8fa0-825b5a4e1330",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "43f2df9f-8016-495c-8809-97f5978b8837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959f1ca4-5ad0-4a15-bc23-a0fc97a2bd2f",
        "cursor": {
          "ref": "4aac0edc-b549-4b50-b41c-97337f9d9454",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4005015a-2451-4e69-a783-102b58966365"
        },
        "item": {
          "id": "959f1ca4-5ad0-4a15-bc23-a0fc97a2bd2f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aae6915e-2fec-42be-b7c2-2bd87dc5c33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ffe49b-3ef2-4531-9a25-8a55e180ccde",
        "cursor": {
          "ref": "4770bd6c-cbed-467d-b4cd-433de1b78fa7",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9c837195-c9f0-4211-8683-2df72da8d60d"
        },
        "item": {
          "id": "b1ffe49b-3ef2-4531-9a25-8a55e180ccde",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "acc9735f-4dbc-4e9d-99e5-c3431cad72cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfed74c-38d7-4241-892e-d607384d3377",
        "cursor": {
          "ref": "a1d571d9-5bd5-4ce1-a4d3-d59bbb9be652",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dfba132e-8246-4a97-ad3e-bbd1b080c444"
        },
        "item": {
          "id": "fbfed74c-38d7-4241-892e-d607384d3377",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b3502ae0-65a7-4b18-8f12-417da1de8e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4045bb5e-8aa3-4b66-9a0b-d0fb382efb04",
        "cursor": {
          "ref": "1f68b86b-a95c-4490-b979-93c82628b2f6",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "96ad19b2-8add-4dab-9706-fb123ea58fe9"
        },
        "item": {
          "id": "4045bb5e-8aa3-4b66-9a0b-d0fb382efb04",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1fc8b7e6-b4a6-47cd-a7a6-b93de024d437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf2710c-ebf3-480e-a5f3-adf798ac9a57",
        "cursor": {
          "ref": "3494b57e-d9a9-41d2-99ad-fb44193d4b37",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b4e6102-bd6a-4f2d-8481-bc9d052ed012"
        },
        "item": {
          "id": "eaf2710c-ebf3-480e-a5f3-adf798ac9a57",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e94cbd07-b6a2-4848-a473-cbbd070cfa13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a80ca2-593c-449a-a46b-12f1433e780e",
        "cursor": {
          "ref": "6c37a565-9598-49dc-a673-47cdb66ccba5",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0609d4f6-7e34-436a-8487-145f6fb87f22"
        },
        "item": {
          "id": "c2a80ca2-593c-449a-a46b-12f1433e780e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9d5475a7-4f1b-48db-9932-722d0d6edc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe61019a-1150-49f6-be10-a66ec289b21e",
        "cursor": {
          "ref": "0746abc7-83ab-4b79-a3e8-45d924f32f1a",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "49f9ca65-83de-4780-aad9-0d0f08c57698"
        },
        "item": {
          "id": "fe61019a-1150-49f6-be10-a66ec289b21e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e1351ecd-4dc3-4d43-a948-eb8b69e8aa6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91e7e89-6a36-425a-862b-317fc95a707f",
        "cursor": {
          "ref": "9a8f9be6-05ee-47fc-9399-ac642330088a",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bce2493f-08a0-4755-a707-61a569db6384"
        },
        "item": {
          "id": "d91e7e89-6a36-425a-862b-317fc95a707f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e0003ddb-e69b-41f7-81f6-0187b5808e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd872d8-b8ef-4588-860c-c1496c34daf0",
        "cursor": {
          "ref": "cf18ec96-fbbf-4d75-8e1e-ce97b4ba3332",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "29000855-d3da-4736-9ad1-0218bd0d662f"
        },
        "item": {
          "id": "ddd872d8-b8ef-4588-860c-c1496c34daf0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "45172f44-b2e1-42ec-89ec-bbdb4c00854c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf68264-c44a-4c20-b262-ce7dd79e7741",
        "cursor": {
          "ref": "9c9770fd-edf0-47fc-b005-94a33a93340d",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5fd8738-8770-41c4-aeb1-7e3edf048a12"
        },
        "item": {
          "id": "2bf68264-c44a-4c20-b262-ce7dd79e7741",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cbacb5a7-116f-44c1-8540-ddb52bbc0935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7af4b-37fb-4363-9953-3ef8f5e65e73",
        "cursor": {
          "ref": "086e1ba9-eb2a-4745-a78a-e2dcee679469",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d28cd348-90ff-49ff-b4ab-94b70634e97c"
        },
        "item": {
          "id": "97f7af4b-37fb-4363-9953-3ef8f5e65e73",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "08aae206-935e-41b5-a0c3-d49f06084e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d92f85-b5da-4e59-8e6d-14bfda754247",
        "cursor": {
          "ref": "52d4b784-5fa6-4a07-b03e-a6b96515e616",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3501bc18-7eca-4fc5-a427-1c811052ac35"
        },
        "item": {
          "id": "e5d92f85-b5da-4e59-8e6d-14bfda754247",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f727e301-0dfc-4ed2-b580-ad8bd260bf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6853428-7c52-4b12-8633-6cef485ddcda",
        "cursor": {
          "ref": "8f4cb6f2-a088-458d-91ce-7c8339e79f3b",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c8b7051a-924a-417c-b03e-1ba1ef1b3129"
        },
        "item": {
          "id": "e6853428-7c52-4b12-8633-6cef485ddcda",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8f31bccd-d297-4b69-b6c9-30259a25532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64037bb0-5b05-4ed8-9650-eaaab00070bc",
        "cursor": {
          "ref": "c5476b5b-f52d-4bd0-8852-cd9ae484079d",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "53e81ccc-96a9-4273-a401-30d90ff02485"
        },
        "item": {
          "id": "64037bb0-5b05-4ed8-9650-eaaab00070bc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4a0abace-c6c9-4c84-8e4d-54376d4555e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b898253-269f-4e2e-aafa-8783a0dd8e5b",
        "cursor": {
          "ref": "3108dd3b-cdd3-41d1-a10c-ec22fde2641e",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cf1a858e-c498-4531-ad4c-1b9d03399c5d"
        },
        "item": {
          "id": "5b898253-269f-4e2e-aafa-8783a0dd8e5b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e12b035-f087-472c-b43f-4419a6af8e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28adbf3-13af-447c-8f20-b9bcc7b55ef2",
        "cursor": {
          "ref": "7990f411-ecea-4338-b593-f0da7b2eafe3",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "53aa758c-89fc-4619-8f88-03f880e30bac"
        },
        "item": {
          "id": "e28adbf3-13af-447c-8f20-b9bcc7b55ef2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f8b4c29-d86e-4dfa-b3ea-a4831cacdfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35598402-aa6b-4a76-a3f2-681322f6712f",
        "cursor": {
          "ref": "2a82cbc3-fa5f-4d68-b4d5-6128391f5a80",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4d768017-285e-4165-9cd8-16f55e9df75c"
        },
        "item": {
          "id": "35598402-aa6b-4a76-a3f2-681322f6712f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "403ba4e2-2a37-4f2d-8231-88088caa8f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fab1c3-6ec2-4a7c-9c8b-68c0412292bc",
        "cursor": {
          "ref": "a21071c2-3bcb-4c48-bea8-64cc69a8ea64",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e7d8a245-6ed8-441c-9700-cb5ee62c9a2c"
        },
        "item": {
          "id": "c1fab1c3-6ec2-4a7c-9c8b-68c0412292bc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a6daf65d-2a79-42c8-a521-9709b0061cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfce1cb0-1e9d-4fbb-b2e4-ea35e731f2b1",
        "cursor": {
          "ref": "55bba4be-01e6-45bb-aa2c-ef84d289329c",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3c9803cf-f9aa-4a0f-984a-47edfc3ea945"
        },
        "item": {
          "id": "cfce1cb0-1e9d-4fbb-b2e4-ea35e731f2b1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b4e5cfb7-3425-498e-8f0a-04e690a981d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bbad0c-1cef-4a1d-abd9-30fa62d9574c",
        "cursor": {
          "ref": "7298d74c-b66f-4779-8cf8-64ea37c1439a",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "140c777d-89a1-4278-bdc1-8edbae9a2b73"
        },
        "item": {
          "id": "44bbad0c-1cef-4a1d-abd9-30fa62d9574c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "afdc42e0-3470-4227-b21c-ab5e0ea70106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2644af2-3e89-4b28-923e-5d15c33ec1bc",
        "cursor": {
          "ref": "93e809b6-f4b4-4245-8368-491a44518188",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4acd089f-0bac-47bb-a53e-e1114a1cb55f"
        },
        "item": {
          "id": "e2644af2-3e89-4b28-923e-5d15c33ec1bc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0bf3c828-49d3-4f56-a58a-62d4603542f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4633ad1-c919-4c43-97e4-07703b6ec094",
        "cursor": {
          "ref": "412e8cf4-657e-4269-92ee-58cbbdacf3d4",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1485e27c-8428-4bf2-b8de-b330e6e8a9bf"
        },
        "item": {
          "id": "b4633ad1-c919-4c43-97e4-07703b6ec094",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1524802b-84e4-4842-956c-30f42a4234c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16a4c9b-fa21-44f2-9e6d-5858f6e0f4be",
        "cursor": {
          "ref": "4cd7d2dc-3e24-4eb5-8905-4f0e8f2ca62b",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7df345bf-5186-4994-b4e5-f055b1fcd1b5"
        },
        "item": {
          "id": "d16a4c9b-fa21-44f2-9e6d-5858f6e0f4be",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9a3c9cc7-e436-4560-b722-ee8e02f127d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c560c906-8608-4235-9b0f-3b610d1c58e2",
        "cursor": {
          "ref": "309eda07-c566-4a49-b923-44963c2802a3",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6a72023d-2fdb-4e82-a892-0426185803cd"
        },
        "item": {
          "id": "c560c906-8608-4235-9b0f-3b610d1c58e2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "65e25fee-7ba5-45d6-8a07-e8bcc8013dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eb7466-d5b4-44d9-b9ed-613c1042e4b4",
        "cursor": {
          "ref": "167d8be7-9114-42e7-b199-2d952dfc9d65",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "207be7d0-9ce3-4c33-89f8-b9bcfc0abdfd"
        },
        "item": {
          "id": "39eb7466-d5b4-44d9-b9ed-613c1042e4b4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8b0ec69a-197a-402c-afbd-3a7aa01ab3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419978be-5929-430b-bb93-de665e758a6c",
        "cursor": {
          "ref": "9dda4be3-f820-4448-8cf9-e4749bedbf39",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "957807d1-4f17-4eba-be53-487164799f33"
        },
        "item": {
          "id": "419978be-5929-430b-bb93-de665e758a6c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ee95e8f8-1163-4510-99ac-275a474ca19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c06146-bd77-4659-b44a-80e105635eab",
        "cursor": {
          "ref": "f0a3a7d1-2aa2-41ab-9591-e34b9e8ac51c",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9aa4a624-78af-4873-9b38-a8a6b38705a0"
        },
        "item": {
          "id": "03c06146-bd77-4659-b44a-80e105635eab",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7038b6a0-e5b0-49d6-9421-0b5f8d8d5376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674af849-242d-46b6-8796-98ccc8398d68",
        "cursor": {
          "ref": "326bc8ec-d5cd-4a08-aaef-a999eee47356",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "74a34afa-6a14-4243-b22e-908c500f9428"
        },
        "item": {
          "id": "674af849-242d-46b6-8796-98ccc8398d68",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "17a24edf-286e-4f50-9368-5d1b178468fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0510399-7c1b-4aaf-b318-baa4048fdd02",
        "cursor": {
          "ref": "7997d261-8ada-4a68-8698-c610aa44fe45",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "51853d72-8c85-405c-b77b-18553b43d131"
        },
        "item": {
          "id": "a0510399-7c1b-4aaf-b318-baa4048fdd02",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6bae2c0c-d61d-4177-81dc-a8ab30e8492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7371159-1d87-47e2-8e44-51c113e0f5a1",
        "cursor": {
          "ref": "39a16e47-080c-4e62-b5e4-1b111568ce9e",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b185ef54-3a15-4d2c-87db-32b8ab2b8940"
        },
        "item": {
          "id": "f7371159-1d87-47e2-8e44-51c113e0f5a1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2f73ddd9-b956-49ab-a474-552b884879af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb3ed67-a4aa-4ece-acf9-b0c827c39ee5",
        "cursor": {
          "ref": "842a3aff-4af8-4988-acf2-57afd1e4c698",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a11c8987-83db-4b2b-8f05-79f9bcd10632"
        },
        "item": {
          "id": "ecb3ed67-a4aa-4ece-acf9-b0c827c39ee5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "16dfdfa7-19da-4cd0-a584-d78401350906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e70804-c868-4d1d-9711-fc192046cbe2",
        "cursor": {
          "ref": "c5925d83-78a2-40a2-91c4-7c1b75b3af67",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d23cf5e8-ca71-4759-8777-be70fa8f0cf4"
        },
        "item": {
          "id": "c6e70804-c868-4d1d-9711-fc192046cbe2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a7c98cad-6424-44fb-a231-b257a6f22d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b574d7d-9023-40c7-8568-f8963921683a",
        "cursor": {
          "ref": "98812e02-1d23-43c7-9dda-b97265ebf88c",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "224ffaca-daa9-48b6-9e99-8e6e04845b41"
        },
        "item": {
          "id": "7b574d7d-9023-40c7-8568-f8963921683a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a9e21e5c-ffe8-4168-b147-493ee5ab23fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4ef60b-67e5-43af-91c2-35425916e2c2",
        "cursor": {
          "ref": "00c55398-da53-4d36-94ea-560f3de40e79",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e63406d3-b509-47b2-9e36-e67680114c4b"
        },
        "item": {
          "id": "0c4ef60b-67e5-43af-91c2-35425916e2c2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8db80b11-bb95-48ad-acab-402fb73f1ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706ed71a-c9f9-4b5f-a8e8-50119f8232d4",
        "cursor": {
          "ref": "c9fa31b2-0f3a-42ac-8970-8434b122f64a",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "072c31c3-ce1a-4099-a407-155b9cce2ffa"
        },
        "item": {
          "id": "706ed71a-c9f9-4b5f-a8e8-50119f8232d4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "74e6005b-6f6b-4af9-9528-1aa99e3216f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3515c97f-133a-4dea-96b1-d5d81525b02b",
        "cursor": {
          "ref": "f49603a2-db94-416b-bdb7-b445767e4290",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b96e0fe5-c0af-4fa1-b0e7-e8c7fc8f3623"
        },
        "item": {
          "id": "3515c97f-133a-4dea-96b1-d5d81525b02b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e494bfa3-7156-4567-8647-0d41f9afabbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e7aa87-9e3f-4a5a-bb3e-6a6670a8dbca",
        "cursor": {
          "ref": "91c225f3-ff01-4105-93a3-819681b5297a",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bc230d1c-95ce-4e2d-bed2-9b83f4257399"
        },
        "item": {
          "id": "72e7aa87-9e3f-4a5a-bb3e-6a6670a8dbca",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e501c6b8-357c-44b1-8d08-541ccf6a1663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cae677c-150e-4682-9d11-1a999406ad52",
        "cursor": {
          "ref": "bf351431-317f-4604-a254-018ebcf50ef6",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "23b7103e-0432-4a62-90ca-a370ff4277cb"
        },
        "item": {
          "id": "8cae677c-150e-4682-9d11-1a999406ad52",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2756afa6-f27b-40c9-9bae-97966bb1f370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc252a7a-a97d-4806-b596-911227904a68",
        "cursor": {
          "ref": "7534f7ff-d50f-4459-ac59-e2fb6bd2d4de",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "74b53e3f-93c6-42b0-bcbf-48b717278e29"
        },
        "item": {
          "id": "cc252a7a-a97d-4806-b596-911227904a68",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8821dd80-49ac-4ebd-affb-e002db95b806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8824ba0-8b89-4080-a547-38a5e2d1592d",
        "cursor": {
          "ref": "8aea83ef-a9d3-4b12-b23c-ee1a6b43414e",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cd1d86ad-fa8b-4eec-8f8b-e483ee16db6e"
        },
        "item": {
          "id": "b8824ba0-8b89-4080-a547-38a5e2d1592d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "311f305e-de82-47b2-83aa-7f2b8cbb43a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c0e1b8-c4dd-4450-a5c8-0b374492b1cb",
        "cursor": {
          "ref": "fd9e2d87-6a97-49ba-b443-8b683b61d715",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3f4a54d3-a3a9-4c06-8793-85966edf5510"
        },
        "item": {
          "id": "f7c0e1b8-c4dd-4450-a5c8-0b374492b1cb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a453cb1b-8959-42d0-9b27-2920b6106712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bb251c-f3f6-4194-b5a4-1acd1057a6cd",
        "cursor": {
          "ref": "3c4fbc85-ff8c-4408-99c5-ac39a3d07abb",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c99fd808-2b14-4565-ac4c-c26d439ce267"
        },
        "item": {
          "id": "e2bb251c-f3f6-4194-b5a4-1acd1057a6cd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ab17e541-a43d-4f9f-85df-a60d9ae01878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7089967b-859b-4ce4-9e2c-6714bf7f87ab",
        "cursor": {
          "ref": "f58b71bd-38bb-4a85-82e3-e84c2d5a26ca",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "965dc933-eac5-403a-8ae5-85e258339199"
        },
        "item": {
          "id": "7089967b-859b-4ce4-9e2c-6714bf7f87ab",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bab78a6d-7b5c-4f38-8f90-35132099cb8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7daecf-1e14-46fd-b5ab-65c9e045015f",
        "cursor": {
          "ref": "0559deef-9c43-47d3-a108-771447d8fe54",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7a683ff1-5004-4d7f-9f73-b7de55407a12"
        },
        "item": {
          "id": "ad7daecf-1e14-46fd-b5ab-65c9e045015f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b23692a1-f4a2-488a-9c28-68a17dc73ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c435b8-6872-4de6-8c3e-cd119b2376fd",
        "cursor": {
          "ref": "a1e5d3bc-3a9d-4a4f-a1cd-89853b7dfc8d",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e4a847b4-4196-462a-8b77-cf7f82d075b4"
        },
        "item": {
          "id": "37c435b8-6872-4de6-8c3e-cd119b2376fd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cb556dc3-9fd9-4bc3-89c3-5cb27ffad560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cd8bf0-b06b-444a-9fe4-f9d5b8f57609",
        "cursor": {
          "ref": "85b7c27a-b980-4145-92f4-31cf94e40fce",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3c1d8832-1209-4825-88ed-cf0bed49bbd0"
        },
        "item": {
          "id": "38cd8bf0-b06b-444a-9fe4-f9d5b8f57609",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fe60c64b-31e9-4e32-95dd-2b3e30f4afd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637da3fd-a9ef-4671-bbcb-c389b1177d88",
        "cursor": {
          "ref": "f1ad7948-c1a1-4bbf-b262-920b21a7e3b0",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9aa3626b-3fae-4664-9650-caed1ff3182f"
        },
        "item": {
          "id": "637da3fd-a9ef-4671-bbcb-c389b1177d88",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8a3c506c-c74b-48e7-9c21-5ebd493fbd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d61ec3-cff4-4d36-91b9-e0a7a2d61d48",
        "cursor": {
          "ref": "9e54ebf0-a14a-4732-9993-019b49529d52",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0e44f2f0-49ea-449b-9d0f-0ce987bbcfb2"
        },
        "item": {
          "id": "f9d61ec3-cff4-4d36-91b9-e0a7a2d61d48",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a1516d7d-9633-40bf-90bb-00e0d7a36f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d90a647-450d-47e7-8686-efce6b90bec9",
        "cursor": {
          "ref": "88525ac9-49e4-42ea-9f16-8f455d50d573",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fca7717f-6d41-4eef-aaad-93c9cc6d17ef"
        },
        "item": {
          "id": "4d90a647-450d-47e7-8686-efce6b90bec9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0e7a17f4-2163-4492-9c7f-0f1bf53c65ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc81e01-eb37-4240-9701-976dd225c26e",
        "cursor": {
          "ref": "cceee4f3-5ed5-4b6e-8268-4ab5166bac45",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "953fda8e-0996-4bcf-aa11-c79774625297"
        },
        "item": {
          "id": "8cc81e01-eb37-4240-9701-976dd225c26e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cd3a8b96-05a5-4071-a1d5-f0a64f30103e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed9fa49-6735-4c0e-9180-69e576d04e99",
        "cursor": {
          "ref": "4ca3af0d-e742-4c1d-82dd-66d4808a0f60",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "710f93a8-34f4-474b-8007-0bc921b3c3f8"
        },
        "item": {
          "id": "1ed9fa49-6735-4c0e-9180-69e576d04e99",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d0becc60-247c-4ac0-a4d0-60ad08778be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07361da4-c51e-4722-860f-75f5f2b38dbc",
        "cursor": {
          "ref": "e919ad34-a5f0-4d82-bfbf-d3a95daf060a",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9483863c-0b51-4d62-95da-58252712bfc1"
        },
        "item": {
          "id": "07361da4-c51e-4722-860f-75f5f2b38dbc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "378c9db6-4b7d-45a9-bd0f-259596c5e045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0c36c4-90f3-4c62-9a69-02b834cff8c4",
        "cursor": {
          "ref": "4a83e911-0319-4a7c-8cd5-6dad457cef29",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c3791253-5078-420a-863d-777d617ef53f"
        },
        "item": {
          "id": "9b0c36c4-90f3-4c62-9a69-02b834cff8c4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "da9b9f62-d478-47ef-9c06-7cb6fb688e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c10a0fe-3fea-4427-af08-a9cb2cda92e3",
        "cursor": {
          "ref": "02d44a35-c33a-46bb-a4da-d234300febb5",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9cf82f1c-201e-4713-85df-c25cd1400a5e"
        },
        "item": {
          "id": "0c10a0fe-3fea-4427-af08-a9cb2cda92e3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ee97bbfa-833e-4b51-a6cb-4a8c16c08470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d292c98-b6ae-4e08-9d0a-8882c0cb7637",
        "cursor": {
          "ref": "da9090b4-0fa9-4ccc-95b7-9d27eedd8f0f",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a999406d-b16a-4217-8780-32b7c950fa95"
        },
        "item": {
          "id": "2d292c98-b6ae-4e08-9d0a-8882c0cb7637",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8ccb9fcf-b5fc-42a9-a8fb-54c13f6213d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70771fa8-2ab2-4492-8755-bb06febc30a1",
        "cursor": {
          "ref": "85e8160a-7baa-476b-ab30-7ba4aec6bc49",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "546604c8-dbdc-4e1c-b176-6f7bc3b9ecae"
        },
        "item": {
          "id": "70771fa8-2ab2-4492-8755-bb06febc30a1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9441421d-0faa-4dad-9be3-6ce5dae70bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27ab7ad-dd27-47d8-a7ce-8626d9b30d4a",
        "cursor": {
          "ref": "a8a824e8-6880-4484-917c-d7b67a3dde52",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "327e0d7d-f4e4-4c35-bf5b-3ba9b3d5d38e"
        },
        "item": {
          "id": "c27ab7ad-dd27-47d8-a7ce-8626d9b30d4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "523e8b7e-db47-4aa6-a6b6-e532eacbf0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1fa5d9-5875-47b8-b5f6-bd1715043693",
        "cursor": {
          "ref": "0be1f81b-f3ac-406c-aee8-c1cb1112e2f2",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a0a47525-27fa-4b5a-be4e-050a02a94502"
        },
        "item": {
          "id": "ca1fa5d9-5875-47b8-b5f6-bd1715043693",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ed477550-7a7b-475d-8fb7-c8e10e628165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0c9902-934f-4d0e-92a5-5352768554f6",
        "cursor": {
          "ref": "b2cb4def-e7b2-4353-978b-fb454f689da6",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cab46237-691c-4ba4-9d93-6737d94d7bc5"
        },
        "item": {
          "id": "dd0c9902-934f-4d0e-92a5-5352768554f6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "eec10da9-5433-4fb7-92c6-6442dd5e0cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc61cd2-d942-48a0-8aa2-244f562c44b1",
        "cursor": {
          "ref": "cdf741d5-683a-4fbd-be5f-ba46d9afdcb6",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b4014d6e-aec6-40ed-a9a8-4982ff0f353c"
        },
        "item": {
          "id": "3bc61cd2-d942-48a0-8aa2-244f562c44b1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a477137d-bf12-48c7-b6d4-5656184f684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b91872a-af36-4f06-b62f-32c6eeb5a6a8",
        "cursor": {
          "ref": "86bfacd2-03cb-412d-98d7-d7efca11dcfd",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fc9d3fb9-7d17-4c5b-88b6-3f161eab1e9f"
        },
        "item": {
          "id": "5b91872a-af36-4f06-b62f-32c6eeb5a6a8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0c339a49-894c-431b-b63c-6ce3fda1737d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ec7da2-ff1c-4e21-a93b-07ca7f3c33a0",
        "cursor": {
          "ref": "d4d82001-fdb4-41cd-86aa-23597bfba916",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c13c9e7c-46cc-4d37-a265-b2bc8cef1a6c"
        },
        "item": {
          "id": "b8ec7da2-ff1c-4e21-a93b-07ca7f3c33a0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a3838916-b549-4373-8f05-0070d59f6fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f742de3b-40ca-448f-b9bb-897d6261be26",
        "cursor": {
          "ref": "73d328dc-6130-4058-8391-629d615eef37",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "137e52f6-2794-4acc-9a35-addfca911573"
        },
        "item": {
          "id": "f742de3b-40ca-448f-b9bb-897d6261be26",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d3ac2d43-6d5d-404d-90ff-d5402eb5d0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8e171d-59f8-4e3c-9eee-7ede906ce61a",
        "cursor": {
          "ref": "eb9f91d6-aef4-4c0e-bb89-625b6d2c8b61",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05a25841-6b6d-40b1-a06d-9467d05cfe2e"
        },
        "item": {
          "id": "dd8e171d-59f8-4e3c-9eee-7ede906ce61a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f8159a41-a769-4d0d-ad19-1cea328a47a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75b7ec3-ed77-46af-b1d8-8f832925704b",
        "cursor": {
          "ref": "9f1b2e7c-19d7-4f6e-a27b-d7ab20234879",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "20383f30-dae5-4f9b-9085-8155a9a1400b"
        },
        "item": {
          "id": "d75b7ec3-ed77-46af-b1d8-8f832925704b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "774cd9bf-eb49-43be-8c38-edef66a3a019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e791a82-bc47-40bc-bd70-d25e057f0cca",
        "cursor": {
          "ref": "d05b967f-614c-4af8-8232-2af8014bdf2d",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "28ac601f-2ab1-44a3-b298-df8f31ca921e"
        },
        "item": {
          "id": "0e791a82-bc47-40bc-bd70-d25e057f0cca",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e56f29c3-2fc7-4d85-9204-c98d2fefa7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379e335d-b73d-44e0-b24a-47c7034e6f36",
        "cursor": {
          "ref": "4f3f13e5-47e9-4538-99c5-8496750b2ffb",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3b51a8a6-d2f5-4d86-aabf-9833ee836dbe"
        },
        "item": {
          "id": "379e335d-b73d-44e0-b24a-47c7034e6f36",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2dbabf62-712d-4429-b819-a114273e90b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6143e67c-5cb5-4225-94da-daa8a82502de",
        "cursor": {
          "ref": "27806de1-6dc7-47a7-9dbb-ad26ef66863b",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3c86c97e-e876-4265-b44e-1c1a4a2d58fa"
        },
        "item": {
          "id": "6143e67c-5cb5-4225-94da-daa8a82502de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "983e2131-cd1f-4d27-8db0-28125599b089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acec0c0b-3e63-4fac-be92-591b25496dcd",
        "cursor": {
          "ref": "dbe8bd84-e396-4e8e-8107-61f3305d4c2e",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "413e2d26-2b38-41bb-9a54-11a7a0abfe29"
        },
        "item": {
          "id": "acec0c0b-3e63-4fac-be92-591b25496dcd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d8168066-a9b2-4b63-b117-ce25da72946e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab8d52f-1776-48b4-8c54-e77859255024",
        "cursor": {
          "ref": "aae50d5a-fbaf-46c7-ac0d-26b920d1c0cd",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "407d3631-909b-4d57-9af2-94ca1f6aceb6"
        },
        "item": {
          "id": "0ab8d52f-1776-48b4-8c54-e77859255024",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "42540f4c-b749-4649-8f19-aa36dd7d7797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32f2bde-58e6-4ed7-9fb7-dc8086787a9e",
        "cursor": {
          "ref": "7db09e73-3bcf-43d5-97c8-3f2d6dc79372",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d309a5b1-36af-481d-8a16-4cddef1ca9e8"
        },
        "item": {
          "id": "e32f2bde-58e6-4ed7-9fb7-dc8086787a9e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f914308f-d310-459b-84c1-82dec18c8001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1eb5a93-498a-4ab7-87e7-dcf88c35eedf",
        "cursor": {
          "ref": "dc804e61-ebb9-4fa5-8f61-669cd21d0441",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "db154560-eff9-4afe-bcd6-bfcceb1d04a1"
        },
        "item": {
          "id": "a1eb5a93-498a-4ab7-87e7-dcf88c35eedf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eab3ccb8-fce2-4e9f-8374-75f167d0e160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26ab28c-dd0a-4df7-8ae4-3438cf30240c",
        "cursor": {
          "ref": "1333f72f-5b33-4fba-bac6-920109b7d3b6",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "891c7863-21b8-40ca-b1df-d5bd3d5356db"
        },
        "item": {
          "id": "a26ab28c-dd0a-4df7-8ae4-3438cf30240c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a7710967-7649-47ed-90c1-bd37dddd4347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2527a5-3cfd-4ccf-a58d-939b80037072",
        "cursor": {
          "ref": "79af835e-12bb-47d8-88ff-f48a5882271a",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "939fb368-2442-4494-9e58-cf9f5d768dc1"
        },
        "item": {
          "id": "da2527a5-3cfd-4ccf-a58d-939b80037072",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e99c05a6-1fc1-4f0a-a2de-74f84126db1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05a09b6-3c2f-4f27-b692-cae43b9d0d64",
        "cursor": {
          "ref": "ef0a0712-35b1-4f97-b8a5-3a11f3831dd7",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7476413b-7fd0-4db6-8e2d-385a84541677"
        },
        "item": {
          "id": "d05a09b6-3c2f-4f27-b692-cae43b9d0d64",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cbc6db67-b80e-49c4-b3d5-f145cd157701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e45352-f2a3-4375-a551-4d64b9e0e729",
        "cursor": {
          "ref": "36361413-bb9f-475c-8941-86257cb35ab4",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7429e411-284b-428e-914c-94e9a293f7a7"
        },
        "item": {
          "id": "72e45352-f2a3-4375-a551-4d64b9e0e729",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a6cdb13d-0ba7-4c2c-b590-09205fb3f546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0e9b25-f47b-4d48-9ac6-bbfecdeb0334",
        "cursor": {
          "ref": "d96d78d9-8259-46fb-a269-1ad7980577f6",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "93c775d0-5de4-4784-b015-d8f8004560bd"
        },
        "item": {
          "id": "fd0e9b25-f47b-4d48-9ac6-bbfecdeb0334",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5f22ed0e-df35-469f-8a94-d617fd204674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65231e64-729e-4304-97af-4ed5c86480de",
        "cursor": {
          "ref": "bdba7c02-3079-43b0-a713-94204a95ef92",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9e23fa39-30bf-41c0-9df9-dc8bf0133cbc"
        },
        "item": {
          "id": "65231e64-729e-4304-97af-4ed5c86480de",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "05f3f276-b740-4638-a46f-fba5a1e74ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846fea21-ccca-4bf3-846c-99be0c29b262",
        "cursor": {
          "ref": "32af6658-1b9d-4abf-9061-cb55f377a045",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2fd9d17-c87b-44a9-9b26-fe03f779c9dd"
        },
        "item": {
          "id": "846fea21-ccca-4bf3-846c-99be0c29b262",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "41d72a2d-d48a-436d-8299-0a131fb906d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c363bf02-398b-42a5-bce6-fe598338f912",
        "cursor": {
          "ref": "1c55cf70-9e7a-4b9c-bb12-1c483d64ff29",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ed848a7d-8d81-4b9b-8789-c8fa9f1d66b9"
        },
        "item": {
          "id": "c363bf02-398b-42a5-bce6-fe598338f912",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "17f9e621-cdd5-48d1-b688-7d86b6983d93",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9882ca14-dcaa-41b5-9746-85b50d989947",
        "cursor": {
          "ref": "924a2b10-81fc-4e3a-a26f-c140600139a1",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ed503f94-8c6a-4cdf-8e4f-d55f8254e56d"
        },
        "item": {
          "id": "9882ca14-dcaa-41b5-9746-85b50d989947",
          "name": "credentials_verify"
        },
        "response": {
          "id": "53e96fdc-5cd3-4e2a-88e0-42c90f8f21a5",
          "status": "OK",
          "code": 200,
          "responseTime": 2520,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "89944165-b567-4f46-a0ce-86dc7404275b",
        "cursor": {
          "ref": "ec489469-7672-463b-beaf-e4d8202d892d",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4d445cdb-a06e-4903-a2bd-95b900c780f0"
        },
        "item": {
          "id": "89944165-b567-4f46-a0ce-86dc7404275b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "71c5d63a-2985-498c-850a-315148283ccd",
          "status": "OK",
          "code": 200,
          "responseTime": 3364,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ec843e-33ed-4074-afd2-481c3ecbab33",
        "cursor": {
          "ref": "677ea51f-a412-47f6-afa2-b5b1642bb704",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8b53a9bb-c9b7-4e04-8008-9dae256a5cb9"
        },
        "item": {
          "id": "18ec843e-33ed-4074-afd2-481c3ecbab33",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "649e255f-63d2-4c6b-98be-6f9ca926aa4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "18ec843e-33ed-4074-afd2-481c3ecbab33",
        "cursor": {
          "ref": "677ea51f-a412-47f6-afa2-b5b1642bb704",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8b53a9bb-c9b7-4e04-8008-9dae256a5cb9"
        },
        "item": {
          "id": "18ec843e-33ed-4074-afd2-481c3ecbab33",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "649e255f-63d2-4c6b-98be-6f9ca926aa4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8a4d6471-3a5c-4203-859f-9927594d35a3",
        "cursor": {
          "ref": "e88c6802-bd04-4b9e-875f-a13675de14c9",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f1a2e7dc-61fa-44ca-acb3-15cdc6b50ff3"
        },
        "item": {
          "id": "8a4d6471-3a5c-4203-859f-9927594d35a3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "318e0551-7aa5-4d02-89ce-5d85c025bdd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "331b691f-00d5-475c-8b8f-7f844148bda2",
        "cursor": {
          "ref": "00f29dd8-c11c-449b-ae08-22d43a9c7cc9",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "98fe1834-8439-469d-bf85-3f2320088db9"
        },
        "item": {
          "id": "331b691f-00d5-475c-8b8f-7f844148bda2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eb696fe5-a759-4259-8a32-d6fd82116dee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}