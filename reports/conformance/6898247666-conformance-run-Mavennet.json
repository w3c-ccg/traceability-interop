{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f0318a1d-7141-41e2-a6a2-a88bafc52875",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2b07e266-e00b-4297-880c-39005343e1fe",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5175e23a-8526-4e02-9118-0ed3d97b774e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c6b653ac-02c4-4e9f-8ad8-d025210d25d1"
                }
              }
            ]
          },
          {
            "id": "2e98bf22-aff3-478b-87f4-420b2a8002b0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e3b4754-378a-46a6-973a-508520fdd63b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0866654a-8030-48f3-9278-2c3c6e6611ef"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "897a0d9e-a79a-4603-893b-8f160d92e227",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0d43f7eb-0e01-47b1-b358-ee527c1f86ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffc5ff07-cf63-4ebd-bc79-7ed785a5a897",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "719b6807-51c5-4c8b-8241-fa74af24fae6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37d5b9b4-a58e-44c0-a834-11f9e349f5f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e859ce2-86e6-45da-8a36-6d7983680dbd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e58af2d-a295-4901-b62f-61827c9a72a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b17b91d-de83-4360-810b-63592ecd0677",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4bb389a5-89cf-485f-9a64-151ba645d1c4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b87b894e-aa30-4dbe-8717-fbbf2820820a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5089707b-08e1-40dc-b54b-4c1e6fb233ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f95f55b-c1a1-4b71-bad7-fc45b399cfd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91c68c0d-cf8c-48ec-9cc0-87096ce97d8d"
            }
          }
        ]
      },
      {
        "id": "272fffa7-779f-46b1-a909-bcd32ba0ccfe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e719d811-2a41-4ae3-9f63-62b725ec71f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f1034c1-21b5-49eb-b4a0-2e5ca19d8e7b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4f3ca62-7c48-414a-b868-14a95a12983e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5132cbb0-9817-460e-badc-ffa90756f07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6b932aa-584c-4113-bd4a-fa48f53f6f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e744b4b-7bcc-44d7-aaf2-3433caa656cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4464449f-8ea3-4149-858e-30521511f05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c991d7c2-8f77-46bc-bfbc-c6bf4a237147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992fd967-9718-43dd-85a6-e0688b348168",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6ed839-c6b8-40ec-88a5-8d6a09b88a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15fb5e52-45f6-4eab-bf50-9ebc8c9000b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4db4f379-093d-451d-8288-a7fadea7822e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "befbdeee-b0cc-4f60-98c6-820d8c1c7ff6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be68978-82d9-408b-a4f8-45a07ec0af52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fd29936-c1d7-4a72-b75c-07118293d522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59909521-99c5-4542-ad6c-945d7bc83335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c5df11-e844-43fd-93e4-cac0eb5a0c23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "63ffb61c-2d4b-4c43-b9e5-a5bd1a3a63d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f50f27bd-1ff7-4139-a33b-c2f1eb3ebcf3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b7ebfe2-e43f-4d09-9a13-872a2cc9654b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b06316e3-ce8a-45bd-9db2-a148e187ca8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c99a0f3-beb7-4aca-9747-4b4cbb53ba56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "09993876-73e7-4671-aeb2-44ec0511b728"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30b7bde1-62ca-425f-972b-0cde78e2a87a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccbe3dd2-773a-405c-babd-e5312cf073aa"
            }
          }
        ]
      },
      {
        "id": "2f137bf3-5622-44c6-9898-39e28cb42baf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "928ea860-66c9-4a4e-b388-518cfab8e506",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47003762-f883-4b88-a88f-24a1d96116be",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "659ebf13-edb8-447f-a271-f143219dc83e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ebc5f7-421e-48f9-8984-de3a1e532b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c201dd7f-c7b9-4cd8-9172-a752b8068e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ab7959-f773-4469-a887-6bdcee77e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6da78cc-5375-4c9b-abcd-9286d5e0d95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64372a8-15f6-4b03-be84-78c57c42329c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae677a-bca4-42c6-b6bc-b5a62c256f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb667bd-ddc5-496b-be03-21a418c8da17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0a3a3b-89a4-4b63-bc09-996200df55a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe4d0dfe-ff11-46b9-bb14-a56f1ece55cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8983cf7a-485e-4b44-afbb-d4583c0e5a7d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaccafd-409a-493b-97bd-51b85f934c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdd32d0-9c6d-4bb9-b522-1361050bb6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70803e47-4d48-453c-980a-1384e2d19b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce12e4ca-c40a-4ec7-be94-fd5f7bd8d016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df213dd-cb52-43fc-a54f-cdb582db5202",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bb525a-f1cf-4160-97af-d741ed5ff9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ea9c6b-e254-4fbb-a33a-793b054b17fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51092cd0-b980-40e0-9b9b-bb4326513c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1a986ec-d23e-4bd3-8c97-6697435940c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf6365e-8a03-485b-aefc-573524b926b1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e953e6-9d00-41df-927e-bc5922936d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfe64a4-cda2-46a4-9875-0383ac4ff012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01c3b71-1d8b-4c30-ae77-67e9eb8afb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3625441d-294e-467f-a63e-042611468929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97885bbd-5075-4fcf-a54c-3338b3e2e486",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84b4cbc-737e-4eba-a8f0-78aaed461a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2103d4bb-728b-48fe-8c69-7311c5176efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1120908-bb15-4eb2-9e5f-d74fd3418430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25ea1cc0-505f-4c7f-8f67-335158d9e37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155eb465-1705-4bd1-9514-e673ad03b006",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6dc25d-08f0-4c6a-9ad5-d863f5de7485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b1622c-c344-4412-800b-2332dccf45ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f33382c-ef2c-4b70-8996-58422bd4c36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab6b9ff5-f8f9-42a7-9b45-808f2424bb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89757bd-58d8-42f0-9b48-d44c18652eec",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986207bc-d081-4c4e-be26-cfcadb403f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304b3f1f-6183-414a-90a2-f36b33638b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af248e1-6e08-4ecb-a2c4-49d9dd660fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aded4db0-17c6-4a6a-bf3e-70d1c0c40df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3797509b-fee3-4820-936b-f1c719a223ee",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071ee2c6-af77-4dc9-85d7-d886904917de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c42b25-3d40-4a29-a2eb-df83104530db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40551d15-75f1-4fc0-8b72-3327b70fa86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01080413-13b8-467e-a15b-ca79ed7ec284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c19735c-5ba8-4efc-80cb-5dd9415f9b0b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd53e80b-f811-483f-9af8-3e979095a82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645ec3bf-eee2-42eb-b7e7-94746e85849d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d28e92d-1aa8-4fc4-a598-eeff2b5d57cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93477179-655b-4662-9f66-aff2aa7b46d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3844117d-4ab6-459a-9f77-36728a13638d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ed3ec8-e501-4f84-9018-b8b6c2ca9513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bb4877-6245-4586-8d19-fa1a6e4ee30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b69bb6-be3b-49ff-bb87-e021a295d773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cc51fc6-c3b8-403d-be71-44feac597716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb39a23e-11dd-4c5d-a969-3b6aedaa6d75",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab7830d-e507-4798-a7b1-11f131a6cc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18b2678-95a8-47b0-aa48-b2180ddf9fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6557697-6355-4ffc-9238-4bf0746a2d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df24767c-c150-41e7-8f88-edc1f1cddb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf6524e-6ab3-4277-bf89-2276372756c2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396f25c6-c45e-4114-b570-c39f6ba8a8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae0d9f1-7e7a-4753-a963-21396dc2d0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3deab4-d7d9-427e-8af3-77f3a9f416b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfbea816-b4c3-4542-9287-2c65b60b171d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a40a5e9-99aa-4eb6-a09a-3287dd979d26",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f672f1ff-fdb1-48e7-8ecf-bef1ad3b88f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fe2d95-eb2e-419d-892b-dc4437c5516f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eafbc0-574b-48b7-a08d-79cd6fc4ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06f9c022-6e70-4079-a03c-42f49a2186ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea6f31b-60dd-4a82-96c3-b583f17bb7bf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5592b6db-7b95-449b-b116-2e687360b078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a66ff23-8d4d-4680-b5c0-af8c3f3f6948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3137cda4-b99e-4871-926c-ea9cb7abd319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1112310-1df2-41f1-9b3d-76376254a5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b7622e-beda-42f4-be7b-d9701bc7747a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f29794f-09c3-42a0-a18b-524bb203131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c27c7b2-038c-4125-b818-220dcad1de03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693ea39d-7ca2-43f7-9dad-b66c1ddbb2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "278e1c5a-d820-44bf-8bd7-9b2585876b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e08ddb-89e4-47f8-b9b3-f8f828515379",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bca188-b2d6-4451-a5d8-b4aab59da757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9212236-e233-45e9-8976-7152636ecc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dca3b8-b5e2-4565-869f-d12a6bc4d42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83008af2-722f-4ae5-b52a-4950a1d837cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e31bf4-21fd-4c0f-a6a7-3156418512b0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da2b367-403e-4aba-81dd-c80a412e5cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5d2101-97aa-4390-8053-6e19ab8d5adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71167f4-a21a-49ab-99dd-b1305018b97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "36af42a5-e742-4e71-a887-3de40b83f5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d39758-b10a-4cdf-b1e6-0e1e5d07319b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d07e391-3cac-4eb0-97ba-a976fb8bf720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f029c58f-2648-4383-8d01-20a5df828f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68b5e00-c1a9-471f-98f4-b362939e1be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1989b9fa-9c11-489c-b04e-04bb04762b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae1c881-ad66-4e31-a147-41c41a5f89c0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5e2552-6998-4dad-91b8-62d8e4b36ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430b0af1-2315-46a5-a947-6858c4857f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff10f1cc-e544-498a-9369-322417f58ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "803e2de1-77c6-48a3-99e1-e4352cbd357b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9aa14da-be5b-4413-bdb6-f293343d9ee0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71301b7f-497a-402b-b291-6bb6e95f00ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f15389-9372-4d41-8506-4a1493efdc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea398a8-12b8-4eae-bea8-f33beac00254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1742208c-22fe-4927-9b99-075b0c7dc9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6445ad0e-aa63-4e26-a73d-3cef2650a191",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b5214d-4e41-4972-a8df-a5125e1415d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f892346a-7d43-4e91-ba96-1fd0c3e673f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4f3780-ed96-468b-8b35-ed5a045fcf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d991d32e-4631-4963-a2e8-06ef4922e51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e66db88-1ea4-415a-a540-cd72c32fce66",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e95b32b-a888-466b-b74e-5becb3dac92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab0df0b-4f94-42a7-b9db-6757b7a6dcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba1bf8-5e85-4ee2-87eb-12707423faf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07790692-a530-40a6-b44d-c7664c69224d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc06d456-2abf-4a0b-9b94-caffbd9cbd08",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4881a25c-f71c-4824-ae01-78a5e57fa85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b033a8-e35e-4b81-9565-b927e6e696f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412234e6-99c0-41ff-9567-60905fba6e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8170f3db-111c-45ac-bc7c-80ddd32f550c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f4de7e-3c06-4092-a056-cf3cd0dabf1c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce687b42-9c96-4b93-86ff-280160fd5f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68f6216-6917-471e-9485-ac618ca716a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d45e9e-2f01-4bc1-ae2a-d35316e7ebd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b655b2-ae30-4d74-9662-9792085605d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d81fb9c-609a-4f57-9601-7b4d3baadc29",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263da9d0-8d51-4d17-927f-0e2cc223dfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a67b9b-dcac-4f2f-aaf8-89a0b510034f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf06f6da-69e6-4368-9ff4-70eb6fb19266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c78cea1-88b0-49be-830b-099141f3e52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4339fd-6462-43e5-94b0-558f503438ee",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e169c6b-5cde-40e4-b3ed-550ad50fc17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b97de3-5d83-4e6d-a4f4-715a49746ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766436c2-b1d8-4ebc-b632-3059ad6bf3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c99a7e76-aafd-46f9-8153-cc91cbfb77f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1acc4a9-023e-4a29-8bcb-b6aaa267c9e5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec63d3ce-d90f-49c0-bb1e-a29fe11cffd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05eb6383-970d-4afb-811b-12954e5c988b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08800a20-b71d-45fa-a0ec-eee514a2c558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d9ab9c-079b-4f7c-8043-a1c0687f89f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697cf2c3-c310-4d50-b5b9-f09e354f6118",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48dca8f-db4f-49a7-9e40-b656d3f10b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a751086f-a15a-43eb-b332-72aec973e05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0607c539-a609-4ab0-84ea-452063e4689a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d89d42-348c-4f42-a34c-589f823515f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c848c5-99de-4682-b7dd-1b2a31d1c796",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426141e2-2dd4-47fe-aca8-4c10d9d78136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a6f6bd-690f-4817-8aef-fabcd744f4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c892fa-32db-4895-b08a-cae93bf13d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed838d5-b59a-4557-ae28-06c145666bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcee1cb-d308-4a10-b3db-c6a8fd840c02",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5708167d-5684-4a95-bf03-c44bdf63f783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422d3011-3908-4c52-8b85-07b91bb058d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8e8dc2-62d9-4db4-a2ce-fcd1d9928a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e17f534-4bfb-494e-859a-2d108c1ecf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8003746c-88a7-4995-8341-a142f8e8d17d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb77c3e6-d38e-4b68-ba6b-6a7249b61411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30b03f9-cef6-45a9-ab06-db29d77bdd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eafe523-0e05-4ab1-9c4d-bde6d3f1e8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d411eb-e6f5-40a9-b609-1cfbc88bf740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36afd354-cf54-4001-be21-16f69161188f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328bdc47-1213-4e5f-ba04-dcb0874025f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9799df5b-8c01-4541-96d5-7e8298aaa9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c3007b-0d6a-4912-8dc1-cf8069c0cf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2db0463f-aa32-477f-8632-6aa46b95c8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fd0f9c-e128-4c1e-83a5-bad13f092040",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e975b2ea-2d3d-45bb-a0e4-bd372c32ed28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425d88a5-5046-445f-a08b-b7f59fb73a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cb902c-7c6e-4d3b-9ac2-83961e22157c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c478f93a-c378-460d-b00b-4fe2b84e5129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57416bfe-9e38-41c2-9718-b2c792d6f912",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebd012b-1bf4-4645-84fa-e08ac01ae63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80db6b15-a7ae-48d3-ad61-86a3aa810edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943d9de9-0a41-45e9-b69f-3fef1fcdfdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6de1b690-7e5d-4f9a-81d5-0f6bafa4aec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0ed4d9-d6e4-4686-a55d-773c25e4f0e5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef32a6f-fac3-4fda-8064-d547df71fec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fc9dafc-9233-4bda-8f8f-6c1f6e07eca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c18ba-b482-45a9-82c4-ee4af117bc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6407492-4ef4-4397-9cb5-99764ce7978f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda5d662-3fcd-4144-a79f-875a03f7dd6d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ee1cdb-bf7b-464e-a25e-9ac1cf430674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a0b147-75a1-4a7c-a4c5-b19fc430f9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc937fdd-24a6-414c-91f3-89db8fa5c4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1111e81d-170b-4e2d-806a-30b23ac8e2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5749d0ad-059a-4512-ae73-558e89356fd6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32316a0c-51c0-4ca6-993c-02b6c101ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f17aa4-8baa-4609-829e-ac857667d26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d05e2d-e8c2-4384-b9f0-92bc54b69c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "da3874ac-1fdd-4313-a51c-88288fa82e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2001bd9b-3526-401c-a1f7-9984032435ce",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7915f6-346b-4198-9aeb-e88759643da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e7c0e4-1347-4970-a259-d48741e1991e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194845e4-abe2-4959-a66f-43a82b3e06d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d297708e-52fc-4853-98e3-f4a7ba2007ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9deb33-290c-45fc-b30d-850e5d3eba07",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b803c2b-e09a-4328-ad1a-ef838ef04992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998a6b77-ae76-4516-b70f-b15630c21dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c50a14f-0431-489f-af49-7f02e9475a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "566139b6-3f1d-4bc9-b9ad-71c49136aaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bf3a02-d1f9-4743-8bea-feccd91518a6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30770149-100c-41eb-89b1-71485a54970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748ead58-eac1-4ab5-80b0-c1454f90c8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6e6fc8-0368-486e-8ba4-14e4d91ce67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21beec8b-4fc1-45a1-8481-0b4645ce57de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e2510c-8de9-4a2c-99c1-8b183458fb0f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72269215-792e-4bb0-b294-10e112c08178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c781ad4f-6c2a-4f42-a22b-4e9de7ed8e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f950adeb-19bf-4757-8299-a04f0da7c635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "79dff3a5-60e0-4507-a60d-68e8c10c7f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0213310d-9d30-4677-a23c-92146509204b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340a0de3-0d4d-4ac4-b072-9b2a2334f54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526a3727-baa6-45e8-a233-cadd7c27277d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb00554-0d9a-484d-be8f-10092febedaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5899346-965d-4d67-b35e-28ce75c5f1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ebd3a8-de31-4483-8745-5503b48a8f02",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d968da6-e200-4825-a27c-39fde44bb190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a423d875-9236-4661-aa01-0abbb796dce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc983f2-dbf4-43a4-b10f-d44a2b7f8d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc80b885-5dbf-426c-90e9-0c8553c6ffcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29425b3-7ce9-4f36-8d32-c9d0f23b16e9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33a2f17-499d-40e8-ae65-575c82385d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c649efb-ba75-4cbb-902c-089621183f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eb20b1-0e8e-44c1-99a2-4bb560cbf6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da4388d-6a78-4e75-aa56-608c16214e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cf3dd3-d068-4d61-92b4-40dcf79c53d0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d89dba-53fb-46d4-8f17-1c71e17fa9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0805f5-e3e5-4ad4-b167-68ef7298b240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2df21a8-86f1-4686-a2c1-7e7b3c7673c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d088c50-a9a2-4db3-9ab9-3f1126ddbf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99455b1c-c277-490f-a1e9-df45df362856",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3526b0-705e-48aa-ab9c-2e600f68918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c0e3b5-3c64-4339-9eff-9a102d5d83bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3b8e64-6478-4cf9-8197-e0f818ca69c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48741523-6901-4e13-8846-f8a70d2c15a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb854ac6-1cc1-4b22-a7d7-a90a02770d23",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4656ea16-96d0-4237-b3d0-ebacae039bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3815493-1336-4e83-8ccb-c970c8a7a107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e770da30-1236-43e0-9331-1b2dbea35c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc18263-48f6-4502-bc16-27f98ca7520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fe5878-4563-4ec3-a220-e96e46376525",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e76c20e-1d3e-4126-a52e-0e948614c91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbee2f8-113c-4832-9ca0-febcf7039b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a522fb34-9ac9-4dde-bb61-03cb4eba7564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "486ee716-376f-4b13-86a9-5890f73b4d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e610c7-cf2c-44ad-bd86-c89dedb9a152",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7d65eb-8090-49a5-9edb-d52ddd6463b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f44495-bf87-49af-8dc8-c0309a1af2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7897c82b-5d89-4c31-8690-06761df209b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b852c2f2-ef65-4b62-9d5f-b26fea7b6a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50347e47-6557-4cea-bf7a-c327468debc5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f46031-c34c-4294-bbc7-1e2cc1c14681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60feec0-e2cc-473f-924a-a22514464f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0eeaba-31c0-4a5e-bdc1-e6e711a0092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5d14b0-0db7-4bac-8979-d1cac1c9becf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cffa9e-c2ef-43fd-a1e9-4e1094f34e74",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9d8a97-a52a-4fd3-b04f-f981977b77ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7668c42-9e03-4518-a7e3-3b2c5e331b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfece85-cf8c-4a89-acf1-f8e17615274c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c48ff02-26f8-4662-afc9-b22d4fa7bce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf8580f-b8d0-42b7-b1b3-4c629336a498",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2ddc2d-c7da-4d59-ba5f-963734e02301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e6aca0-bbab-45e1-93dc-24f296cb391e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4e5e07-045f-431a-936b-0e3d229aabf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2355b8-4d41-46e3-a4d0-cc8f7a62e206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c436e7-35f5-473c-9447-8c74d9c4a185",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d708d760-ad94-42de-857b-55c4affcd524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468d4d9b-933b-4d68-b1a2-308cb8eea784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ab93ce-3fdc-4cf4-b89b-fd06deee5641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "368a39dc-b227-4352-9df4-d01519925aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c978829-d165-418d-899e-c1132337eaa3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318a7f1f-a258-4904-bab3-f1b402b48bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae682be2-490d-44f8-9090-9d42b0b15e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b122d28-db13-4531-8e44-ff3f25e5395b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe1913c-9513-4b34-bdb2-7045d5f58f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424f585f-6027-4cbd-b2eb-142bc885ca0c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50113f4-2d62-4f7d-8c08-3a96741540f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c969732-78ce-4452-99dd-bf3f7c736b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31466d49-6b60-449b-a061-c94dd5259c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfd8a74-033a-4bf9-bc2b-f34f73f823ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e973b1f-4d4a-4b5b-b540-5c3726b37769",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b10141-e68f-4517-ae25-6c7794550fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd0153f-8406-4d72-83b8-b4d86675ff49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3699c30e-716a-4f51-802b-ba54003f63b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7daa5f1-21fe-470c-b1e1-325d1a0d6ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290a5d75-54e2-45c5-87a8-45ef3d667a71",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7f0985-c8fc-4549-9f6a-7b404439d213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b602d6e-129f-459e-99d6-6e2b4d927500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a1de36-69e7-4221-b7f8-6075db199008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da04d086-d0a5-4b68-a247-38f7af9c3f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45147297-9a2c-431a-ab13-0f272f1c3dc5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f68401-45f6-4c49-8a83-52c1f83216a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b5f374-5a69-4bae-9427-52c2a65f22a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d3c88f-f66c-47d8-921f-2100a2ce53bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "67235ca5-cc96-4086-b762-872269ef2161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949da0ad-d663-4931-aa6a-7aa936f978bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b995a85-f785-4ab0-b040-b6836040c2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa45d5aa-ff2c-4a35-ada3-afb185ebebd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e9eab7-eaa9-44f9-ac20-e2090a8ff4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0757ebcf-e269-4886-8999-bfa5dd0fd9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd57cd1-ee38-4300-90b5-bb8499111d16",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e2880c-3cb9-441c-99bf-f20ff52ab2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f900723e-2436-4c8e-84ef-c469ef8a177c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31500fa8-1b03-409e-9410-e4476e55b8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5f974a-4aa4-4308-aa8d-62e8e8ceb009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5cc200-8230-4a5c-a81f-18f1a06d31d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c65b41-b064-4a70-857c-d8c9d4788f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d8a4e0-9663-4a7e-9139-3872047cf452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0311ded7-b015-44ff-a044-7f75af8c7225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7960370-d177-4461-a5c7-1b2841e86c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66384b46-e508-486d-91bc-49b5d0f6d4de",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d45736d-8790-404a-a1d0-6c590d4157ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b48ac7f-532c-44ed-ab4e-0788a28a3a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfbdaae-444b-4fa2-b9ef-b0542f774cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae3b53e-fbce-47f0-a5c3-0f08811ad194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6cb724-adc4-45ad-92bf-f2785784eb51",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236759cd-81cd-4042-b64b-e2b6f531410a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5ed74f-7845-4715-a94e-09c4d955997d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a659e7-7794-4c4d-a2c8-53d9b34e3190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3800189-4e46-4038-8fc8-cc33423dde04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fedaac-783a-493e-a8b0-1490de601b38",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a969cd6-5501-48f5-871f-4e74d5dbe86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff52be6-5043-47dd-90f8-e3f6cd6da4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06657b5a-55ea-4bc8-a90f-2be36433c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89a9ab2f-1bb8-4778-8c2b-c1ecb16bcfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9c04c6-7c59-45fd-ae04-c2f7ea893f37",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3897c070-fde5-4d20-a18d-61e1f698c838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93eeccaa-a8a6-44f4-8c11-4fedf0f346b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfc9d45-db08-47d0-8167-b020600062b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e2f663-e0ea-43fd-bd95-5fbc0f4456b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a16b96-b7c0-451d-87a2-c5b3007eddee",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d58217e-47e5-4a52-8cf5-0acdf484bc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0231ca-59c9-4a60-8a9a-6e4b5d3d1290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0a6c20-52ef-4c13-9289-cd78d0c08f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e7c10da-df5d-4aa2-91b8-6efb7977fe37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b607b749-3562-45c0-809e-2d11202b2d83",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a172215-8aa5-4944-a6e3-98bfa5e92d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bde024-367a-431d-8ca0-895c295c42ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd44cd4a-0c84-4572-9d56-4d3b79418860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b81ff2b6-7668-46b9-b0e6-fc9ef780e535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af9efad-b115-4a2f-859e-120375d29be8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea107e9d-7328-4958-aaa3-fcb2f705809e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d475e19a-67d5-462b-ace6-586fc3812d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55fcab0-ed0a-456f-aa82-0c1283922ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "89888f5c-0cb0-4564-8445-e20442cea388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0423fb36-f1b7-44fb-badb-561684d645c1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655fb418-b0d3-4be5-93c0-6224c0224b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f4f7e8-47cf-486d-8391-f3304b953455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82570417-5946-4d99-a658-d17dfa802a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "968f3e2e-be37-4dbf-8817-dcea3ab0c676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668b1de5-2f91-4353-a18b-3394b3445e67",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ec0c8e-2814-422c-8d1b-afb3a236fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d325ee54-7b83-4848-afad-c8dea1465976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16dd88c5-bb82-435b-92c2-184074f3e81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "120cb031-61b1-4ee4-8cbc-bf4d7840cc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319ef160-b062-4d5e-abda-508842adb1e1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c406e8-ddb4-428c-8ed7-7a6a839c8ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b6d44a-e8fd-4b79-9fb8-513610d3eedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba849f-2204-41ae-8e24-123e3f3da7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cec5925-e2ce-4ffe-8e18-6534ed1e1e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8f863f-9843-4820-8eb5-302bbd4a2cc0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1c7af1-b458-4aee-b0cc-0e839a402cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93062d25-411a-4a6f-a26d-84c708a4ef35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051ccd67-bee9-420e-bc1a-f461fe62efc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39fdb6a2-add8-466d-b99c-3fde3b6471be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26715d8-ed68-4b4f-8fb2-aac9a05dcd66",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad109e85-a82b-481d-babc-f1f2cbe24ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06ceb05-93e1-4ab7-b6f6-5e13db28fe73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb438e3-f7bb-4546-af4f-2ea50968b2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2234ca9a-270c-4f75-8ae6-0e76b725a170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb198721-e0cf-49ac-ade7-437f7f708903",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68c8553-46f8-4c23-a836-66d5ed02a40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67659520-8d4e-4dbd-bab4-83655574debe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a91f623-5b1b-4eae-bf40-212026260f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "70b206b5-7181-4582-9de8-b77f83712b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79db9b8a-083f-42dc-bd11-0be3770a7394",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11d96b2-4705-45d5-aa1b-8454192fe494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3151d66-e1d0-43b0-b851-9eefba2967d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e513d2-6cc4-4668-ad4e-b2c1e8737ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "520a2142-b3af-4536-8e43-c6ca33ca2467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293a541f-001a-4672-bd4f-694a0911e181",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9cf34d-415b-4da0-b655-0241b3c8a837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000bf095-15f1-416a-a402-a9b20a8d59e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39f45d7-fc1b-4701-bdf2-89e396a58a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e92443-be9f-4eef-ba7c-cda28f0bbec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb2781d-5e57-4169-b938-beb4c76c65be",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f43885d-a779-485b-a9c7-47cea667b90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e121ff47-aab1-4ef1-851e-bda1f8dfdaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17079d6-f8da-484e-b7c7-6d5238b9f67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08bbe509-d735-40fc-a77c-295c00b45ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ba6da1-cae7-49c2-ae71-993ad58c10d6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468db9b9-f8f3-4bd3-aacc-ca9a01951a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9436ffd-94bb-4e45-aabf-c3e6f3449279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41849e5e-22d0-4677-88e7-c48682c963ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13216af8-117a-4863-915e-3ae8bde7ba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e438c9-aef3-4063-92c4-a8cf8ba23471",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f984a30-304b-4869-95b6-6f12589fb531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddff1565-a0c1-4ac9-aaa0-ddca2490cc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393e0010-f589-4097-90a1-465c165dab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d3ea90-17d6-446a-9d57-5d3132454dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10edb78-7d42-46e5-9028-c8ade00225aa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ab270b-481b-4a96-baab-bb55c0c2489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b66d59a-9872-4d60-b9e3-daaff97964db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafa1813-4af2-474b-a83c-facdca003435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1edcd07d-0b4a-4222-a2f4-8ea97f849ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f97fb38-f7fe-41b1-bbb6-e1cb7252e23b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399e9e9c-6f0e-4853-9d2e-2376919de66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26bbc24-657e-4ee6-988d-11a8e1dd0b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e3afd-15e9-4e17-94b1-f10ba508fa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50ae8808-69b8-4586-a5fb-1b8e27b329ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b82e81-ef2d-4ae5-a83f-c4a31a322bec",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212974c9-4f6d-4bf0-870b-d246c52411f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f916b35-6097-4955-adf5-20526195e025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae38d1e-ca2c-4442-9663-239fe9b6eee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3ebfe7-d938-47cc-9436-b9d862d38458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7658dec4-1287-41d2-a829-a7ad413d7c7b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a04cc4-f707-42de-8877-01b3653854a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a3dcdf-a314-4b2d-acc5-9394f6d82169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3f3d8d-6cde-450e-a071-47b45ae1a981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21c29ee-0e80-410c-a559-58b1eee70e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c408f40-174a-48b7-8bbd-6e268c09da24",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fb0fad-f3c2-40e9-9f7a-4f32f4371af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fd4876-723b-4110-a451-cf4af6de5e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adac18e2-6815-40c0-813b-fceec7a774eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06e5a1ee-4d91-42c2-b40a-1dfd5f4830b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7756864d-510a-44f1-9de7-8350e0ba1e79",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a8016b-7db2-4c22-be7e-07dd9576b0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc63d7e-2fd1-4ba5-94ab-d26f36fe37f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cc205e-a55b-4b4a-982f-d95317d63f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e082a5d-e28e-4df0-b57c-3ae28e9824b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994bd5a2-019f-4456-9737-b27e777ac9e4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032b1d52-81ed-484a-9fd4-463b935b9826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95ad6da-065c-49ff-9ffc-2c94e17228c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31dc331-ec98-4b2e-aa4c-7f4c4090b333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dea3a33c-f30b-460a-a900-1f08ee68a471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6afff3-a126-43fb-8030-d19828320b7a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877eb36d-43ce-4efb-b8e2-040ac1aa9f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ecfb20-000e-45fa-98ed-86c86997ee44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6cc2fd-30ee-4966-8eaf-1af22a72848b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "929b9426-9297-40e3-8658-e841a6415fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1b381f-48f4-4988-82b0-5d2d3d9d4ff4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64af0886-de54-42f3-93a6-8f1cb1224a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb07d7a-1b6d-498b-9ed7-0750b8601e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d435f9dd-e83e-4270-a58f-3374941e5f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc3d419-3835-47ea-baf4-2c8cd1c25c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb7b23c-ad2a-4a77-b194-aabb7e5436f8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff58207-497e-42be-93d9-0fd83294f186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1905a683-7065-4969-90eb-114ef3dcedd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b1a553-176f-4094-863e-d7ad1c0fd20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c044508e-4c64-40a9-9097-4ce90cf96620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02382325-3fa8-46e5-b80b-d874a96652ce",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1c9578-8d78-4f93-a945-3fd2b0711067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7502bf79-895c-4306-ac10-ea2e07538eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec46f144-365f-45b0-a041-99275d02fac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "138d773c-2205-431f-9e3d-2fb4e1651982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cc5433-b116-4714-83d8-87997559df37",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac98f64b-075f-4925-a192-f9f018e59d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "836e4f51-0ca5-4747-ad9b-8053b0e01756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddcab1d-b959-4dcb-98e4-05316bfe5c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe60055b-f716-4269-894d-f90d6bbf38f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56f1a818-fab0-46e0-b4d2-884f11304644",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16823dac-a148-4882-a4d2-59578bc5dd40",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65f42e6-61c2-4a54-8457-64dd61b5b8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41999148-3e2c-4e2a-9093-00102fcb82d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b477bfbe-1a6f-4090-a3fe-707ed75b4eb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54a82704-1d4b-4d17-a703-e7efc68b647a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d981e9a-c5af-48b2-b11a-f96af9d596ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b826db31-b470-467e-a76c-ad6d3665b811"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c570dc4-70c3-4768-b779-f4fe588f12c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a176735-523c-4267-8972-5a59e120fea1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f81e9a4-c56c-44b9-be73-12b539b6d96c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "824ea6d7-2418-4552-b809-dfd9f38a1181"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d34be8d7-6e21-4e00-a9cf-f01ce3083e59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e6f8938-dbd6-4763-8dfd-58aa59d05e3c"
                }
              }
            ]
          },
          {
            "id": "2282d895-3d2d-4d72-b8b0-cac359ea5005",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a8680b8-7055-4e7a-8f69-b71f84d33091",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bd77e5ef-fe90-4b8d-a80c-5f36dbd0615e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30323793-73f0-4422-ba2c-6ed6e09e67f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dbd91ff2-5ba6-492e-a128-ed74425cc939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0ac074-c03d-45ac-a427-bcb2b3914d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f916bf8-d7dd-4932-8453-0e94d5e592fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca2d37db-3634-4cee-b7f2-c6c1105086e8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "982f3a43-6b52-42a4-afaf-37d4e68dc214",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dadce6e8-1919-424e-8011-b132becf8d33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "580e1e9b-e8a9-4529-9b96-b3855312fadb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0d4d0f6-a40e-42be-ba88-218ab2dbed27"
                    }
                  }
                ]
              },
              {
                "id": "fc915427-47b0-4697-ad8b-03e441e87577",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e9eb476-73d9-4c6e-ae44-670de521401f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3df253ad-93ee-4888-aeee-675b827072ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "857d8821-3832-4b8f-bb2f-ae2be72ae960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea8edfdb-706b-4448-b5ee-3a4c6a9791f8"
                    }
                  }
                ]
              },
              {
                "id": "b0900bf9-6fad-4167-a943-9d7d4ea09f7e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f429bf0-ccb5-4f86-91b2-2428f293a702",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3238c3e-3bda-4439-baba-7d384c9dd824"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "888286e7-83c1-453e-b03a-5a2e2e9b4780",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a5ae4f66-66c1-4c81-88fc-c81e028a7156"
                    }
                  }
                ]
              },
              {
                "id": "3aa4ba92-3381-42cd-b425-4686a705a7c5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b55aa131-af73-4501-9f78-4c94985f487c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab99c4a4-970d-4fc6-a91e-d49ecab4adc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e7a61fc-f28c-4b9d-98e6-80d3c7fd66f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "922aa513-f8ce-44fd-a580-578e88d9cfeb"
                    }
                  }
                ]
              },
              {
                "id": "ca21769f-3275-4fbe-b84b-ad4ee384eb33",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "023ddb8e-5689-421c-950d-2964e4360eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24679c94-0f38-4af0-9fda-e7ebe35391f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57adefcd-0fd8-4e2e-b76e-dbbf5d49ad2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "460a12d2-e210-47e9-8cc2-8be1941f1415"
                    }
                  }
                ]
              },
              {
                "id": "99313324-44ca-463b-9ca0-3e32c7f187a9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00a1b03a-2ef1-464a-a480-5f697b22e1f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23e06c24-6219-4180-8e8b-7004c2838feb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d04e8fe3-26b1-4e95-98aa-1e0af05fccbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e159d9f0-4096-404f-8f6f-d8702aae0246"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9fbc6491-b1a7-417e-b74b-c1a051799f26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e92330fc-7e9e-4397-998b-f862db323d79"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2004d0ad-4dd6-47bc-bd6e-6b045050c088",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "888c59ae-b172-4a17-8175-c3faade4eca4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbc5dc4d-0989-40bb-8c00-7e1763f857cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "eb8c8ec9-d6e8-426d-a55d-cfb92d0da05f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3450adf0-e8f7-45f4-b1c7-bdc8e026d729",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b43a93df-71d7-427f-942c-b48fa12df9ac"
            }
          }
        ]
      },
      {
        "id": "6e271862-a7f7-4e9d-9e96-98561204bade",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f89a3951-3b86-445a-a87b-eeb258f3e049",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61a14ffd-7a93-4658-bb65-7be29594254f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f6c8f7a-1544-45ea-9b1a-2647f66c4769",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ae825f-ebc3-47cf-aae2-567cd60d308e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ae75cc-5446-4479-bfab-9cf9456245bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe9aedb-421e-4767-9e7d-e3a031010aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "16d0f159-a8e8-40e7-8a44-0c106f26cdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a23f61-1fa4-4d67-9339-dbd6dbd0059c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9d1159-01d8-4e15-adc7-2d2cd7b1e5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451c6d6f-f2e5-483f-be73-87d3df3e99d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4406109e-776c-4a1e-aca3-2a7c038d33ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8fec90-e1f4-4770-b73a-42b596ecfa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c72e43-9025-44c1-886a-1f06809783ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba83036d-580a-4413-92f1-84a48fa1958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c6a024-8d53-40eb-94df-8a6cce8a7ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32b0a23-0e21-4082-bcbc-44c0c3e1e6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4d69e9-e275-427c-8380-53eafa73a48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b329ac4c-6ed8-4e1d-a6b0-9e6decab1f7c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c40991-74d6-420c-b1bd-50cb68e21527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fbc859-76d4-4bf3-b45b-3b28acac2e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc41fb1-0589-4447-bfda-d2050777bebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c61664e7-c306-4c9d-9d49-777fa7641981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26048b1c-d48c-41d8-8b9e-906dddac0b19",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0121724-f9c5-4dfe-aae9-8afb01681784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d5e7f9-a65d-4c9d-b2ef-af816c6fe947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced436ff-14ba-411e-8008-5f39f56cc968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94baf62a-9de3-4153-a319-02549b175f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ea8e29-3c8b-4047-b98c-d67b2e322ac9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47b2689-69c9-4847-bbc0-f5aa5fbf2662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456935dd-aa82-4c91-8ead-d4c43bc40d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7176702d-b5ad-4508-98f9-83a3043bd348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0aaab1-dbef-4682-a98d-d5021604927a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac460ce2-353e-440a-afd2-4593066680be",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f331aa-a5b2-46cd-9d46-5527788d4073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2d117e-e53b-4202-8baf-51fc7743a73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a390371-ffb6-48ad-99a2-da7e6e98ec6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0372ee38-508b-4f11-84d1-f4d272c396b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f413766-66d5-4e95-8584-eb02e69743a7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22797c48-e358-4785-97d7-77aa0e6c66ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e62b5b-963b-4ce2-b2bf-f6c815cdc32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed93bd-6405-4858-846c-3eda3df8b54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05d22652-16b4-4310-9103-4adeb6143cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a1b6c1-5a6b-4f92-9746-6ed9707b9a39",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9c36ca-ba0b-4766-b3aa-ae12d5a9ad51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60310a23-9c1a-4d3e-a949-cda38a3e273f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa470869-dcd4-4e11-b871-c27d8f1c7e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a12594e-3c99-4be7-8ee7-1ca6b9239bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a449b891-f8f0-4b9c-a6d9-cbcb78cbbd8a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be98a2c-61c7-4251-9ad8-af302e828728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0ac556-2563-468b-94ae-3f2883877f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd35e70-2e08-4861-a81e-02565c8db94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b6b4a8-3c09-4c64-8679-2835597a0226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3289fb94-d672-491d-950e-e9cdcfb32d49",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba482470-8e78-4ac3-9261-bbc5417eb451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748146d1-f16e-4c9f-b517-7ef8ed906e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a2cad8-efad-4a5e-a8ed-c640ed6a5d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6c433f-b176-4ac4-b45f-65ec98115e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232a5b72-0df1-497b-bb0b-390605704de6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6063f5d1-6151-493d-997d-28126f007a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356e4611-af69-47a2-84b0-a6ee26ec9559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34259f5a-aa5a-4821-ba14-60f2bd70c384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f256eeb-9c74-44bf-84f7-5025d39a3bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0a3bad-ca6b-438e-b269-1ccef075caa2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737b6af5-e273-40fa-b5f1-85b6f935b1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66578522-0502-4bda-a589-2645376ddfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32245b3-985f-447b-a32c-1bd8ecf5bdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb17e2d8-3d10-4e97-b23a-aec0c3222cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4bd9a4-6ba2-47ca-8810-012022cad494",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6c6581-a7e1-43b1-a694-c35d1b82c165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a38ca5d-c350-4cb1-ba5e-7222854724e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73189bee-21e5-4e33-a97e-c6e4306ba274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "042c43e5-bb1d-4459-839c-60521a006aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c68a683-d2a1-482b-ab25-6b7a4eb8a06c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d6315-6ee2-4f6b-b7a6-ac0e1f94202f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579ffade-8185-4c0e-89c3-20406ea7582c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dacddf-9d1e-409b-9050-60001e699784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "354345ad-9ff0-4dd4-9266-93ba26b868b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78626bd6-c89d-466a-9b99-c578360cd28c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cc92fe-39ab-4894-95b4-ec25ecec828f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adf9b06-aecd-4baa-871b-9afd83020a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdccf76-319a-411f-bab4-bcedb186bb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b95e8a1f-a2f5-4804-85c6-8c64ace31496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83ebaaa-0704-44dd-9c66-0afcf8e3e940",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b39f5f-5295-4ef2-af47-86acf60b74b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3fe157-e953-448a-b728-9bed148dbd7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661d8a82-ffdb-4614-9485-85b6d84e7077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "62e4809a-9f78-4b03-8308-d817dafba964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee42e7b-961b-4640-8552-6149aa979d60",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1d87d9-d3ba-4a21-8554-185f56db9439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2da16e-f8a7-4bf0-87f9-102d5392de27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac28ac0-fa96-4d9e-ad7c-2010741899a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd68dfa-83c8-42a9-a5a8-6b517aa0c71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c239066d-c61e-449c-b3af-2e09f170be58",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918d366f-db0e-4423-b9a5-ded17bed0919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a47332-9afb-4060-b8d9-c8eb92e4b535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2e739c-cc77-4220-a79f-da96c6411a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "491c9b86-f290-4156-89e5-4fb4037b1b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dd79d5-e5ea-40e7-9ec0-d520dc1860bb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e0ff58-47b8-431a-b0f4-35e688361668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdcb05b-a0e5-4776-be5c-49613aa3e2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182ee9e9-dea5-4700-9214-caaf7efaa70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "962cc771-4bde-4160-b9de-9ac375a6fe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c03467-bee1-4ddf-a3ba-e6e9a9a661ab",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffcb0a1-5088-4c8a-8fef-4813ea2c62d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48302f1b-deb0-4a7e-bdac-408f3ea9110c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6968c30e-5f22-4245-9b3d-b8dc2a4d339b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd4d675-e4f9-464d-9a01-177eeee06365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f73a251-2a08-4418-bbbc-fe4ec63f5f39",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ffa840-7b93-4fd5-ba4e-f9626b805c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af00487-9794-4006-8de1-1887d5777de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a129c9-c923-410b-9fed-d322960ff9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70c6e0f3-7326-41ea-ac2d-fd0cea2b4fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b8a628-e289-4513-8e4c-4f90bbe50126",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4851967e-87eb-4e87-bd68-eb3bdd5263b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d57af5a-2f1f-4c9e-9f97-8248d8bd0d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83238c9f-4bc4-472a-aec2-c9ed98092649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13ea9b79-4f05-4cfa-994d-53b0d9a8b3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64181e02-3ddc-4638-bed5-48c2cab9beec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefb5e99-c755-45e4-99b0-e156ff433c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabe1e0f-3425-4ca9-a825-02391ab86637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dff251c-859b-4580-b29e-217d756cd95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f318990-e45a-48ce-9c4f-f05b1c1fa2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91bb64b-0c23-4e29-ace3-fb4af4520fcf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f34c0fa-8f3a-4d96-9fad-dbc37d2fd763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16256420-0725-49fb-b46e-a2eb1fd0cc0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1129d46-e634-4843-8977-11ca284ddfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5751d6b2-9489-4772-a00c-0f420acf9607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee88383-b226-42c7-8454-875f4a38b218",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bdac4b-70ff-4e71-b045-e73a1ad41031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd54ec0-9205-4eed-a670-49d5209f9466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984d8811-c42f-41b8-b47e-ead3d848189f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8a4e3d-c8e6-447c-abf5-7bf58047734a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ef5226-4c86-46ad-918b-77705389d049",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9d8592-1d70-4012-b6f3-8ad60c371e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67689e38-994f-43e9-87c0-96066ae45588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0888167a-ab6f-4d9a-bd2b-9803b743c154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd500cb3-0f2f-4aef-969f-5a1120e7f8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386e25fb-7786-4798-84d2-e77cdac90bcf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f951b65-8eaa-4c75-ab36-1046abaf521a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb2662a-7f5d-4be4-8ac5-98e6eb400076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d5f5a6-22e2-42e3-9062-f5e3b0290824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e80b5cda-35c3-40a7-ae00-127049300e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdd2c1a-e7e0-47a1-92d5-0f453d3264c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d658813e-a6ae-498f-be6e-7344067288e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bda5a4-1fe3-4bec-b4ae-6b25b049df43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb3cd12-b802-41dc-a9d3-71a8b265263a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44c1f812-5461-45fc-b7f7-2d04e2a5fa5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62695d0c-870f-4bed-8981-8387b605ad14",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a89bd32-ea72-4246-9af7-1971e1f4f984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8955268e-ab7a-41bc-98f7-1fb31f778042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37baa473-31ff-4ef6-bca5-c8dcba07afde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db9aea3b-52e3-4d64-9574-161ec683cdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926043f9-4261-41ac-ad83-7ec7c089dec9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cbfdb6-9495-4b05-a05b-22840b06e09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17884e94-9d84-4a27-867d-ca32d7ece9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a050e1-7e97-437c-bc19-2f22f1820a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "800f3814-97db-4683-a01b-b671d967c4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e86804-3a21-4ab1-8645-be36619395e8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddcd86c-6626-425b-8fe1-6f9ed8a27c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79278f04-75cc-45dc-b493-75fefb3447d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3124cfa0-8611-4731-a41a-b6a0c5ff2bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45395cd-74a0-485b-988c-8f8fa55483ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "210f5b9d-a69a-416b-abcc-f2d1fc600db3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4f83abb-4ad0-4cfe-8005-dd030d305cde",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840b19c0-fddd-42b9-b463-f36645fa96b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0bb09d-10f9-4e65-ab67-966deb46ff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9da88d-ce2b-415c-83c9-2c2c149bddcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec2d073a-96b5-4557-8352-568229fd6adc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f92cef72-e836-458b-99a5-51db4970847d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4795a271-99e4-48ef-b141-b0653672ae08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9565d807-e228-4e6f-8e6b-026f6e6b361e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2584383-b326-4648-ad92-7a947c1c80d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "549770b1-ccc7-4d2e-9c71-13c25dfa392e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec17ed4d-b777-42a1-87da-c8be76a65988"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2cc9cb64-4c59-41bd-8252-e6c68b8cfd0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6a30fbe-ada7-4135-95bd-d4bbdc596765"
            }
          }
        ]
      },
      {
        "id": "0408d622-22f3-4226-8aa4-7ffb6ed3267c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a9364158-2ce2-435d-9245-8962047ab04a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45b5fa7f-1567-4c35-bcff-6020a6a96b8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d0a0c12-8d97-4c87-acaa-059993a8ed1a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9eed6d-a181-4210-85ca-52f40cd242d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a302c1ae-ddeb-4493-90eb-04fa36c27e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1001bd8-c2f9-4237-8c2d-0cb47b32dab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6660d6-082b-45ca-9091-b67121e4b386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b275fc-8adb-4596-b145-6a8006787bdc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21543598-5d4c-4486-bc33-794f493271f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f988a17-97d6-47dc-9a4e-be9fdac7a513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b48a65-c4f9-42df-935b-240a3f10faa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d1591d-fe85-4f87-bfcb-d275a03b9028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2bc7c2-746e-464b-a627-fe28128f14b5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b2475-2250-427f-847b-f8b97e2e36a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02196c84-b208-4ec2-9a3f-c6316bd9a033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d16a7b-fd62-4211-a161-83452322b906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5a03f9-8baf-49a6-863a-c7ba6150ac7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190f05dc-7f3e-49cc-adca-53fc7ca99a4a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c453739-72f6-4054-8473-ce52efa34c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6e6e38-9d90-4788-af80-c7deb1283f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e9d3b4-12ef-455c-8eab-bf317503db9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "498565e7-e9b8-488c-9175-f9f6af96cfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54395f4-18a9-468e-b805-97c95058caed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46540220-48b4-4d2c-a9c5-c9c9db5dad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46229f56-a59e-4070-8b3d-f0a24e8284cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c2f0e4-a12c-4149-9854-5f175ae7d954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad992e5-fe24-47c1-938a-bc16bea0cb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3af568-efa8-46e3-b5cf-3e281f108c37",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa5ceac-8383-40d0-aba2-4242053a5d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77162055-a8f6-46a0-93fc-d442b3eea27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d8afd2-82d6-4e50-a880-23ec505eb9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da8f66f3-2c01-4da1-ad21-5cf329c051e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ff819a-c531-40d5-be47-8a13ecd8caa8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f10c751-8bb3-4803-ac02-2dfaefd2281b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3a1372-17ad-4bca-98a5-fc121dd70d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f41780-2562-44bf-ae89-66d35827fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae2d497-cb0d-428e-bec7-55ecd0d2ef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672c887d-8383-464b-af8c-d0be05a3c206",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620899f0-eaa9-4da1-a696-254984ccfee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae9a404-e520-42ad-a174-889ca88de504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b01c19-1575-4800-ae77-e2ad2702c316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "366e6f9e-5a5d-4d3f-8f59-182e20146f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588f8e35-8073-45e9-abbc-261a765033e1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03fa2eb-86f1-4123-8f14-8bb595630fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3024d1-8e89-4850-9f56-7276da113016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b2945c-3a48-4de6-8f88-f9073de0a681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ecd2e3-f3ec-4b26-9e3f-62472217520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ab1a47-0775-4dd1-91ab-151778598402",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfdc56c-2a3e-47b8-91dd-a0bcce75c561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b52022a-9aa0-4242-9905-215a60ce6984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a93a88-605c-4324-9a21-f07491adbd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3330364b-fe9c-4ee5-9c49-7e2720cb2d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff04b1b-6384-4a75-8aa9-a0ea4b5e9134",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081d9e72-287d-426b-8462-b8b72c9b270c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a266a1a-2ea1-4f83-9813-17572333b3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f138b2-652c-4808-8729-f2bda833425a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "30e6d90b-26c5-4c67-a6d6-ce55604bdf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8c0b6e-7fe4-4e75-aac3-975803e43f09",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d44a31-acc7-455f-8c5d-20e4a9726efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7021a287-0471-47ce-a71a-382af78a27dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb3b38-da91-4094-9259-8902a65a3a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a598158d-1876-415a-a40c-b39df49f5bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae7e529-062a-4abe-bdfd-e2f8bf42e1a1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961ab9d2-3a06-44d6-8752-4c0482e3404e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0141d701-da22-4425-81ed-1a59cd409f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed11280-7295-4ce2-bd7d-8a3937ea8433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa997d9-d6f1-49af-a364-a614b2232cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d4ba3d-185d-4471-be31-6392e66c2e40",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19efb350-6651-48c3-9e07-10f2842b5324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460f505f-b519-4283-95b0-6111c1006202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26097b9-3a33-4fa6-b2bc-973002b3be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6980026-3cd0-472c-a0e5-6aafd6e1587b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af52ec4-ec14-4bb1-bdd8-ea3c09d5fda9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9074ce-46bc-4640-8507-f3a4bf675d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c304da5-e550-4c44-a499-d802744ed06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c8eb59-dfc6-46f3-942e-3fd4266db407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc42ce5-30e4-4751-a8ab-ba7a25a5669f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd99944-95ad-4643-a6a8-c0ee61df9295",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a66dc58-2240-427b-86fb-ec8a650b2761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7b4b4d-5ec8-41da-b8c4-791a513d437a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdd9abb-1fb6-4246-bf07-79558b6ce30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5f19be-0209-42b4-98b6-42fc785bca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be079148-925b-4fb0-b6bc-2a23cacd66c2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b07ac7b-894a-42a0-9720-bfe592249dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36647806-3a96-44c7-a41e-76b2311e0b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9e2db6-4d16-4ecf-8f5d-6b7b0f1c6593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57b3e6dc-9afb-4e3a-b0c8-fd581db3407f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b6773c-6a08-40cf-92e8-70778bee2831",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec4ee34-1d94-4c83-94f6-d9cadd46c739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c3dd66-5727-4b13-bd23-32b0afdd8323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5188bf5c-5bda-4765-bdf8-8f77ef18e4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f95d9c6-80c2-4e87-9f38-3015e0b8a57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd7fe5a-c81f-4ef3-a7bc-ea2bbe32215b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6933b3b-b80f-41b2-a3e8-f4e406aec958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed617c66-d362-4475-bce3-8ce9d8295d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a99b5e0-e1e8-43a3-b2fe-bf4f23406f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbffcb7-db92-485a-90c9-333507c2bc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b423ea4b-bbc6-4946-a815-715afa5a1555",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42901500-a05c-4d4a-bb32-f460cb835d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08cf90d-b6fa-44ee-9726-86b1150ad1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1cb183-6137-431a-b180-c2920fa1283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "383d9eea-4690-4606-a4ac-bf3d12b024f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b416900c-7e1b-495a-a28a-0db678ad8476",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d46dfa-0ed4-49e5-b308-dfab65e0084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50933e5b-f529-4f87-92c7-b9a489692999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422f5972-5298-4a90-af66-62e658799bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac607c9-e3b3-491a-8473-81c1c969d331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd978624-ac3b-4a2f-a2a3-6a76092e40ed",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b9c595-7616-4f82-a33d-c292e4a66377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28256b74-b5ef-43fa-b6aa-a8feee5b7ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db733823-26ba-4195-b1c7-7f196f89ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a663ab4-318d-4449-8dd9-06eab9e822f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e053dbf-eba5-406c-af53-83a6fd513517",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72d680f-4e95-425f-8a8c-edc6e462d0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e7a3ab-5ccd-4f45-9303-c41bbfa2e585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067f8577-5757-4a74-93a9-1281cdac7bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7351218-400a-47c7-8d59-0975756e8e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ac6347-4802-4227-92ce-e7fa6f49cb18",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa7484d-bd65-4bdd-8916-7c8615ae1cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1efd82-ea99-472b-bb88-242b1f8594c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926d5b8f-1ce9-4d2c-aaea-21d8d6ba18a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "373e14be-ebc0-4ecb-9239-f7b79fd5b595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068361f-0865-4cc8-8bb8-fc0c2d1f9058",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f174cc2a-d40e-4054-8964-c2a50d8009dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805632ab-faf8-4894-81f0-c2d2dec2b07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a516d98d-ef37-4763-95c3-51efbfbe37ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05c7fbe-c7cf-418c-bdc0-00c7a5d5fdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b81537a-cc22-4c1d-9d49-a382ab80f245",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f209c3fb-1c36-4798-8ade-5db3d1a9667c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636bd696-b969-4741-bf24-61cf71f1af62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeebba3-3faa-41bd-b9f9-9dbdd9f0df18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5c05c6-1d03-4b1e-9181-9e0fac6a1514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d6b11d-a73b-4357-bd42-662242c9febc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8fcde7-eb75-4d3a-9d04-3ebf6b6e2f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2c79c8-96d3-48cc-9a87-163037efff0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a22df3-8652-46c6-bd29-e348bf725d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39c0b71-5a22-4a76-98cb-bb7929fb224d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc71165-c9c1-4a82-8580-9cf82171b7a2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c649909c-da0b-4b88-81d0-6c1cb8dedfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6729ef11-5f18-4fde-aab4-4488da93acfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592a7ca1-f190-4377-b3b6-efe8b6090241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88236c6e-cd3e-4d42-a341-aeb9f93c848b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecd1958-4943-441e-b522-92063fe75719",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c80d7c-ba73-4464-8749-02863eac4af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a59fd9f-8a82-4d2a-8023-d684d33a2a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc737586-f9b6-44e0-9447-3cb1407c781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c7162d-a065-4bac-9aa9-a88ebceed23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15adbfa-fc78-4c65-9e46-cc32235ef3e7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc984a1-0209-4d88-863f-ca29b0e33b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc446176-30c5-489c-a439-c3f469c478bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e48cc3-c180-4eff-b717-dec88f425a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be12b2d2-3584-426c-af19-1f906408e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54af711c-244d-4d4c-8f75-ad9a57674cbd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9517ba0f-27d2-4dff-8140-b7f5420acbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14013ee-5d51-46a0-b9fb-24e1785c0ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0fca4b-f097-4199-b45c-346b0278163d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e7f9a0-99ab-477e-9752-fd15ccbdac6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf3f1e1-5c74-4a3b-871e-8f3ae7fb0c60",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318a5cbf-27ce-4264-abc2-f7afcd4e450d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d89fa4d-ee2a-41d8-a74e-a96a3f4759d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306f3ad2-57e2-481c-810d-09ffc667c902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f85fe7bf-7163-4201-ac0f-dc649ef012b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf0dd5a-5aff-462c-84c7-60fd8788e227",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf83e42-4526-49c6-9de2-261fc36ead8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc2f465-279e-40b7-b96b-ebf24e2399db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b8513e-1fb3-41c4-ab90-248d5c63eb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "928d46cb-d2ad-40e3-9d53-a3440feaac84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8cffc7-96e6-4776-9ca0-764bb9b4eb6f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0aa566-bac0-41e5-b52f-c4cc39b28e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d3fda6-3ad7-4d0c-a528-a7363a72f83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88bd45e-30e8-4519-8084-7025479840de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba73bbd3-af37-401e-b271-3c2628c00ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4c8c0c-7f9f-49ea-956a-dce42a5ae3b6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6baa8c57-f9f7-4c30-9dd2-ac73a92221ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916a0e8e-38cb-4b72-8011-a387c6fdbbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b309fb16-f531-44e5-ab7a-3360f27c8b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8118cb-1559-4c6f-be55-f46315c478c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dce944-1fe9-4926-b2e4-4b7ef642ff07",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bc2ae8-c40e-4e9b-b314-cc48a72c374a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53bcb84-72ea-4011-af0d-da32eb7c490e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f493aab-be3f-49f2-88d3-affc6d875e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ea4a21-9a71-4be7-81f6-99fe87adbf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dcb207-d294-415d-b72f-c124b330a104",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc32250-a782-4ff9-afb4-38a368c5c004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fecae84e-f5fe-4a5a-becd-75d6b87b4ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134f81eb-3aca-467d-be9b-8ee9c26a24c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269fb55b-8129-471f-b450-404d760386d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b4540a8-b7b5-4eac-9e6f-143b1138c8b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "380febd4-0a25-4198-af8a-2d38499db5ad",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecdcf08-792e-4310-bc7b-fd9ff2bb5256",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "95a21685-bcb7-44d4-9f96-a924a585952f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e4ff51-b7bf-418c-b77d-43bfd42ad551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "199fdc5f-2cef-4b42-884c-831c5b383efb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25a3e52c-77e1-49d4-b54c-231c6d78dc41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88787eb7-f730-4962-bed9-4514189e0771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a14f71b-decd-4d2e-834e-6bbd471ab815",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6bdcceb-db2c-4e97-99b0-c8178245da78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f328b653-34b8-46f3-90b3-75e73f0227d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "417440ca-9c8b-4a19-80cf-116518243e76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b8756cf-bfc7-4a83-9680-d19cc35d86fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32ee6294-0a54-4e22-87f3-ae703a72deba"
            }
          }
        ]
      },
      {
        "id": "5d4f95e2-1f75-45cf-a163-f080649ff7bd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b60987f2-bfa2-4025-bb35-2aa70127bc2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "125ecd48-e1b4-4d05-983a-af15ef283336",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d5291f73-8a0d-478e-a3f5-9636c18eb906",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3871566-65a9-45a8-b984-156b35c5bd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1e1f32-5905-4f3c-aeb2-9a1dfe580929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881db2be-38eb-4a53-a594-ddec4c33e724",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c964c0-7fb1-41b1-b7d0-6571ec7bb9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d850681f-e98c-4005-b6ad-03b6164e19f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2876e720-030b-47a8-a0c9-2c673b0db91d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3770970-4a09-4f44-b55f-5720cbdad02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e35d5ca-fd83-42f1-9f3c-1e027ee68b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79e6bb5-ed45-4493-9852-463c86d7a3f8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e3318a-e40f-4312-b5a6-f94912b2581c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c73992b-757a-4ee9-9c1b-bea6583876c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b759af7f-c682-48dd-a919-4dd40318423f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bd08fc-0c47-4d6c-b729-0d421ac8e8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615f5656-bb9a-46a6-bd1f-f72973850e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c8076b-1c0c-46cc-8105-2ecdc235ba76",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b601087-e55e-46d0-b545-f916516dbc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6c3cf8-7de3-452d-a853-16acb2510f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f8d221-2533-4944-a5af-012325ef3580",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e581bd2a-f881-43d3-9e28-1fa56a7e13c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a4c964-cf98-40a9-a83b-f7f1e1855238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bad5ffb-135e-4f16-b175-4426d709b7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bfefc7-92d8-46af-9a82-d4a3e2999476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61083370-cfe4-43f9-bdfa-520b0904ac2c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b464e040-ed01-4049-ae34-438aeca29eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd1e266-507f-4eff-9b5e-13222bd7512e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8281d846-c5f2-4ffe-8486-d303d1935442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0121b65-c733-4ff4-a182-7fe98d3711bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21722f13-37fd-441f-b876-33ee9054e9c5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa591850-d681-435a-897d-e23c9e79805c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6daf870a-0c67-47da-a985-60bfa18c6e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ebdf2f-163d-43b2-88ed-9f028f00f7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43b065e-aa69-46bc-b22e-ee0a9d7a08e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50c6366-76b4-48cd-9313-d7d1c156e33a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a6260-cf4e-4e36-82bb-f7cfe6c624dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bc5ab2e-059b-473b-9d33-a4d703a3691a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b96b2c-f17b-4145-96b8-48ac180aa682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabde8a1-d92d-4a4a-8398-230b6bd11cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799012af-2810-43db-b690-3f55aff9e919",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b98478-2d71-4f76-b0f3-c5b5f39aecbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82249370-e840-49f3-9bd2-768e12649157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdfb032-54d4-497f-92ad-04acc2570978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6050430b-bf79-4a8a-bf34-a9d4c10e064a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044a4bd2-07cf-473d-8235-9bf0f1f782e2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7f8648-4e8d-47cc-ac7f-781f8c130ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1933ccc3-3f61-4751-98c1-217517cc3f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14efe39e-5079-4468-a7b8-416995bc8607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33b8ff5-4323-4631-b85c-9c75fccbc589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d785bd65-389c-4b37-94a0-3c59f46d7abe",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2207f1d6-746a-4222-9605-8c621d347f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942db187-6d29-40cf-a3a2-1ed4bcabbd32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d996e8-59e8-4f0f-bde9-27f86bc41688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c35bc5-e591-4733-a114-1be42b5998f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba538e5-c3c5-4c26-9eac-f79211aeb0b1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5680571a-b1a1-4ded-a2d2-821ba7f81770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9bc3712-9331-4f82-b0b9-2f62431174e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0829259f-5ab5-4f2d-b3f1-497fc152bb53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5399eb3-14a2-400e-91d3-fd92196bc462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ea618b-768e-461a-8b6a-0fcc40ec82f1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ad574c-9654-46b4-83b4-d74fcd96084b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4b627f-279c-4d3a-8804-50f48df8e5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccdd340-5b73-4a8b-a41f-9ca8c944de18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f621c907-f9de-4554-8ce0-44a9c43b49a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634025a3-d792-4d88-b313-e9964d67b01b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186a4e1d-066a-4a59-9857-46e522a1f6f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca064cf5-9e1a-4723-abbe-35f6c40a6c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1061404-0b27-414d-b404-da0f2477d4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6b243c-742e-4ea0-b56d-1e71105da136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8841b4d0-86ab-4f76-bbf6-13cc1fe388fd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d22c393-2dc0-4bcc-b701-f76ffc45dcd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1fb6de-5023-4512-be8a-b93d5a5d53ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc7438d-0c1b-45d1-8420-95323a2dde20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41fe555-8f32-48f1-8b6a-b1cd39dfa8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5020ec26-039e-430a-a0cc-ea9f1c37e302",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9aad14-e7df-4131-82f4-cb45bac3543a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2257d86-f34a-4c16-a298-8018ea974774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e6073a-de98-4c49-b9e6-67ee284e76b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccfd7f8-a9df-4c90-b6e7-1c267a291d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9e80b3-208a-4e65-a262-5293ca51aaf4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43b55ff-86dd-4552-a75e-acb8fa77982a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d155e0-376f-48d5-8303-4ca600ebbd01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c840baf-17f2-4a65-8cdb-484683c29134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ab8a92-73d4-4f9e-ba25-c3f71f751254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80042ac-a3dc-44ea-8843-d34349c89d01",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff97a1e-c35c-41f5-84b3-78a8ffcd39dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335c89e2-298d-49b2-ae38-c02281129fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82b916c-e36b-42ac-839e-8f453fadfa50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a7d995-7c91-43e2-bbd2-b06dc72312e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bbc46e-b926-4ddb-b6fc-94ed91ff7e7f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bbcd60-bc3d-4467-84eb-f42d872ccd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62be3a60-05d7-4725-bd0c-43144b2155e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daed0f72-9731-4534-95e1-0658564424e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04ec10e-d0c5-42dc-8066-60b4f0e0f462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a3a188-b955-4771-b8f8-8fa8ce9de5d5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f504d3cc-e3b5-467c-8cb1-ceb2aac206fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f693ee4b-659c-47d6-9bad-a219e691db81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806ebe8c-31f8-40b8-9aaa-29c3d04ef89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5655169-8308-40c8-a3b8-a9ae0de812cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e9568d-216a-4c08-a059-bba7e595a06d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f822dd-4990-4929-8138-4a150dd06b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e137bbe9-773a-4c5e-9239-b66b092912f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8a580b-e2f5-459a-9954-5f20bb13108d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1083fea7-0e91-4243-956b-91a58f89e527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c450d48-6b79-4a50-8a96-949436282f28",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5177eed3-3580-4cc0-b7d0-35b7cf814c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3228219-30ca-4391-804f-e4b33d0eea4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7463565-9ca7-4f48-afee-eed51dab8e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0410417-d0b2-4932-9437-edd08a153071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad52acd-5442-4ba0-ae2a-c772dabe32cd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b4f1f0-54e6-4c65-a6a8-7bb973be8def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a9761b-8c40-43d7-adad-0fa452414f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361aa41d-7385-4d37-8cbd-0386b1b4ac8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b92d014-7dcb-4377-ac5c-3b9280e02efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dc3471-7684-4856-b5d6-60aeaf5ce790",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219f3023-6152-4dc0-b272-e5e866b0ef70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e050b7-9cac-4eb0-ada4-41589416e2a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30919e00-6a1a-44ce-a164-deb4453564dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16052188-bbbc-4f81-a59a-6534c4ec3327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f08a7ad-f2c4-443f-bb19-a89887d5f600",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e614f249-e1e0-4690-970c-d04dc897c591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401696ec-e056-45e8-80bd-d0126f8494f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3199f56-4cdc-4848-a4f9-ef5cdef6b330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7def7cda-435b-4475-8e72-4bab7de8c804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9953590-9432-492c-82b9-7913028d9830",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02d40a5-af40-48f8-afcb-0cd22c4eafc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad94af7-9f02-42f8-8956-4e812340c353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d05058e-1ae9-4ebe-afe7-a904d476fcca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1977fab4-4aae-4df2-8dd2-9ae01f4ab067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4c95c5-9312-45b5-ab2b-48d82e62af63",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ebba37-dcc8-4bb8-8d9e-cdbf34274b01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a3c118b-f940-4c84-91b0-0ac9869afb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fb9daa-3a08-4124-b80e-b0038d7c29bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc82c30-01c3-457b-a6f2-bec090280444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2a276e-6ece-4561-9f23-f645cefd5b0b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c65905-97c1-46d2-aa97-06e4c35c98e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf68641-6c4c-4517-b795-269f1df9182a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49246777-0338-4eeb-ad75-b10ee362a899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5211d7-1273-47d5-a1ed-06343db8c620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e13d030-6670-4a34-b2f7-8c791397634c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60317a4-5123-4875-bb0e-adbc3155db50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92da43b-c0b9-4147-8d8e-f0a2e510b568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b621b3-c42a-4aad-9351-5022aac90743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144bc64a-bd3c-472d-8f88-160c10c14ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4808ba3c-6dbd-40e2-a7a5-e11b61ccd138",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f59152b-e31e-4a8c-a8f7-42f91a07355a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebafcbb1-cff6-4a8a-b418-10eb1d2cad73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874e50a5-8ba0-4d3e-9e91-15caa18e6416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325f9274-5c79-4f8d-8903-2eb56784cbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a3a1b4-b39f-4755-9c61-4a9277b3e698",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75ea2d5-8ece-47ff-8f64-2de38341e9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8dc775a-b803-4424-933b-a099bad64a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f90bb65-b22b-4914-bf6a-bffb120f9b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d04ce6f-06e2-4e21-8fc7-ae15266cbcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805fb077-a2f6-4df5-8723-1e83f1a0b77f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966edc9f-834c-4451-bc04-f3284644ceba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d55f5526-a47b-4cf0-a8df-4d0bf0f09276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da372be9-8f67-4dc1-b222-4f9f83b9bf6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445cfd27-e9db-4a33-b184-75d375467cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e82b40-f966-4ccc-a340-328bbd01f08a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6b0193-964f-4101-8f06-c5819ee68797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f31a9ea-0350-4738-93ab-816381759cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d9d659-e68d-421b-8b80-d503ec9b5bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec9dcab-cfe5-409e-a8e6-7c0380f695df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1167abe-3293-4a32-957f-c9e81b54ea66",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eccad17-e039-4b7b-af3b-e0e6d2254fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44abd539-79ea-45cf-8b6e-1f81a978b903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c499d29-0a21-4e86-b30c-929485071180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10ef2ef-bab2-4500-a299-cb1cb271d6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2bda0a-a6d0-42af-a535-7b18c44884e4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c81d51-7cd5-4999-9d5a-14698221fe06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1596f4ab-fc31-4680-a22f-1aa0eba336aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b26ac1-7b7a-4ad3-869b-e4df5df5e3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4b303b-fc71-4c7d-ad1f-867862cb2475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c84092-4add-4bed-a455-f50476ccf5c5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31eac2fd-e279-4d9b-974f-c00d57358071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefbf270-2ab6-42f7-8667-cfc02105ce93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b366d7f4-8736-4dd8-b2a1-953f1204a0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ca159b-412d-4ed9-820a-d6454203a13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b17e663-35c4-4c1e-b479-e18ad866fde4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4396c531-669f-4fb7-90cf-64461291a80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509a49d4-5aec-4ad1-bb47-8f54e587a456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae37784c-24a9-420a-8fca-a750eaf8d903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbfe44f-463e-4d63-8e4d-6a613173afeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1eb401-5a9a-4d45-b4e2-23c1b1b11a3c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830f715f-3615-48af-9bdb-e01ba6ae4a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982d7df1-4963-4072-854d-ee1be23b1c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd398c-b09e-450f-b426-ed08bed72124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b65ad3-e18f-4a66-b37f-1446fbbd45ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e77d66-c7d7-41f5-bff9-d0c62620d5cb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ac1dd9-69d8-47a0-8759-f4341b08a600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc5c233-5dd6-4e9e-bc4f-4e9d178ebb92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7eac270-0967-451f-a077-02229f0d093b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40656293-6054-489c-ba8c-fde29290ada6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bed55a-aa1f-4ef8-a069-fd16c8313958",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ec1850-d1fd-4cb7-ab36-8a7f4e930a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3d831b-5fd6-41c3-b69b-0f8291b80104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ec7cda-8b51-4ede-ae82-391f7e820036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a379c6e-b218-414a-964d-35cb43b34613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bd8bca-9b61-4488-8e80-1565969615eb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce408f8-9ea8-4d98-8161-eaf55fa7a675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9794ff-c287-4713-b7ef-519260129fd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2c61c2-934e-4320-b174-ba92a244b629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66c31c3-2557-4efe-9481-a13dd25ac9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644f02fd-86f9-4c99-a556-9a2773bbec46",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cd887d-fba5-4b5f-8292-857087719162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89541015-f689-4e2b-916c-b8e4b56ee50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bc5772-a525-4b2e-bf3c-dc955bafecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee628e96-29c3-47d3-9921-0856b58de55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec276c15-adad-410a-ab0d-aa75fd62a3b6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c10da4-3c57-4c18-8a89-6679c058ef1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcc7a7d-8e67-483a-94dd-bba84e92dc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fe661b-6878-4d69-8033-68dfe44b420a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84924f75-d8ad-46d0-9cdf-3b10b1e23763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5eeb50-6ac5-409c-bb5a-fea0b08ce74e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4cfe7d-ec53-40b7-bfdc-85f519ba1d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c87a4e-005c-4a41-a626-005336b502fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614df62a-abe7-48bb-ba3c-08a04c3e71eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4fe94f-beb0-4c67-9d30-3ba4dbf77745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292a2587-c058-4493-952f-2a066decc610",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b26fe1-2b9c-4608-a7c6-d219fcea862a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d99a9a8-5425-48c9-81c0-c0b9df812e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e96609-172d-4f8a-9695-9e56a2fb7070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b7dcd-5630-46bf-833e-741583d90e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef75fcb-1030-4487-9b22-d605c12d84f0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca7cd91-2058-4ea8-9ad6-39fc71c535cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec0c4fd-be00-41bc-ba8b-797962e697a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d7064e-0cb0-4749-9d26-72aed64d53df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1c21c8-8f53-4c58-b4d1-d067eba985da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee13e6ac-633a-4fc0-87b3-1325307a1cd4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db52df8-c4b2-4c49-ad03-22de34f53424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10cc7746-bc44-4de3-8b7c-5dffecacc810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b434ae4f-9757-45a3-aeba-6e1742453585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7970b21-d5fc-4e0b-b8ab-0a25a81e8f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaf4734-94b8-47a2-887e-810d08da0f7c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198d2754-7742-4400-8c9d-91e3548c5016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82394ce8-4add-4233-abec-eb569ba59b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc43124c-8994-4463-8823-e05ff03ddb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474318f7-7103-4d10-a50e-367f3d194290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5912d46-c1ad-4032-ba18-d1bf30101d07",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c52d65e-4f7e-4bce-bb17-ca3880e842be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2232635e-d3da-40f7-8b49-cef3693f35ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f490df59-75e1-4578-acc2-26bde26fa832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a165e27-f7e7-4d20-a759-3f0271288269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b17ab34-76ba-4326-adef-a94bf2aba7f4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a55468-2a3b-4ed8-a744-a627c54c454f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028915ee-a3a1-4fa6-8cfe-b0f7b5dcedae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1f1e53-75a2-42b4-8e69-3a6efa1a079a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d041499-1502-4a84-8717-d7e4c238da91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445c80b4-d239-4dbe-97d0-ecf4f9ab45dc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebac9e7-7b9a-4c74-8cf2-b4f89842f886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5b0ee0-5af7-44e9-b25a-7c46daaecd2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2a69c5-f41f-4567-88c4-b9efa370a5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b63e39-0594-408c-8c27-156674145420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717b86a4-5f36-4d3b-b24b-387fd628998f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9791d644-4060-455d-870b-2398b4a243d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22757750-ffb3-4d18-ab41-826702990a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2e354b-a746-492b-9425-e63b4c8d7678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94631952-a8e0-4527-9625-7c89e180be84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ceceb3-0153-4141-906e-d44cdf70c86f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af206be7-301e-4f0d-9e5a-cf6ce20e26b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b571841-84e0-4d81-b88b-619a8493b6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4874d3-ad78-43c8-a996-2bc4605202d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9199a86-70f2-4958-8b96-f0a66f520082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a47471-6263-4e72-b9cc-f8aceb27eed4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23203eee-39e0-49ff-a2c8-f9292d53f2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8734386-fa55-4af2-b5f1-651fb35ea496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0cebe8-da70-432b-b824-66d496f3aab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bb417c-f2eb-4341-8ba6-4a60ac15b9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca12548-97e1-4da1-a0ad-010066240a82",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab820a2-f195-4e54-9950-bd63ed88ed65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca12ed4b-68fe-4b87-b3d4-93d4526fff1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d77c2e-2381-4ff1-a103-d8aa974cb5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a023cc8-24df-47a6-9c49-4b1ab78886be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273ba7ad-2840-4ba1-b6a9-bdac15284980",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986ac2a-cf7f-49ea-a06e-efe8f9798b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5207f7f8-4311-48f2-81cb-fc3f166f8306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e3bf82-a03d-490f-8b90-dd79c1dee4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b657e3-d439-408b-be14-5e01acf7f37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cdf2e9-278c-470f-95a8-fd5bdcb1f0bc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0747e813-ee8e-4b64-9adf-9b29f1b05b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad0c0e7-e1eb-485c-b0e0-905487b9e42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a72998e-1b6a-4ac9-b60e-253992e9b18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65efc0f0-959a-4b14-a65d-57d3b76fc0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580eea1b-05a9-4f08-a20a-c5f09f39e594",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161e83a9-2c90-4bd9-a312-f8e77db0ede2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7285f53c-a7d2-4222-a8fd-09e85fff2370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb3785a-a52e-43a5-905a-8eadc44a2139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656dc6b3-96ab-4600-b1e6-a3e5d833e974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b21ccaf-db42-4032-b2f7-a93f730ee335",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb1b9f8-19a3-4d52-9eba-eb6104716630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149ac2c4-599b-4145-86d0-73eaaadaeb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07691e42-0c4e-4c35-aaa1-6f5779dc8ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442b8338-95c9-4966-88c7-1f6173f9a2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80c9bd6-9d47-4dc8-92a8-b6822fe3e187",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db149a62-afc1-42f7-a4aa-2ed24a167b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e14dc59-f265-490d-ae93-c60e82737c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99e73f4-7c42-4560-8d79-6fb75966133f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8cfb4e-76a7-4fb5-9456-fac21cc546fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9f5a59-124b-4480-8595-629f751bc0ce",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51c9ec2-4566-4363-b260-4ff5e81dcbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca5653f-92c4-4b8b-92bc-2fcc80749799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d77dc7-2353-4bd9-8195-f6efac4ba92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a90893-f0c3-4a13-9ba3-15b060777b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d862a116-6b3f-467c-9f6a-0dda5389c150",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d35a277-763b-4e9a-b112-f0bc5d62894a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c993554b-c670-4b4b-ba5d-d61a4695fae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e881da-e1b0-48ff-adb0-2d2e6941b3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38375ac-4f4a-41ae-973d-70ec366349d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11af5ff8-475e-4222-ab6d-ed3a2aa4821f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6309351f-fe89-4480-a826-63216d5e61d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1846613-f807-4576-be7b-26c81ab7ad30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a050b080-d766-4103-98d3-dea6f7780bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43079338-781e-4672-b84a-0fc2eee17829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751b4f3e-e52c-4c4f-9d33-4fec45c5423e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0071b15f-d668-4cc1-ac8b-ef0863a7ac59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d0a52e4-70fc-4bb2-a25a-4518a09f6d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6eb590-8f12-41e0-93c7-6b2994916ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56249a88-2078-402f-bd5c-e29e1621a6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa21ddb-4a9c-482c-a008-5a8ab12c3a92",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743a418b-89fc-42d7-9b97-85aed228b66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd108353-0aa4-4f87-9190-eaf719ab86bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542c4de0-5381-4e9e-8ebd-d3574a20f948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c0a45e-7962-44e6-a823-dc3ecb143ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3033d8f-221a-4e9a-a9b6-7ad86085524f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475b2558-2ba5-4710-b971-2b76b6fb4c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c49636-472f-4881-9a50-13e5689d251e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a987b070-01dd-4102-b568-ab31d0fabe85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68503b8-c45a-4513-bfa1-a6cae037eb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4b2e2f-6b6c-4d87-b6cd-c44fce6f0a64",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d5976e-f200-4441-9972-7d511050ddc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc213e25-0adc-4827-9f9e-9ee79945533b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56194f85-1dc7-4f65-a5be-01180480b92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd005d5-a2ea-41f0-ab35-92ddd49c2fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887af399-437f-40f1-a2b9-9df349111c10",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde54fe5-7467-442f-9e49-b2649ee5e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d28f99-57af-4b64-8056-32cc12103cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a0eaaf-0935-4825-9013-40d1d1e6b14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99d9054-c848-4d9d-b3cb-a89e36f8727b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9775ae-db28-43d1-b6ae-8a7e4f776871",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a8e806-4e39-4eed-8e78-844b256b3eb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb518cfc-ab9b-4f8c-b958-ce26c06e2621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7c3551-6f6f-43af-b43d-7025ab69b84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a4ec14-83a7-4d7e-9158-61fda7c0e4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53adbfe8-3927-49fc-9432-0168a8b9e2bd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca9d2c-a3db-4edc-bb79-d13520bb7b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b85658fb-c9c3-48fa-9080-ca4a0cc05f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a947b13-cc62-4a83-9620-9fe8040158b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58edfaab-ce8f-4a37-82b7-970d1833b106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7449541-c52f-4a69-9561-6b969cbc864b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfa6ca0-cf14-46b1-a5a5-73a302f697f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42501f2-f957-4f32-8939-54b5dcbc909b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52dfd4c-6618-4b15-b72c-1a7a864d49e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db200a0-e6e9-44bd-882b-b7f8fdcf86dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bafbde-efde-4f7b-9ae3-93701abd727b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ee4bfc-bd6d-42ae-96db-34d9d2dd948d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "171c36a1-fc0b-4fb4-bba4-b327afe4c41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fcb550-23ab-4353-8931-59e2a0733d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae52d30-4552-44df-ae7d-84023245fec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9f78d1-9f7e-4652-8283-927a268e30d5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68063dfb-8de4-40ae-b933-c3cb1e86a8fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d96c04-6f33-43c3-8a10-9132a0f6fdac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b173932-f78a-448e-93cf-7b97d84e56e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4a61b5-8f19-489e-ba51-84ef684e2ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4d235d-6212-4112-b5e2-a83b4d8d66cf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1778a34-4c2b-4768-ad06-f99aec9a7083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcaa7349-c0f6-4a45-949a-1f6e11721f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31406e33-7cc6-446a-b0b6-521e0e127947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13c822e-2826-4285-b0e6-ea24f8fd5051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eda228a-f08e-435b-9edb-72a66c3a2d40",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7fdd12-dda4-4c69-9b6f-c064aaa0efa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c8d36ed-7204-4a1a-b59f-805cbb036fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac4d430-cacb-4b47-a6f6-b5247dd7bd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c72c84-7ebd-4b53-85e3-2bd40e8111cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1774b31b-e1ef-4550-bebd-f4d35bc2a091",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f7b3ed-ee18-41b1-a15d-d153d3aed15d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f92a207a-9cde-43e3-92b1-ac1894acc654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff27823-b566-483f-909d-61d0ed34326c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ae08af-6b82-41b5-b10f-4958b4879e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847ee63f-1ff7-4d5c-990b-455e172aff4f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645c55b8-cd32-4b1c-9292-0e31cbe68c93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3552fef1-ff0c-45b0-a516-d99123dad89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ca9571-de9f-4f82-bdbb-44634f40bf32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cfae1d-40c7-4bb8-92a2-0bea42bde817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c1dc18-2e25-4767-8e18-85c5b61cc31d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d002a22b-1e67-4653-b00e-0d01437170db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8776f6c0-2a15-427b-9af2-f5dcd75b1e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64eeb270-3763-42b2-8c6a-bee0c39b6d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c236b4c2-3e44-4316-b565-49d6b6eac450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702e2606-7cd7-422d-b4d7-c6348f7b9a29",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11f54fa-05d8-479c-8629-513d63776822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3900f8f5-ce68-4a82-bdfc-3a23a57dc806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfed500c-676a-42a2-bd5e-5587afff4626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f149af-d183-4f15-bb88-6c81ac1e2cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b451a780-5739-4353-a8c0-944382af6830",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ece14f2-39dc-44fe-8a7f-ae2fc0dd473b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76bb979b-4fb9-4619-8252-ea6d19827ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b4bee9-5302-4686-a48f-49bbd712b731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfd72c5-9585-4113-ba8b-3e8db1a87af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331f2108-effe-4399-8027-03af33cff588",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d285a3e1-fd7c-4af5-8966-d0c4ea6ec5d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3923a925-45e5-4648-91a1-8621574377cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfdb5a9-bf93-4125-bb2e-bbefc81b04f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c80284-2a40-41f4-b5fb-53b99a89c106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc42a36e-6817-448e-a495-cd18eb3f56f5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dec7759-401c-4e79-81ec-545630a037ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4033255f-f598-4f9f-b11a-05c7569f9fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925b10b9-0fad-45e2-a274-57ca3f5f6d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5186e72-b0dc-47a3-bf03-460fb9077155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66ecfe5-9f5c-4f41-92e5-2cf4a6eaa3f3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be30e09-1856-4909-90c7-f02b0a55e46f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27e07836-6e5b-40e6-afd2-8127191b29b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add74dc9-831d-4b29-8aaa-3ce822d6ee39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a07112-f6aa-4a79-b57e-91200ad50d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7113ab43-f667-4345-80af-c1f162ad512d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c76dc2-4035-43ba-a149-cf0b0ba76005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644dfde5-3eae-467e-82d1-0e3b95c72cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4584111c-4764-41ad-b2a4-eaf95cff0f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9dae915-bb8f-4559-b44b-5fb74b6e3752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd8e7f2-294c-4b6b-8be5-91717f8b1423",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3253821-1fca-422e-b5f7-b756d4afcff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd739cc-1d1e-4842-9774-2e81ec6b3497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c122b95-c28a-44d4-b62a-3912627594d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e38a26-d8d1-458d-a12c-6cb98992ef71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caca03c5-6aab-42b6-b477-17e12d90c2f4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe1809e-d008-49e4-b260-9b35b74c3a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92985668-9363-4cd0-a79f-eb03d982f865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0142f526-19a4-4fcf-af4d-b5d9a5db3279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfecb678-dead-4979-9110-b54a43c9c478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc58c018-5020-4d5c-8040-ddade7fad182",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c266c9-bc92-4e3e-9451-2edf29e52a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe891a00-caa1-4289-9373-871fe9f62d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3765e7fd-157e-48a7-97fc-da5176149876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7652e57e-6509-4cc8-be70-a6fa2f3b46b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e79471-774d-475a-9476-ee4152678cea",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85547706-3b7e-42dc-9513-aa33402bf18a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d572d39-d5bd-4e8e-bd72-ce607359aadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c44b99-f835-4020-a571-26c634dc6b4d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020fbd94-c447-4918-bbfa-ff3adf0e8acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90510cbc-a5d8-46d3-91a3-1c1b38125de2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b3b777-408a-4076-962b-38d2e5a58026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfb41ba-20e6-4af5-8225-acbce8c61f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a7d6a5-50c6-45b9-a8e6-1fcdbf7d38dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109fcfc9-1574-4ce1-8cfe-3e4d160e7a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4febae-ae22-47b7-a522-0bfe6d8f7cdd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e1f2a8-4b7d-45bd-8126-389ec3d20905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf12dda-e9cb-44ba-ac92-b64c9bd5c283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b6b6c1-ef50-4d34-88a8-fdb7c3820326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68d7895-9a0b-4347-91f8-06d77264258b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aabce92-cde4-4316-99a0-c83ba7daf552",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755e8f87-1bae-424c-abc1-e93a60837647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621f13dd-ec94-4761-8360-0d8c0c02bbe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad34b222-049d-4e78-af64-ee4b8512526a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97205547-a0e7-47d8-827d-40e43b644aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad25a31-be03-4d15-a3a9-49001f457cbf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6038d9-b360-45a4-b8b3-020d884c0fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb772e14-aa92-49c7-9fa5-ab17ea679831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9d5b81-e6e8-4350-8c6d-320f4de02a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad3d0ab-03a8-44f6-838a-021a49e3cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65678384-4020-4543-be82-c63a7b0698f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2048a567-d50d-46eb-98ce-823c4a759605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35bc502d-996f-4f9f-855e-e74ebb2c50b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266fe5ea-81ed-4348-ad99-2a1a0d1e4dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1ee1cb-ca03-4683-9a43-4527939f2e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e15bb6-9359-4a26-b685-1b3a42a65bcd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08cf697-17f3-4425-ad29-c56abf6bbb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03924a90-f46d-426f-b015-7a1d4714574c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdaa9c1-1bc5-4fc5-9d83-b0518d9aa694",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78433500-19cb-4217-b340-d015100303e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c90022-91c4-4bc6-b9dc-4235031fb19d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a38988-c6e6-4281-b703-4c3f546986a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86ebde1-bd9b-42d9-b1dd-55b6df5de9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecf8de5-389e-4fdc-811d-44e714f88c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988ca881-7972-4f2a-ad19-bb96cfc938e3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ce4eca1-862b-4b43-9ba8-b4cf9445ca9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c6d50ba-e778-42a7-b37f-9306d6f02875"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46dcc492-1395-448b-b48d-eb95559d3670",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dcb2518-32a9-48f3-a24f-a041babc5015"
                    }
                  }
                ]
              },
              {
                "id": "ae027bf3-84d5-408e-b1d3-bb76e9bb4bb9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b945833-4863-4d7a-9c25-507848d036cd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90998477-4a8b-440a-b73b-12c9b299592b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dbbc3001-644d-4cc6-bcb7-58ac63a31666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1ce69b-2fb1-4901-befc-e9da347e7cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90b44e1c-5a0c-4791-b96b-b960d94d08db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c86d3f7-47ef-45a9-b884-cbb122be5d4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11457217-12b8-45e3-8f3f-74d569985590"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be8af9b1-df7a-42cc-b278-83171516a3e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ac41c65-4c30-4d89-b236-1da05e69b38c"
                    }
                  }
                ]
              },
              {
                "id": "ac4cb691-909d-4221-9290-9b83bef8d325",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1be39249-1227-4326-bc58-5d1c3c25f581",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3b595d-4639-42fb-bad1-b5ec9102dae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "18a800ed-8801-4b15-aef7-759e76835198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb1fa1e-fd60-4b10-8d17-0e7856460b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1ac037-6105-4be0-8a3a-f927e1a096ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a8e54ff-592a-4fb2-a433-da32d1237179",
            "name": "Positive Testing",
            "item": [
              {
                "id": "540af20c-d6ac-4c92-9a95-981ecf0f9892",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bef0f2f5-dcc8-4a06-81c0-ef4c407c6002",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e6f239da-c49e-44e4-824f-b4d2b010166c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f66e9c4-9645-4e9e-9256-9cd1245879a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77d088b8-107e-4ce0-9f4b-a29701694b41"
                    }
                  }
                ]
              },
              {
                "id": "4aae32b8-3916-412c-b955-e67de73240b3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e649a3a9-9720-478e-922a-0d2b48320b5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dee7c262-c30a-442a-961f-b0a57ac7a46a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aa3dfcd-b6b6-4642-8bcc-c2c95f12668c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07273c95-69d3-4962-9d47-d5ff140d59ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77303abb-bd95-46ef-bd02-d9e5a7ec9deb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fe95926e-b07f-4bde-a0ea-c05571de4159"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f99bde6e-713b-4e6a-8e36-a4f6e2a453b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df7abd03-070a-4ad5-a68b-4c3875819bce"
            }
          }
        ]
      },
      {
        "id": "5eb10014-f5ce-4479-aacd-c114b50a5a81",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "13f49dc0-a075-44b2-82e9-aa70f3523c6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf58d875-b6f3-49b3-98c3-ede026dd8abe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0bab1c6-dfda-4d12-8a25-25e0164e9d91",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e582b34f-de4b-4619-8b24-0ab515f3a4e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6ba1aeb3-1a31-40b6-8ac4-0273d927de95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4838e8f7-3756-4ccb-bdd2-a0ca9d393b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9beeb33c-65af-49b4-9667-baebe5307722"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ed8a2c7-1b87-4bbe-916f-0f592e6126af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1940b2b9-3a9e-4bb8-ab57-48294a4f50e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f7934dc-5885-4dfd-8819-872afa32d68d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f58af98-0cb3-4a64-916a-7c65016d20bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47029420-e925-4d10-849e-12793c5cfcd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5bd6b007-dbdf-49d5-a4a8-064f77f29446"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d820d41e-da83-4856-9658-9e38d5d880d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "634ed35e-c28f-4001-86af-105c3e07538d"
            }
          }
        ]
      },
      {
        "id": "d2d800db-2f15-4208-b45a-da8bb149c8cf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "91caf526-0b08-4189-8808-924c5263416f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c37835a-4692-405f-b959-e2ef9fe8b44e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b21e47aa-2c10-4c74-b025-4eeedc453a07",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5804e29-acb3-489b-a324-687e6219fbf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e41e44bb-e286-42ab-a4f9-7ff8dc2fe429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84a7522-e01a-4c2a-b394-4c8d8b327eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fec6ca6-885a-4724-ab68-d1d95cf3ffce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a963c62a-6213-4957-9226-e71d13ee58d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "698d49ba-8792-4077-bb3e-cbfda73dd984"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a5f942d-664f-468b-a0f3-571878e3d3ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5aefc82-ff1a-4d61-8b7c-b60fdea993a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fa64145-e0be-4e7f-bbc9-02eda496ca59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "03e208eb-9f43-42a0-bf08-552540428b33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d3f868c-4e33-40ce-8885-a9dde6c8079d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3557d69-8460-4895-9f39-8611c1883da7"
            }
          }
        ]
      },
      {
        "id": "5d93adfe-f80a-4ded-b868-68d7675e397c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "be359929-42bc-4a78-90c0-3825e71430d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c26c1148-6e2c-4e03-a03d-0fe3c3d4eccc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5aee52e9-54c6-48f9-8fd0-0124dcdf01ac",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edf9185-8874-4306-bc0d-e089d8258db5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "850a97a2-df05-43e0-8500-a85f6da2b52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e952b311-5ed0-451f-9545-183cbd71c176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d496ebd3-3954-4235-802b-3939b9d625b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4520f9dc-d840-4136-bb0b-520eace37106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4e1f92f-ea7e-4f81-b6dc-9e289a85946a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d48f8d96-c2a5-40ce-9a55-e3235ae5c924",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc05b565-2cc2-446f-b812-322cfa8c96ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6aec7a95-af35-404b-9aa4-cae224cb8581",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a9885ca-b54e-479d-8e2b-d9a40911b27d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24d32502-d0ad-4b6f-aeaa-aae3443f32f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "251e5eb7-95bb-4a2a-bb69-4d74c7f1b7d8"
            }
          }
        ]
      },
      {
        "id": "1e809fee-3486-48bb-bde1-3404976abad4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b12c53f-8a88-48c9-b285-377043fa4767",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ef1d9e1-8c0c-48cc-89ce-6b4720f84e5a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bc31abf7-47bc-46ad-a151-a86a1aca4164",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbe83db8-3ed0-4992-a9af-20ca72844e3e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5443f45-0b4c-4b30-bf62-b1b4b38d2ee0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.79649122807014,
      "responseMin": 9,
      "responseMax": 741,
      "responseSd": 75.81325617759691,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700181438936,
      "completed": 1700181465749
    },
    "executions": [
      {
        "id": "2b07e266-e00b-4297-880c-39005343e1fe",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d290bb18-d1cd-4363-9579-e329d7a2a2aa",
          "httpRequestId": "871279b0-2968-4c5c-b048-88a7d9f119a4"
        },
        "item": {
          "id": "2b07e266-e00b-4297-880c-39005343e1fe",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ef578ab7-f928-456c-ba04-1e1d2764354a",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "2e98bf22-aff3-478b-87f4-420b2a8002b0",
        "cursor": {
          "ref": "deabedce-9e6d-441d-98d9-d54869b42be7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9547585a-0e2d-44af-b51d-698de2090edd"
        },
        "item": {
          "id": "2e98bf22-aff3-478b-87f4-420b2a8002b0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "24ec1f1e-efb8-4192-a145-fffb3e04b88f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "ffc5ff07-cf63-4ebd-bc79-7ed785a5a897",
        "cursor": {
          "ref": "c3085cc7-e03c-4660-83b9-346be3d33d2e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fe645157-fef8-4bb6-bf4f-e5e6b50beba0"
        },
        "item": {
          "id": "ffc5ff07-cf63-4ebd-bc79-7ed785a5a897",
          "name": "did_json"
        },
        "response": {
          "id": "4dc19e28-07ad-4aaf-ae99-dd071cd80593",
          "status": "OK",
          "code": 200,
          "responseTime": 306,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f3ca62-7c48-414a-b868-14a95a12983e",
        "cursor": {
          "ref": "89602dde-b121-461c-8497-061985647c89",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d4e2f7de-ec6f-4883-bfe3-e0e87391f678"
        },
        "item": {
          "id": "c4f3ca62-7c48-414a-b868-14a95a12983e",
          "name": "did:invalid"
        },
        "response": {
          "id": "1430ed4a-f81e-4ea0-b994-0e74d85eb3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f3ca62-7c48-414a-b868-14a95a12983e",
        "cursor": {
          "ref": "89602dde-b121-461c-8497-061985647c89",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d4e2f7de-ec6f-4883-bfe3-e0e87391f678"
        },
        "item": {
          "id": "c4f3ca62-7c48-414a-b868-14a95a12983e",
          "name": "did:invalid"
        },
        "response": {
          "id": "1430ed4a-f81e-4ea0-b994-0e74d85eb3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e744b4b-7bcc-44d7-aaf2-3433caa656cc",
        "cursor": {
          "ref": "1bd7fcf1-5fde-487d-8bff-e056db36ef30",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d829c436-26b7-4e61-a0e6-aa3a3bf40c68"
        },
        "item": {
          "id": "7e744b4b-7bcc-44d7-aaf2-3433caa656cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "50ed7736-cd07-4591-9c8f-91d99317c519",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992fd967-9718-43dd-85a6-e0688b348168",
        "cursor": {
          "ref": "cfab1fc3-7061-40d6-98d3-1d4afa5f36f7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4520a375-e56d-4d6c-8cec-b12bf4a191c9"
        },
        "item": {
          "id": "992fd967-9718-43dd-85a6-e0688b348168",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bde60a00-3af7-4f0d-96b9-ce2f7691668c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befbdeee-b0cc-4f60-98c6-820d8c1c7ff6",
        "cursor": {
          "ref": "ec1f1fa4-ca67-40b0-9888-f5dd2167254e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2e7544c2-4c77-4417-b4e8-e3b1f56d6f6d"
        },
        "item": {
          "id": "befbdeee-b0cc-4f60-98c6-820d8c1c7ff6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "82ef2810-d148-434f-8903-221625df8998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50f27bd-1ff7-4139-a33b-c2f1eb3ebcf3",
        "cursor": {
          "ref": "409ec228-300f-4c6a-a36b-eb26226b51af",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4a116e4d-233e-4300-8b49-470e696ec3b3"
        },
        "item": {
          "id": "f50f27bd-1ff7-4139-a33b-c2f1eb3ebcf3",
          "name": "identifiers"
        },
        "response": {
          "id": "896085be-7a17-439a-87d0-7c86de0d1a1c",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659ebf13-edb8-447f-a271-f143219dc83e",
        "cursor": {
          "ref": "38386534-05eb-424e-b887-37d06b6fc424",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c1e11b3c-0108-40ed-9b2d-ff90705206b7"
        },
        "item": {
          "id": "659ebf13-edb8-447f-a271-f143219dc83e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "164dc9fb-734b-4bb0-8dce-d2a2b86aaf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64372a8-15f6-4b03-be84-78c57c42329c",
        "cursor": {
          "ref": "699dbdda-1a17-4b42-9781-88f1a065b7f3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b46df997-bfda-4159-ab0e-57075b8c07ae"
        },
        "item": {
          "id": "a64372a8-15f6-4b03-be84-78c57c42329c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2bef9eb9-dd6b-49d2-9af2-0358c6deefbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8983cf7a-485e-4b44-afbb-d4583c0e5a7d",
        "cursor": {
          "ref": "c1600b08-0ab6-4c92-b8fd-d84731c56b4b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f5b6f8a-1602-48e1-860c-efe7ab075b9f"
        },
        "item": {
          "id": "8983cf7a-485e-4b44-afbb-d4583c0e5a7d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "88f2e43d-60e7-448d-a76f-61e602c88315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df213dd-cb52-43fc-a54f-cdb582db5202",
        "cursor": {
          "ref": "298ba8df-4ecf-407e-8c4f-4be92c08e6cf",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e2893cb8-032c-475c-a70d-60decb1dbdb2"
        },
        "item": {
          "id": "4df213dd-cb52-43fc-a54f-cdb582db5202",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "01a451b6-a739-4b22-b48b-3565d7a8a0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf6365e-8a03-485b-aefc-573524b926b1",
        "cursor": {
          "ref": "7f5c3aad-d887-48e4-9044-cb0c7043ea3f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e6b52a52-a526-4cd7-bb61-f2652af19fa3"
        },
        "item": {
          "id": "9bf6365e-8a03-485b-aefc-573524b926b1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b89941e0-ce1b-4ca3-ac3e-66c96d6e2ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97885bbd-5075-4fcf-a54c-3338b3e2e486",
        "cursor": {
          "ref": "89b3d9a1-c8ad-428d-a2d5-bf7bbe9195af",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d05eb972-3789-484c-aef3-68343c19248e"
        },
        "item": {
          "id": "97885bbd-5075-4fcf-a54c-3338b3e2e486",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3aad1c83-dd1d-4615-973a-2813138742dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155eb465-1705-4bd1-9514-e673ad03b006",
        "cursor": {
          "ref": "80ee655e-fcb0-478a-977a-97e01a4ff46d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "02576e9c-1371-4c7f-98ae-ba2a7edfef12"
        },
        "item": {
          "id": "155eb465-1705-4bd1-9514-e673ad03b006",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8867fb1f-b330-4d69-8b9a-212515acd97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89757bd-58d8-42f0-9b48-d44c18652eec",
        "cursor": {
          "ref": "b94699dd-4318-4e2f-a1c9-16a70bb38c03",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8f3ae0bf-12d6-43b5-a3aa-f1d2c8eae868"
        },
        "item": {
          "id": "c89757bd-58d8-42f0-9b48-d44c18652eec",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2eee1120-3d9f-443e-b70e-511906a0ea35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3797509b-fee3-4820-936b-f1c719a223ee",
        "cursor": {
          "ref": "34e47145-c4f2-4c42-83f8-c842ed8d5e28",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b029eff6-75e3-409c-9b1e-9facc2a6ede9"
        },
        "item": {
          "id": "3797509b-fee3-4820-936b-f1c719a223ee",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4478a1cf-baa8-4f25-9b3b-8204172d7c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c19735c-5ba8-4efc-80cb-5dd9415f9b0b",
        "cursor": {
          "ref": "4a320a56-60d6-4914-9783-9bf34298f77f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "80a6ac85-b3dd-4826-80fe-46723a352bbe"
        },
        "item": {
          "id": "0c19735c-5ba8-4efc-80cb-5dd9415f9b0b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dc544bb2-c114-478e-bce5-bd231c0ed50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3844117d-4ab6-459a-9f77-36728a13638d",
        "cursor": {
          "ref": "e543faf6-1e33-4779-b258-cc4ba2353a6c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7b16fbb6-1ef1-4333-997c-89cefdb8ef3d"
        },
        "item": {
          "id": "3844117d-4ab6-459a-9f77-36728a13638d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2dd29673-73e4-49ab-bdab-875c24fe9cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb39a23e-11dd-4c5d-a969-3b6aedaa6d75",
        "cursor": {
          "ref": "c560c3d7-96f2-486f-a148-092ba8610423",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c4dfed94-dcf3-44f1-a29f-d0bd602e3da7"
        },
        "item": {
          "id": "fb39a23e-11dd-4c5d-a969-3b6aedaa6d75",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "49dacd5d-9f9f-476c-b091-1de23762b301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf6524e-6ab3-4277-bf89-2276372756c2",
        "cursor": {
          "ref": "edbc47c8-42ea-4a19-822a-7f7790e4955c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4019826a-8768-4934-8dcf-f7c513849ee1"
        },
        "item": {
          "id": "adf6524e-6ab3-4277-bf89-2276372756c2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8a175e60-593a-4089-9da3-ea353ab25d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a40a5e9-99aa-4eb6-a09a-3287dd979d26",
        "cursor": {
          "ref": "fc20d3d2-2538-44d9-b611-c7778e635484",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ba1a3d89-7cbe-46ed-9240-ad065037691e"
        },
        "item": {
          "id": "4a40a5e9-99aa-4eb6-a09a-3287dd979d26",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eb870974-3019-4658-b2a1-ed877b3c3e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea6f31b-60dd-4a82-96c3-b583f17bb7bf",
        "cursor": {
          "ref": "c440f3ec-e0e4-4c1c-9669-cc859a57d097",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2959fb7f-3d08-4f7c-906d-f37058fc5e78"
        },
        "item": {
          "id": "8ea6f31b-60dd-4a82-96c3-b583f17bb7bf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fc2a7a66-1c52-41d6-b9f7-0689429bba59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b7622e-beda-42f4-be7b-d9701bc7747a",
        "cursor": {
          "ref": "96dbf6ef-d6f5-47a1-bfec-7a1587447207",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aa1eddfe-d57f-4c70-9022-8698f040aeff"
        },
        "item": {
          "id": "55b7622e-beda-42f4-be7b-d9701bc7747a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d0f3119d-eeeb-4a6b-93ce-68dc2f1ca76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e08ddb-89e4-47f8-b9b3-f8f828515379",
        "cursor": {
          "ref": "7748fde7-605e-427b-b5d5-4de9bc17f5ac",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3e7d0c5b-bc56-4959-9e6f-820920bbd5f7"
        },
        "item": {
          "id": "42e08ddb-89e4-47f8-b9b3-f8f828515379",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f5438cc8-e04b-4f5a-a1b6-fa09c5f70c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e31bf4-21fd-4c0f-a6a7-3156418512b0",
        "cursor": {
          "ref": "545e1a5b-578a-472f-9ff3-33467dd7e40e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fe3c9e6c-7caf-463d-b893-0155fdfb120a"
        },
        "item": {
          "id": "67e31bf4-21fd-4c0f-a6a7-3156418512b0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fa2ea8cf-be28-4654-adea-1a2d5ba7e093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d39758-b10a-4cdf-b1e6-0e1e5d07319b",
        "cursor": {
          "ref": "6d9d95d4-578b-42c8-ad27-fd6488be1148",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "55207297-028e-45b5-b3ce-57377606a816"
        },
        "item": {
          "id": "23d39758-b10a-4cdf-b1e6-0e1e5d07319b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3b44abe1-338c-4800-ac87-94e89aee0fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae1c881-ad66-4e31-a147-41c41a5f89c0",
        "cursor": {
          "ref": "fd322e50-9c09-474e-99e1-5264c4f72102",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7c1d464b-1743-4438-bef4-aabd454f10a6"
        },
        "item": {
          "id": "7ae1c881-ad66-4e31-a147-41c41a5f89c0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f44bf080-b1e7-4907-b30a-6ace6716f0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9aa14da-be5b-4413-bdb6-f293343d9ee0",
        "cursor": {
          "ref": "e9e758a2-c853-47b3-ab8b-3529b295d7a3",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fef98d51-f4c5-41c6-8072-e94a13f85f99"
        },
        "item": {
          "id": "b9aa14da-be5b-4413-bdb6-f293343d9ee0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dccf55dd-e919-4d7a-8531-0dbdea9f9981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6445ad0e-aa63-4e26-a73d-3cef2650a191",
        "cursor": {
          "ref": "08c38fa6-5c35-4902-8df8-edb10584a884",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "908c9c44-b60b-4739-8824-86dfa9cff18d"
        },
        "item": {
          "id": "6445ad0e-aa63-4e26-a73d-3cef2650a191",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c1acb2d-01e5-445a-b285-37aa52053903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e66db88-1ea4-415a-a540-cd72c32fce66",
        "cursor": {
          "ref": "366a59cd-52c5-48ae-ae2d-6febde113cc0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2a9772df-310e-4207-82d2-fac14b7d5d18"
        },
        "item": {
          "id": "0e66db88-1ea4-415a-a540-cd72c32fce66",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "133c7f22-93f0-499f-ae9f-1f4bd768362b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc06d456-2abf-4a0b-9b94-caffbd9cbd08",
        "cursor": {
          "ref": "721a1a68-02c1-4a23-a887-8d9486777baf",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "32ba5a1d-50cb-4746-8e74-9f948e382f57"
        },
        "item": {
          "id": "dc06d456-2abf-4a0b-9b94-caffbd9cbd08",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6e9d5593-0d12-410c-8478-85732aa773ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f4de7e-3c06-4092-a056-cf3cd0dabf1c",
        "cursor": {
          "ref": "08376fc2-20d5-4722-ae85-61190975743c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a1287be8-3f76-4901-b574-0e131a7586b6"
        },
        "item": {
          "id": "42f4de7e-3c06-4092-a056-cf3cd0dabf1c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b2b29988-3dc7-49b1-b152-22ae39580d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d81fb9c-609a-4f57-9601-7b4d3baadc29",
        "cursor": {
          "ref": "b5d37e25-bbbb-4271-9ba4-c8346548bb90",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "607ca3d3-a87f-48da-91d3-124e126649ee"
        },
        "item": {
          "id": "8d81fb9c-609a-4f57-9601-7b4d3baadc29",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2db398e1-022f-47c0-bad2-a59794d28755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4339fd-6462-43e5-94b0-558f503438ee",
        "cursor": {
          "ref": "8ea68f45-dc57-43f0-81f5-0cd9af989504",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cb76c0e6-081d-40d6-9a93-ee54293145ce"
        },
        "item": {
          "id": "1f4339fd-6462-43e5-94b0-558f503438ee",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ca4f7be2-33ef-4307-bca6-a4141e42a829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1acc4a9-023e-4a29-8bcb-b6aaa267c9e5",
        "cursor": {
          "ref": "c8b92072-2c03-44b5-ae8f-0c37e41780d8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5b5d2438-3148-44e8-8325-1a35a144c8f0"
        },
        "item": {
          "id": "a1acc4a9-023e-4a29-8bcb-b6aaa267c9e5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "92089874-72b8-4eb8-8d63-b934af0cbf02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697cf2c3-c310-4d50-b5b9-f09e354f6118",
        "cursor": {
          "ref": "4154fccc-1704-4baa-ad17-6975ace31560",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3ca63b46-d771-4c55-9d31-669bcc7cf78a"
        },
        "item": {
          "id": "697cf2c3-c310-4d50-b5b9-f09e354f6118",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "09a98225-101f-44a6-8723-8b98d4e743cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c848c5-99de-4682-b7dd-1b2a31d1c796",
        "cursor": {
          "ref": "5d83f148-7010-4aa1-aec3-9d7f6505ea5c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ad0efc18-e1ac-4875-b6a3-7552c6af6b16"
        },
        "item": {
          "id": "66c848c5-99de-4682-b7dd-1b2a31d1c796",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bc6776a1-2574-416c-912b-4645989acf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcee1cb-d308-4a10-b3db-c6a8fd840c02",
        "cursor": {
          "ref": "63d6256e-860d-4a3c-a1cc-7af3b50fdc42",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "38b91842-3662-4009-9402-eec4c7451645"
        },
        "item": {
          "id": "4bcee1cb-d308-4a10-b3db-c6a8fd840c02",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b2d5fc1e-918b-4e99-8cde-dfe1b812de26",
          "status": "Created",
          "code": 201,
          "responseTime": 741,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8003746c-88a7-4995-8341-a142f8e8d17d",
        "cursor": {
          "ref": "526cac84-9368-4509-a795-09a2871ecc38",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1deb0f98-883e-4c52-9651-ad931a99a4a8"
        },
        "item": {
          "id": "8003746c-88a7-4995-8341-a142f8e8d17d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7540acb5-9ae8-40b5-b6b4-bac273404140",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "36afd354-cf54-4001-be21-16f69161188f",
        "cursor": {
          "ref": "895c2f3d-da9a-4024-bed7-6d22717c6efc",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9e1b3c33-fc39-431c-a09e-790792dd32d5"
        },
        "item": {
          "id": "36afd354-cf54-4001-be21-16f69161188f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "44e65eae-8842-48ce-ac4d-da0f230b3cb0",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "60fd0f9c-e128-4c1e-83a5-bad13f092040",
        "cursor": {
          "ref": "99d94cf9-10ba-402b-be4e-d2376552b58c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e060a6ff-e863-4095-a9bf-4e5aebe5fd17"
        },
        "item": {
          "id": "60fd0f9c-e128-4c1e-83a5-bad13f092040",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a843ebe5-dda7-4bae-990e-e817f00f1dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57416bfe-9e38-41c2-9718-b2c792d6f912",
        "cursor": {
          "ref": "381f6845-0605-40ef-a09e-c9f12ed0f16b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5f8e6cb0-187e-4dd6-8209-b489d734b51e"
        },
        "item": {
          "id": "57416bfe-9e38-41c2-9718-b2c792d6f912",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1022823f-397f-4c6c-b535-fed570c38924",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7c0ed4d9-d6e4-4686-a55d-773c25e4f0e5",
        "cursor": {
          "ref": "328dad5b-8334-4f95-a743-f8e19f59876a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3762cb05-b1d1-475c-8ce9-0beedcf23355"
        },
        "item": {
          "id": "7c0ed4d9-d6e4-4686-a55d-773c25e4f0e5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e6a415a9-2874-4c91-8282-a2194270ffc6",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "eda5d662-3fcd-4144-a79f-875a03f7dd6d",
        "cursor": {
          "ref": "7069cb45-618d-459e-bdd2-5b7d497f4850",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a7be8c75-04be-4a21-9af5-aa37f96dd013"
        },
        "item": {
          "id": "eda5d662-3fcd-4144-a79f-875a03f7dd6d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d60fddcc-269d-4594-a0ee-f33c2a9750d0",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5749d0ad-059a-4512-ae73-558e89356fd6",
        "cursor": {
          "ref": "3a481727-4aea-4453-84ca-ac6085b4a92d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2f59ea97-e028-4d57-999e-9ad9be7c8974"
        },
        "item": {
          "id": "5749d0ad-059a-4512-ae73-558e89356fd6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "45ca85a4-dcff-4f0d-99fd-9e1132d65596",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2001bd9b-3526-401c-a1f7-9984032435ce",
        "cursor": {
          "ref": "9ada5358-a46f-4972-97fc-b643a3189c3f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2edb8775-8d8e-41d3-8ed4-e92838fe736e"
        },
        "item": {
          "id": "2001bd9b-3526-401c-a1f7-9984032435ce",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e0909be7-78fa-4171-876e-3e4163d28ff0",
          "status": "Created",
          "code": 201,
          "responseTime": 523,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1f9deb33-290c-45fc-b30d-850e5d3eba07",
        "cursor": {
          "ref": "e25224f7-0749-4843-bdb6-58a394e87ad3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3df37320-58b0-4ab5-8f2b-22bc66aba433"
        },
        "item": {
          "id": "1f9deb33-290c-45fc-b30d-850e5d3eba07",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "56fee134-5df6-4f16-aa80-0aabc4e2bf13",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "53bf3a02-d1f9-4743-8bea-feccd91518a6",
        "cursor": {
          "ref": "43381ede-017c-4831-bb6f-96169b857cb1",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "544043a4-3fe0-4de5-9a5f-0271de1f72d2"
        },
        "item": {
          "id": "53bf3a02-d1f9-4743-8bea-feccd91518a6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ce3f13b4-e2be-4afb-b669-52564478d040",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d1e2510c-8de9-4a2c-99c1-8b183458fb0f",
        "cursor": {
          "ref": "cb082f20-1389-45f2-99bc-4556986c4d69",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "38403c89-46e8-4959-a67d-f0711a1192a3"
        },
        "item": {
          "id": "d1e2510c-8de9-4a2c-99c1-8b183458fb0f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4c72d5da-913b-4640-a6b3-5f753c551b67",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0213310d-9d30-4677-a23c-92146509204b",
        "cursor": {
          "ref": "d211ef44-e376-45fe-9eba-4d07a1b75210",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "50d14828-7d2a-4413-ac9d-b8fb70c5bcf2"
        },
        "item": {
          "id": "0213310d-9d30-4677-a23c-92146509204b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fdc1f4fa-29ae-4405-9a67-ea3ec65af381",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "56ebd3a8-de31-4483-8745-5503b48a8f02",
        "cursor": {
          "ref": "39d567d4-a906-4c1c-a9b3-cd801406f8dd",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f672549a-14e8-4a21-8019-b7ca3a5b8d0c"
        },
        "item": {
          "id": "56ebd3a8-de31-4483-8745-5503b48a8f02",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "aec4d5b5-ef52-4edd-9b0f-0accfe34099a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29425b3-7ce9-4f36-8d32-c9d0f23b16e9",
        "cursor": {
          "ref": "67b7c45c-02a2-4791-9fe1-8398fd4e0a09",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bb2c4896-f567-4e8a-9957-8b0a23c985c8"
        },
        "item": {
          "id": "c29425b3-7ce9-4f36-8d32-c9d0f23b16e9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ebf9fade-6fb8-4059-a926-da687068b575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cf3dd3-d068-4d61-92b4-40dcf79c53d0",
        "cursor": {
          "ref": "e43c31ec-7695-4df1-9966-a0688014c6b6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "68d35f08-236d-4a4d-9ab0-10f93e0f9ab8"
        },
        "item": {
          "id": "45cf3dd3-d068-4d61-92b4-40dcf79c53d0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1b8f413e-b0d3-46a6-9138-b50c5903d4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99455b1c-c277-490f-a1e9-df45df362856",
        "cursor": {
          "ref": "50d43394-9c87-497d-978a-b12a399f8dc5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b229e96b-95a7-487a-8e0a-169d7863eefa"
        },
        "item": {
          "id": "99455b1c-c277-490f-a1e9-df45df362856",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "01b1459c-cb4f-4af0-8ab8-62676a648028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb854ac6-1cc1-4b22-a7d7-a90a02770d23",
        "cursor": {
          "ref": "59c3f8c9-9f6c-415f-ba0c-d3bfe062b8c1",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f22c0495-d804-40c9-8781-fdc1fa3886b6"
        },
        "item": {
          "id": "bb854ac6-1cc1-4b22-a7d7-a90a02770d23",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8f824617-08ea-4f87-9536-af320c8342a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fe5878-4563-4ec3-a220-e96e46376525",
        "cursor": {
          "ref": "1ade37f3-592c-4ea8-b4b6-37e4f9224d3a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3e3b24d5-56a1-4402-8491-13dd8d3b0e53"
        },
        "item": {
          "id": "58fe5878-4563-4ec3-a220-e96e46376525",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cdd00369-ffdd-4a95-b3a3-20bf7afbe6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e610c7-cf2c-44ad-bd86-c89dedb9a152",
        "cursor": {
          "ref": "085121b1-9800-4292-b405-2c129ded6b5d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3002ea3a-6b8c-465a-a7db-d0e7c860c611"
        },
        "item": {
          "id": "11e610c7-cf2c-44ad-bd86-c89dedb9a152",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a6161c83-7ef1-4e0a-90bb-7482a0d073d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50347e47-6557-4cea-bf7a-c327468debc5",
        "cursor": {
          "ref": "e2c3ae15-3c2a-4ffc-affb-a278c048228b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "628ce9eb-2914-4196-a825-32a360917050"
        },
        "item": {
          "id": "50347e47-6557-4cea-bf7a-c327468debc5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "19ae4353-87a9-4790-afbb-3e2f9a9adb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cffa9e-c2ef-43fd-a1e9-4e1094f34e74",
        "cursor": {
          "ref": "7c30bd9c-190d-490a-8e32-a0c2d7475d59",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "534bb581-c47b-4fd1-b419-3fe2dec7894f"
        },
        "item": {
          "id": "96cffa9e-c2ef-43fd-a1e9-4e1094f34e74",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f81e969a-8c18-4655-bfe8-b86cb122fd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf8580f-b8d0-42b7-b1b3-4c629336a498",
        "cursor": {
          "ref": "11f2a540-4374-48bc-9e43-11b35ada19cf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3457ebef-a3de-4e30-96f5-079be1a899ab"
        },
        "item": {
          "id": "3cf8580f-b8d0-42b7-b1b3-4c629336a498",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "865c03c7-4054-4775-ba38-c9a59d124d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c436e7-35f5-473c-9447-8c74d9c4a185",
        "cursor": {
          "ref": "9a0547d4-5a57-45e9-866f-197c522ec683",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9d1a5f0b-03e7-43c6-9f53-11a205fccd33"
        },
        "item": {
          "id": "d0c436e7-35f5-473c-9447-8c74d9c4a185",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7790ed8d-3d2a-4df2-9a18-2fadb44fa2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c978829-d165-418d-899e-c1132337eaa3",
        "cursor": {
          "ref": "766fa3b9-8551-42b8-8bcf-dd0b9f095ca5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e6d5b197-19cd-4818-9cc6-420338c1c8c5"
        },
        "item": {
          "id": "7c978829-d165-418d-899e-c1132337eaa3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f7210984-d685-488d-9a1b-cc75a89be7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424f585f-6027-4cbd-b2eb-142bc885ca0c",
        "cursor": {
          "ref": "943f2fad-15dd-4765-a41a-a79971c88fd3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2ad72117-3072-4059-8b7b-220adadc3904"
        },
        "item": {
          "id": "424f585f-6027-4cbd-b2eb-142bc885ca0c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "433dba0d-442f-4e8e-b806-f902b3b6ef18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e973b1f-4d4a-4b5b-b540-5c3726b37769",
        "cursor": {
          "ref": "97ed4550-7bab-42f6-80f5-3f649402fa5f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "52fec773-5ae3-49ec-83c7-0a0cf8334f5e"
        },
        "item": {
          "id": "8e973b1f-4d4a-4b5b-b540-5c3726b37769",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "63bdc106-40a8-4a71-905e-5e59e610ce66",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "290a5d75-54e2-45c5-87a8-45ef3d667a71",
        "cursor": {
          "ref": "0c8dddf4-c746-4ce6-a330-144a8ea49de2",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2661e89c-111a-432c-bf02-56be0d82e748"
        },
        "item": {
          "id": "290a5d75-54e2-45c5-87a8-45ef3d667a71",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "70f51c36-7a70-472a-b534-c30a5960ad39",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "45147297-9a2c-431a-ab13-0f272f1c3dc5",
        "cursor": {
          "ref": "b3ee507b-df18-4f4d-8d65-21e5c60708ab",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7694682c-7a08-4664-8ef2-d79d2768eef1"
        },
        "item": {
          "id": "45147297-9a2c-431a-ab13-0f272f1c3dc5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "437d94e4-ec87-4e27-b8e3-3e133df9eec2",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "949da0ad-d663-4931-aa6a-7aa936f978bd",
        "cursor": {
          "ref": "593c0a60-2c39-493b-8f78-c6104f7a1ce1",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b256ff78-c6fe-4c17-8fbe-39b20173b46c"
        },
        "item": {
          "id": "949da0ad-d663-4931-aa6a-7aa936f978bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "127eacb9-3e99-445e-9d83-8396d7c210d9",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3bd57cd1-ee38-4300-90b5-bb8499111d16",
        "cursor": {
          "ref": "5461cd9d-d76c-468c-a380-c0f428972cb8",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6b9c83dd-a468-491b-bb5a-5c6a5d8d0bc2"
        },
        "item": {
          "id": "3bd57cd1-ee38-4300-90b5-bb8499111d16",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4dfbf8ae-5658-43ab-a3d3-64682113c50c",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fa5cc200-8230-4a5c-a81f-18f1a06d31d6",
        "cursor": {
          "ref": "fd29f07b-0c5b-4310-9234-3f6b626a0cda",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a19e9fed-fd5c-43e7-bee6-ba3b8381402a"
        },
        "item": {
          "id": "fa5cc200-8230-4a5c-a81f-18f1a06d31d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "402a49af-9b7c-41a0-a62a-a18492e85c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66384b46-e508-486d-91bc-49b5d0f6d4de",
        "cursor": {
          "ref": "c08ea9a0-d019-4e09-a05d-dc35e098b320",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "66eae9f3-9dba-42dd-94c4-9af4e8422b87"
        },
        "item": {
          "id": "66384b46-e508-486d-91bc-49b5d0f6d4de",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bfc45a28-fd02-4f29-b6c4-395ddbdcb441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6cb724-adc4-45ad-92bf-f2785784eb51",
        "cursor": {
          "ref": "f7e1f5fa-1c86-4b72-9b8b-c0a1d13b1fe0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0472b70a-be25-4dd3-a6be-5e9e940a38eb"
        },
        "item": {
          "id": "8d6cb724-adc4-45ad-92bf-f2785784eb51",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "53f3f620-e935-4630-9ba8-7e46143ccb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fedaac-783a-493e-a8b0-1490de601b38",
        "cursor": {
          "ref": "4e6858f9-3dd1-4697-a4dd-3b38be835ced",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7f12ffae-db35-4432-83f8-059e69794559"
        },
        "item": {
          "id": "d4fedaac-783a-493e-a8b0-1490de601b38",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "adc2e7ee-ff67-413e-8b59-e0db9a20d4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9c04c6-7c59-45fd-ae04-c2f7ea893f37",
        "cursor": {
          "ref": "c71106ea-8f61-4616-8968-741f101bdd9c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "403770ec-9826-4160-9fb1-6f2da18007c9"
        },
        "item": {
          "id": "8b9c04c6-7c59-45fd-ae04-c2f7ea893f37",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "05ff8621-83b8-42ab-951a-a5f056b7e896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a16b96-b7c0-451d-87a2-c5b3007eddee",
        "cursor": {
          "ref": "85718eb0-0aae-4b84-a214-51263fca9de3",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "457d6fef-9bf2-46fd-81d3-065862e0c67f"
        },
        "item": {
          "id": "a2a16b96-b7c0-451d-87a2-c5b3007eddee",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fc79d895-1709-4254-9a2d-276d988b9403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b607b749-3562-45c0-809e-2d11202b2d83",
        "cursor": {
          "ref": "bc305fc8-3543-4948-a4ad-94f29e0d00eb",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8481c971-cc8c-4b65-b65c-919228007e6c"
        },
        "item": {
          "id": "b607b749-3562-45c0-809e-2d11202b2d83",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "af022a43-3c51-4584-a3a6-fe466da46980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af9efad-b115-4a2f-859e-120375d29be8",
        "cursor": {
          "ref": "3e1eeaa4-39fe-464c-a404-cae4522d1420",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5fee0526-ac31-4594-8ef2-81e0d02b9671"
        },
        "item": {
          "id": "6af9efad-b115-4a2f-859e-120375d29be8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b21c33d5-e2d4-44fe-8aa8-d6c2c5b76573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0423fb36-f1b7-44fb-badb-561684d645c1",
        "cursor": {
          "ref": "90874660-3e85-4fd3-b83b-14bf48fb2a47",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "16333275-e25f-4d53-a6e9-7fc695fe8fec"
        },
        "item": {
          "id": "0423fb36-f1b7-44fb-badb-561684d645c1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b200b085-bd04-451b-876b-dbce7d7900e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668b1de5-2f91-4353-a18b-3394b3445e67",
        "cursor": {
          "ref": "3f4b47c5-b0d2-47fc-bef2-bed2d5187fd9",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6479962b-ae0e-4547-bc3b-042919a2ce89"
        },
        "item": {
          "id": "668b1de5-2f91-4353-a18b-3394b3445e67",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "098e1737-15d3-4ab2-9a20-991984d672fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319ef160-b062-4d5e-abda-508842adb1e1",
        "cursor": {
          "ref": "c62cdb4a-6207-4134-b28d-f97c61345fda",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "814c94f0-2e2d-436b-8702-738767676478"
        },
        "item": {
          "id": "319ef160-b062-4d5e-abda-508842adb1e1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "da973ab9-b416-423b-93c1-15869122d730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8f863f-9843-4820-8eb5-302bbd4a2cc0",
        "cursor": {
          "ref": "c9a40358-b65f-4fa9-95dc-ab4f44cf4dc1",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "227d31f0-78bf-479e-b4f9-692d55920fa5"
        },
        "item": {
          "id": "ee8f863f-9843-4820-8eb5-302bbd4a2cc0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bb67f2b8-360b-4df4-ad75-1e0b81d8e935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26715d8-ed68-4b4f-8fb2-aac9a05dcd66",
        "cursor": {
          "ref": "79591142-5512-412f-8318-134d08cd8aa2",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6520bbbc-7e8a-4d57-bbed-68a31a5b8d25"
        },
        "item": {
          "id": "a26715d8-ed68-4b4f-8fb2-aac9a05dcd66",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2b409737-b64d-44e0-8c81-5fabdf63b372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb198721-e0cf-49ac-ade7-437f7f708903",
        "cursor": {
          "ref": "d63dda88-3833-432a-a813-61819a9f31d2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d3c95920-429d-49b9-ab42-a097865ea231"
        },
        "item": {
          "id": "eb198721-e0cf-49ac-ade7-437f7f708903",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "682ec574-864b-4f85-87c4-51d4a2cb758f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79db9b8a-083f-42dc-bd11-0be3770a7394",
        "cursor": {
          "ref": "f7f47274-08fb-425f-87b8-ce7aa4008e2c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8bf50666-97a6-4e69-94d7-d7c0efc5948f"
        },
        "item": {
          "id": "79db9b8a-083f-42dc-bd11-0be3770a7394",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3e290544-27d2-4613-82ae-a8ac48df72d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293a541f-001a-4672-bd4f-694a0911e181",
        "cursor": {
          "ref": "d9beefec-219f-4833-a2ca-c5eddda9cb3b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7be43f56-87a3-4710-94c9-8f1825bb8147"
        },
        "item": {
          "id": "293a541f-001a-4672-bd4f-694a0911e181",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3638eac8-6c60-4cd5-8587-0850ec5c996c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb2781d-5e57-4169-b938-beb4c76c65be",
        "cursor": {
          "ref": "99fc501c-eba6-4a20-a50e-32fc8e854fc0",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b11eb82e-b8cc-4fbd-9894-a3be379bdf0c"
        },
        "item": {
          "id": "0cb2781d-5e57-4169-b938-beb4c76c65be",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "54fd51a6-736e-4080-8772-020e9787ef75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ba6da1-cae7-49c2-ae71-993ad58c10d6",
        "cursor": {
          "ref": "34f4a6d5-342c-4219-957b-33bd60309eb9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e9f57733-912d-4928-849a-08d7395e10b7"
        },
        "item": {
          "id": "06ba6da1-cae7-49c2-ae71-993ad58c10d6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5c85696b-c9f2-4b1f-9d79-b30f0e53e233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e438c9-aef3-4063-92c4-a8cf8ba23471",
        "cursor": {
          "ref": "2ffd2c71-db65-4a34-a3fa-ea14ac56c1b1",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8563fa19-f358-4834-bc8e-910437de3071"
        },
        "item": {
          "id": "82e438c9-aef3-4063-92c4-a8cf8ba23471",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cecef48b-496e-46a6-aa76-d80281dd273d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10edb78-7d42-46e5-9028-c8ade00225aa",
        "cursor": {
          "ref": "e09b9e52-4835-4aef-a06e-d2e538a9bf9d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dfa6c6a3-3a0e-43ba-bf11-d247c035568c"
        },
        "item": {
          "id": "b10edb78-7d42-46e5-9028-c8ade00225aa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "36ac2649-0842-47d4-8345-b1dc5a017410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f97fb38-f7fe-41b1-bbb6-e1cb7252e23b",
        "cursor": {
          "ref": "df3afd69-66fd-4317-97a6-7465c521cc7c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6875bae6-b038-4b00-8302-4ea98b363e9d"
        },
        "item": {
          "id": "4f97fb38-f7fe-41b1-bbb6-e1cb7252e23b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "87a5a622-6676-4e09-bedd-289e5640131b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b82e81-ef2d-4ae5-a83f-c4a31a322bec",
        "cursor": {
          "ref": "083d618b-553d-47e1-8128-12e7927fdb5a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "731a6067-8da8-4026-83ea-b5b3c3577ab0"
        },
        "item": {
          "id": "d5b82e81-ef2d-4ae5-a83f-c4a31a322bec",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2b1aa583-87f6-474b-b87f-5357a3f187b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7658dec4-1287-41d2-a829-a7ad413d7c7b",
        "cursor": {
          "ref": "c1d8fd86-4bd4-418a-a074-e717911030c5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5bea479b-8615-4266-a913-04725203e683"
        },
        "item": {
          "id": "7658dec4-1287-41d2-a829-a7ad413d7c7b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4d0e89db-3aaa-4989-904c-473141768d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c408f40-174a-48b7-8bbd-6e268c09da24",
        "cursor": {
          "ref": "975532f6-0471-4b1f-b327-5937095745a7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c6432f0-d6f3-40ab-8bb1-ed3f9fe79a2a"
        },
        "item": {
          "id": "9c408f40-174a-48b7-8bbd-6e268c09da24",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "82661f87-8cbb-47e8-bec5-6c9deb8d78a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7756864d-510a-44f1-9de7-8350e0ba1e79",
        "cursor": {
          "ref": "d1a12740-c0b3-49b6-a61b-c08779d2bb60",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "99624a39-4e1b-4d9a-889f-85d4e9fdc444"
        },
        "item": {
          "id": "7756864d-510a-44f1-9de7-8350e0ba1e79",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7c2dbc74-ee9c-4a8b-b682-51821f6b213f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994bd5a2-019f-4456-9737-b27e777ac9e4",
        "cursor": {
          "ref": "858ba86a-87d1-4855-943a-62e81c21e6e7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "32ef089f-0d2b-45e1-bd83-f7c285126411"
        },
        "item": {
          "id": "994bd5a2-019f-4456-9737-b27e777ac9e4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c92f904f-f968-43d6-8253-6eaa58e9e449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6afff3-a126-43fb-8030-d19828320b7a",
        "cursor": {
          "ref": "8fc56c90-9712-4ba5-9847-e580af9328b7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "71acf0b8-7f85-4b73-b5b1-19c859ba216d"
        },
        "item": {
          "id": "cf6afff3-a126-43fb-8030-d19828320b7a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a8cfde10-d90b-4776-bd4d-4cbf441c0d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1b381f-48f4-4988-82b0-5d2d3d9d4ff4",
        "cursor": {
          "ref": "c1f7606b-8005-448b-8eac-2900e8aad3f7",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "57565c89-1988-42b7-b004-6bcc98058c55"
        },
        "item": {
          "id": "6d1b381f-48f4-4988-82b0-5d2d3d9d4ff4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8ecd8419-8134-4cb8-bfbc-28adc94f8c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb7b23c-ad2a-4a77-b194-aabb7e5436f8",
        "cursor": {
          "ref": "80362690-108f-4022-90e0-ca7f35da79d7",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ca6e7318-92e8-449d-a5c8-584f32f408ba"
        },
        "item": {
          "id": "ebb7b23c-ad2a-4a77-b194-aabb7e5436f8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f1f3f29a-cd52-48ef-89db-50f54e3b4944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02382325-3fa8-46e5-b80b-d874a96652ce",
        "cursor": {
          "ref": "3fa3c449-bc53-44ed-bc7b-fd04d10f04af",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c6ecd60f-baf9-44a0-a87d-25a6e528b991"
        },
        "item": {
          "id": "02382325-3fa8-46e5-b80b-d874a96652ce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9a784859-b07f-42ac-87ea-43b917323ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc5433-b116-4714-83d8-87997559df37",
        "cursor": {
          "ref": "34947342-0685-4249-8fa5-0907d9bd1f9a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4ec720a7-71f9-479a-ad8f-31794e7ac5fe"
        },
        "item": {
          "id": "19cc5433-b116-4714-83d8-87997559df37",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "939a1320-00f9-4029-a64e-b4696c869d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16823dac-a148-4882-a4d2-59578bc5dd40",
        "cursor": {
          "ref": "14cd13b9-4374-4671-bb37-40e62b70d5e6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4b984e82-bae6-4434-ab1d-006c4faa307b"
        },
        "item": {
          "id": "16823dac-a148-4882-a4d2-59578bc5dd40",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b4551a62-8ab0-49e1-bace-580ddaabb03f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd77e5ef-fe90-4b8d-a80c-5f36dbd0615e",
        "cursor": {
          "ref": "d6f17128-500c-4975-aed6-af9afdaef688",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f65d8a72-44f4-43cb-9cad-64a4e4ec5d51"
        },
        "item": {
          "id": "bd77e5ef-fe90-4b8d-a80c-5f36dbd0615e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "becd7ac4-5314-4852-bb5b-be57a737b141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ca2d37db-3634-4cee-b7f2-c6c1105086e8",
        "cursor": {
          "ref": "2b2322f5-e524-4c0e-8182-105ff649ec18",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e02254ff-825f-4996-804d-68ecde582ad9"
        },
        "item": {
          "id": "ca2d37db-3634-4cee-b7f2-c6c1105086e8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f63692b-7eb1-4702-8ac2-968acabc109b",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc915427-47b0-4697-ad8b-03e441e87577",
        "cursor": {
          "ref": "a66c291f-02cd-4c9d-8dd8-0937ed2dcf6c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dd747585-6f8c-4c27-bb43-3ccc90c25064"
        },
        "item": {
          "id": "fc915427-47b0-4697-ad8b-03e441e87577",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cdb640f7-e717-4288-9476-9b58bfc1144f",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0900bf9-6fad-4167-a943-9d7d4ea09f7e",
        "cursor": {
          "ref": "642a3e18-8f5a-4218-9015-7800a37b2c9d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fb2ed233-66fa-4696-8d72-6f6e59f32755"
        },
        "item": {
          "id": "b0900bf9-6fad-4167-a943-9d7d4ea09f7e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c0d66b83-eff6-4044-a110-5adbdbc2c705",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa4ba92-3381-42cd-b425-4686a705a7c5",
        "cursor": {
          "ref": "7d08cd40-8862-45ad-b2bf-cebf49f714d6",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "570414bf-290b-4960-a577-465846d2222a"
        },
        "item": {
          "id": "3aa4ba92-3381-42cd-b425-4686a705a7c5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "12680ee1-0d9f-4a10-a1df-8c13b287359b",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca21769f-3275-4fbe-b84b-ad4ee384eb33",
        "cursor": {
          "ref": "08f0f25a-69cf-48e8-b41c-61ae06fdde05",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "96058863-f502-4726-b008-a5e205f564fe"
        },
        "item": {
          "id": "ca21769f-3275-4fbe-b84b-ad4ee384eb33",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "52983dd8-292a-4eac-98d1-c2e6fe64b05d",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-17T00:37:32.489Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-17T00:37:32.489Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "99313324-44ca-463b-9ca0-3e32c7f187a9",
        "cursor": {
          "ref": "8c7ec11f-c751-4c7b-ad2b-fcd57bb8d6ea",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "78b4129b-c6a3-40c4-bbdb-e71c1820780d"
        },
        "item": {
          "id": "99313324-44ca-463b-9ca0-3e32c7f187a9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e720c8a5-bb9b-4480-97ca-317ac3badeda",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6c8f7a-1544-45ea-9b1a-2647f66c4769",
        "cursor": {
          "ref": "cc891497-4cc5-4904-b67a-7c8bb3fbcdcb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "877d5427-008a-4207-b4db-d62d7a276ae7"
        },
        "item": {
          "id": "1f6c8f7a-1544-45ea-9b1a-2647f66c4769",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cd80449f-2e30-4b52-b7c0-12c0d9f5fda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a23f61-1fa4-4d67-9339-dbd6dbd0059c",
        "cursor": {
          "ref": "9e644cb8-a213-47be-aa8b-b8c3b4785194",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "21a5df14-b167-4560-8cc5-636eddd0af50"
        },
        "item": {
          "id": "a2a23f61-1fa4-4d67-9339-dbd6dbd0059c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b2025211-9611-49d4-8438-bf3c949d0158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c72e43-9025-44c1-886a-1f06809783ef",
        "cursor": {
          "ref": "f55e3205-d362-4349-9bff-528d9b0ab2a7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ecee1172-54c6-48f1-9458-0ccb1488ee9e"
        },
        "item": {
          "id": "b8c72e43-9025-44c1-886a-1f06809783ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aad54d6f-7567-4a3c-9bfa-d843e367b204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b329ac4c-6ed8-4e1d-a6b0-9e6decab1f7c",
        "cursor": {
          "ref": "48fadbdd-9b38-4f52-a3a9-32c1fa79ef85",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c4f5d8c7-e746-43ac-8b7e-8f12a7b6d5b3"
        },
        "item": {
          "id": "b329ac4c-6ed8-4e1d-a6b0-9e6decab1f7c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e7798620-7bc3-4d2e-93b4-d241e7ec738f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26048b1c-d48c-41d8-8b9e-906dddac0b19",
        "cursor": {
          "ref": "6ede71dd-c63c-42d1-a4cb-b10c7b5d2fea",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2131f8f8-685c-4532-95cd-757297ef4984"
        },
        "item": {
          "id": "26048b1c-d48c-41d8-8b9e-906dddac0b19",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c49df1ef-2114-4e77-b3fe-3ad3a3432145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ea8e29-3c8b-4047-b98c-d67b2e322ac9",
        "cursor": {
          "ref": "6b8939a1-4514-449e-b63e-e89f72d9d2e3",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a1c46af7-68b0-4b55-8832-eb54d3d15012"
        },
        "item": {
          "id": "77ea8e29-3c8b-4047-b98c-d67b2e322ac9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "688a1459-2fa0-4a1f-9f9c-1be55c0d5f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac460ce2-353e-440a-afd2-4593066680be",
        "cursor": {
          "ref": "3d170ba5-b4b1-428d-b64e-a8741f6181de",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7d73d4b8-cd6a-4329-94cc-f71cb441eef1"
        },
        "item": {
          "id": "ac460ce2-353e-440a-afd2-4593066680be",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "853f7892-9d38-4b8b-91ae-de85cc2ca1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f413766-66d5-4e95-8584-eb02e69743a7",
        "cursor": {
          "ref": "2b8c87a0-1f59-4477-9945-69144b59477d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c87592a7-0610-41f5-b9b9-83f5fc93446b"
        },
        "item": {
          "id": "8f413766-66d5-4e95-8584-eb02e69743a7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "75a20b40-8212-4f5f-b545-eebc8f4f2272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a1b6c1-5a6b-4f92-9746-6ed9707b9a39",
        "cursor": {
          "ref": "8d1701a1-dcef-4f58-8b2f-a23a5c68bace",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "08cfcbf3-d1df-4dc0-b966-8ba30ae90fe6"
        },
        "item": {
          "id": "d3a1b6c1-5a6b-4f92-9746-6ed9707b9a39",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ef2b5d1-6843-4ab6-97a9-bd8d1e587c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a449b891-f8f0-4b9c-a6d9-cbcb78cbbd8a",
        "cursor": {
          "ref": "706f2546-c034-4a4d-ba74-df1ad6bff133",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1b7f9e4e-b537-41c4-9146-125dcd2cfe6a"
        },
        "item": {
          "id": "a449b891-f8f0-4b9c-a6d9-cbcb78cbbd8a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3cbeff47-7eb1-4518-955f-d1f97a2d7d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3289fb94-d672-491d-950e-e9cdcfb32d49",
        "cursor": {
          "ref": "39205991-e523-46c8-b6b9-f9e5ce1e4219",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fab5491d-2938-459d-a274-8091d38fe1ba"
        },
        "item": {
          "id": "3289fb94-d672-491d-950e-e9cdcfb32d49",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "920db6ac-73f3-445e-823c-4f6956a7e5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232a5b72-0df1-497b-bb0b-390605704de6",
        "cursor": {
          "ref": "4a316144-8a53-4ced-af22-dc5580ee0e50",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d3c8dd01-6c8e-49f8-a134-ef302af65069"
        },
        "item": {
          "id": "232a5b72-0df1-497b-bb0b-390605704de6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "83176375-e3a5-4529-a319-e3435c680edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0a3bad-ca6b-438e-b269-1ccef075caa2",
        "cursor": {
          "ref": "7b22da5a-d6f1-4f42-8333-6201dfa721a7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "512f9ca8-ee98-4d73-abe4-19d58a8e174c"
        },
        "item": {
          "id": "6d0a3bad-ca6b-438e-b269-1ccef075caa2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "92d7891f-9722-4ef8-9205-6f0aec65bfe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4bd9a4-6ba2-47ca-8810-012022cad494",
        "cursor": {
          "ref": "0ade7631-d13f-4f86-8e64-0c3fe2a0d40a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5c5db0d5-5ff2-43c6-aba0-ad23f3430411"
        },
        "item": {
          "id": "1c4bd9a4-6ba2-47ca-8810-012022cad494",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a795d103-c769-4f14-89ae-2e664a2d6083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c68a683-d2a1-482b-ab25-6b7a4eb8a06c",
        "cursor": {
          "ref": "5560cf90-0a7d-4dde-8abe-d2178923ff12",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2b2247b1-c485-4f3a-ab27-73a53a8c6efe"
        },
        "item": {
          "id": "0c68a683-d2a1-482b-ab25-6b7a4eb8a06c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "375f2e84-4c90-41e3-a3d9-6bd813bcc281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78626bd6-c89d-466a-9b99-c578360cd28c",
        "cursor": {
          "ref": "a7725567-3c56-46ae-86ba-edcdd7154e8b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "734277b2-6f1e-4d29-a76d-4d25e50dbb57"
        },
        "item": {
          "id": "78626bd6-c89d-466a-9b99-c578360cd28c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "78a40675-892b-4b98-9468-edb9392c6586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83ebaaa-0704-44dd-9c66-0afcf8e3e940",
        "cursor": {
          "ref": "20d09223-2daf-44a8-94cf-3b0c4dade046",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fa0b4a09-1d48-4335-a4d9-ae1bd05d9373"
        },
        "item": {
          "id": "a83ebaaa-0704-44dd-9c66-0afcf8e3e940",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "57bb697c-1dc5-4c67-8c31-20a0c28e4a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee42e7b-961b-4640-8552-6149aa979d60",
        "cursor": {
          "ref": "98219137-757d-4096-9662-f419208e525d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "34d924e7-1d97-49da-95e2-a00df698f678"
        },
        "item": {
          "id": "fee42e7b-961b-4640-8552-6149aa979d60",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "113fafb6-fdd5-4147-a6ce-812c647bb770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239066d-c61e-449c-b3af-2e09f170be58",
        "cursor": {
          "ref": "59aae4df-c540-47d2-b1f1-91f60debd8ae",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "46c1ec92-f183-407c-822f-1045bfa8fb69"
        },
        "item": {
          "id": "c239066d-c61e-449c-b3af-2e09f170be58",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d1dcd826-4b6b-4437-9546-39b66b687a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63dd79d5-e5ea-40e7-9ec0-d520dc1860bb",
        "cursor": {
          "ref": "b94e2716-1cc5-4247-b1e2-f080eb3902cc",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d3ee8cf4-e212-4488-9324-e4217770794d"
        },
        "item": {
          "id": "63dd79d5-e5ea-40e7-9ec0-d520dc1860bb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6b56d1e-8f79-4023-9982-918972f74b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c03467-bee1-4ddf-a3ba-e6e9a9a661ab",
        "cursor": {
          "ref": "3dea0744-b07e-4aa7-a6a4-0535369fd318",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b5b83ee0-1b9e-43be-9528-9809cf6c9176"
        },
        "item": {
          "id": "11c03467-bee1-4ddf-a3ba-e6e9a9a661ab",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "83475ef9-e95c-46a6-b6bf-ad1bfe060180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f73a251-2a08-4418-bbbc-fe4ec63f5f39",
        "cursor": {
          "ref": "4b8bc352-d943-4e2e-82e9-a330b9b9d735",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "72aeb1b0-8c67-46b5-acc6-6d208e06731e"
        },
        "item": {
          "id": "0f73a251-2a08-4418-bbbc-fe4ec63f5f39",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "12ec8750-09b7-4693-aae7-1f9b56eccd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b8a628-e289-4513-8e4c-4f90bbe50126",
        "cursor": {
          "ref": "f160903c-5a48-4a1b-8545-c7790ab64596",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "51f0865e-6a9b-4d40-9aab-4988dd93298a"
        },
        "item": {
          "id": "d2b8a628-e289-4513-8e4c-4f90bbe50126",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "70fb4f87-4bc8-42d6-9bd2-1c8b023a04dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64181e02-3ddc-4638-bed5-48c2cab9beec",
        "cursor": {
          "ref": "29d51875-d47a-48a2-b51e-48b989bac398",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d33413a7-83a0-41d4-bafe-a95ad04568b6"
        },
        "item": {
          "id": "64181e02-3ddc-4638-bed5-48c2cab9beec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "81904fb7-f727-4740-b55f-a5d820b92cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91bb64b-0c23-4e29-ace3-fb4af4520fcf",
        "cursor": {
          "ref": "779fac1b-8d0d-415d-9775-1d130d7e0b96",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9ee10a1e-9917-432d-bbd5-dd99c623dc4d"
        },
        "item": {
          "id": "f91bb64b-0c23-4e29-ace3-fb4af4520fcf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e130e6f0-f50e-4da7-8ee5-ea86b8c098aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee88383-b226-42c7-8454-875f4a38b218",
        "cursor": {
          "ref": "01d6d8cb-66e8-4fd8-9988-ca4a12831384",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b8eb2dfa-b3a7-4772-8c27-74a99315f9ab"
        },
        "item": {
          "id": "3ee88383-b226-42c7-8454-875f4a38b218",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cd059b30-2f97-4870-8355-8d2f0e144bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ef5226-4c86-46ad-918b-77705389d049",
        "cursor": {
          "ref": "bbb577eb-7740-4a15-9d44-d8ecfdd87377",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "70df5792-099e-4dc2-9f2f-f3f81d162a5f"
        },
        "item": {
          "id": "a4ef5226-4c86-46ad-918b-77705389d049",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "723cff9d-937b-4468-9f6a-e023bcc940be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386e25fb-7786-4798-84d2-e77cdac90bcf",
        "cursor": {
          "ref": "866debdf-6fbe-4703-a861-636a06d4819f",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "812953d6-b0ba-4011-9ca5-927c0e3167d9"
        },
        "item": {
          "id": "386e25fb-7786-4798-84d2-e77cdac90bcf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9736dd66-f40d-49af-af4f-d6a9a3e02922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdd2c1a-e7e0-47a1-92d5-0f453d3264c3",
        "cursor": {
          "ref": "288ce0dd-5753-4a99-88c5-894c5da93b7f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7eafc32a-8af3-4951-818f-c30918b33aad"
        },
        "item": {
          "id": "3fdd2c1a-e7e0-47a1-92d5-0f453d3264c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "667d22d4-3f1e-4989-8764-4f3c50482cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62695d0c-870f-4bed-8981-8387b605ad14",
        "cursor": {
          "ref": "b37a4268-fcdc-40c3-8e5c-578b996ace6f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d8a51149-b423-4420-90b2-c1074feb91d2"
        },
        "item": {
          "id": "62695d0c-870f-4bed-8981-8387b605ad14",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2675351e-b541-433a-a765-3e60d333c20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926043f9-4261-41ac-ad83-7ec7c089dec9",
        "cursor": {
          "ref": "53aed120-3f3e-4451-b07c-2980ef5a065b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "af66cab7-90b9-4726-89f7-495d1fa76468"
        },
        "item": {
          "id": "926043f9-4261-41ac-ad83-7ec7c089dec9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "213fae74-afbb-47fd-b908-a74add6858cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e86804-3a21-4ab1-8645-be36619395e8",
        "cursor": {
          "ref": "5edfb0e6-1c4b-4d16-a78a-5796d11b85bc",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "672f6b70-1783-4f65-86c5-5f00161e1fa4"
        },
        "item": {
          "id": "06e86804-3a21-4ab1-8645-be36619395e8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6a0a180f-aa73-46f7-b1c3-a9596ab884b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f83abb-4ad0-4cfe-8005-dd030d305cde",
        "cursor": {
          "ref": "49fc4bb0-da41-4674-91fc-8c509c06f551",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "919be023-f079-4c0b-bca1-9114898991fe"
        },
        "item": {
          "id": "d4f83abb-4ad0-4cfe-8005-dd030d305cde",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "95aabd8e-7e54-46be-8775-f2830266e1e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0a0c12-8d97-4c87-acaa-059993a8ed1a",
        "cursor": {
          "ref": "5d222daa-1217-4e35-81d8-2ccb2209acba",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "338ce373-09cc-4088-beae-abcdc7d452fa"
        },
        "item": {
          "id": "0d0a0c12-8d97-4c87-acaa-059993a8ed1a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ca0f82f-59fd-4754-931f-0691315422d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b275fc-8adb-4596-b145-6a8006787bdc",
        "cursor": {
          "ref": "aa578bb6-8212-4344-85a3-92d2d3a4935c",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "56714afa-3223-4462-9280-caf6a8ba15d0"
        },
        "item": {
          "id": "91b275fc-8adb-4596-b145-6a8006787bdc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "67a4c858-dc45-441b-891f-eefff672b254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2bc7c2-746e-464b-a627-fe28128f14b5",
        "cursor": {
          "ref": "6493279e-43c1-48fd-9303-b17b0a506883",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1dd26982-e0a6-402e-bb90-430cf88ea976"
        },
        "item": {
          "id": "1f2bc7c2-746e-464b-a627-fe28128f14b5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "52058eea-6b91-4486-bde9-f1d8ea93b7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190f05dc-7f3e-49cc-adca-53fc7ca99a4a",
        "cursor": {
          "ref": "374ddac8-fad2-43e1-b04e-a3d51c081417",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "90ad0e07-9372-4a79-be73-4a8e46d6e884"
        },
        "item": {
          "id": "190f05dc-7f3e-49cc-adca-53fc7ca99a4a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b5281b85-89c0-40ad-9f76-281f348094c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54395f4-18a9-468e-b805-97c95058caed",
        "cursor": {
          "ref": "f94f565a-caeb-43fb-a44b-449fe113f5da",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3c2a3bbc-44ff-4fb1-9fb0-2ea28c8c24ca"
        },
        "item": {
          "id": "f54395f4-18a9-468e-b805-97c95058caed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9f6aee5e-23a1-46f1-be32-4026db90c95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3af568-efa8-46e3-b5cf-3e281f108c37",
        "cursor": {
          "ref": "25bccec0-ad6c-4566-8599-8572246fac1b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b63e90d6-cd7a-4a12-8344-5995ef1df8a1"
        },
        "item": {
          "id": "9d3af568-efa8-46e3-b5cf-3e281f108c37",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b82f9e9e-e34b-4e03-a7c9-cb51dc5bfd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ff819a-c531-40d5-be47-8a13ecd8caa8",
        "cursor": {
          "ref": "c3b457ed-e348-4dfd-9aae-69deffc8cad2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6193c097-41dd-4a57-a2b4-7c98c955d81e"
        },
        "item": {
          "id": "21ff819a-c531-40d5-be47-8a13ecd8caa8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ef2949be-5abf-4315-a79b-27590c6ed244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672c887d-8383-464b-af8c-d0be05a3c206",
        "cursor": {
          "ref": "8fa11e76-c1d4-40f9-a57d-2a49a505e165",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3ea650ac-5e0f-484c-aa15-ba3669996b3a"
        },
        "item": {
          "id": "672c887d-8383-464b-af8c-d0be05a3c206",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bc53e336-d236-4579-acd3-32bda1fafddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588f8e35-8073-45e9-abbc-261a765033e1",
        "cursor": {
          "ref": "db10e5bb-9ae4-45ed-8dea-7a74df4cb83e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "885ce75b-144d-4725-86a9-edefb25d3faf"
        },
        "item": {
          "id": "588f8e35-8073-45e9-abbc-261a765033e1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b909fe3c-d336-4a13-b041-d74fa01f676a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ab1a47-0775-4dd1-91ab-151778598402",
        "cursor": {
          "ref": "324a2580-bd56-4d44-9dd7-7f75f8370c70",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f169bc3d-6fac-4f6f-b243-94a1b0a6a457"
        },
        "item": {
          "id": "71ab1a47-0775-4dd1-91ab-151778598402",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2b2b7fb1-58c2-4675-80b1-bdf8e99d9d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff04b1b-6384-4a75-8aa9-a0ea4b5e9134",
        "cursor": {
          "ref": "87f6987d-7e20-47f5-9a2d-f87c098c7399",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "64abf5a8-fce4-44ba-841b-bcb3da30941a"
        },
        "item": {
          "id": "0ff04b1b-6384-4a75-8aa9-a0ea4b5e9134",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9154cac7-f62c-4b7f-b7fb-55f80277b6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8c0b6e-7fe4-4e75-aac3-975803e43f09",
        "cursor": {
          "ref": "33ef9237-00c7-44f0-8232-ace406fca1e1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "931e0e8b-c4a7-402c-81e8-ef28ad1c5d0e"
        },
        "item": {
          "id": "2c8c0b6e-7fe4-4e75-aac3-975803e43f09",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "de44e97e-5366-489e-af3d-20d2d1337b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae7e529-062a-4abe-bdfd-e2f8bf42e1a1",
        "cursor": {
          "ref": "c344fd91-149e-4210-9cad-c85545a73cbe",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "51a9f499-f66a-4f64-9704-a9589e57a19b"
        },
        "item": {
          "id": "eae7e529-062a-4abe-bdfd-e2f8bf42e1a1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fa50b4d8-eaef-4f59-a07d-e47511b5e892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d4ba3d-185d-4471-be31-6392e66c2e40",
        "cursor": {
          "ref": "5e15f60b-5bcc-4b84-9c57-383f589f1584",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c34743f6-13f5-4144-b9bb-0ca5eb851c58"
        },
        "item": {
          "id": "60d4ba3d-185d-4471-be31-6392e66c2e40",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "63bbb846-614a-4d5d-a6ef-ccf58faba418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af52ec4-ec14-4bb1-bdd8-ea3c09d5fda9",
        "cursor": {
          "ref": "2a33f951-128f-4dc4-a3fe-14f79678a2a7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "660eb9d4-0f5d-4792-a2db-ae3b5e1d94e9"
        },
        "item": {
          "id": "8af52ec4-ec14-4bb1-bdd8-ea3c09d5fda9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe952d45-cc12-4f33-9585-089ad8fe8895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd99944-95ad-4643-a6a8-c0ee61df9295",
        "cursor": {
          "ref": "7e83539b-0a78-4bd5-bc7e-b87ee71c3734",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "30d7dab7-feb6-4f99-a2c4-43a88a83a790"
        },
        "item": {
          "id": "5fd99944-95ad-4643-a6a8-c0ee61df9295",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f414f651-3d33-4f8d-b0a8-839afa0ea2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be079148-925b-4fb0-b6bc-2a23cacd66c2",
        "cursor": {
          "ref": "027c3995-3521-459d-ba31-49d2b9643c9f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fe45208c-2212-4e7e-b3f6-24c3b0f8c9ea"
        },
        "item": {
          "id": "be079148-925b-4fb0-b6bc-2a23cacd66c2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b89bab27-2d02-443c-8816-5f28adacda97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b6773c-6a08-40cf-92e8-70778bee2831",
        "cursor": {
          "ref": "31a1e7ba-4493-4958-90e4-c5c9a23ea330",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4c55e575-9f96-4cf6-9aa3-7b862cad5c79"
        },
        "item": {
          "id": "37b6773c-6a08-40cf-92e8-70778bee2831",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2c851925-7476-4546-91ae-7bda9c1a1023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd7fe5a-c81f-4ef3-a7bc-ea2bbe32215b",
        "cursor": {
          "ref": "5916c4b9-2ce3-4cb7-8eee-d7aed6867a17",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2f7c182d-71e0-4efb-b8b3-6a586a0841df"
        },
        "item": {
          "id": "9fd7fe5a-c81f-4ef3-a7bc-ea2bbe32215b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ce8190dd-da3d-447b-8ac2-af88bcbec701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b423ea4b-bbc6-4946-a815-715afa5a1555",
        "cursor": {
          "ref": "ea8b7aa6-198a-432d-bbea-ded7c3c0464d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9739ec13-75d8-492b-ad92-400c44a644f2"
        },
        "item": {
          "id": "b423ea4b-bbc6-4946-a815-715afa5a1555",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b220f724-f539-4e08-b0dc-2bbb4650d708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b416900c-7e1b-495a-a28a-0db678ad8476",
        "cursor": {
          "ref": "2890fa86-337c-492e-a041-1a582adc5aeb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "908cd478-8b51-49d2-a3e8-a384bcb9ba39"
        },
        "item": {
          "id": "b416900c-7e1b-495a-a28a-0db678ad8476",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "43f41b88-f155-4ebf-a59a-7eaeb3b0fdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd978624-ac3b-4a2f-a2a3-6a76092e40ed",
        "cursor": {
          "ref": "bbd60519-9136-414b-b790-d6941599d90e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ebc6f2a6-dc33-4dc7-a478-3b435082a5b9"
        },
        "item": {
          "id": "dd978624-ac3b-4a2f-a2a3-6a76092e40ed",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0d957772-d8dc-4fcc-8510-ceabfd18272c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e053dbf-eba5-406c-af53-83a6fd513517",
        "cursor": {
          "ref": "3be66dba-46bd-4aa4-9b55-f90645a779da",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fcc89285-c714-4311-9d49-5f89b1e809e2"
        },
        "item": {
          "id": "4e053dbf-eba5-406c-af53-83a6fd513517",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1e4ee86d-fc54-4fa7-972a-70417f03d38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ac6347-4802-4227-92ce-e7fa6f49cb18",
        "cursor": {
          "ref": "d4701664-b1f9-4add-bfdf-c69eb3d3a235",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "16deb4c7-c8a4-4eb0-934f-df716e3d32c3"
        },
        "item": {
          "id": "97ac6347-4802-4227-92ce-e7fa6f49cb18",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "878f4f35-a7e6-4848-b503-042d5a13df29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068361f-0865-4cc8-8bb8-fc0c2d1f9058",
        "cursor": {
          "ref": "eeaf3219-4ce6-4c72-866b-1f755d313a9f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d5568531-3886-4271-b1d4-9f7669e08dc4"
        },
        "item": {
          "id": "3068361f-0865-4cc8-8bb8-fc0c2d1f9058",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "961ecace-d9d6-4056-ad02-58f8f42a966e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b81537a-cc22-4c1d-9d49-a382ab80f245",
        "cursor": {
          "ref": "c38e2540-ef5b-4e26-875a-31330694d927",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b95a2964-0b31-4bf7-94e8-2af2d72f1ed0"
        },
        "item": {
          "id": "9b81537a-cc22-4c1d-9d49-a382ab80f245",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fa45c0c2-17f0-4e3f-a373-4165837e38aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d6b11d-a73b-4357-bd42-662242c9febc",
        "cursor": {
          "ref": "337a32db-76d4-4490-b5ac-4fe501fabd3d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "466a49e6-28bb-4f93-ad3d-0bfb3a51bca3"
        },
        "item": {
          "id": "d3d6b11d-a73b-4357-bd42-662242c9febc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c8b8efd0-5a2f-4803-8c98-302e8f810dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc71165-c9c1-4a82-8580-9cf82171b7a2",
        "cursor": {
          "ref": "47794af7-232f-4736-b9f0-abf2866c2c92",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f9c1ffbb-6702-4418-8db5-44b8b7d71ec0"
        },
        "item": {
          "id": "acc71165-c9c1-4a82-8580-9cf82171b7a2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3fdd0543-ab47-4ded-b26f-8570fbff6bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecd1958-4943-441e-b522-92063fe75719",
        "cursor": {
          "ref": "de2c27f1-b0c5-474a-8db4-3c35a4f36def",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "752a7537-432c-4daf-9416-23ddd78baaba"
        },
        "item": {
          "id": "fecd1958-4943-441e-b522-92063fe75719",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6cc36590-0e3f-404e-a8d6-7ea6aa0c7e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15adbfa-fc78-4c65-9e46-cc32235ef3e7",
        "cursor": {
          "ref": "adcb8412-93f4-4460-a96f-1c81924de481",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8568840a-3447-437c-98f8-05d6137bd873"
        },
        "item": {
          "id": "b15adbfa-fc78-4c65-9e46-cc32235ef3e7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "442140ff-86f7-4490-8d7b-b8094fd22316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54af711c-244d-4d4c-8f75-ad9a57674cbd",
        "cursor": {
          "ref": "3ded49c4-9a2f-41dc-80b2-001a9875495f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7e86d56f-8282-4132-8037-a93282899fb4"
        },
        "item": {
          "id": "54af711c-244d-4d4c-8f75-ad9a57674cbd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "28643da2-149c-4458-9fb0-7e52d683d106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf3f1e1-5c74-4a3b-871e-8f3ae7fb0c60",
        "cursor": {
          "ref": "459ba1b4-6598-483b-8844-ad7824a17494",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f0890877-bc72-448c-b8e5-b269099abe6a"
        },
        "item": {
          "id": "5cf3f1e1-5c74-4a3b-871e-8f3ae7fb0c60",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f9de9378-f43f-499e-838c-4dd8f8649deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf0dd5a-5aff-462c-84c7-60fd8788e227",
        "cursor": {
          "ref": "e5c9dc87-74f0-416a-9097-73288e33ff0f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1f5457dd-61e3-471c-ad0e-88500e598a5a"
        },
        "item": {
          "id": "3bf0dd5a-5aff-462c-84c7-60fd8788e227",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "68c2810f-f58b-4852-91a2-85a223b66b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8cffc7-96e6-4776-9ca0-764bb9b4eb6f",
        "cursor": {
          "ref": "e0c22d3c-f8d6-435a-b8cd-e3004ac8370c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "acfe6b23-cbbd-4745-a805-1d33afa5d0d3"
        },
        "item": {
          "id": "1d8cffc7-96e6-4776-9ca0-764bb9b4eb6f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bd9a9167-87a7-4f15-9e84-5d3877a1e5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4c8c0c-7f9f-49ea-956a-dce42a5ae3b6",
        "cursor": {
          "ref": "695ed592-7292-4d82-805c-d50b0ca06719",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cdd685b7-32cd-4c5e-b75d-447d50766d5a"
        },
        "item": {
          "id": "fe4c8c0c-7f9f-49ea-956a-dce42a5ae3b6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "249a5e71-0ed8-459c-bb2c-fdcfa36217aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dce944-1fe9-4926-b2e4-4b7ef642ff07",
        "cursor": {
          "ref": "86826e77-b9ce-4563-90d0-5438463c7fb0",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4970f368-9400-45c3-8712-cfd11f5041f7"
        },
        "item": {
          "id": "60dce944-1fe9-4926-b2e4-4b7ef642ff07",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a6458863-2b56-4a28-98d8-b110d6568e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dcb207-d294-415d-b72f-c124b330a104",
        "cursor": {
          "ref": "818786ec-adbd-4541-86a4-dda7fb3c7096",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bc46455b-2247-4ae0-bd17-9655327811a0"
        },
        "item": {
          "id": "d9dcb207-d294-415d-b72f-c124b330a104",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e42b3838-5aaf-40e9-9731-6a8d116d5ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380febd4-0a25-4198-af8a-2d38499db5ad",
        "cursor": {
          "ref": "d625709d-774e-43a0-8bc0-1400b555e6bc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "805923bb-43bf-4e14-88ac-ab85ff61da78"
        },
        "item": {
          "id": "380febd4-0a25-4198-af8a-2d38499db5ad",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4618bfe9-110c-410c-97ea-fa246506cc7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5291f73-8a0d-478e-a3f5-9636c18eb906",
        "cursor": {
          "ref": "6e8c646c-d5cc-47eb-97a7-dd97abeb0803",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "17a1f521-ffbb-4678-a9cb-95e5f6e21e46"
        },
        "item": {
          "id": "d5291f73-8a0d-478e-a3f5-9636c18eb906",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "706c8bb0-5055-49d1-96c7-0c60204d7c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881db2be-38eb-4a53-a594-ddec4c33e724",
        "cursor": {
          "ref": "9779c3de-9b7e-405a-99f5-50d056b4dcad",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6049b9e1-0faf-47ec-9182-991c7b9f150b"
        },
        "item": {
          "id": "881db2be-38eb-4a53-a594-ddec4c33e724",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8263041c-153d-4359-9c86-10ddf2eb747d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2876e720-030b-47a8-a0c9-2c673b0db91d",
        "cursor": {
          "ref": "b32c6061-3242-4046-b43f-481643e9b918",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "19ba6e04-3638-4e26-a957-9dbeae163db9"
        },
        "item": {
          "id": "2876e720-030b-47a8-a0c9-2c673b0db91d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "37565121-8e8c-4626-99ed-3b21c2069534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79e6bb5-ed45-4493-9852-463c86d7a3f8",
        "cursor": {
          "ref": "3a998bac-0360-4df4-93f2-69d784c8dcac",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "184eaef5-ebcc-4504-b085-9fb03ea74302"
        },
        "item": {
          "id": "d79e6bb5-ed45-4493-9852-463c86d7a3f8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f02d49eb-7f90-40b2-b68d-7563ce3b18d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b759af7f-c682-48dd-a919-4dd40318423f",
        "cursor": {
          "ref": "4027909c-c0ca-4736-9157-4fb57b353bd6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f539b56f-5970-4731-8826-10675bbd378d"
        },
        "item": {
          "id": "b759af7f-c682-48dd-a919-4dd40318423f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8c65e5b6-eb34-489d-a530-b2e8b7c76b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c8076b-1c0c-46cc-8105-2ecdc235ba76",
        "cursor": {
          "ref": "4c80f826-da18-4823-b417-c9543f5975f1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e2ef02b8-b5a7-4a7d-9cdf-15902bc99547"
        },
        "item": {
          "id": "01c8076b-1c0c-46cc-8105-2ecdc235ba76",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "59eb970d-0e08-488d-a5a6-fb1754f61632",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f2f8d221-2533-4944-a5af-012325ef3580",
        "cursor": {
          "ref": "0fd27833-e620-4a84-8cdd-0d2998bacbd6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2e015141-9d59-43d5-b717-1270b265c0ca"
        },
        "item": {
          "id": "f2f8d221-2533-4944-a5af-012325ef3580",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fdb900eb-70b9-4f1a-8545-6b8debb8f93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61083370-cfe4-43f9-bdfa-520b0904ac2c",
        "cursor": {
          "ref": "bd044909-199c-4326-8e0d-4acf7ed7f948",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a4ff3b03-a38c-44fc-a9c6-9f46ce56aa89"
        },
        "item": {
          "id": "61083370-cfe4-43f9-bdfa-520b0904ac2c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1464cd43-89e8-495d-b6c9-2fc01c7635fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21722f13-37fd-441f-b876-33ee9054e9c5",
        "cursor": {
          "ref": "a0294548-50b4-470a-b250-2b1c734f9b18",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "848b086f-b653-4c37-bb1a-1ceb1a6e54f8"
        },
        "item": {
          "id": "21722f13-37fd-441f-b876-33ee9054e9c5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4f23027d-9f9d-484e-ab43-2092744701f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50c6366-76b4-48cd-9313-d7d1c156e33a",
        "cursor": {
          "ref": "40a8cd2c-f471-45a0-bd91-9ba49d31f9fb",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "30316a34-942d-4313-9301-84e2d23af866"
        },
        "item": {
          "id": "d50c6366-76b4-48cd-9313-d7d1c156e33a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "25a7d1d5-160c-4155-9b85-2ae4489bc857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799012af-2810-43db-b690-3f55aff9e919",
        "cursor": {
          "ref": "ccc7ba24-8a80-4038-85c6-7573e2881104",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "52803bad-f6f1-4a8a-a9b9-e2f748096095"
        },
        "item": {
          "id": "799012af-2810-43db-b690-3f55aff9e919",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "244796bd-c2d4-4415-bef7-892f3147a03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044a4bd2-07cf-473d-8235-9bf0f1f782e2",
        "cursor": {
          "ref": "98790c9e-ae15-4b6e-96c1-b2078bbd4cca",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a32ff5fd-f856-4afc-a440-3d1d148e9b18"
        },
        "item": {
          "id": "044a4bd2-07cf-473d-8235-9bf0f1f782e2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d45912c4-583c-48f2-afaf-cdb01c9f8792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d785bd65-389c-4b37-94a0-3c59f46d7abe",
        "cursor": {
          "ref": "7dd61374-2157-4706-b550-7d69797d6f70",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6e3edb2c-16c8-4dbc-9982-2dc068926dcc"
        },
        "item": {
          "id": "d785bd65-389c-4b37-94a0-3c59f46d7abe",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "116d1d2d-e386-4af1-b954-d9ff04f4efd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba538e5-c3c5-4c26-9eac-f79211aeb0b1",
        "cursor": {
          "ref": "1e5388fb-c30c-40f0-a451-80811eb2f47b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d5c874b6-f318-4f86-8ab7-cb2849556298"
        },
        "item": {
          "id": "fba538e5-c3c5-4c26-9eac-f79211aeb0b1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8f481750-ce74-4a49-ab86-f6d1b0670778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ea618b-768e-461a-8b6a-0fcc40ec82f1",
        "cursor": {
          "ref": "70e8b90d-5f91-4948-adab-7dffb0f0ef67",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b7cc6573-eff9-47c6-ac77-b50619b3d9ad"
        },
        "item": {
          "id": "08ea618b-768e-461a-8b6a-0fcc40ec82f1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9899d397-93f6-468a-91f8-2110cf567489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634025a3-d792-4d88-b313-e9964d67b01b",
        "cursor": {
          "ref": "144d7fab-badc-4db5-bfaa-696ae824fc33",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "63813f0c-b778-4340-acaf-177ec5b146cd"
        },
        "item": {
          "id": "634025a3-d792-4d88-b313-e9964d67b01b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3e82983b-aeb4-4ce1-adf1-ae0b0aeda2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8841b4d0-86ab-4f76-bbf6-13cc1fe388fd",
        "cursor": {
          "ref": "da9257e4-af0d-44a7-af3e-65de7a273e80",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4e531400-5001-49a6-9841-7bacfe2b7733"
        },
        "item": {
          "id": "8841b4d0-86ab-4f76-bbf6-13cc1fe388fd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "13526a70-cf98-4365-b4e5-40ac90cf2853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5020ec26-039e-430a-a0cc-ea9f1c37e302",
        "cursor": {
          "ref": "889cf8b0-8f7b-41b8-8512-92138e62e40b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "73e3e63f-29e2-4931-bbee-26a369f978fa"
        },
        "item": {
          "id": "5020ec26-039e-430a-a0cc-ea9f1c37e302",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a7d17ea-c164-432f-b22d-a03f7c574f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9e80b3-208a-4e65-a262-5293ca51aaf4",
        "cursor": {
          "ref": "526f5bd7-6863-4a19-b0f3-92b2f30f0813",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e6ac395d-1058-4e1f-8e81-8b783f227cbe"
        },
        "item": {
          "id": "1d9e80b3-208a-4e65-a262-5293ca51aaf4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5296c267-fb6c-449a-952b-42c8aa449ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80042ac-a3dc-44ea-8843-d34349c89d01",
        "cursor": {
          "ref": "c3b2a58f-9b79-4aed-9b4b-5461310c6bf0",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ed0af844-5139-4196-83bb-29418ff43c61"
        },
        "item": {
          "id": "a80042ac-a3dc-44ea-8843-d34349c89d01",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e436d887-2728-4f15-adb9-511cbeb63d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bbc46e-b926-4ddb-b6fc-94ed91ff7e7f",
        "cursor": {
          "ref": "0cd64130-338d-4eee-8a21-944f6de2d55e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "aac5fd96-02ac-4f53-9dc9-8f3a8c64f6ad"
        },
        "item": {
          "id": "59bbc46e-b926-4ddb-b6fc-94ed91ff7e7f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "36799bab-45ca-4a84-a709-c60468b952bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a3a188-b955-4771-b8f8-8fa8ce9de5d5",
        "cursor": {
          "ref": "d83974f1-27da-4460-ba5b-f0144e39a0c7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad1f73f3-585c-4856-a976-ef85bc8ccf69"
        },
        "item": {
          "id": "12a3a188-b955-4771-b8f8-8fa8ce9de5d5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e3fe1979-9e7c-47b2-b2c0-d4c27a1af197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e9568d-216a-4c08-a059-bba7e595a06d",
        "cursor": {
          "ref": "b6844531-fffd-44de-9477-c13f223f351b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5eb96ac8-1edc-4f60-919b-17ccff55ae8c"
        },
        "item": {
          "id": "73e9568d-216a-4c08-a059-bba7e595a06d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d679f00c-f65e-4e87-9c92-e35179fc12cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c450d48-6b79-4a50-8a96-949436282f28",
        "cursor": {
          "ref": "852ddebe-b675-43df-a9f7-c2e89c30305d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b57e9dac-81be-4dc6-a4e0-24a4d8e150c4"
        },
        "item": {
          "id": "8c450d48-6b79-4a50-8a96-949436282f28",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41711ddc-3b2a-4dc7-83dd-333ce17339b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad52acd-5442-4ba0-ae2a-c772dabe32cd",
        "cursor": {
          "ref": "4758e1c9-bf9d-4ffc-a8d9-4f763d0d210a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "199b7cf1-cc94-4b0c-b3fa-df4bfde756fe"
        },
        "item": {
          "id": "5ad52acd-5442-4ba0-ae2a-c772dabe32cd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4f56d836-5f54-4535-a81a-17b69494367c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dc3471-7684-4856-b5d6-60aeaf5ce790",
        "cursor": {
          "ref": "7a5b9f20-5d34-454d-be86-d3ea8727a5e7",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8129e8e6-b74c-47e1-8e05-1803d04619cb"
        },
        "item": {
          "id": "03dc3471-7684-4856-b5d6-60aeaf5ce790",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c89bb2a1-2c0f-4b6b-9e95-80ee7f920e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f08a7ad-f2c4-443f-bb19-a89887d5f600",
        "cursor": {
          "ref": "82b8b041-1d0c-4d39-97e9-d7c0834cdd7a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7aa5ec4a-2f23-4c1c-8d46-2e73794966dd"
        },
        "item": {
          "id": "9f08a7ad-f2c4-443f-bb19-a89887d5f600",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "622ffc73-345f-4c32-bd18-d1128efe6d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9953590-9432-492c-82b9-7913028d9830",
        "cursor": {
          "ref": "458a55cd-ff2d-45f3-8c9e-a880bd8a7fba",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d7a7a847-f121-45d1-b5e3-6c14d9a06096"
        },
        "item": {
          "id": "d9953590-9432-492c-82b9-7913028d9830",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "08f0175e-2cfd-40d6-8790-df9bd312ffe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4c95c5-9312-45b5-ab2b-48d82e62af63",
        "cursor": {
          "ref": "d70d45bb-69d9-48ff-8433-84084f6374de",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "608bfe64-d46a-4d4a-b4e2-c2b07c6cf8a5"
        },
        "item": {
          "id": "5f4c95c5-9312-45b5-ab2b-48d82e62af63",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c560c2e5-31f1-4fc7-9204-d449b7d26738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2a276e-6ece-4561-9f23-f645cefd5b0b",
        "cursor": {
          "ref": "f461c6ff-c868-42a7-9e32-e503e1d0f3fb",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b0f5793d-1341-472a-a985-05f9c353f793"
        },
        "item": {
          "id": "3c2a276e-6ece-4561-9f23-f645cefd5b0b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4878e863-7372-4bb0-ad71-ad39277b4978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e13d030-6670-4a34-b2f7-8c791397634c",
        "cursor": {
          "ref": "6839208a-3fa5-49ce-8d8a-cea17caef513",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9487752a-737e-40c6-8a10-e6eedfb20367"
        },
        "item": {
          "id": "8e13d030-6670-4a34-b2f7-8c791397634c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a2264ef6-87e2-4252-83b9-1b48e4001ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4808ba3c-6dbd-40e2-a7a5-e11b61ccd138",
        "cursor": {
          "ref": "984807cc-07af-4de7-947e-a050e976bf04",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "16cdbc9a-50e6-45e4-8040-f91b2915da85"
        },
        "item": {
          "id": "4808ba3c-6dbd-40e2-a7a5-e11b61ccd138",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a468fa44-f42b-4d61-a832-e9c384ae4042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a3a1b4-b39f-4755-9c61-4a9277b3e698",
        "cursor": {
          "ref": "56534dca-9ff5-43ca-a92d-3e520cd11f5c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cb50f7f9-7250-486d-b53f-3719ebaa0959"
        },
        "item": {
          "id": "78a3a1b4-b39f-4755-9c61-4a9277b3e698",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e121f088-6a00-4746-9402-4e5b9f2f1b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805fb077-a2f6-4df5-8723-1e83f1a0b77f",
        "cursor": {
          "ref": "844556f3-3f79-4ca1-abce-5d8bd0cc0c4d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cc599aa9-f096-480c-8e45-dbb308a1d1ba"
        },
        "item": {
          "id": "805fb077-a2f6-4df5-8723-1e83f1a0b77f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "23c428ad-589e-4b7a-aa3f-cbddc0aa48d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e82b40-f966-4ccc-a340-328bbd01f08a",
        "cursor": {
          "ref": "d5899491-053b-40ba-ae00-8c4fdde306a0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe4d38e4-b2af-4a5c-ae51-790d624f8e9c"
        },
        "item": {
          "id": "57e82b40-f966-4ccc-a340-328bbd01f08a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "efb9fe93-3b9f-4fa0-9038-5072165473a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1167abe-3293-4a32-957f-c9e81b54ea66",
        "cursor": {
          "ref": "95b6b096-e7b0-4654-96b7-7fefe97fd760",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "41038c3c-9903-4a4e-a877-63b5c42928dd"
        },
        "item": {
          "id": "f1167abe-3293-4a32-957f-c9e81b54ea66",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e9e94a3a-ff96-4037-9507-d12d90d02e33",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5c2bda0a-a6d0-42af-a535-7b18c44884e4",
        "cursor": {
          "ref": "223d3a1a-3ba8-4fb4-9e3b-35aa35c08d7a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0458933e-7a83-4ffc-8d3f-9cfa040e26e4"
        },
        "item": {
          "id": "5c2bda0a-a6d0-42af-a535-7b18c44884e4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cb465f77-77b3-4853-8241-e94ffb850061",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "54c84092-4add-4bed-a455-f50476ccf5c5",
        "cursor": {
          "ref": "fff01fd2-abee-49b1-a315-00f2a6bbcd6b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9920c790-77e1-49b4-a290-ab7529fb9a77"
        },
        "item": {
          "id": "54c84092-4add-4bed-a455-f50476ccf5c5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3e020ecc-ec89-4cc6-8bc8-0b563eccb487",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2b17e663-35c4-4c1e-b479-e18ad866fde4",
        "cursor": {
          "ref": "33eb986b-ac10-4c80-8d42-56bd73f8b96f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "91624414-d057-42e7-aebd-b8414d88b66f"
        },
        "item": {
          "id": "2b17e663-35c4-4c1e-b479-e18ad866fde4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7dba2dc1-8bae-4e8f-9a5b-786b83a32b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1eb401-5a9a-4d45-b4e2-23c1b1b11a3c",
        "cursor": {
          "ref": "18c32499-7e93-4b6e-8909-fcd962c2a2aa",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e340548f-ecb8-4d2e-b615-e0755facb511"
        },
        "item": {
          "id": "ef1eb401-5a9a-4d45-b4e2-23c1b1b11a3c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "08d18362-0fa5-4831-95c2-7085c9a9bcab",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e1e77d66-c7d7-41f5-bff9-d0c62620d5cb",
        "cursor": {
          "ref": "cb9c96de-d9df-42d1-ac1f-bde8b1d4069a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cfaee003-961a-4f24-8528-3dfa5104bf7c"
        },
        "item": {
          "id": "e1e77d66-c7d7-41f5-bff9-d0c62620d5cb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "73425106-46e5-4b6b-8f48-2135a7bbe20f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "09bed55a-aa1f-4ef8-a069-fd16c8313958",
        "cursor": {
          "ref": "9f98485a-ec2f-4c02-9b1c-5bb7935ad5a3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0b22ae27-6b04-495e-b70d-fa7c11bffea2"
        },
        "item": {
          "id": "09bed55a-aa1f-4ef8-a069-fd16c8313958",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0e4cb7bf-b2b3-466e-bfef-4e63a01aaada",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f4bd8bca-9b61-4488-8e80-1565969615eb",
        "cursor": {
          "ref": "01776705-a1cc-4885-ba97-1d17ed3ddc34",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "90f0c30f-f372-4847-9657-b926d65633f7"
        },
        "item": {
          "id": "f4bd8bca-9b61-4488-8e80-1565969615eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "11535a1e-37e0-438e-8293-9b03d8b2cde3",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "644f02fd-86f9-4c99-a556-9a2773bbec46",
        "cursor": {
          "ref": "a5308713-e588-4ff6-900e-35c667fb1248",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a4fa7165-0b7a-4f68-a49e-284bfa87f385"
        },
        "item": {
          "id": "644f02fd-86f9-4c99-a556-9a2773bbec46",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "53432db0-60cf-4a11-971b-88be02e50127",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ec276c15-adad-410a-ab0d-aa75fd62a3b6",
        "cursor": {
          "ref": "c2ae974e-a74c-4e9f-b071-00a9e1defdde",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6905c3ea-677f-4615-9fee-a8f857f84b2f"
        },
        "item": {
          "id": "ec276c15-adad-410a-ab0d-aa75fd62a3b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39b45127-2d57-4e94-9f4a-c2d47407eaa8",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3f5eeb50-6ac5-409c-bb5a-fea0b08ce74e",
        "cursor": {
          "ref": "a213793e-3023-4713-9438-1594f1155dc5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "814f34b6-f645-40cb-9f7d-3b2e782e50e1"
        },
        "item": {
          "id": "3f5eeb50-6ac5-409c-bb5a-fea0b08ce74e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ccf5d5a1-0805-4b4e-b731-afb5638f0967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292a2587-c058-4493-952f-2a066decc610",
        "cursor": {
          "ref": "be6a98bd-af1e-47b3-b6c8-9fa10ca6fa15",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4362f303-ec0a-4e4e-b73c-cec400790ff3"
        },
        "item": {
          "id": "292a2587-c058-4493-952f-2a066decc610",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7f29f8fe-b097-45d0-b41a-49152fd70fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef75fcb-1030-4487-9b22-d605c12d84f0",
        "cursor": {
          "ref": "5563c6e1-1634-4760-aef8-39c7cac2f0ee",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "375f6dde-71bc-4bf3-b1e8-195f022d7e92"
        },
        "item": {
          "id": "bef75fcb-1030-4487-9b22-d605c12d84f0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e52e469a-2bfb-46ef-b467-da4860dee799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee13e6ac-633a-4fc0-87b3-1325307a1cd4",
        "cursor": {
          "ref": "e21c8690-de50-4a97-b9bf-9cee21a56f63",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bf9fc6f5-70ed-4938-892d-68bcade7b65c"
        },
        "item": {
          "id": "ee13e6ac-633a-4fc0-87b3-1325307a1cd4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "acb9fb14-12cc-4148-aab6-3bdd78003b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaf4734-94b8-47a2-887e-810d08da0f7c",
        "cursor": {
          "ref": "ee680bbe-83d5-4d8c-a97f-6ba5033520c7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "411e1b4f-7e25-461f-b501-fd238d1eba28"
        },
        "item": {
          "id": "7aaf4734-94b8-47a2-887e-810d08da0f7c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6a19655c-f2e8-4605-8c2a-c19139c38604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5912d46-c1ad-4032-ba18-d1bf30101d07",
        "cursor": {
          "ref": "a1d64848-c784-4ba7-b7b1-ac34711a628f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "67f3dfb0-680c-4a0e-ab7b-afbc9620ff79"
        },
        "item": {
          "id": "b5912d46-c1ad-4032-ba18-d1bf30101d07",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5c973e56-600f-4973-ad34-6547172f4369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b17ab34-76ba-4326-adef-a94bf2aba7f4",
        "cursor": {
          "ref": "7a9d4b30-a553-49f5-89da-a0befa95ff5a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "38e8d0ee-6525-4718-8855-5253b18d5719"
        },
        "item": {
          "id": "5b17ab34-76ba-4326-adef-a94bf2aba7f4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5f148dce-25cb-48e6-b6d1-d9f5c54901d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445c80b4-d239-4dbe-97d0-ecf4f9ab45dc",
        "cursor": {
          "ref": "9ebaf003-09c0-4aa7-872b-3297e7b12fd2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "310d0b4a-9800-4961-9c03-58a5a29c438e"
        },
        "item": {
          "id": "445c80b4-d239-4dbe-97d0-ecf4f9ab45dc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "228a6aff-0a7b-4f33-af84-73f2721b4ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717b86a4-5f36-4d3b-b24b-387fd628998f",
        "cursor": {
          "ref": "2a013bf4-4c39-4bb0-b493-8ed6cadd8288",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bedc02cf-4116-47f5-92bf-15ea0f39b2f2"
        },
        "item": {
          "id": "717b86a4-5f36-4d3b-b24b-387fd628998f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "63ae0e47-235d-4404-b000-c6c3c6a90c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ceceb3-0153-4141-906e-d44cdf70c86f",
        "cursor": {
          "ref": "d8976245-5bac-48f0-8bb4-3ced4c88c85f",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "15f98e10-a063-4c7d-92d8-d0c31087c8f3"
        },
        "item": {
          "id": "e8ceceb3-0153-4141-906e-d44cdf70c86f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "812afa5b-23d2-4265-ac12-8476cb7e68b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a47471-6263-4e72-b9cc-f8aceb27eed4",
        "cursor": {
          "ref": "9667dfb0-5cc2-4463-9b31-0e90855a9f4f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7a5c8f2b-f307-4018-b1db-088f215cd744"
        },
        "item": {
          "id": "32a47471-6263-4e72-b9cc-f8aceb27eed4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9ad5e889-b15d-404f-9ea3-25e8c769dd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca12548-97e1-4da1-a0ad-010066240a82",
        "cursor": {
          "ref": "dd464da9-6684-4084-a060-c1213d75bb07",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0e2798ec-4543-4b21-a395-dae6e21871ab"
        },
        "item": {
          "id": "eca12548-97e1-4da1-a0ad-010066240a82",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1532238b-672c-4307-874b-5e4a57408eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273ba7ad-2840-4ba1-b6a9-bdac15284980",
        "cursor": {
          "ref": "71b482ac-d3ed-45b4-ab7d-6bbed5b57c58",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b68a8f9d-7b78-4d7b-9146-fd6b370c25a8"
        },
        "item": {
          "id": "273ba7ad-2840-4ba1-b6a9-bdac15284980",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6416445e-01de-4bc0-8e52-a03e00910c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cdf2e9-278c-470f-95a8-fd5bdcb1f0bc",
        "cursor": {
          "ref": "dfdd9e72-84e5-463b-b5da-9e231ff4b62e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "762b2f43-8bf3-4cfe-825b-f877bb46f120"
        },
        "item": {
          "id": "e6cdf2e9-278c-470f-95a8-fd5bdcb1f0bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e5e97c25-598f-481b-b7f4-c9e37694f9ad",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "580eea1b-05a9-4f08-a20a-c5f09f39e594",
        "cursor": {
          "ref": "4b1d14a3-f080-4574-aa8b-638f6f5da60c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "87a1136c-9be5-4fe8-8ae3-7edbcb49db33"
        },
        "item": {
          "id": "580eea1b-05a9-4f08-a20a-c5f09f39e594",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b4bdaa0-e7d4-40c3-971c-e4156334590c",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0b21ccaf-db42-4032-b2f7-a93f730ee335",
        "cursor": {
          "ref": "f17057dc-26ea-488c-891a-d3b6fe005725",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "10866d4f-1094-42a1-b6e3-63cb63b7a583"
        },
        "item": {
          "id": "0b21ccaf-db42-4032-b2f7-a93f730ee335",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "55ba5f6a-ee93-4e7b-bf19-e5115e55a9e9",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a80c9bd6-9d47-4dc8-92a8-b6822fe3e187",
        "cursor": {
          "ref": "4b8ffdb3-3dd1-4cbe-b624-b72fb7ad7a42",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c2575d4b-c1bd-42de-9917-3536428e908c"
        },
        "item": {
          "id": "a80c9bd6-9d47-4dc8-92a8-b6822fe3e187",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d0d04dba-4ea0-4e0a-bda6-c299e319cfab",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9b9f5a59-124b-4480-8595-629f751bc0ce",
        "cursor": {
          "ref": "36a3b265-f1cb-4a49-af1a-5e99d1c94a2c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3ed8b341-b847-45f6-989f-20ec6b65d631"
        },
        "item": {
          "id": "9b9f5a59-124b-4480-8595-629f751bc0ce",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0a6397fe-af9e-44f6-ac63-a3194834bc83",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d862a116-6b3f-467c-9f6a-0dda5389c150",
        "cursor": {
          "ref": "15836b11-42ea-428b-bd94-73827c2ff5fd",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "00f7d9d5-38d1-49a9-bfd4-47c83ad113b0"
        },
        "item": {
          "id": "d862a116-6b3f-467c-9f6a-0dda5389c150",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0fb48969-4f8d-42b7-b6ef-dfa05d01b882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11af5ff8-475e-4222-ab6d-ed3a2aa4821f",
        "cursor": {
          "ref": "8dbf0a06-3746-479a-8a08-f80b2b81dc64",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8ecf8151-b83c-4179-96f7-ab7bb326f52f"
        },
        "item": {
          "id": "11af5ff8-475e-4222-ab6d-ed3a2aa4821f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "48b9f230-934c-4da4-8e01-f1c9a24dede7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751b4f3e-e52c-4c4f-9d33-4fec45c5423e",
        "cursor": {
          "ref": "253a9a2d-8db6-42f4-a08c-e1885ac382b2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "470482a4-2adf-4e47-87a1-b3b12ae11359"
        },
        "item": {
          "id": "751b4f3e-e52c-4c4f-9d33-4fec45c5423e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "83eafb5c-aa23-4cd4-82dc-e5c2c043f006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa21ddb-4a9c-482c-a008-5a8ab12c3a92",
        "cursor": {
          "ref": "54e7f686-d071-4c9a-89d5-a080b9996882",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7241e8c-f5de-4175-ac02-8cd9649e7906"
        },
        "item": {
          "id": "baa21ddb-4a9c-482c-a008-5a8ab12c3a92",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3add2fdc-72f1-43a0-8e8d-35b0c16dfe2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3033d8f-221a-4e9a-a9b6-7ad86085524f",
        "cursor": {
          "ref": "714e365c-80f2-483f-9514-b6dcd5c532a5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "41cbb1e0-838d-481a-9e6c-3f6d40c08228"
        },
        "item": {
          "id": "d3033d8f-221a-4e9a-a9b6-7ad86085524f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "60292639-d711-4a61-b28b-df54aab166cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4b2e2f-6b6c-4d87-b6cd-c44fce6f0a64",
        "cursor": {
          "ref": "1dcbfcc0-e4ba-4b1c-a00d-2ddf693af8dd",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d8192b21-af2d-4ade-a27f-d729ac1e8c27"
        },
        "item": {
          "id": "1d4b2e2f-6b6c-4d87-b6cd-c44fce6f0a64",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4decdfcf-061e-4c7e-9393-541f8e0f7ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887af399-437f-40f1-a2b9-9df349111c10",
        "cursor": {
          "ref": "b3c25982-3c92-45e4-851a-624735eb475a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "57a7f9bb-cf97-4753-9cdd-8b95ab4f1837"
        },
        "item": {
          "id": "887af399-437f-40f1-a2b9-9df349111c10",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f051a1f-844d-4f84-8588-629be495424a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9775ae-db28-43d1-b6ae-8a7e4f776871",
        "cursor": {
          "ref": "2344ef61-a7f0-45e5-b014-05db35b945a9",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "54e7d176-8fba-41d9-8f91-124b0e411617"
        },
        "item": {
          "id": "cb9775ae-db28-43d1-b6ae-8a7e4f776871",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c060cd1b-960d-47e7-bd05-0f830e32e270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53adbfe8-3927-49fc-9432-0168a8b9e2bd",
        "cursor": {
          "ref": "6f714056-e147-415d-98e9-70ae13430397",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c9963660-d17e-4809-9b8d-a8259ac55c2c"
        },
        "item": {
          "id": "53adbfe8-3927-49fc-9432-0168a8b9e2bd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "13198695-6dcc-4f2b-802e-246690105421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7449541-c52f-4a69-9561-6b969cbc864b",
        "cursor": {
          "ref": "063f821a-8e75-4a16-b751-a990994e0315",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1bbf730e-2f00-4fdc-bc35-1465f7e0b9e9"
        },
        "item": {
          "id": "c7449541-c52f-4a69-9561-6b969cbc864b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8d956e41-7c05-4af4-8838-3eb2b189329d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1bafbde-efde-4f7b-9ae3-93701abd727b",
        "cursor": {
          "ref": "0443e40b-9cb5-4933-9637-a31ddb40fde2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0f352b60-9c6d-4a22-9cf4-3dcd2eb8e147"
        },
        "item": {
          "id": "c1bafbde-efde-4f7b-9ae3-93701abd727b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d08a1efa-4266-4762-886c-d07940865e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9f78d1-9f7e-4652-8283-927a268e30d5",
        "cursor": {
          "ref": "934ac945-7174-4734-92a8-06e620b7e335",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7dd6a59b-5514-465a-bc50-9a675381cfd5"
        },
        "item": {
          "id": "db9f78d1-9f7e-4652-8283-927a268e30d5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a4a2a47f-593d-4319-a4f3-fa63b76d4285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4d235d-6212-4112-b5e2-a83b4d8d66cf",
        "cursor": {
          "ref": "abaf9de3-8930-485d-abfc-e40348c9780e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a9c29641-0406-4981-bb6c-7ca5989aeb4b"
        },
        "item": {
          "id": "aa4d235d-6212-4112-b5e2-a83b4d8d66cf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9c68923e-e22f-4b9b-a0a7-58fa53e7b5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eda228a-f08e-435b-9edb-72a66c3a2d40",
        "cursor": {
          "ref": "3631c530-b773-4ebf-97e4-191864245adb",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d86e1a46-9044-4044-a020-4854a9c389ce"
        },
        "item": {
          "id": "8eda228a-f08e-435b-9edb-72a66c3a2d40",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cae32868-9fd6-40d0-9756-e29f0573b875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1774b31b-e1ef-4550-bebd-f4d35bc2a091",
        "cursor": {
          "ref": "90b61421-a888-4d8d-a679-9c5085f03b35",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "847452b6-3621-4a1d-a004-e470257eae55"
        },
        "item": {
          "id": "1774b31b-e1ef-4550-bebd-f4d35bc2a091",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "49aabc13-c7eb-4db4-a513-e294be315492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847ee63f-1ff7-4d5c-990b-455e172aff4f",
        "cursor": {
          "ref": "5eaa1c9b-4380-42f9-9b7c-e78bcd99b7f0",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8f41077f-a532-43db-b377-0063d73a1de4"
        },
        "item": {
          "id": "847ee63f-1ff7-4d5c-990b-455e172aff4f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "96c541ff-1f34-4186-b263-1bce8e883f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c1dc18-2e25-4767-8e18-85c5b61cc31d",
        "cursor": {
          "ref": "9bee3f06-a98d-4323-889d-0e11ba5f5930",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ad998482-5d8a-4a8e-9b33-0ecd2d4f5ff3"
        },
        "item": {
          "id": "28c1dc18-2e25-4767-8e18-85c5b61cc31d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aaa3efef-12d2-40be-8f21-99ce7d2f21c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702e2606-7cd7-422d-b4d7-c6348f7b9a29",
        "cursor": {
          "ref": "c66c2604-7ab2-4638-a522-14474b7aebe1",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e2a4f52e-fe00-4ba8-b030-82dceb602b5f"
        },
        "item": {
          "id": "702e2606-7cd7-422d-b4d7-c6348f7b9a29",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cf00b129-0b3e-4f02-aa49-0488a14a2fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b451a780-5739-4353-a8c0-944382af6830",
        "cursor": {
          "ref": "8d7f2fd2-a2df-4268-99c7-b22b2400fdae",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "09357f96-3745-4c28-85f8-641d705b8da1"
        },
        "item": {
          "id": "b451a780-5739-4353-a8c0-944382af6830",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7515bba9-d857-4a41-a98b-6a72a243598e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331f2108-effe-4399-8027-03af33cff588",
        "cursor": {
          "ref": "898db4fa-6bef-46a7-9eab-c89ca38db5b3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4c1e0cd5-efb1-4262-a477-9ea4b7d8eccb"
        },
        "item": {
          "id": "331f2108-effe-4399-8027-03af33cff588",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "402174b4-1d3d-4bd8-815a-c270b8f05403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc42a36e-6817-448e-a495-cd18eb3f56f5",
        "cursor": {
          "ref": "4ed50f03-11b2-44d1-930b-98eeef0fbeb6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9dc94ad-422e-48a4-87c8-942cc7eec2b8"
        },
        "item": {
          "id": "dc42a36e-6817-448e-a495-cd18eb3f56f5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1c10d583-c043-49ec-a2d6-ce60e148eaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66ecfe5-9f5c-4f41-92e5-2cf4a6eaa3f3",
        "cursor": {
          "ref": "bef820ac-482e-4df3-83da-d24ee7d57477",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0f6ac0fa-37ad-4e67-911a-5210ebf1df1b"
        },
        "item": {
          "id": "f66ecfe5-9f5c-4f41-92e5-2cf4a6eaa3f3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0d9f5122-7760-4371-b91e-537ac119ea66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7113ab43-f667-4345-80af-c1f162ad512d",
        "cursor": {
          "ref": "7912f1cc-8271-4185-9e52-d2904bee5c75",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bd846a7f-5398-47f4-a1b4-7296c6aa71ee"
        },
        "item": {
          "id": "7113ab43-f667-4345-80af-c1f162ad512d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cfa2b370-e5f7-4a90-9e9b-cd248141d275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd8e7f2-294c-4b6b-8be5-91717f8b1423",
        "cursor": {
          "ref": "d150421c-5d87-4daa-a1a6-0dc45e51dc0b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4484f2d4-4e39-4459-a65f-971c2f769097"
        },
        "item": {
          "id": "fcd8e7f2-294c-4b6b-8be5-91717f8b1423",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "09b56d58-519f-47ae-8cbe-a8d7c1f98d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caca03c5-6aab-42b6-b477-17e12d90c2f4",
        "cursor": {
          "ref": "6c676109-66ee-4583-904e-8e954f51ee29",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b1e2f24d-1dd1-4f75-afea-b03c5b6dd9fa"
        },
        "item": {
          "id": "caca03c5-6aab-42b6-b477-17e12d90c2f4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a6846920-672c-4d87-8dfc-e42bb1f299a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc58c018-5020-4d5c-8040-ddade7fad182",
        "cursor": {
          "ref": "8a489238-a52c-463c-8747-f94e35afdd81",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9a92c67f-8482-4d0b-98ff-28a45d861bd9"
        },
        "item": {
          "id": "bc58c018-5020-4d5c-8040-ddade7fad182",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3c176333-4f5b-413a-9950-797ba126ab5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e79471-774d-475a-9476-ee4152678cea",
        "cursor": {
          "ref": "4768b0c7-38a0-47fc-868e-6314b7b35d05",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9cb8f15a-901a-4005-b73c-1f8df5b7f2fc"
        },
        "item": {
          "id": "e1e79471-774d-475a-9476-ee4152678cea",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3f35add1-5065-4f6d-aeb2-6f2c4b88a972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90510cbc-a5d8-46d3-91a3-1c1b38125de2",
        "cursor": {
          "ref": "c50bc9a4-a65b-4320-a9e8-1637fe398da1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c2fc54b8-3645-4d81-9890-b41dda65e3b2"
        },
        "item": {
          "id": "90510cbc-a5d8-46d3-91a3-1c1b38125de2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "945fc48b-fb7a-4b85-b666-58ccac300ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4febae-ae22-47b7-a522-0bfe6d8f7cdd",
        "cursor": {
          "ref": "789f9709-308d-46a4-87a6-37f5a9458732",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7b11f88f-ea3f-4aab-bf29-939b85741c58"
        },
        "item": {
          "id": "4c4febae-ae22-47b7-a522-0bfe6d8f7cdd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e2b3fa32-a825-44ef-b96f-76f03ebc1d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aabce92-cde4-4316-99a0-c83ba7daf552",
        "cursor": {
          "ref": "1d6f6c84-56f9-4dc6-862e-bde0918fc8ce",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "206ce72b-9c81-486c-9172-bf35d912973c"
        },
        "item": {
          "id": "3aabce92-cde4-4316-99a0-c83ba7daf552",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "44e6d972-71ef-4c5a-96fd-8f10bae8186e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad25a31-be03-4d15-a3a9-49001f457cbf",
        "cursor": {
          "ref": "23c4236f-284d-4eed-9d11-be6f095c537b",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7a4ecab1-8e95-4bb7-a325-0f2cafa1d9a7"
        },
        "item": {
          "id": "9ad25a31-be03-4d15-a3a9-49001f457cbf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3778d4ac-efbb-47f0-b538-551b2db9d19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65678384-4020-4543-be82-c63a7b0698f2",
        "cursor": {
          "ref": "85336b72-0773-4a3a-ab5a-518cadb27bd2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ea994ce4-fe92-4a9e-8f2b-0a0e69e060f1"
        },
        "item": {
          "id": "65678384-4020-4543-be82-c63a7b0698f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0b141c4d-6ddb-473d-a849-27e3cdcd8903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e15bb6-9359-4a26-b685-1b3a42a65bcd",
        "cursor": {
          "ref": "0098968c-b3e4-4ddd-a8aa-96aa797c0838",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "58ed4292-df15-484c-b2e9-8b50b1a9cf89"
        },
        "item": {
          "id": "39e15bb6-9359-4a26-b685-1b3a42a65bcd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "12dbc60b-1422-46f0-abde-4cfb889368eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c90022-91c4-4bc6-b9dc-4235031fb19d",
        "cursor": {
          "ref": "3532619f-eaba-4f45-bddb-12623bb17e30",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "63de7a1c-96ea-433b-bfa7-74ae82f65628"
        },
        "item": {
          "id": "d7c90022-91c4-4bc6-b9dc-4235031fb19d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6db0ef8-e617-40e3-84e1-f87df32b9213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b945833-4863-4d7a-9c25-507848d036cd",
        "cursor": {
          "ref": "25561de9-c518-4f9b-b84c-0a2b96b217e5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0a2b4ad3-ab27-4621-981f-7a0bdc26e889"
        },
        "item": {
          "id": "8b945833-4863-4d7a-9c25-507848d036cd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fc18b5b7-29ac-4ca8-a580-711a3ff8c5f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be39249-1227-4326-bc58-5d1c3c25f581",
        "cursor": {
          "ref": "daaa4b6e-bc21-47c9-90c8-d09a66cf5c89",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "89ab5a3e-c2eb-4db8-a7be-02b47e2be4f4"
        },
        "item": {
          "id": "1be39249-1227-4326-bc58-5d1c3c25f581",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "01167955-b36f-4a81-adb4-a2f9b12a5d6d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "540af20c-d6ac-4c92-9a95-981ecf0f9892",
        "cursor": {
          "ref": "a0994c01-e018-4b53-bb13-87a9c700dfe1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e9c892bd-980e-4982-84cc-a555f4b12b60"
        },
        "item": {
          "id": "540af20c-d6ac-4c92-9a95-981ecf0f9892",
          "name": "credentials_verify"
        },
        "response": {
          "id": "86f60d06-7daa-45bb-b973-63cc15ed5ad3",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aae32b8-3916-412c-b955-e67de73240b3",
        "cursor": {
          "ref": "83c541c6-3292-4f49-839f-20e986d76355",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1b76da46-69ef-4919-97f7-2786cacb9965"
        },
        "item": {
          "id": "4aae32b8-3916-412c-b955-e67de73240b3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "730a534f-0ff4-4c77-8aaf-bc5f6f8e7a6c",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bab1c6-dfda-4d12-8a25-25e0164e9d91",
        "cursor": {
          "ref": "063b748f-92e5-4fa9-9fae-6ea1ed664457",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5e38855e-e116-4839-b652-c044ac0f6049"
        },
        "item": {
          "id": "d0bab1c6-dfda-4d12-8a25-25e0164e9d91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "983e99ba-f661-491b-bdd0-86fac2ea95ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bab1c6-dfda-4d12-8a25-25e0164e9d91",
        "cursor": {
          "ref": "063b748f-92e5-4fa9-9fae-6ea1ed664457",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5e38855e-e116-4839-b652-c044ac0f6049"
        },
        "item": {
          "id": "d0bab1c6-dfda-4d12-8a25-25e0164e9d91",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "983e99ba-f661-491b-bdd0-86fac2ea95ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21e47aa-2c10-4c74-b025-4eeedc453a07",
        "cursor": {
          "ref": "b2d37ec9-bcad-4623-8099-c905e13448af",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b9761222-a9f7-4b5e-920f-1c5435c01303"
        },
        "item": {
          "id": "b21e47aa-2c10-4c74-b025-4eeedc453a07",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b8a04e78-2198-40a8-b075-bda2502cfa16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aee52e9-54c6-48f9-8fd0-0124dcdf01ac",
        "cursor": {
          "ref": "1193a0a2-a834-4d4b-8157-3271238b64a5",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9aa3b886-1dcd-4c85-b240-ffe45f21ab74"
        },
        "item": {
          "id": "5aee52e9-54c6-48f9-8fd0-0124dcdf01ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bf6d622d-25ea-40d6-bfc9-9fa1101b0298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}