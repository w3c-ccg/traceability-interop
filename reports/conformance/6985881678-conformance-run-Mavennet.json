{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "767ec03e-6738-4905-bff6-c74d92095df8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f49231be-042d-47da-87e8-4cf81981c4c5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8eeb794-cf69-4238-9788-9c60cc322964",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ad4d3aa2-e355-4c13-b7be-89b3d0f52ee5"
                }
              }
            ]
          },
          {
            "id": "1d99877a-9f7d-47a6-a5e5-c70d81194469",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bcab3a8-fb92-4109-8693-6027cec45766",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c4a6c822-37f7-4cf3-aae5-0bb731080867"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b793d536-bd28-4a92-afef-4324b93d5092",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f56660ad-8c54-41fb-ba81-571dbf2cf6fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f1691a2-566d-4f64-9e52-f476d27bdcb4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc11dbb3-6575-4505-8d4c-a2588aac796a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2143c9eb-9566-46b6-ac42-bdb67ce1522f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dfa2bfd-f7fd-4510-a439-7da3aaa21bcd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "640281f4-db96-4dbe-84df-0aff9910803b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "806b5b0d-6a77-408f-a12e-743fb7369592",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45c7eb9b-8b8d-4b82-a6c5-137cf71700a0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "812fcff8-0bf8-4948-80b9-f0873116a757",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1014e098-7dab-4fbd-9c0b-c2b7b23e1664"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67c5fc46-03fc-4005-b77c-cd50144f5e84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bb75355-17a4-45e2-95ff-37cbfba08a8c"
            }
          }
        ]
      },
      {
        "id": "fa328de4-f5a0-4b15-b78d-93dda82b181f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "88b8ee5e-20cf-454c-938e-28ba3faa44db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0558ebb9-c679-4615-a88c-9cf0f57420db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd4db070-2916-483a-b407-eabd0d428ead",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574568ba-4ac3-4e3b-9297-91fc5cc629cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c0ad351-f345-4b0b-9684-e9c3648c9c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d9df7d-aecb-4e67-baa2-585d5f596251",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7247f0-52b2-44ac-8ba4-92b30f6354fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e63b31bc-8827-44f7-813c-d0008b637601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d0cf4-18bb-4a19-a1a3-d58197e4e55b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45ace39-792a-429f-8379-e3a732897aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "635c9ce3-8d39-4d64-a0dc-7bdffc48ee59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f0362ed-c72c-47a4-9ddc-0453f5db4f6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5fc41bc0-8655-4f17-96dc-b4a0bd847427",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a262c4e7-f68d-43a1-9951-d93861da41d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe4f6b04-03bc-4e54-9d62-a7cf2fdd24b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aec083-8a75-4225-be54-7203260d291a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4891c92e-613f-4d13-b230-76422f372c11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "903d2b03-6630-46ce-9718-c20ca44af803",
            "name": "Positive Testing",
            "item": [
              {
                "id": "babc41a7-ecee-42fe-b9d1-108c0cccd4ae",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f712de2d-cac3-41f7-9e21-9a912adfc191",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e9262707-1d53-4851-9a84-cd0375f436db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1eb8d45-e641-46f3-b2b1-9b0f6c47db18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c3dee3ae-9796-4668-a49a-c6448712638e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36818c11-9533-4cd4-891b-83c8d37ec14c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b20c3d7d-6524-4f7f-b362-49297f95e491"
            }
          }
        ]
      },
      {
        "id": "0830187f-9fe2-40b8-8fa1-0f98b9a9d11a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c5ce2dd6-cdfc-462f-b38d-f736b1197941",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6218827c-12f3-4cf3-a598-dbfafd831310",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "acf1af9b-a128-4ef2-b509-588eb433d466",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec8b1ae-1c39-45b3-b24e-232139c2f2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdb44e8-f4f6-47db-b210-00e5f55e621e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51986475-34ad-4ae7-8897-147251c4c365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e64e7b59-d5d7-403b-9e51-c8033e8f9ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5242cba-3542-481a-a44e-3c840cdf2adf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60399089-2531-47b4-8a06-240a3fb8c13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b154054-b3c1-4e1a-9638-a46a4f2c93e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04945287-766e-4e2f-bb71-bd97d7d1854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6553da6a-f776-4fe1-b0c0-c628b0991b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf06e04-988f-49d7-9fd4-c55ad300cc2e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f4f13-eb62-4880-a3de-a8340fc29927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbeabf3-60a5-4a47-81f7-cc79ca44e22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd0d1fe-1d2d-4140-90bb-14fafd48f9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cf98975-c4b8-4bd7-bacf-0fc6dd61e868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4a07a8-70d3-4128-b946-dd135942c704",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3891e471-7bba-4d43-b44b-985e253f4edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974f9b9a-6a09-4765-879c-5edc753658f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f66e9-dd7e-480d-b95b-a88ea1ed7585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1599eba7-9873-41d1-8921-670962abb1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e7551f-9098-4108-9873-f77f2b37e8f6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588a15c6-5914-4be3-a9fc-f0f0bf45a702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87519567-d301-4604-8651-447061cdc2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc350c1-6f3c-4593-a5fb-a901ade0adbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d17de827-fac6-4f60-a681-68971bb30bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bc470b-3487-4a31-802f-bcab1b3a2b25",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd3ac9d-b002-4b0c-a564-d8a42fce690a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b9add1-ebd8-4679-a2cf-3f960023b4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f47ee8-3f65-467a-bbbf-85b20cbb259d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83651b06-f5bd-4c75-b8d7-63fcaf20f04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60e2ff9-650a-4163-b757-66af44a9a444",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4ebf08-ce84-4fb1-b068-5064f1cd5fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b5bc95-6752-4c15-a488-c058da75c810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17a8732-11a0-4a38-bbfd-65399b489534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e4193c1-fbbe-42e8-9e75-58932279cd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de403035-adc7-4e18-8703-e2165d57261e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e370a078-eeb1-487e-97de-fa917fb5b167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c68fd0-ff21-4007-ab81-01bf514dfa71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6e6e3b-51f0-452d-84f3-289d2b0def29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e639a19d-c92e-45bc-b880-0c82cbe4ce82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46721d2b-219e-4b04-b65f-fea033fe4b9f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b416c98-3e8e-41b0-b9dd-d003fb8dac4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4772f0-8800-4ee6-a835-89b22290fd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3478d37e-56ec-475b-a1ce-7de567ef50d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e88c4c7-09b3-40be-8f77-38c707566185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f2c508-1e04-4291-8b58-654295b03fae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a137b642-f81b-4edc-b164-92125eb333a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e98089-1ea0-4c66-a197-af80a3214d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5aaa9e-4730-4a85-93cd-9f321d8fe7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51d2ead2-ae77-4640-bb8b-1e18d48f782a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535568c3-b839-4c5c-98d4-8abd7f755b86",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb3ffc2-cfcb-454a-9343-84a6f81c5530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e7c5ca-bf4b-4195-98a1-069763f72fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2444de94-243c-4403-8e63-d71be7d5ea8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c303e93-0f36-4f18-ad27-8489b8c7bf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0515f-16a7-4bc9-808d-769f5ee0077f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4799e9d7-2239-4bb3-8e58-a61ebbce3332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d2e41e-f571-4a6b-ae63-9232c5a0af11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11410d55-ae74-46a6-a730-ddbd43066cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f8b834b-b818-4146-b3f4-21710f2f3410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e2a140-cf64-48e3-b667-4faa06e25347",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250cc7b3-742e-4840-9399-69e61bb7045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0cd4d8-acae-4590-8975-d5d29a30c710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4b1571-e283-49ec-9de3-57f85bb60553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98ddf2f8-e9c9-4f16-bfba-54b56cc586b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff73fef-4cb7-4dbb-a926-3d2296a890a8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d34bdf8-45fc-46bc-8b79-9c82dbc989e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c029cd3-5c19-4854-8b1b-0c27782de710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78ed192-191b-4153-9e86-004419ac701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63e90e92-00fe-4c69-82a4-d439198d2901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a82726-5c95-4f51-bbf0-0e410defadef",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d5c6b6-df97-4936-b812-71ed8c83f6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f688e7-2108-487f-8d7c-5da02daa3380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a55030-8451-4896-94f3-7881cfc48156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c9ad8b-16eb-4b7e-ba61-18885d965218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f78162-c89e-4d2b-bf61-699c07feda70",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02383a74-ead1-45a1-afde-e0330f16cd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63f9019-f16a-448e-9dd5-c7b682bd2993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f641aaa3-bbff-429e-8b6b-bda5579824f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "731b52a9-2235-415d-bae5-65b30876ce33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3208508e-737e-4b28-bb81-664814c5f7a0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bfa808-a68f-4f55-ad7e-35eb87016e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5dd071-aa60-498c-b98e-ffa50b331623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f948c0-9ac9-49f2-92a8-da18372d27af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b4c2fa7-93b9-41b1-b4e0-72969933d041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f361a6-41f7-4e76-93b5-15f9e8181763",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05173216-3c8e-4a6b-9011-0cddd7e0e5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1f47c4-7435-4e24-a911-ed47f69c59a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60777c6a-e7d2-4467-b7a6-52f49d5419ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "740d7d5e-42a8-482a-a88d-8faa1d27a73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9dba18-f747-4fa2-9e4f-515a060b2b60",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5050ab-e3d7-48b9-8888-aa0d7ce99300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5963b6e7-997e-4f7a-8ed9-68b15b88fff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25eea36-2db9-401b-95f7-cae236b985ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fdc282-2813-48d0-867e-43c01d87770f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12cded4-34b6-42c9-bd54-c12d1edaebff",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa06c24-0c55-42af-a01d-b88fa9e3db10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220eac38-a270-439a-9a2b-cff3ae006aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c251d73-2ae0-44b5-be76-d7b67f781abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "955c5469-2318-4860-9f51-b390c3895f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3c04cc-b921-4961-9f72-fff35e8cf36d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2bac83-2a77-4e8f-ab1f-417b4972eba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e162a63f-4bd5-46bf-9b33-a57bc200687b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acc8e5a-0dda-4386-9996-e83b451e96fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbde17a7-09ad-4dfb-a676-b79053323f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579bb8b0-57b7-41f5-ad3e-060980df36dc",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5fc9a1-5fc7-4dd7-849a-aa30580e2f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc764326-b6fd-4ebb-a83d-db6533c96f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064d9578-f83e-4be9-8781-d31253e6560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5887747-06d8-457b-b3cb-070680777f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07172f0b-5f5b-41c7-90a9-661ae3c0045c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad13867b-bc27-4ad1-9636-8300378a24a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4f61ce-6291-427d-99ad-e72e9b3bdf82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc536c0-0bb7-4560-af56-e42e44cd2e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ab72e8-e8a8-41bd-9ec3-65f97a390a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a38ca83-243a-4955-9c5a-cf65b7d67e7a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18aa8538-f3a4-46de-adc3-7dbee0b7809d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1698d93a-62f1-4b2c-982c-b071b8324396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d597f9-c002-4b59-9fe9-80061526f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b3f0fd-8187-4032-8dbf-1c4a5512a26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03115e97-adc1-475a-9683-df7b1fc0ad9f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8460f70f-3a65-4ece-ac9f-830a7564fb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb789942-1a84-4a80-8d35-cfd74fbe738f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1ed40e-a7c0-4619-bcbb-28d9884783e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b57172fd-0487-40d6-961d-bfad1c10edcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b67becb-08f6-4154-b375-2f5855019ea5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb5c277-a790-44fe-bda3-d215dadb6e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d554067-d8cb-496a-ae89-d59fe690e9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c86abf-209b-48b5-9f8d-b2d890230357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afb6698-7f88-432e-adfa-b09fd37fcf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c120b69d-7657-46b3-bb3f-16b64eccd157",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b15ef5-1fb5-47e5-943a-746952f28a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22f16ef-70df-42be-8cb9-f26cc774f631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e7d671-180b-4f98-9146-8c41971bd2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8a6b85-7385-4e86-93cb-15c6a7fe341b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d549a45c-3fcd-40d0-81c2-cddf85426c94",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc6988e-6f3c-44ad-93d2-ae82454d0f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8648a1b6-4019-459f-907f-9206fd037bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa258a9-916a-4022-97b8-a42d292d5e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2aacb2f-8e42-417b-a914-d2612a95f717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287e4b44-67ba-4c49-a408-5116d597250b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ecfeaf-b6df-4067-9ff1-c4dda6d8aa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cde591-3b27-4f2c-a994-29146db9468a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8b0c6b-573a-417f-b81d-f7ece15e9698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace942a1-e3f8-4a05-97b8-6bac003e8971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75437d0b-3033-4a09-bd8c-737697c2e506",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa12a740-0921-4cfb-9ac5-880289ddc7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9775d5cf-9836-418d-a7b8-217eddc9b3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522b1417-4d1d-415b-a5de-f4a187effc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f1cc0c-531c-48a8-ae1d-ce1969f27736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6403ce8-7628-4bb6-bd61-7a2edea758ab",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e81c04-03a6-4322-aa49-deb1e21b45a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf56456-7708-4678-9252-94c41761dada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9958145c-5c9a-4526-895e-bab4ad7a3584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c55203-e64b-47f4-8310-3db27fbd472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d6d2f9-f71d-46d0-8c3c-95c69e486848",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abcca89-ab59-4e2d-ba00-25aae2cafdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdbaeab-d81e-4c60-9507-c00b8ff991ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ae3546-1e2e-4d9a-8a8d-1da8baf8065c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aaf7e17-9588-49d4-ad29-45072c0fab50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd45b624-b77f-4d79-8cf3-9b4a631550a5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1112e909-d840-400a-8f15-983fad3e0352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da3f8cf-a99b-4320-a7f3-73aefbd95206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071fc232-5b90-43e6-acb0-009aa853c595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e55f282a-bfef-4f99-9cf6-2361c84e49ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e693e871-1973-4baf-a211-5bf4daf02324",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b6018d-a802-4281-aed2-9dd83c4a41ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7084472-6b1d-4f88-a816-bf34dc782a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dfc10b-f59d-4893-b14b-21fa12bf6e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b752e4-8773-4980-ad7f-4bc21fb3ccd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1acea-11de-4306-8546-0cc4437f21bf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a2d645-b1ee-4302-9adb-b0017ae33d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e890ce29-b683-45d4-8327-627987c340ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04eac9f-c81c-47f9-a0ed-b94d4c6812ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca9b1ad-7655-484f-b742-6f8901b28df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fb91b1-9be9-4d99-b1d6-7d285860e446",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71091aa9-c972-4a51-9892-bb288d4fcc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc1eb6e7-b076-4d50-a601-13dcbfd38660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18051a60-dc65-4baf-8eb8-f04e1059214a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "503006f8-3b5b-437d-abd0-2c889975ed8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb642a9-4cde-4e49-adf6-e3e57cc13416",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518b2cc8-8553-4508-ab59-5d530d34e07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f148a5e-ce40-463d-832f-f27fca6838f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f6ef88-7f23-432c-8b51-28021bdb5e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "883733b4-dd07-4e85-81b0-02faa47e27e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d2ee06-758f-49bc-bc22-e626422a9e9a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190b3b73-62ae-4d2d-92f5-a14cf0415126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e387402-c969-4e03-af6c-e62acd4d5ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d0db3b-25e1-4e61-8118-3207b9b7ef7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d37b604-1d4b-4894-a03c-6f4fa688417d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27467a9d-f3e9-40b4-b24f-f4041732f326",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c83b3e-8c38-44ce-a064-eea2eb23c193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f63f8b9-cbdd-45ae-97fc-9e605621dfeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e78a95-445d-4724-b965-8f7b7728d3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "588825cf-5a92-493f-898a-28de1cd45bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6128a4-ea1d-4ee1-a1d1-4e5e83c7585c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec261b4-d45a-4ebc-a1b5-2b019fb40e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148525de-7ccf-40f7-b459-feee2d522edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c9100a-9fcf-4826-8b6c-58f9fb47752b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7bf8ab-8946-4256-a069-933efeb4126b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db575490-c19a-4988-a1f7-d8b0e7022a37",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01b0c96-f898-4ad0-ba07-2e64645bc0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1703cd33-ba15-4f05-890d-9a04d5e10fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2233c9bd-97e4-49c6-8e84-c466216701bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0b8d75-5677-4de4-a526-de0624347997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3022216d-fa94-4d6c-8e81-b57205964670",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1d8227-ae38-49c6-8d87-99db33af3a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ab27d3-49e2-458f-a266-adc30a44a4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c32538-e128-4708-81b3-86ec67536be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1b32612e-c05b-4f96-ac10-007c5b101421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f39e46-a834-4c4a-8ad0-b1cf92057f5e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b57586-7bd3-4fef-8e67-5ecc88b29ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2d93b2-b2ca-4361-a1ab-fa1a0fd5b4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c69378-93a9-4ecf-94fc-78f9a5fd58c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4052a4-9cec-425b-8226-9ffb97ebd806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdd9055-acb9-4ea1-9ccb-fc28e5cceb8e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79fbf42-ae86-4935-bef3-160589bee797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b2347c-f1f4-4bd7-bed2-2a2dc15bf898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010c5359-cc5a-4ab2-a790-d17dfee728b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "657c5084-34d6-4781-888b-12c3cf486d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674f39ba-2fb8-45cd-ae2e-0129907242f5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0f7651-327f-46c7-bbbe-d67a50bceacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3ac061-8806-4718-90b1-76cb7240efe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8e0c11-f329-4cc0-a2b2-5b4809116330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc258b86-fcb2-4dec-8fa7-b061377a1605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a013b2-f2d7-453a-aa31-85930a2bd694",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efbff3f-7115-490c-8dff-4cbf56e4bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34946a8-a0d1-4494-9591-fb79aa56baa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25147ce7-4a9d-4782-b898-6536e9d4e346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e513378-2bfa-4f77-bd07-2117f48b6ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1c723d-38a7-4522-a69e-fcaa426405e4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823e83b9-b855-48cc-a91b-5c17fab32ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f609bdfa-a2d6-464a-a9f9-0e5a81ce2298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3748b58-276e-4345-922f-c229129d51f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89b41887-f7a8-4dba-affd-46b2627eea06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc23934-3ebe-45d3-ae85-d3083d38defe",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73297e8b-a3f8-4194-ae15-70502fc48c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd81527-fc54-4e59-add4-6bb8e7fa9f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47a7a55-33f9-490a-af16-8bb946fa96d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "062c587c-a3ae-481f-a3d4-0adac02226d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a32e59-3f04-425f-a993-5f09aa7e4b41",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e32de6d-1414-43f8-8e44-ff9f7cff7abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc87c863-25e5-4bc6-9fad-42bbaf13a342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6e5169-c150-4d86-bcca-0e79ee71d924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cff99ea5-30a9-485e-bd5d-3b6d3fabb081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551edfac-f8b1-408b-8261-afd7903703e9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e48193-638c-4311-b1a8-256d55345f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f63210a-0042-42c9-9291-ceb4948c2888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24481811-3a04-47b3-b7fc-7affc2330872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a96e496-6e59-4e48-9706-5c4b4ced6647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92709c32-fd59-481b-bc7c-ec3fdfd9f96e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5047a63-3bbf-4dea-898a-f6ddf6d73a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e47a07-98b2-4ff6-aae8-964a10459cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3ed37a-6c02-49ba-9452-35d50057c257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab71b504-8d7e-48d5-b686-f56a9c1da5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949e49af-894a-45af-abac-29fe47711105",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6869989c-0ffa-4dc8-ba4f-d12636e256dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921bc679-cbc5-46af-be5a-c80260c79b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0d860a-5c07-4fef-9e4a-64aaef27e416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90f2ffe-b238-4ae9-92f3-1335a77baf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31621fce-b4e2-4adf-8761-02f48e968b4c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c334f697-95aa-4c0f-8b9d-4c70d04965b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe88c5f-63c6-4820-876f-96aeaa1d73fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb3defb-8a57-4593-8466-64a7604654f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3298c6ba-4265-401d-9926-ef4136effc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80680a4-112e-4b61-90e8-28e0f4e0cef2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f904a9-6f1c-4f31-8b32-831ed56a9dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561cdfc8-ce61-46cd-82df-627b94d782d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c1644-de94-4ccd-b2fa-75caadba3fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3501433b-253f-479e-9ed8-7f5e84b6f18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2a28fb-e9e6-473b-b163-40ec799350e9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6e0681-99b7-4732-8cd2-8f5f294556f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816c470f-7d10-4499-af3e-30699b043427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7047c4ec-c440-429e-b208-26e18b01b7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbed2165-d41c-410d-b107-969d31745cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ed303b-58fc-4641-acbd-ea45db4cbbe5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e391ef0-7351-4ac3-b5ad-d16a4abc0807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfeea8d1-c139-4276-8b77-1e86d69f4558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318658f3-1873-4e9e-97ff-eaed34078a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7c749244-9a60-4172-9096-ea0da2b5e0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffaf9b1-657e-4f2d-a2b9-6858afabcc5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60b0d5d-d9d5-4ca5-a029-590b62269914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9254e7cf-35fa-42e1-9868-c98ff0321707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5018b1-b2a7-4cda-80e3-2ecb483b3d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a67bc3c-3571-4dad-93d8-2413c75948c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85608b22-a886-42e8-b6d4-47d465d7ed1f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2f5e65-4a21-488e-bdb0-1f6cdcec0f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86723147-5dbd-420b-a0ce-923e80bf19cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c023f3-f0d3-467f-b02c-dcddc40c6762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8812053-9571-4387-a1ea-ca2814dffba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e993320b-5f74-4049-886d-8b3c2cd3a067",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e767fa-066f-41cc-b877-4fb9e7df35fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6b1956-66c0-4a15-a33a-f7ba7ec85c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e91c0a-b8eb-4d98-8394-f768618152c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b012dc1d-068a-412c-9881-ffe610a0a709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe74c3a-a83b-49c1-9721-5c7ccd3c2961",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e90fab2-0bbc-46b5-a52d-d369c811ec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3706a7ce-bfec-4a21-b1ed-ba70c8461c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11459910-dc55-48f6-b6c6-adb0aef48378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b00957-d4d9-498c-802a-97418ad15414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752da82d-0f34-45a0-9021-79ae65a1b126",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162132ae-b395-47b0-b4dd-3605af2f82ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08e4e67-4856-40b7-abaf-88018d185e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2328dbf-16fc-4c71-a4a9-b4e16fdfbd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c79329e0-785c-48dd-819b-53200d76a236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f5f340-db5f-4821-8b49-a60a4f10ee86",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecba62c-c2e1-4db5-a90d-b6bd2fbe48ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a0f02d-7a78-46d1-b35f-5bdd82b44643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84483a9a-b926-4a14-87da-dfbc52e5de71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "538c4d39-7667-4e27-811d-9dc55ed93c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2b988e-35b0-4042-a512-e87b1ab3ba0c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd02875-2ce9-428b-80db-e5b9b70f60b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118012a4-dad8-42fc-9d3b-981a89303db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d5490e-bfa0-4d0f-881a-9fb51279a6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7a2af0-ea05-4c61-900b-3ed9efd37203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0c3d19-ed38-43e4-af43-f901a636f053",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cace67b5-4935-4d62-9dd1-d85474a7ba64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b315886-5c38-4c12-9080-cf4df92aef77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a080e186-4dff-44c3-8f2c-b9777cb38c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfd537d-3935-4cde-af9e-ed436fa54a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0058eb-4357-4bcd-a3c8-0706a7fe6fc2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ee268d-1736-47bd-b5aa-0a70a8cab041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48179c45-fc99-4266-b17b-48ab7b55d0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b8be04-470d-4223-9434-f499061790a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f95b187-29b0-4857-9d0a-ad4a6767cc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6effabf2-70a7-444a-99c3-beecfef0c8ea",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b191e1ff-c1da-40fd-b8be-720551594929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f36001b-c183-4d0c-baf3-ed1217a2e30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed09a07-c6d8-43a1-b381-aca7241ad203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48f844ff-e4bc-4a63-ba42-e5749d2d95e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e66b2f-ba93-4fbf-93d1-44be9f3ba6c8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5076b01-3281-49ed-9cf2-8134e496bd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0a27ab-1774-4102-9a61-696e06050ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e18f3ba-987b-428e-b75d-67ac6ee03031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec66d2f0-e8b6-44d2-82ab-ae1b90ac1e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279f0cff-1e22-4a53-a4f0-a2789a855828",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255be321-edba-41c4-81db-406c37cfd6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83131236-5360-4844-80e5-2ac245871a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a7cea1-285a-4d97-b9ff-3698437ddceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdaf14f0-e505-49d9-8ae0-cd324198b1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea54893-cd54-404c-a709-c2d3055843c0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99889592-3e27-41a2-9809-811fda261f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae59a91-c1a0-4d01-a2ec-555e64bee516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34837518-e73f-49a7-b767-658688feb085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a575c192-1e3f-416f-9062-8e3481bb47ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0bc66c-a75c-4ce2-8971-d94990fc5fc2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f716d17a-9539-409c-912b-c38f299c9f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3da0bca-8ef9-4b80-a28b-4a8cf9eb9dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a59aa5-935a-444a-b068-a63a9e066f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea4e294-4003-4795-8192-35d78e722820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72212744-5cb3-45d0-ac37-4714657e94ae",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2be0fc4-3122-4847-902e-5461f9f238b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44989712-a46e-4ab6-ad6c-362682a0be03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf77310-f9d1-4fb2-82ba-8c0b42681964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9548c410-f62e-4496-a3dc-daaf153478d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71461fc-beb9-440b-beba-c331b8102f27",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1607a8-8ae7-44c7-8c21-a41769778e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b145e7e-0220-4f96-b036-25ba77d012c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32461554-4c95-42bb-a00d-0f7e3cdbf82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91826ad6-e615-43a7-9227-810b95c88c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887d263e-fc8a-4f9d-bf2f-b60546d72650",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44331a73-5434-4dd1-9b69-228068d3f909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bb9b8e-e8a6-4285-959b-aaf3c95f40aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886cad8f-fd30-4f81-b3fc-b44330234bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64e67a73-d11f-444d-afab-63410c52e11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2175c6-c7de-4d1a-bea7-66b4d6a03a1d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ba1c2e-efb6-4005-891b-197addd57f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad4ea95-c942-47e9-bc23-24e25514dd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d291149a-d528-49c1-83dc-3570490067ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b81c60fb-b05f-4932-91f0-b00b41331f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67a5dc9-dd00-4cb0-baac-50e5e334a6be",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdf9214-1461-4e9a-baef-8ba74a5f8cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04e4e58-9966-4ecc-bd43-2dd6d0ebb8e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01b414c-0f76-4d1c-a026-013bdb9cbdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19972acf-e708-475e-af4d-aedb3fe230dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b86f278-0679-408f-a052-53a6e4ee75f3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c153ded1-8d07-4deb-94ec-3176de1c7557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a61d4e-5e03-4f65-87e1-0c18191e2817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429499fa-3395-4be3-845f-b7a24945d948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d345572-60e4-4a6e-814f-a679973505ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0d5833-8a19-415b-8daf-886fa1cfecae",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d0c9ed-9368-430a-9773-34ab30989a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c16296-3798-45a9-a416-33f08affc077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fd0def-66b7-4907-ac3f-52386409ad4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97aa51f-c6f1-4c5b-9d86-5bcb4f028c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3df3c2-87f1-46bb-90f8-a688dc74e37c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344c91ab-af52-4b18-98b4-11b6375a7931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359ee50f-0068-485d-845f-95afc76ed7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225d14fb-91e2-47f3-9ff6-0b102f05fa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b2e83a-7ddf-4fef-9929-64d60682f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951408b1-6ae6-402d-a9e6-de6115826677",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa0ec64-7e11-4222-ae74-c1f6ada0d711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d500fc6-1018-4604-8801-a8b6c1384780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9187245d-8fef-4390-be49-07e0778b2f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e295a096-1b3f-465d-adb3-43154c8fa683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2be7b4-c99b-4aa7-b4b2-64538c41f7b5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5585b613-3fd7-4348-8af0-0a12482681a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b800a719-9655-4536-9b1a-95affa1a8b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8d524a-596e-48d9-a644-9cc660fb8918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5f4de4-d898-4719-a8ad-0872d3d1ba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0182cb5e-5f84-4fb5-93be-95045b39555c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7077d1d-e085-4372-9dfa-534141b7d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381c54cf-7e01-45dd-9830-a17dbc1246ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e733f300-a2d6-4ff6-bd75-b73bb8fef6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a234e4f-acc9-4898-86e7-2315e9adab0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1190433-9c02-4478-8dfe-9f97e8021399",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a8e35b-1fed-4b16-9154-073e8a36c54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a14f2ff-2cf5-44b0-b398-e1b360b82f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bee6ce-495b-4941-8a40-d4469ac50d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6081a7bc-3067-4c04-87fe-f1bd37653c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40620f44-4649-496a-9537-7a090ffd95ac",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef19184-ad7f-46e8-af35-4796828e64f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7280d5e-5dd5-4c8a-941e-93605e0c0695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8b95e4-704e-4167-a656-ee626dde241d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4f70cb-6f37-42ff-8848-885b706eb4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42545a0-1aea-4354-b7d3-bb82aded0e57",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0156b9-36ac-41e3-8f3b-a66b4531de02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b149c8-c67d-4fbf-b4aa-87f24ca99d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8800e726-d9e6-4993-9676-1540f8baeac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfcc744-fedb-479f-a10d-37184b974f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf22588-905e-48af-b972-c781b58c8886",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d427c0e-a685-407b-acdd-edd314977672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fec238-1214-43b9-b2e6-c3cfd1e49503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49447912-abe9-47c6-923d-a7934fd4ca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "200a312c-aafa-4d8d-a813-621d37ed675f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903b6de4-4102-4770-a10e-4f3cf54da0ce",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2da133-2599-428c-a191-575dbbb4045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5db33b-e7e7-4322-9cf1-509598a75ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83925c2-46fa-4c84-b786-e30a6c311e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b4eb25-c53a-4218-be94-3b076ad38698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3523429e-c841-4344-8233-c3422bee3d0c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83460522-2c7f-42c4-94ce-a143c23b17b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7498fbc-fa85-4466-8fa0-ffd4b8da75f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de536f05-9180-456e-8d70-decc859e4deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "75f6f52e-5da9-4269-ab9a-eca3ab34afe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b82ca11-db65-447a-ab84-61bbbe678711",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0906d914-00c6-4994-8f47-9eeafbe9fb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3da0979-4d79-4b1b-996d-8fe9b630c5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf157ef-bc53-4d16-bf5f-46f1a09c151f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd8587c-2019-4ed6-93ad-728d79a2a6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a15d64-c997-4ef7-bdab-2767ac7e204e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847967e9-9905-4ca8-9e8b-bf1a6321032d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8743534-dc35-41f6-8f0f-5819e1e9e532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49ad8db-66ad-4d9d-9336-c0e287340299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6eb24e0-20d7-499e-bc53-2aaaf14ee175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77789e3-b04f-47d0-9905-3cff01657db3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edded597-b367-4c5d-b18b-1da741a76788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42057dc-cf5e-4722-b23e-208d2435b921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf67c2d-c54d-4668-90f8-143450c475a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cba3a1f-6eb6-4394-873e-2f5bbde9fd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a66dc1f-a5c9-4b45-bd0b-ac0354a65c98",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fb6abb-e005-4232-a8be-33cbdd6d602a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6b842a-7884-4896-a7c5-6e7c5d2d2d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cb326a-ef58-4bc5-b1c4-59bd240f716f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "48a514ec-1045-4bff-b753-076f6b4c0642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b7cd5c-4195-4569-b974-1f969e8e7d29",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60c5b41-450a-4ad8-84bf-467803ab8775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0dc8ebd-72a3-4f6e-9ce3-d1c3748d436a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27910b4-cd18-4e58-97fc-f3e1e8fd0e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "de4fd3ae-e5fc-470b-848b-ad9817e79026"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89c5fc17-3187-4bd8-82ac-28100d418a8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "217d3b30-3fd2-4f7f-85b2-9e21949154eb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bb565c-c892-45b9-8230-edad91831270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df1e99d1-dd2c-47ef-9289-e83d72b4f1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51448175-74b7-41c8-8a96-42ded0fe8e27",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e53ca81f-b970-4be1-9603-f01ef9e5721e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb300869-b710-4aec-b7b4-21b5bac6f8a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f832910-4a7d-4e7c-bb48-7ab683c2cbc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3123158-eed7-499c-9754-bede5fe36469",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4de6fabd-b0e0-4edc-bad4-d9e6a8698b26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4f6c0bbc-e0a3-4dde-a60d-7609acaae13a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34904f8c-c7dc-4567-858b-99eb77cc1db0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3856e07-91c6-4203-a4ba-abf26aa1820f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1d25ed2c-8a69-4a1c-aff0-4df6d0945eb0"
                }
              }
            ]
          },
          {
            "id": "6b0934a5-d586-4709-8e9c-2bc3e3143f1d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c4ee6ab-d8c3-47f0-a3bd-60b0c5a26ae5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6bd307d8-cb2c-4eee-b518-fca19bcdd098",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947fde9f-2ec2-4027-b6dd-c9d169f58074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0ac13521-79ba-4679-b022-44615d35badd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575c8a7e-eabb-4622-8798-c891b975addc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a75d7e-2b58-4655-b5d2-2861baed0952"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3980bfcb-15c6-4951-a5a9-8e118aecd8f1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4506fd95-a2f5-48da-8f48-0fb408526141",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09d87df7-4bf9-40ed-bd48-28ab075ba26b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb9e37cd-4b21-4c02-b74e-5d2e70f48f69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de5de74b-a339-42b4-baa6-236f079ffbc1"
                    }
                  }
                ]
              },
              {
                "id": "e8e428f6-dadb-49aa-a3e2-cc6c58944046",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb7630f-18c7-4558-ba4a-c004372090b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4209d7c-69bf-414c-b6ec-1bd0d1af2fa4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11228243-310a-497d-9a58-55e397584ef9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef3e5cc0-0ed9-4c51-8fbd-7f885bbe243f"
                    }
                  }
                ]
              },
              {
                "id": "49115526-6017-4b6d-8843-cc5ed7f19a40",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f81ff552-e45d-4c7a-8572-30b935d1d6b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c0958bc-becb-451d-b7e6-7926aad0a78f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddfb676f-8ec1-4274-9fe7-216e7cd0b8e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50cc302d-43a2-4294-ab24-e98903f94626"
                    }
                  }
                ]
              },
              {
                "id": "447d3e3b-1d78-445e-9fe3-7b5aeda5b17c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd86232a-36ef-4928-aa28-aea02b248612",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b0bc472-831d-49d2-a8ee-88edd9d743f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd929b1f-5f77-4411-a06e-bd6803568ab8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8e33d5f4-2939-46e7-98c0-16579dc8ca7e"
                    }
                  }
                ]
              },
              {
                "id": "3c28aea5-4d11-4c1a-a7e4-48961b237bf8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c7f27f8-88ef-48ca-98a6-b0170d292f4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ba813ca-12d6-441b-a808-c905423ebc55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "868084e1-6732-43ec-ac1e-308e7c9f998b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4e3a008a-7b54-4ba0-a745-c68481a12a43"
                    }
                  }
                ]
              },
              {
                "id": "7c3b32b8-2e77-4916-b450-6cf61767d8a1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "203628ee-ed3c-4051-8425-ae3d62188290",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9ab5a52-290a-4219-9419-d87380482d2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aa4f01b-824c-4a12-a50b-14513db871dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10cf9631-ff17-48b8-a887-e9f5573076bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1bb0cac5-0134-4a19-a99c-cbd4c1ad3248",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f1ff5831-bd52-4977-8b81-9ad1e23e9e06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b210d59-c1f0-42e7-ba86-26f0fe4c4b5e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce5ba69c-e6dc-4073-a387-5cdd02720460"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3cf4f4e-a2b5-44f1-a6c7-21bb4026acd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bbf57ca5-7d51-45de-9198-8788d67c6227"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce164efe-37da-4d66-8a59-27561d451a49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0c99c58-51ce-4469-a719-b2f0b368b06b"
            }
          }
        ]
      },
      {
        "id": "5e970f6e-c951-4a8e-b14c-abd8a5494b25",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5f836ca9-c9e5-46f3-86e0-de2c9225ccde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d64f9cb4-c3ea-410f-bd22-41943aa18461",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "595efe23-6611-405f-aa0c-4e9d85af4a84",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3f9241-7029-4b06-8fec-49ca20fa5839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e47ce0-3fca-4615-8d25-7a8d093234cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe88966-c9b0-47aa-be7f-361b33f9d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af2707d-d54a-4688-90e5-6a80e0dc819f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd5e98e-4f3a-4c06-ae9e-c3217f52fd0e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b7880b-707b-4eca-bd47-5116cb3f3c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ab1a76-9e85-4100-829c-6ddfc0a0d1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c06e6f8-656b-4883-9e6e-ce960f2fbb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "375da73a-cb85-4e86-b3cd-9050d24e24ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588895bc-55ba-4fb3-b916-f42922c58338",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c37e378-e829-452b-9773-90ecee4c0b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0d91ed-3471-4c48-a77c-2e6206ac68ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a116b87-0273-4618-8825-5507eb9ff226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "304523aa-0993-41e0-882f-24f98d29c38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5b264f-8585-4c39-aa33-581abc88155c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3d9f99-87c2-4d4b-b09a-a0bf1e883f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578af48b-8594-45a9-a077-da7630ca40fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdf5cfc-7315-44ab-a7b7-d92f8bff2ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72b37a40-89ed-41d4-bb60-bdb6e10ede0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05df7eb-970a-4738-a2e5-092f753f6469",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ff0ce2-6270-467b-9949-ac1f4f8e7eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc3fd27-29ad-4042-abdb-4eac4fafa2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca6cbbe-1b76-4e13-9bd9-a32bcf473c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e3d949-a239-483e-9892-93babaac2ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67fa3bd-14ad-4d35-8379-e449b48d2ea6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a408ed3a-027f-49d9-a70d-b810d2c8451e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94749df5-e790-4b1b-a3d8-09407ef452bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40a9cd7-c69a-4d75-bdd5-d2878de7fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0eff80-cc91-473b-8f1f-9c57e888df4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eeb489-78e7-4ce5-82dd-e0ee31af5735",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6031d4-09b0-4c99-8399-0413e851531b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e05d1e5-8303-409a-9c68-c007b932a28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61c40a6-8f69-418f-b0f5-091f4665015e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bd19e9-a6b4-435f-90b3-a96eec7a87ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401d824a-6e33-4792-ae6a-22a7d7f2cf9f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546f4dc9-ecf2-4584-b709-3a0bb54ec918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8b5dee-bd27-48b8-b665-f2bb3841ce6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e3f088-aa37-4259-8639-18b27df2ce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f961ad77-f6c7-40aa-ae50-e29b9722fa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca50244e-61c4-48a6-8bcf-66a509d0305b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dffff2-738b-4fe5-8d28-26cd3249ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6531412-93ac-4683-b791-af84e49f5506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1f694e-aa2e-4780-b241-e7541413ef5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "734781a2-04af-4c54-a508-dc2df1bc86b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbafe0c-1e33-4cf0-9503-08a6a647b699",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfbf049-ba55-4595-b1a9-3ab5d2122ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef9aa34-d4c8-4e75-99ca-2eae390dfcf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad9a697-e936-46b0-8ad5-c70ea6816c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0334c04-8105-434b-835a-e246aa78f033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdc0f40-b365-44b5-8752-6301a338f171",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879389a8-ef13-4cc5-9233-2347461445c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6280a3c3-8762-4885-ba75-a1b4c5249094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fe50b8-c17f-4983-8ba8-a567c64c48b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fed7bda7-a8fb-4358-a38f-a8dd1b819473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc11fec-0c92-450e-b56f-f36aa2261e9a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aaf2592-6623-4a0a-a344-77737678d0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa579875-a586-462b-b0de-fb8f7910ef6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e492e9b-b7be-44a1-82a6-f4a4856b90f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "835cd193-7c40-427d-8e44-f2d85af7181b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ce7d4-f075-4aeb-9e04-19576fe84306",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97fe8ae-03b2-43f4-9d72-405da5e544f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4c62f9-d951-45a4-895a-828741d4af03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdc1bd8-abe5-4f3d-ace1-f4999ee38a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1cbc34a-ceb5-460a-a7c7-e24f80095bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a7399c-ca60-4bef-9751-c8130c171c45",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff31112-5c0f-4850-8291-a1bc052a4eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea33ce7-d72d-4f5c-b6f1-df3be07a9f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e6faef-e3f7-4b7d-bd9a-a6eb2ba56287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfdec42-2db4-4b31-8a71-2ae9540ff035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f837b71-b1c5-4137-9c03-513aa6c969fd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4a412d-f65d-4d51-a4bd-20f32d920609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1f96de-6c1f-4afd-8258-fcd3c0ff5ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaa622b-7220-4104-a3b8-67607da7b92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c2a9f3-7f87-4c4b-87d0-d9bdb48048c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39864a3-ef8e-4bde-bb25-a177addbefcb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53de645-45a7-42bd-b5eb-06c5c0a672ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51320966-83aa-4547-af12-f26dd1dbc800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994b887-5584-40a3-9a1b-ff27644276f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c583a4ae-1cc9-44aa-818a-bd3f5269eecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fab87a-7386-42ff-8725-c7a795761773",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6204f5f-96ea-42d0-8086-8330599c205f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35fe31f-cb17-4fa4-b611-bc04d9a53930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f127ffc9-96c0-440e-97a9-573b67c5f278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e2ce35-518b-4c92-9b00-f37965a8d1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c74423-2191-4438-84ee-2f4862d17fd0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02a6208-71ca-4000-b1ac-f013ec103a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08ba013-bd3e-4a44-b177-dedbe4b36ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb25324-1529-4c70-ae47-aede518612ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d82319-cf4e-47ef-a65b-64f259b7975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa7f768-1881-42c3-9155-684607fe752a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1148596-6260-4130-ae20-19899f6e72e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f725c2-5f15-4d93-bfbd-416fb844f95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab6fd40-f49e-43c7-b301-a81add2e6fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d60721f-8504-49e6-a20f-6c3959c45b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f61410-fd1d-4e32-9183-1cc485119011",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46aa73f-7f2f-4f3f-b32e-7c99236b5287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8ef3a6-a4bc-436f-97a9-c7af5be377bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94445d98-1f40-4184-b3e0-08248dac67c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e53a47-fa11-4301-baea-73b722a12d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79397dd7-9b9e-41f0-9171-8205255c6e32",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b2504c-6a19-4f6d-941b-256adbbae233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d3165a-2cf7-4f93-89c6-b7141acb5f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2104f78-f4cc-4d52-b0ad-06969f5d7da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "825f3267-7a49-4d02-9679-89e668194249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8e1b30-2cf4-4b14-af5e-656eb1cc5530",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd07b86-901b-4b40-b0a9-2c2dbcf746d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53ef17a-ae78-433b-84e0-b9b151b1e0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665082c4-4e26-4980-a3fc-03b5734454df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfffc62-d4d6-4a47-a444-c5c79e49d9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cdfcd9-8ec4-4d40-aadd-9e556799c7b2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e7039e-df77-400f-8255-89e38d8d76fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ae84bd-b11a-4591-93d9-4b6657dafba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e68377-c5a8-45fd-a084-f54f285a123d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06de722-64c8-432f-9b97-5a95491553d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77a5509-2d83-43ce-86b7-03fc841c8193",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359cb65b-0596-40c7-8317-42c79d86204c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460dfd5a-7385-4359-af4b-3148ec8955ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c015844-2c46-44d9-900c-1c197d3a8d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b966156-3ce9-4d0c-aa45-5fd5034f9931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c076b5-e679-479b-a4ea-67a26f29faaa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8448bafd-6e23-431b-9c77-ca3424a97e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5773e0-62a7-432c-b792-670b1339e878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769d920b-20e0-468b-ae14-f032dc4d5774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22bf79ff-fc97-4d6f-8009-6d0f25980315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6134da3-2eb4-4352-8df8-cef19cdf88bb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a216d3-f46b-4d5d-bcab-935e475cd982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18991bc-bfd0-4232-9f63-b7caf7094a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1d4430-bc3d-4824-b876-645b967cda28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c36e291-2173-4d9a-958b-c13e8cf93fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85787389-0413-4d35-9a01-1e063856bcc7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5095a7f4-2cbb-4e11-aaf1-33172bd6aa2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a994e86-4485-454d-ad57-e786974b10ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46018dd-e50b-4811-89ba-b84ee7b976b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "113335f2-e97e-4ac3-bac3-6c3ed2392564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdffe9a-24c1-4f74-9cb9-160cda3d24ae",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1477d500-5d34-4f0a-ace1-a0b1f577be54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6bad67-5b37-473c-9af2-7fb04b933ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb7a700-ea53-4516-b1cf-8b578b86f3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "477bafbf-9867-4361-a457-09dc43f9c61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90eaf43-c655-4d5d-8ca5-b5b0b7b7440b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc01709a-8856-4490-b44e-fa3421c5a0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc055c39-c9ff-47a6-b41d-71698aed023f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42ad7a0-40da-4dac-a4be-9c88c2ca4e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a259d65-8bfd-444d-bc65-c870bf2cb966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a8c657-8f76-490a-a514-462bba94b98f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0878dd01-1af2-4958-8a2b-0d1e2fdd69d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541cfe0c-2b47-4d6d-a615-02df8a26eee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7d8559-2909-4fb4-81f3-893a560c00b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d11c0f-59db-4c3b-85c0-5f521c9ee99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0ea223-f089-4b01-8b9a-a5a57998a92d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df49509-5b91-4cb1-85c4-fd484a37518f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3e6c70-2204-44fa-a060-1d048955aee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a081f045-f36e-4e07-9a75-93798ba265cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "202e2e09-abc0-45dd-85e7-b9ca93747651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa07e447-a73b-4cc2-a4e0-e5dd9867754c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666d97e6-17be-4857-9833-55ce7d3a8330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966fa31c-b62e-4df3-ac5c-3880c62b6cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e87b7ff-4305-4cfe-9ea3-9e5c756b1b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3001bc-5d4d-4236-9cce-0225dcc25fcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9eaf24c5-87e5-4896-b5aa-0953d31cb59c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ca0052a-249b-4584-83ed-5e84b420db40",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c117a5-a156-4574-8095-93108752ca40",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "091ac8d4-fa77-45ef-9342-c8d42933073e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acdd156-9f59-4128-8987-ad9699564f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f0f5849-8a82-4bae-8d21-e042c90ea610"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e572e411-71ad-4b9a-b52b-069ae6023e5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "745d188b-efc4-4312-93cd-71a952168d37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f93d77fd-2659-4209-8420-9e76a11f9bf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7786d5a5-d9c6-4ad0-a6ee-3c7ac493ba76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d28b4193-73cb-4983-9eca-7a2e43953347",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "894404e7-276c-4c9f-bb9f-86890b1c02df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6342da9a-35cc-4004-869d-0da80923d1f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "226e2590-533f-4be9-a2ad-fac2e9a5ddb3"
            }
          }
        ]
      },
      {
        "id": "940d94a6-fc55-4aaf-a914-ee4e39afe39a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bed29c05-e2fa-4be4-9607-59690edd6095",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da2fb6d4-42eb-40e6-9de8-5ea106172736",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7da5c512-1576-4136-924f-ae335b9bdcba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c67da6-1850-43c0-b4be-4a308cde874a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f97aac4-b931-42b3-8991-e8cfd62a57cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9487c5-daf8-4134-b1c2-3e01be18446b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb35ce7a-decd-457d-91dc-6204c602d449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5525d04c-f378-435f-99f9-add21d6e84cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bda4a7-6396-49a2-9cba-254e6081da3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33683dfa-0e8d-4ac7-b447-1c39a9705002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b3d35d-0629-4539-b6c8-8b0fb87f25da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71f8df91-268b-4f9f-9a63-30aa00c1954d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bf0a8a-e6a4-4321-839a-b0d6c5d9ce1d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfc1e7f-c764-4e70-a83e-05ef8fd6daf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5bdb04-7ff4-460a-b58b-a998adefead5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620750d6-5dd2-4da4-9d44-b0862b84a1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf05f4d-c0a3-4701-9da9-4a8d9154e4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319b7964-d114-4ae9-8ae6-683a01c11277",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239f5028-b6cd-40e9-8eba-a675e45b4ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1ca98b-8d74-4af1-bbf2-30331e43084a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f22975-ec02-407e-b187-656ffdbd4495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eebfb38-5336-43af-96a6-e1431522b595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dd2678-4058-4eac-9973-51fb73092f57",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25de5267-f461-43d9-acd8-5abc7352ae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d85f08-8056-4657-b77c-56e4d2f075a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f61b9-bde2-442e-b3a3-4c7d2fc175ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36b6981f-188c-4603-b570-664d82a0c079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d77c44-f277-43d6-a46f-318cb63fc1b4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf4da91-edaf-4152-9fb7-52727dba375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9ab7d0-5335-49f8-9b55-aec13d4eeaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97518c3d-15bd-4215-b1fe-2990be5fec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f820a2f-e4e8-4893-88a0-afc7701495f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7408927d-a779-47d3-aafc-c1696c347515",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07a8e3b-a17c-4aba-9cf5-8596bd082e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f18167-dd26-4bab-abf1-e64d4929e1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dab4cf-363b-4a5d-8f77-e4f38f577ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c3582e-17e3-46a1-af97-943a8609cba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8e98d3-2e99-44ae-8414-03e23b48bf29",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360c6f71-7e7e-4bd2-bf4e-54539d41698f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4dea40-b7e2-46eb-9d91-c2114b95ed50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182c9fa7-6b26-4ebe-9574-eab47bea6912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d390b26f-f2fd-4d7c-91e8-bb48a0e97448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a6045b-f7d4-40ee-b4d2-79c89d5713fe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1d3c75-5f63-480b-9056-c81eafe2c7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43dd5a1-cb18-4b08-a98b-7baddd959bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10520883-afee-4c8f-9b7f-f1e4f46a3430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02f48235-b107-49f6-829b-9e057648885a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce4357e-72e7-4624-89d1-15e5ba03cc52",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3f06c1-03dc-49a0-831b-0677f91f5f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc363d64-d512-4f12-9a65-8f569ae8794e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b49dd1-631d-4788-a393-b7ae8753582a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17e13e3-8c5f-4eb7-88f8-6739b57395bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5de4a5c-e589-40ce-b88c-1dbcac16e8ef",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ca39b7-0893-486e-bb82-9608b01ce798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaed6163-2def-4044-996a-1aaff74c8530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671a319c-ed3e-4ab5-859a-c24bc472b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bb67d7cc-92af-4cc4-ac69-8bc12af24bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee545e4-6fb4-44b6-a077-d93b55dd9cda",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed16b57-8ff3-40eb-9ec9-9bcf7a1ff9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1fe04b-909c-4a4e-805c-3dddd34f470c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224575a8-e372-4d1c-bde3-80e00da31fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3e4905-d447-483d-aae0-ec1865e68824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5480a1d8-646c-4286-9466-d92c06598798",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8db669-eb25-434e-a175-daf80a69ae2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1a1ce5-867a-41f4-8b85-b862437fa222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9485089-ab26-4d7f-81b4-12de2fdfe966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff81c696-b48f-4501-8950-633c0730e34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5535972b-92b9-4bef-8f36-6a1b13f5ab75",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72079028-e38a-4c12-8cce-9726e56f2eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91ca3eb-e94e-47f4-a548-1a3009e70799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90772920-9ac1-47b9-9cfe-0e1ff06a6268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "af690c3e-742a-4f51-8f2c-1b41d5078ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5e69c9-4ccc-465d-9118-c8b6f428a9c7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba62d2a2-ef6b-42ed-83e7-3975cf776d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac9e22c-6dd6-4615-be22-1077ebe3cd2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79f7832-d1a1-4deb-92f6-c4c10873d02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "33392de2-2616-401f-b286-c0dc13270200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bb4336-b5b5-4e6b-add4-5f48746a1d41",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c999e3a-6b2b-4523-b17b-be14cb20a56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcdaf03-f317-44b1-818f-7fc864c4056a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834c28be-0b97-4353-a610-e3bb71d7c9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ace38bc-fc3a-4ffa-b09d-474e55125d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6242a8-8859-4e67-96b0-73531f2251e0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f104a0c-09e2-4af8-af82-d425e128170e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff1f66c-edea-4370-b3d1-39fa8693c62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e86c36c-dc08-4b74-96ff-29730b2055f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe21245b-05b3-4176-90e4-b315e87aee0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2797e1fd-e8df-49e1-8688-e8752dd4e263",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3744c36-942d-40ac-8780-76cbdf733b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee792a7-c3d0-45b2-8d72-59878d3c045f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca20ca0-f28c-4b6c-a455-e813437aa76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ef5c8b-1d58-4bdd-8087-ff9958ac39ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953bbfd5-718b-471f-a32f-0a89bc3149ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d26ad01-eb26-405e-8b90-64a01f5cbb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b98dd22-0e52-45f9-ab85-5b86817f6336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de62e1af-f444-4cae-8f3a-fca44e6bf21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5de9cb1-aca6-4e55-a451-4f611e7efbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696094db-704c-46a7-b0bc-30d3a527c460",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4c6033-ba58-427c-b108-7ddbf06481f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5646fec-06c1-4e4c-879e-b58b02c47caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bef547-abd5-4ef3-8751-7f206f26abf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d250c1f8-4055-4391-9539-42e43d7c8f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c48fe00-e53f-4fcd-aa28-523e752c1d8d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff612d84-e4f6-4062-a9b9-b51998252329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c35d9a-087c-4ca8-a571-ef950acb2572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94186f2-420d-401f-9573-5781f617570a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3461ad2b-7a51-4a1f-8b89-cc772a04ae2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1468cf6-7fad-40df-b357-96f549407fd3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcda4e3c-3578-476d-8a52-f07c07966fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9eefd26-af91-4d29-8412-7ed5e85c3323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd08a49-5e65-49e9-ac08-2d67cfc3531e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "087da463-2305-4ef4-a3b9-28cda4d5b387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3a563d-e835-427a-a744-0278d30bf9fa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b39af9-f17b-47e5-8a96-4c82cd89127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7490c08-53fc-4fc2-80a6-c7e725f000ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efefbce8-6dd5-441d-a04d-a1bad9959bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7217de-0b42-4738-a9d8-05bef94783f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0006d1b4-045c-4cef-96f3-eb5099167f0a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eff3dfa-eb4f-4477-9e3a-949f63e4cfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c371e15-5560-424e-84e7-327b1e79af4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326a1260-004b-443e-8ce1-a185decf0d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77eab810-18bf-45ae-ac87-05351a60bdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f21217-eef2-4f95-a205-405f7c91aef6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ff847c-6ed4-43a3-b31f-d63f57c003df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2b6117-f2e9-431f-a3d8-810f59147a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a8a153-d67f-4ec8-ae24-28ad4aab8ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbeb3604-1a73-47ea-9b9c-692222a2e2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b05c51-9b81-44a8-88b3-5ee068324cc0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bbf7b8-c456-43a5-b7b6-39f52cdfabfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c1f796-51de-496e-8118-7daf7bc236b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d754f0-4edc-437e-a9fa-173fed260bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8da691-d194-4b60-8776-093ed58454c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02de0640-d790-4387-b40d-274eaaf921c1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3178d9b-36af-4d48-b15b-69f9abac82c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77f756d-2001-4ce1-ae5f-ece33fe92810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899d00f1-c809-44ea-b647-253e21212233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d451f781-ee12-48bb-80ce-30a3e181e7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef0cdfc-c308-4b72-b0e8-3b19e0780bef",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4e4455-ed02-4eec-8765-51df51f155fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fefb2c-690e-41c7-abd2-313bced1ac5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9b142a-ac73-4085-801f-8b6a3affab1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5932d9c-c50f-4587-80bc-2ce58415e15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11d5be9-ca6b-47de-a6d6-478d8aee712c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510878d2-9b4c-4e75-bee2-2ea348835a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e37cecb-caef-430d-90f1-b136bd6ca64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2eb90cd-0ec6-4d8a-8edc-60c8f4eda100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5baebe-05ad-435a-94ab-5b839d9f75a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0a2d4e-91b6-45ce-93a8-71a859d912a0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91c7c62-e4c1-44c6-afd0-0ba4242e55ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e023092d-390e-4ba6-97d5-cc0d1d02a26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55f31b7-f86e-4636-89f3-7fa184bc6fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da32a84-aed3-485c-8d89-cb2edb93e199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5244fb91-4cd0-4854-bbda-78ccf3a2607d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b418f18b-c881-4f9c-afcd-4cf048621bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774aa8cb-54ef-4611-8091-b9ce0fc18dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a917ec3c-9611-4f2e-a6ba-a0df790f87aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7da22ca-5e97-422d-bb3e-908a7fe7a9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da31acf-5709-430c-b4b7-7e770b17a136",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ef602e-0c3e-467c-8e86-336e3b347e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ddc6f3-5f31-433e-b262-50fe34e91167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d196c5-c4ce-432b-abd4-c0251daf92b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "717ddcd4-ab26-4e02-b61d-39a674e83f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1492894d-da5f-4ce2-a2be-27ce3fde77ce",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fe9481-d264-497c-9a80-cd42b273c005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bcb307-1004-4136-abfa-e359f55eb2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bbd1b0-4d09-49eb-bd25-b4a6cd728746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c541492-33bb-4883-91da-9f34da295120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eb2a52-6a11-48ac-8ad7-8f34b54aac80",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184df23a-0756-4879-bc09-ba2294d095c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ef7aab-747d-4d60-b539-7f513bed055c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c37e9b-a9ea-4c5f-b2fa-b59298b0ab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c8e686-b61b-4e22-a915-dff90326183b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c393bb23-cccf-49d1-9e50-b7ce5b1f882b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b4d150-8f73-4901-829c-9757427e78f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6f21a5-0a19-4f65-bd8e-5138ea413a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e70d64-9dd5-4705-a5a4-f4959e43c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3000d93c-22e1-4d88-824a-109b50b6f722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d269f1-268e-4d53-901f-38e67220f41a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250da0da-0af6-4f15-bede-ad974e99e6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df0ae5d-68fa-4a3b-9d72-0dffea534d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b3ffef-c7ae-4b2c-8a5d-3243547f93aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "933718b6-10ac-4d78-b13c-1d88829da1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997e7bcc-862e-4508-87df-18bafe1e7a93",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfe931c-27b2-4ceb-8434-ed7133602257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e0aff5-61f3-4d38-bc2e-0b110991d327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e711403c-1a84-4b27-bc1e-dca699c07a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50269b11-d145-4a0f-8d6d-fc21a14b9740"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d490bb39-0ba3-4ec3-a31c-537d5eef0a0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "183e3d2c-cfeb-457a-a3fb-fc412bcb2a95",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809ef9ae-390b-48a9-8bb8-856c40424614",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9494b34f-1dc7-415d-85c8-54c3d8973ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abd6c0f-462a-4b83-a055-681cf6c820e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fea57ab3-e2fb-4aec-9022-eb7580cc3234"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c879405-b1c4-4a1d-83dc-6ee598672b04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f99039ba-b21e-412c-90c8-c0b03a49c4f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f793efbf-7cc9-44bc-b83f-19c77f342a48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7c13a6a-303d-45c4-9f79-1445296b14a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81ba97a0-5aae-4461-9f5d-868cb8d16d16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc37b6b0-d639-4716-a079-be1444ea7a1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01970a89-430d-4f66-9450-67d4a8d21948",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "653c8e97-1e85-47e2-aa54-6672584b58e0"
            }
          }
        ]
      },
      {
        "id": "108f3f2e-a9db-4632-a87d-a432abcccd68",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5b74b9a1-8467-4e98-b78a-d2d8ea260d7b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25ba6989-dc1a-4bc1-82d6-2fee2881b761",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e9c2862-ce78-44d4-bc38-269e4a02b67e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21606bf7-e1c5-4549-82b9-6cf8ce642e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1da2e94-b67b-4621-9d94-6ec532965c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821977a7-dd92-4596-9023-2201ea37b1f1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc834f10-6f4c-4bb3-bc09-322c9b636d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b905e9e-8563-4e87-8339-8177b3d59c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084b5ef4-b183-465b-97d1-a4f6d81ec6cf",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cdbcbf-ebbc-4f6d-8589-193091dd0820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9020eae1-2427-4401-abcc-0af58ed20953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e4efa7-ccdc-482b-8a91-a7dcb16de804",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e962f4c-25a3-490a-b3ab-34dc8cacfb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929eb352-ac35-4962-b858-14a1e541ec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032076dd-02f6-49a5-a7b6-2557017b2a8d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1772ecd-172e-4335-9601-082ee692887f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb31c658-fca1-4531-b897-c1596bb79ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf0b94f-3a23-4a07-b11c-204ae852f3e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e9ec12-03c0-4ed6-89a6-c74a8324246c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27d8b6d-bbf9-46ac-babe-0659da3c26ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09536ac-a78b-4f23-918d-dbb8a0d8edac",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e969b951-1661-4129-913e-17aa0b668193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a957c44f-beb0-454e-9fa4-87e5f1f86984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc13cf12-edbe-470f-a3eb-40d7a96df225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74197cc4-194a-45f5-9b48-e6bdf0e253a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74a06fe-5fc2-4d6f-b334-c257de4bc7a7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5b9231-5547-4d1f-94cb-9b1cdcf0314e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2acc77b3-0e6c-4508-9e7a-5d8d08f482fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a26ff9-85d5-4806-b64f-fcb77e51dd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab213db-410c-49eb-8801-49ab79939460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6370cf-547f-422b-8310-dbbf3a52917b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f644e7-21b8-4323-b7a5-c030a2a5dfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0f35d1-c59a-4ed7-99fa-c0485e6648a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ffe081-024a-4393-ad53-f484a6514229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d7ef16-c829-4a1a-9ef4-d240fb598f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d92130-b72a-4f72-9ae2-d62b53cf03e1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248ad6e6-e208-43e6-b7c6-138b1e65cca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "793aada1-8e37-437d-b1d6-fdb151354393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107c4e42-2437-4505-8c34-3258ec7613a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199cf923-563f-400b-a56a-e5e6eb4e0aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e73237-fc60-4e78-a651-6eb7277ae05b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190ddccd-944b-4c48-a424-40e88131beb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cb625c-3e63-4481-acb1-fc2744c4fbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c58805-c327-467a-a2eb-73bcd2a80320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccf73b2-fc62-499b-9589-1f002ddd9d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39aa6c2-4521-41ca-8bf4-ed5937e96cfa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0500b221-be6d-4e0a-bcd7-21f0c563a0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bb0a76-ff66-4590-95da-927c7446da3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f1137e-33e4-41a8-bbbb-fe6251f19ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b3c2de-7eb5-4637-bee2-907a03a4780c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc5d1d5-57e3-48c0-9415-c7de071927d7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307fade7-b578-4493-967a-1388b26233ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a1cedf-9811-46be-9033-0b5d9f5c22b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffdda43-8faa-4701-aea1-2f08e972f48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161dca00-7da7-4ff3-a49c-62132c29c210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3976e569-9cf9-4755-94b8-0ddd6a67a8ef",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34604a95-1168-4fce-99f6-196db9be5541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b97e3edb-3906-43bd-82ad-6e32edc519c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fafb7a4-54e7-41d3-b2dc-8ccbd6aaf898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1a5ab0-7556-4ffb-a80a-b907db4706c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6640c90a-9631-4a89-9392-1c1788e46682",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f496a2be-701e-415b-b860-319b09fad33c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4369a8d-c887-47cc-ae62-831c67abe257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c6434c-33fd-4237-a8c8-fce66af6f47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e020f36-342c-411b-8930-e4745aebb56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5349e2c-8d0a-4cc9-823d-dfb890eb9ceb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596e4354-d0a4-40a3-a69c-4298c955a7e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd758680-0313-46bf-8808-965b8e3c96d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98fed14-db56-4c72-9ca9-dc06eca5e5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d32b21e-82e9-4ec3-b4e0-b1af505a193a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845e1e2a-353b-40d5-9a52-b5c700f8ae43",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0fc65d-1a5a-4a9a-8128-2e934c214266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ca7682-50e3-4d42-81d1-bdd883f1114b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9559d905-4040-40db-b6a9-46026c3a52ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6108ed8c-7714-43c3-93ca-9e3585959882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64989be-b0ae-4bbc-a0e8-34bd77ade3bf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f903c543-880e-4536-88d6-3d23b823545a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1889a01d-0d56-4918-b072-8bf4f54b8325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1573b0e5-601b-4933-b370-78bab71ff7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a8539d-4b47-41b8-9503-c98bb9d54f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cecadba-737a-48d0-a34c-2ca8f8569844",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c400fb2-ff1b-4d42-9ba3-6334a8a8eb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e6302c-0019-412d-8a8b-171fb5b204b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0746cfdf-85c0-4719-b1b6-3fab1e067b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465e5f88-5555-4903-854b-03e75df9d5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a5e8d4-3829-4e02-a07e-08a91c648bdd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8daa5cbf-528a-438a-916b-1be420a9c781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71ded86-c853-4ed5-b237-8ed30b8a109c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe8aef4-dfcc-4b71-af0a-507ff601aa12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7efd4b4-cabb-4316-961e-b140b6339040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a72337-06e3-4d6b-8a7c-ec2c8af2177e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74dd6b2-faa7-4c75-8339-930c1e88a606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd00af4-7ee4-41aa-84d1-25f7cc63a8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f257e4-78e5-4223-b782-e051c1066b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26df2364-5093-4e45-85b1-6c5954d1da10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb85d61a-90b1-4d42-bd9a-81c6074850fc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4807f25b-2bab-41d8-a3a0-309d5b09dd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016f5c2c-77e8-499d-a3b0-23c48d81ef60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49259cb-788a-498d-b0ca-0419f92df67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de643478-29ae-4f9c-8b6d-3f5f2e7e2b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd59a17-e969-4f4b-afb4-73c78dc4f97b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759a2d4b-5fe0-4b15-be96-c3049734bfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c763da6-5a82-4d76-80d1-c41992f33d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cfb255-7240-46b1-baa0-b6c2429e7dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d94b266-903d-463e-a910-fe41f1c85217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05d062f-690f-45f6-8051-5daa7c1872b4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2c9c34-e607-4f1f-89ad-96842c67e8cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d528b4ab-e8ec-4e09-830c-b58ca1ca66ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bca2cb6-d681-4abc-8828-99c1533c1a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2385d4bf-0336-4f9d-b6c6-880e91c5d112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6526cef9-843c-4dbd-9f4c-5c5f48e7ecc9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b579c6-ccce-4998-8e41-779079d0630b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b006e10-97ee-407c-a2a2-57a4d39fca90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3bcc49-db9d-4eac-8db1-e693c2fa4463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fb2dc7-eb3a-4118-839b-2aeaf353eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4e279b-4d95-40af-b959-f5c0db457933",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd852d58-be10-4196-b80a-6f6a88076210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "201dffe4-2f08-4f4d-91d8-97b6ccd63cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f4686d-2fbf-49b8-8ced-67f58000e233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33d4da3-6346-400a-81fb-2cf2d3038687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf0befd-67d9-4d63-853d-ea7b08dbd4bc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3711fb-c977-4fb5-9eff-5407cc18d356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd5524d-f70f-4d15-ac19-f6d815bc93a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78edf632-9e13-4f18-bad9-b42102462a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883bc927-723e-48ae-8e86-a1cefe696bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c80ee6-5950-430c-be45-88df59424fb9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f560c5c-cc64-473d-b0e2-0100ac4dc715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30d3e7b-ec46-4498-ba3f-d84c344e9a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11f9502-ae3a-4bbe-88a6-fd174e6f7b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2965747-969e-4d4e-a9ec-6154de257942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29df7251-a1f6-48dd-9757-6394281b2566",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995ec2f8-06bf-44c6-950e-621d54ef2c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a999bc-65e8-40d1-8d84-50fbe05e29af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60dce6f-bd59-4648-9195-2e7cfe409433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d13ed72-adb0-46d8-9a0f-159ae753e809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11a83d4-0c30-41e2-ab49-142ba8208456",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f025264-6e2b-4f45-8716-c7d97650f4b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3cff61-ef0b-43d5-a3d0-eab77d900b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b5178c-f8f4-43fc-83d5-d5dd3b2e8675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d694bce-5832-4f0e-b727-d10c7256bc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65368be6-a5f7-4f19-8c5c-03c98540eeaa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55886ce2-3e46-4141-a9e9-4513cdc374f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "908489b1-f38e-405b-9280-008710e42421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18f2374-7df2-46b4-8689-730e9bc3744d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76fed93-6dd7-42ee-ae62-b0983c2f03ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1075e9-a9e9-4159-8cdf-0826c52ddc98",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599e08c9-b963-486d-b66d-e667619e1c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ba7725-075e-40cb-bbed-8773b15a3df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f120824e-90ec-4583-bce0-1ea0833c1792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488c045d-d54b-4aed-8e21-72ab5d6eb380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e8221c-5653-4796-80f3-c56720cecfd1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179922b5-ac3b-45a7-a6db-b12e4ab653c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d712740-edd6-4915-a5d9-9c81a21ab404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5764f729-529b-430c-98b4-da12122933cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e347b76-4b37-40ef-9e2c-e318e9428eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450a3cab-19f9-4163-b944-306adbdbd700",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecca17a1-8625-435d-81a6-57c35f50ce08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9be8728-8b5e-4137-8029-3c2369e3a9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1280e4d7-dffb-43df-ad10-eb03a807e0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bd00b2-1355-4d43-8e16-5b3f8f69b5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937014d5-d287-48d9-a18e-e7b557cd583d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8275da1a-998e-4d6f-a85c-926436fd2d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc84d799-b703-4f42-85c0-7772c32b6a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a005ad-5189-4325-8bf4-ce53eba2dba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d1d82f-a69f-44ae-9e6e-d381179e749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438cfc33-9066-472a-a67d-40d2ac98ac5c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e97c4e-8d98-4c78-948c-7e0c848a2420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18630e4-5357-4611-b352-3f67288b97b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb81a5f2-f4f1-4390-a2d8-87b9fc3d5521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67b2279-60a6-4a62-aee2-179deea2a0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d9f36f-a3a3-4a9e-9273-24597141fd30",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d507a0c-d426-4cf6-8fcc-7c6befeca507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1986f81-553e-45fe-8913-e0304f354205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fbfc91-4f63-4ec3-9231-9103a80a4f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29bbc6e-6969-4966-b3c5-013047456f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c632f701-acda-4365-9388-1800153ddc25",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d612a3-926c-428c-a724-12e9c9f2fd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f252af9-471a-4cde-ba55-04a30dcb6a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4e7e5f-c384-439e-aad6-220b7022850e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88da5682-6bd2-40e8-92d5-ac6effda0850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d320ffa-42e2-49e2-9f57-d4c48ad3a6d5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab6f9e1-84f9-44dd-beea-6ca2743e6584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e1b741-bc10-4eab-8dfe-8d6935c2652f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83aaa44c-29ba-4ee0-9a8d-f25ba2377fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30bcee6-f9a3-4992-8e4d-98ff437c1142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6131c55f-35a0-4b7b-aa93-f71fa616e577",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d93381-fd95-4da5-83b0-00bb395eacd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394cf02d-e3a3-43f7-8a27-a4fabbb64693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91107445-8fd9-49f8-8ea1-c1d7ea67849b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6880ad43-d76b-4222-9da0-c3a59019052c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78849534-25b4-47ed-b498-106d47ccab9a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549c4c2b-f483-4528-9e66-b5e9fe498ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb794647-f1e9-43a8-8760-17e93b50ec27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e785d1-2d1a-4efe-ac08-8a4cb4bc3b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd388b9-14ab-4d22-bf5f-a2aeeb1a3dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973f5068-9ff7-4ea5-be5f-6a0f1a8e3fd4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb8c192-ba64-457c-9964-3afc38a0d6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623c8465-6636-4204-9663-92586641e7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad78435-41dc-46a5-ba5d-d6a92a202238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b511ecf-6de0-47bf-b386-d5e0f5540210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01bb277-6309-40cd-b8f0-41dd57c8154c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9533c577-1140-4df0-9d9f-7f02bea647e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26bda41-f809-4089-8f5c-7ad786856cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4096b131-fea2-43ca-90c1-e7d9391c0789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ac1cbd-3d9d-4307-9ca7-04ec22bbd19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e3d92-fd34-4187-9fbe-8b9a31ebca62",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e52ba7e-b6af-4c7c-8769-e900b51b1141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71858794-1157-4010-99d2-4bc01f739c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49955c6-34b7-42e6-b662-531b90030653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9cc37b-8f2b-4022-bd1a-f79d181f952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904b4f58-294d-454e-b2f2-b7e712848583",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a286b283-001f-4611-8b5e-aea5ddb70cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f16b28b-48cd-406f-a363-080bdcfd406c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4feb08-3a2d-46bd-abd4-c0e9914bafba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de61b179-c0c6-4716-b1ae-f66f47e9d8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c524b2-0b9c-4f6f-a909-fe24d3d75bc6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34969c1-07aa-453a-bf99-a377c36fdd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62511b9-2051-4a52-82c3-3e67f772003a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddcc307-630d-4880-bac4-797fb366c8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abc94ed-aa7b-4f0a-8cb5-74053731f6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a384f88-5cc0-4fe2-bad8-a1e4a99f439e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f1eeae-6662-4b4e-976c-87d094dd93cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb3f6de-10c6-445e-93cb-73a2101c6940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa72a5d-8d52-40bc-8980-a6183020ca7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5dee48-7cc1-4cb9-8069-c072ee5af6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6b3664-b59a-4011-8840-50dbe5875257",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db60c80-3878-4569-9ff7-53665d662c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70846c67-e908-458a-a252-c74f58cd0a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0d6bd7-7cc1-4e55-88f1-71b59336d63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e20c79-fb68-48b8-aee4-5b4149e7e337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253204d5-bce3-482a-9ae9-0f1fa0391470",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3970bf82-a7ff-4446-9cad-78e492422f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ab1f12-f0f5-4eb0-b45f-8fd8213f5b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d09622-819d-4664-844f-a7e1c92e42dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05dff10-3a89-4f4f-8eca-9630785b81cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5a2f1a-b672-445a-90f3-57146ccd4a68",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa656083-9012-4869-9e5d-e1361ea8b698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a7f9ea-9374-4b20-bbdf-466831c3bf77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5b531c-a51e-40d9-8885-2705b7fa4403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39d7249-4567-4922-a943-946b98d3dae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd58f2c1-c08c-45d5-9388-c69f75ec35d7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd29a95-1818-4c1d-87b6-863b311b9718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb978b2-01ef-47d0-b0fb-6fb2b95cd78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807f326d-dc94-45e8-bc2d-c37426e8db2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f706171-db41-4596-aa35-151c33e6629d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcbe64d-141e-4599-b907-a7bbd1e35beb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21068dd-7184-44d8-98ef-f7bbe73a2916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221d7c8b-c350-41a7-b792-edd29af6f6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774368e3-7d13-49c1-8a4d-7ed57a3e638e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a599b3d3-233f-4fc7-8553-d55f3214f080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7452e65-bf00-4048-a0d2-407b55baca03",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535b8d58-7619-4e4f-aa14-a85a479a0c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13709d9-68c6-4ead-875a-772cfc2a9162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b57716-c177-4d6e-bafe-1ffa76ed5c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dacefebc-6861-497c-bcdb-6769f3894f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eda8bcb-a307-495c-8b90-ea1b59f18bb6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf17e3a-6122-466a-9daf-ee4be8453e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8e4429-6f6f-466b-a0af-b2d301b99148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd154a7-ba64-4512-8fc8-f28142de81fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3753e94c-385d-431b-801c-f8490869422f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe2116-fef1-4093-b9c5-c0f4983d16a7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60233b90-e887-4413-8b1e-1f26d32fa9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5ab63b-92c8-487e-b5b4-25225acd2599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fb161c-2511-49c5-a414-d25ec35889ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667964e3-96e4-452e-8e8e-9891d8cf4a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9825fbc-c105-4030-a5ac-5219472507b0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20080ed4-508f-4bc9-8f85-30cd7094a64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a89e52-8d80-41a8-953b-e02601a975eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0afbc98-368f-46ad-b196-9a7adddbd92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c606f3d-e15f-404f-b6a9-999ddbc57e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb96ba09-cb0f-4651-994f-174206a40444",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effd4cae-4037-43c6-a8c7-889a27394e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba2834f-c42b-43af-80ea-9c91c7db706d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23659fdc-3349-48b1-afeb-3796f375b3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13826e8d-edbb-4880-ac7c-918b814939ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3993e0-2c29-4275-bf32-826df9f46dae",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472def2f-67d5-45ff-975c-a21ff078cf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafb8e6e-97eb-4fb2-a950-47618c285670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3781a200-ea26-48fb-b676-d100cd3df6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e63a34a-e736-4724-b28f-173bdc319519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d37c898-a8ad-4485-b031-81a332c94702",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31fe23c-6942-441f-afdb-2e3c58cd1921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590dbb89-df4c-42b6-821e-f463e22d2541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35386eda-4b69-4faf-ac05-cb516405dda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1293a2a4-3466-41cf-a692-13186476b1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780b8570-7c59-4405-b42b-f11c49269712",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7666dd-a64e-4688-9c44-aa79f1f9559e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb643bf1-7f3f-415c-afb0-36448352725c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6eba57-7c79-4a2f-93ec-3ee6e651ad3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515d279b-5331-44e0-9a3e-d299ad2c3437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4bfbbd-3144-4c2a-93ad-120adf6572de",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e3920e-672d-4505-89c2-fdc51c17a68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b15d7fd-107f-4c9e-929e-e8abb86d73b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09eb9ade-7178-4d17-8dc1-4c528a58a4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c996c8c0-189c-4f7d-acf6-182b8a76ebfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f794f85e-e9ba-46b6-b401-ff36bc19bd80",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d82033-35b1-443f-b04c-924c4434d274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc579eb-a6c6-4748-89a9-0e7d3ef3317a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896ecbc1-1cf5-4640-ae01-2cc2995beee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5658ad-6f9d-449e-a59e-c8075da66536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91b3626-af7c-4235-9c1c-2bdf447ac12c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20641dda-faad-47f3-9c03-1a83d68ab91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b801a7a6-530b-4eb7-8fcd-5bdc7dab371c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cf4b62-a909-49a7-a6c7-9327450b80d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0321bab8-062a-4adc-b19d-6827f032e4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed04f39-e0f8-4a3a-b51a-995fea956f3e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052bbca7-ec8f-4d60-9737-e83dd1bf5763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8508e3aa-31c4-4a16-9e57-8542ccec2d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123536bd-e354-4265-af00-76a4088b62b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28a033c-eeda-48c0-a9fa-155a0813210f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3b371b-259d-44fa-9128-b0f5b7a08e1a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e5879e-847c-4330-beb6-1f460d221636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5969b60b-8f74-40dc-a167-ea370177e110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129d1ba8-38fe-4678-84b7-dfebacb828a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbb5b99-0455-4b7d-a3e3-813b839fc0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8cedaa-3f2e-412e-a030-436ec0c9b21f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dbbb8b-a628-4f0b-b522-1b7b8f8afd15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3bc3319-e046-4750-aad3-07abc6c64604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f5062d-b707-4ade-adff-358a410ab99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690437b6-6290-42f8-b6ee-4f8202ce9b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a31bd1-0e53-4f92-b005-5d8a6d245516",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca55f0e1-2efd-4323-9909-69f9363c9fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a997b92-2f91-4cae-9c02-13f7e9af2527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6a8645-6464-4c78-a7fc-d54c7b933865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc60e5bf-9ba6-4a7b-a47d-c66b067be20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f57c6de-68bf-4525-88ca-7c4330ee2ac2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa37eb7a-a725-48eb-8901-e1314ba3acb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "388e35fc-59ec-4b6a-bbc7-56126c0f5852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93ddc06-eee0-4ab3-9163-dcb0dbd97ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe7dac9-292e-448a-9b83-5a988e1dbc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c394069-8b7c-4ca2-a3a5-8f9a85d3540e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a932c0a8-f8a2-4d21-80c9-71933328969b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74358f1-03e5-4d36-ad18-9ae717190b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96364a38-1671-4647-ac91-de8adbff0b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec34024-369d-4841-a2c4-4eecdef1bb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080c3404-b4fa-49e9-9ff1-a48b77f1115f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98e1079-1027-46e3-90cb-3fdefdce38a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482c1139-afea-4242-b9ae-cccb32fe31a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4e22e7-8574-4385-9541-9adbf73dacc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764123ff-1496-4991-9aa3-1e5ec87c82a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b9d21f-eed9-4017-88b5-aa44646fc7c0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01a690e-9322-4410-a1cb-04adf80e853f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cccd669e-efda-4c82-921e-3749da05981d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1347764d-88f6-47d1-ab27-dd1934a406d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7055ed6-4143-4baa-a29a-b098c5948430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715690ea-69b4-4bb9-a319-ce9819463366",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae2b3b9-17df-4c11-be2d-23326bff2675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d84521-4b6f-4b35-9a50-8e764df86070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d81dec6-a545-41d2-a924-a0febfd3010e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa85b1f1-d8af-4046-b7b5-a0659a0715bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd5de8d-a717-4938-a4ad-a8d639234418",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dee81d4-963b-437e-9f69-82e34b113984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db890513-c6d7-4d28-8ad6-6f8211e461e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0586eae0-e681-4992-9f23-56982f3b65c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbb196d-c96b-436a-8fbc-0c3d9e0765f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7737df-2690-4298-a764-8525e46c4dd0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cc1021-5202-4319-9f81-0ae1b21b93d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59b9c03-3157-46fe-a4d0-c702622e7f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33c6f14-cbbf-4ff2-beeb-96006bb3b462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82454aa9-00de-4cc0-8426-fba9e8c9d357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1f69a4-9b3f-4191-9080-c10b4628533c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7406055c-0673-4329-b789-938aca19ee27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b82824fc-51b0-45a9-8439-2f5d80c43a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d562aae-a1be-42ae-8149-d18295884e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a7f409-acbf-46ee-97a8-6a699a4efda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d41287d-bcc9-460b-99e0-fd17617710cd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db42b39c-ec1f-4e06-8a34-23bc0cbefe41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a188c1-e847-4083-9dd1-51511ef47adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af5e5c5-04eb-4242-9570-90c73ad5bd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d352bf-761a-4089-9e63-a645c49c47bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d544509c-3cc2-4251-abe6-d05a0235ea59",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c0c564-823f-4840-a6e8-e77dc4e5ce64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f14d9b6d-8e7f-4db0-ab24-c4b5df29be16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83eb76f-03a0-4113-8256-36e8d35435f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7140a00-f568-4fa9-8627-708485fc84ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed015b08-398c-497c-90f8-597ba1bfa42e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5c67b9-4acc-45b7-82f9-d73812e16bbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f396171-dfe1-48d9-87c6-4d2713304142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65328160-7541-4a24-b247-5abaad8c2917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c644db-d963-429b-875e-26c78265fe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3b6ba4-b4ac-4a4b-a988-3477ec7b3bb6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e12ee5-6332-4cd5-a071-95148560b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e337f0be-4a54-4fde-870d-d984af10dd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295cdc70-b542-4834-a577-3bbbdb14a16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb6276e-cff9-4743-9367-119addb9b1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfbb66e-ff36-4fc0-9a7f-7b840d83a93e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25ec38b-5bd4-4847-9296-634d28eee825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc2e69cf-739e-433c-9657-717f156ac0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c2872a-2471-40e3-a9a6-7460c61d799e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc557df6-7e55-4c3b-bd33-4406176b7113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d75171-63dd-42bf-87bb-92f557063f11",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edd8144-b341-41bf-ad1c-e1cfef0eb99b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c585a5c-f1db-4e0b-bb01-c3a1bb739962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad734a3-7690-4297-8e1d-84e210db46af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1702d981-4a1f-4c85-8217-38fb4e8aa57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a56d6da-b0f2-45d9-82cd-c51040e9e57e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6eef7b-ca3b-4883-b3ad-0be2f89fbfc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd771bd0-e20a-40c0-a914-72cec1675045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1a8c11-8916-44be-9c00-63a98eff64ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79099fc3-5d79-4442-afa9-4e3ab719636b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6690e6-4244-485b-b81c-3d2eff591ed5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724172ca-4d1a-49f6-b25c-64cd94f77534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e024ff-516e-4980-9fc0-bdc5698755d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a16dde3-aaba-46be-89ba-37bba32c395e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb3132e-9936-4f62-aaff-47ffe5407b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e6aeb-d566-4b15-95c0-06eb9a6d7580",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab80bcf-0d43-4b29-976e-16a825412ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4989779e-fd95-433d-90ff-1165c2aa0592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24accd1-0a42-4cc9-bc9b-691f567a12ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dca9dc4-47cb-4cda-bcbe-3822774ec142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a596cb05-827d-4f4b-a80e-94a33048157c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f87903-d040-498e-98cd-62225ad748d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16ada1a-d409-4f4e-b384-bc85923a2cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee7382e-183a-4ae4-b28a-5e7e0b473cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c60564b-3fa4-4cec-b856-210fb020347c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a311ef-0478-457f-8862-b8fd41958a7c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c99f4fc-a9d4-4e93-8c00-84718b2a22f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1b2e08-5a7b-4a00-a6ed-4113076e27f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17133987-a64a-43b9-bada-0c611e3b4d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4629a48f-c983-4a7d-b261-b66ab64874da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55809a2c-141d-46df-a32f-37b58de90d56",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6361a394-f2d6-4d9d-a66e-9ecf2352410a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbbaf2f-f033-4d68-9812-4883647d3727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce96103-9e5f-4c8d-a80f-c69450e18e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c9fc13-881b-4935-9253-995ab7fc3619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1318bac1-12ee-4598-bbcf-8f50c670afa2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ab871e-f658-45a1-8a30-c8dd018b10ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd3d6783-3833-43ab-b11b-e240cc8a160d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eff946e-3f63-4339-be52-d3fdf2ff2fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fe2cef-fb07-47be-9148-c646835a7526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa50849-ce04-41e1-ba70-558fcecb2fd7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d0fafa-1b89-45c3-8a52-4d478e4ca4b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "678684ff-7ee0-4d00-928d-78d8093e265e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b3affd-4fb3-4ae4-ae65-4356d7c783a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0979ddd6-b8f4-4689-bd4c-63c7f5d7b432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3975cfb-6fe4-4345-9720-f951b9b41c53",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd63645a-456d-4296-aba7-223c3cf11009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8185692c-e1b5-4c3d-8636-c2c903ab5c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3855b1-9cea-41ce-8cac-3e17b31cc189",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e0ccbf-3bb4-40b7-950e-c290f97da0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1742d693-efd4-4bca-b91d-f4e71d7bf533",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7edb27-bbf7-4bc9-bf5b-71242a424fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3feabcaa-226f-410f-bb19-5354cbaed5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe950e30-56ab-442b-9b3d-93548c375bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a08c162-3e60-4ec0-93f0-c036431877f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b50cf1-fc12-47df-8283-9a1b36c9ba84",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691dbe41-a5d2-4b76-ac5c-9abc7bee1362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5c5437-a98c-40ba-af30-076eeb97bb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a459f5d-579f-4e8f-9c30-d8c24c104043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bdd73d-4d40-4131-9ae6-9514b4adfd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908b92db-e04e-44cc-bacc-c41c7cf7d484",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5a714b-43bf-4295-8122-4fc53bb319ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694ca194-6a08-4a64-835e-219607f83188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f790f9d3-7e6f-4bc1-9c1c-e9062cfa43fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce2f10b-d6be-4078-bb90-a03f67f39199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f65b621-4df3-4156-a16e-dbe5ed25fc3b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd48aaa-cf1f-49d9-bdaf-7100c0259207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "467f4da0-df07-4c31-bee1-59ba0b9ab018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f60640b-f66a-4b9a-902a-ebe27241eb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb1e23e-ef98-4feb-b9ef-ef4ab209f6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfa616c-4bda-41ea-977a-60e814e418fe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ab92cf-92e0-4cbb-af8d-4b32497da261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba276e1a-0367-43ed-8b1c-3d2be68d018a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f8cefa-9f08-4f1e-aa2c-21dfc68982ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b434832b-a226-4539-b2bc-05ab58ade2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284c3ab7-638f-41a6-91cd-afaa6a5dce64",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10378730-0721-4283-8ede-d4bdcf355455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15bf1e8-6dd6-4534-b9a5-ecef1b99d7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd3c634-9d4b-45b1-a123-cad2cbae5a4f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb38b7f-400d-48b0-8694-497f8d929c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a13ed5-bcaa-4db0-b5d2-8eaab51d061a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7778ee-17f1-40a5-bcea-9135f800b9ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69e472cf-9a25-472f-8cd5-5e1ebeafcfcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe4c80f-df7e-4c9b-b11f-4ec3a8241af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d45c09-8e8f-4a62-a8ff-b2aa17bc0fd3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61173388-3116-4507-9a97-103ad6b32c3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "227897c7-834b-4dc5-8f14-20da9b4d0182"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35bacaf8-d9dd-4518-bc9f-1e3e98ec3499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "851f8026-dd3e-430f-8c24-1ad9b45482dc"
                    }
                  }
                ]
              },
              {
                "id": "50fe8ff1-e419-449f-b403-ee11e7aa6cfb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5253ee7-26fe-472a-ae81-e1bd75f7c8a3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3edad6-1486-4cf5-ad95-8e38e2443c3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f2321a8c-feea-4fdb-a1b0-48e2ee445c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edd6e1f-2cf1-4620-8697-1db92c8a7f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e322ab55-ba16-48c1-89a5-141332036622"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c964219-6d84-4169-967b-5d69966b1144",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2eb221b-d108-472a-abbd-fa0e1cc843a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a7a41ef-ca0f-47ff-8c9b-d1a7dc607979",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "098ba28b-8b38-46f6-bb49-b47ec7e7c7cd"
                    }
                  }
                ]
              },
              {
                "id": "a8bdeb02-e9f2-48ab-b714-6361d0e9723a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3c3a39ac-315f-42f2-ab41-dd46e100a6aa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cc288-2885-423b-8284-9e18d968b206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "79951bb1-80d4-4b36-a787-d5b4f5962c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8af39d4-bf50-4611-863c-91178977ec57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa61aae-c166-4bc0-89a1-970a7a12fec5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2db25282-a9da-41f7-aece-9dc9b57edee1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd9d03c5-81e5-4d81-9332-d3efff2d9967",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d863955-4c66-4a15-b2e1-c1187914b48f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2fb31d8f-37ad-4369-9174-7bc62953b4bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc439658-6aff-45d4-889c-562915415811",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93c700f7-4a93-4d4b-8418-0db2178e2056"
                    }
                  }
                ]
              },
              {
                "id": "92bb2d75-6a78-4eee-983d-aebfcd58d41f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51f6b5f8-9928-4c71-a608-9911e39167d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2a0fcc5-c4c4-4db7-aaf3-2938be6d1a3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa67193d-1beb-4f1f-86e6-4b92d86fe2c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "042b4b1f-6614-42e9-89fc-2de61c7f37c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9dceb21-e005-4b5b-9811-0af6dce5882e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5ea127cc-ec40-4e8f-a27d-0e88a21a82af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed01c36a-b668-4ef8-9f65-6bf0d181a3b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e27cd634-3a9b-4f39-990e-06f095d42dbb"
            }
          }
        ]
      },
      {
        "id": "98fce85f-2ca5-4fac-8602-50054d577f8c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8d3d5f20-018d-476f-97d1-87096a80587b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "907607ca-76ca-4b69-b3c7-ed4bfd4789b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e8cdf7f-dfa5-49ac-bfe7-b3acdde80aa0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf48ab5-7dcf-4c87-862f-9ad0ed362296",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1ac105d-240e-491b-9660-6e2cac754379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68b5563-bf9f-404c-91bc-b103a6c3a73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09a5cf94-ab99-4d30-9238-a77e49e29bf9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "941424a9-5e71-4c59-85f0-b465dc6d55d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dce4d49f-ec38-4400-9e58-941848ad1d66"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09c1e466-b571-4e3f-9b19-14187d44ae7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f9a5167-c3da-4072-b02e-846cde49dbfc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60a3e20f-69a5-4adf-be7d-dcab00f7c202",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1843a8a-a945-499d-8e1f-8d03285ab13d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df7b3104-4e88-4a73-b97c-a46f9239e654",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "950ca6db-bfe2-4f3b-98c4-b5cfd413f62f"
            }
          }
        ]
      },
      {
        "id": "0b8f5601-e036-43c1-a284-5533ce60593b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ce07bc76-4072-486b-8e6c-f3a48f9bfe7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5affe07d-59a5-4949-9210-e1b679413b03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec5145a3-371f-422c-a2ce-32df0ccd4809",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548dfdc9-6f21-4e8e-b2cc-00cc782f29d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b32e7c29-3c69-4ede-821a-caa16fcb7274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e478aa8-adbe-4189-99a5-7710bdc996dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10236096-ee75-4672-b8b4-1a8108d1b173"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5ede250-a904-4411-b866-562d3d202808",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49e4069a-9373-4087-83fc-e4556d566f2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7795003-116f-4c31-84ed-d4cf48f77fe6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9bf4b48-0ad7-481b-860f-8f539ee32e38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4029dad3-fe58-42ec-88d3-3adda7b3c91a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e287f186-388e-4403-a430-e1769ba7c93a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a1f1df0-016d-455c-896b-13525d644973",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7311d282-8df9-43fd-88fa-c29c7f944dea"
            }
          }
        ]
      },
      {
        "id": "29de16cd-e89e-41ac-8e4c-0875242476e7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e292d221-b97e-4c4c-8f68-32b480a993ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77b2dfac-d7c0-4191-8df7-99fa549483c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a48e3a30-5c3c-4c85-bee9-efc94b42ec36",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3881a8ad-ea1c-4766-a4d6-acbe96621e38",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39e3604d-e7d6-4391-9c4b-c800ea97fa92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048db892-6058-4c5a-8e8c-d13992ac6435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8cd35ce-e7e1-4150-bdc8-5e3b2c23e9dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84836d65-22e5-41b6-8207-3a4b4a77bbb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2aec44ac-bbe1-4a85-827a-12b06ce2c10e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f6a204b-6cc3-455e-bf69-5438ccc06730",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebc37b59-c316-453d-b121-184933a1b610"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9f10ac5-967e-40ea-94fc-51474ffe7b19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "16ca000d-b9e5-4f43-b5ec-335c26ccc14d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14329e0f-20c1-49fa-b34b-8ff88f35dcfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d712051b-f25d-4c77-8b6b-177ef6ba3c03"
            }
          }
        ]
      },
      {
        "id": "9a2a2e9d-a484-4f99-98dc-058823353cc4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b3ce645-e59e-4ea9-8036-5110f0252279",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b568fb75-17ab-498c-a9fe-d5e4bc10df38",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "948dd7e9-daa6-4fde-bf57-9a1a5dcf014c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44f8647d-3011-4902-a582-4bbddc47d45e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65832a66-e867-4a04-8516-a2f2c3a4c038",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.343859649122834,
      "responseMin": 9,
      "responseMax": 674,
      "responseSd": 78.55775173102232,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700872432077,
      "completed": 1700872459220
    },
    "executions": [
      {
        "id": "f49231be-042d-47da-87e8-4cf81981c4c5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c2c55dca-b231-413e-8e54-ae8b35e795be",
          "httpRequestId": "488933fd-4dba-4bd5-a0bc-f9090df60e4f"
        },
        "item": {
          "id": "f49231be-042d-47da-87e8-4cf81981c4c5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aa1e869b-d37a-4b84-a78f-55226fc01839",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "1d99877a-9f7d-47a6-a5e5-c70d81194469",
        "cursor": {
          "ref": "e8a95607-f704-4aa9-a62b-e1fc844368ce",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "98cfd883-dfb9-4157-90e8-c9049d2feeb9"
        },
        "item": {
          "id": "1d99877a-9f7d-47a6-a5e5-c70d81194469",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6242377b-8f5e-420c-9d48-280c1b35b2c4",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "9f1691a2-566d-4f64-9e52-f476d27bdcb4",
        "cursor": {
          "ref": "d660ce17-85f5-43fc-8e69-e13d9132d36a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0cc1078d-5194-494a-9758-9ec28d0cc2c6"
        },
        "item": {
          "id": "9f1691a2-566d-4f64-9e52-f476d27bdcb4",
          "name": "did_json"
        },
        "response": {
          "id": "27af914a-a4c6-4c24-9b1e-92d90a90b39f",
          "status": "OK",
          "code": 200,
          "responseTime": 674,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4db070-2916-483a-b407-eabd0d428ead",
        "cursor": {
          "ref": "373f3493-1c95-4e42-92fd-6218a2bf3341",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbd5bbb1-a104-41a3-8f47-089de0e4307b"
        },
        "item": {
          "id": "dd4db070-2916-483a-b407-eabd0d428ead",
          "name": "did:invalid"
        },
        "response": {
          "id": "5b0f61d5-d418-4419-91a2-cfcfcf884bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4db070-2916-483a-b407-eabd0d428ead",
        "cursor": {
          "ref": "373f3493-1c95-4e42-92fd-6218a2bf3341",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbd5bbb1-a104-41a3-8f47-089de0e4307b"
        },
        "item": {
          "id": "dd4db070-2916-483a-b407-eabd0d428ead",
          "name": "did:invalid"
        },
        "response": {
          "id": "5b0f61d5-d418-4419-91a2-cfcfcf884bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d9df7d-aecb-4e67-baa2-585d5f596251",
        "cursor": {
          "ref": "172e9c24-b6e0-4f08-9ca4-a05340318ab5",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "401498a0-a24b-4ddb-86d0-652e31c4729a"
        },
        "item": {
          "id": "41d9df7d-aecb-4e67-baa2-585d5f596251",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "23200764-06f4-480a-9c18-71af23f0819c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053d0cf4-18bb-4a19-a1a3-d58197e4e55b",
        "cursor": {
          "ref": "d6f37b94-2203-496c-9039-23feaf4db8e7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7741db3f-ed44-4675-b4b3-7a3ca58a684b"
        },
        "item": {
          "id": "053d0cf4-18bb-4a19-a1a3-d58197e4e55b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e080e7a0-5f05-42c6-9cc3-574b07ad845a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc41bc0-8655-4f17-96dc-b4a0bd847427",
        "cursor": {
          "ref": "60a1caaf-ceeb-4850-bac0-4d6eeaa3bee8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "abce3a44-a1e9-4a72-8fa8-ea99d582009d"
        },
        "item": {
          "id": "5fc41bc0-8655-4f17-96dc-b4a0bd847427",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a8d262e5-08b3-41ec-97fb-8bf9e196173f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babc41a7-ecee-42fe-b9d1-108c0cccd4ae",
        "cursor": {
          "ref": "eb1b181f-7c8b-4c94-a33f-b0a4a4bd0948",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ed9f0e3f-d47f-4edf-a8ac-ac2d5257051a"
        },
        "item": {
          "id": "babc41a7-ecee-42fe-b9d1-108c0cccd4ae",
          "name": "identifiers"
        },
        "response": {
          "id": "86b752a5-6c7d-4dbb-a2ca-ffb6735c2d47",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf1af9b-a128-4ef2-b509-588eb433d466",
        "cursor": {
          "ref": "1d962fc1-ef9d-4211-951b-f06a0c9f7901",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7abc5ef6-041b-408f-8fac-592f3b00972a"
        },
        "item": {
          "id": "acf1af9b-a128-4ef2-b509-588eb433d466",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4bdec8d9-327b-423e-83db-2d68451934df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5242cba-3542-481a-a44e-3c840cdf2adf",
        "cursor": {
          "ref": "e8ec9990-b10b-4496-8bc7-073312c97fad",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6b068604-64ef-4b49-a8e9-a9e78fad70c5"
        },
        "item": {
          "id": "e5242cba-3542-481a-a44e-3c840cdf2adf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e8d08f16-c54d-4343-8655-056fc00f771e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf06e04-988f-49d7-9fd4-c55ad300cc2e",
        "cursor": {
          "ref": "cf46e231-8273-4e78-b743-d245af7fc792",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "74d320c5-4204-4603-a466-c1b994db9bdc"
        },
        "item": {
          "id": "8cf06e04-988f-49d7-9fd4-c55ad300cc2e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "efad4478-ea66-417c-a01c-5ee711c9e8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4a07a8-70d3-4128-b946-dd135942c704",
        "cursor": {
          "ref": "c3cb7c7e-13ff-4600-9ab5-76972630f873",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e24f6fa6-ab90-4ee3-89b9-57f329588cce"
        },
        "item": {
          "id": "df4a07a8-70d3-4128-b946-dd135942c704",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "57ddaa74-2288-4507-913e-a9e4fd93ea79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e7551f-9098-4108-9873-f77f2b37e8f6",
        "cursor": {
          "ref": "6d5154bc-4ee8-44ba-8ca7-b605044c889f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "329c7b51-fefa-42e3-9679-80b49cc310b6"
        },
        "item": {
          "id": "64e7551f-9098-4108-9873-f77f2b37e8f6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "64fb267c-54cb-4399-86c0-2f8f2611e166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bc470b-3487-4a31-802f-bcab1b3a2b25",
        "cursor": {
          "ref": "a34f3f6f-0533-4cd4-b5e2-5794ffb12e62",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0fbf94af-802d-47c5-8008-687cfc14edfb"
        },
        "item": {
          "id": "e7bc470b-3487-4a31-802f-bcab1b3a2b25",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "22e78914-d9f7-4149-aca6-d5ad492620a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60e2ff9-650a-4163-b757-66af44a9a444",
        "cursor": {
          "ref": "29571a25-f954-4e46-9a40-759cdf217537",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "089a0129-bd1a-440c-afce-80f27cba82ac"
        },
        "item": {
          "id": "d60e2ff9-650a-4163-b757-66af44a9a444",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4dbbafe8-c95a-4f55-a632-c0253cc5ebf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de403035-adc7-4e18-8703-e2165d57261e",
        "cursor": {
          "ref": "765b6929-12b8-438c-acb3-357dd3c5ce48",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bf93b10e-c3d2-4e78-84eb-f3b4bb5e2394"
        },
        "item": {
          "id": "de403035-adc7-4e18-8703-e2165d57261e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "444d441d-8492-4563-820c-0a084ce0ed18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46721d2b-219e-4b04-b65f-fea033fe4b9f",
        "cursor": {
          "ref": "c4dd8456-871d-4744-9739-054d9ce5a06a",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a03eaa18-0303-4282-85f1-07db13c40ec5"
        },
        "item": {
          "id": "46721d2b-219e-4b04-b65f-fea033fe4b9f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "395fe405-e0f0-4db1-9729-d27ebe555a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f2c508-1e04-4291-8b58-654295b03fae",
        "cursor": {
          "ref": "96d593d1-38f2-441a-aa0e-a853ff8bd447",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "70c8b1a4-e290-45e6-a1ee-bc9d2fb5096e"
        },
        "item": {
          "id": "01f2c508-1e04-4291-8b58-654295b03fae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "afb8b23e-1cd7-47c9-baeb-3ba4e5a21c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535568c3-b839-4c5c-98d4-8abd7f755b86",
        "cursor": {
          "ref": "60cd05b8-6cd9-4547-823c-a7a491cdca7f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "941539a5-e8c1-4d42-8259-a218748c002f"
        },
        "item": {
          "id": "535568c3-b839-4c5c-98d4-8abd7f755b86",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "37043992-3231-4282-bbf2-2d3757d87d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0515f-16a7-4bc9-808d-769f5ee0077f",
        "cursor": {
          "ref": "3fe6ec3c-b44b-4db7-865e-07d92683ff5d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5d253770-7948-455b-bc34-08a1b6a4267e"
        },
        "item": {
          "id": "0ad0515f-16a7-4bc9-808d-769f5ee0077f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "610b0f3b-a70e-43bc-90cb-bcdea42f96d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e2a140-cf64-48e3-b667-4faa06e25347",
        "cursor": {
          "ref": "2e6b8381-437b-440b-b24e-13425be92fd4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "70368677-ca1b-4e58-9dd1-7cba071fe1a9"
        },
        "item": {
          "id": "49e2a140-cf64-48e3-b667-4faa06e25347",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fa9b6b97-01b3-482d-a764-ded339bb81a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff73fef-4cb7-4dbb-a926-3d2296a890a8",
        "cursor": {
          "ref": "0a314893-a98b-4cc2-a307-7db2873841be",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "816f5713-e70d-46ca-8323-5473c6e464f4"
        },
        "item": {
          "id": "4ff73fef-4cb7-4dbb-a926-3d2296a890a8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "92305d3b-1ed3-470f-b9d4-d10520f590a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a82726-5c95-4f51-bbf0-0e410defadef",
        "cursor": {
          "ref": "c7b94770-7479-48e0-926d-058948520886",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b3534f9c-8578-498a-b876-bfa0a81035aa"
        },
        "item": {
          "id": "41a82726-5c95-4f51-bbf0-0e410defadef",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "61807b56-393e-4aca-89db-3265bb1089e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f78162-c89e-4d2b-bf61-699c07feda70",
        "cursor": {
          "ref": "a6e01bb2-64b7-49ed-9f9c-bfdf0ab1cf6e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4cafb785-fab1-4bba-882f-36709a5a0687"
        },
        "item": {
          "id": "e1f78162-c89e-4d2b-bf61-699c07feda70",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2d128ed0-71af-40b0-86ff-b6fdf1304e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3208508e-737e-4b28-bb81-664814c5f7a0",
        "cursor": {
          "ref": "e00fc07d-d8b7-46c4-a708-096491e918c7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6eb5ccb6-34c2-4b8a-9490-3da1e4cb03ec"
        },
        "item": {
          "id": "3208508e-737e-4b28-bb81-664814c5f7a0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "24d7145c-e8ca-4ecf-9fa6-2b931f54f107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f361a6-41f7-4e76-93b5-15f9e8181763",
        "cursor": {
          "ref": "bd8d2f0c-e339-4d83-a8df-a93f1b9456ea",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d41f6e93-0d14-4ab7-8791-29a5cc4579cb"
        },
        "item": {
          "id": "85f361a6-41f7-4e76-93b5-15f9e8181763",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c3f0e815-52d1-4a73-85e8-a42302796eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9dba18-f747-4fa2-9e4f-515a060b2b60",
        "cursor": {
          "ref": "440133ff-5340-4b07-bb17-350b043e5080",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b49aa951-a529-4e1f-803f-a1ef670195e4"
        },
        "item": {
          "id": "9b9dba18-f747-4fa2-9e4f-515a060b2b60",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2cb7d4eb-af2d-4200-a155-5586faf66fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12cded4-34b6-42c9-bd54-c12d1edaebff",
        "cursor": {
          "ref": "de8c8a44-f13c-483c-b932-b948cbbce43b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ae9a24ff-8e98-4277-9cf7-3f06d198b67b"
        },
        "item": {
          "id": "b12cded4-34b6-42c9-bd54-c12d1edaebff",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2bc9e78d-2e26-4d7a-868c-9a80c2e758ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3c04cc-b921-4961-9f72-fff35e8cf36d",
        "cursor": {
          "ref": "ba9cb6e8-bf38-4ff1-9c69-c3d223a0d0d0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6d226dd2-b8a0-4a33-9c86-e5f930579815"
        },
        "item": {
          "id": "fd3c04cc-b921-4961-9f72-fff35e8cf36d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "880a5657-9082-44d6-b828-f733794db5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579bb8b0-57b7-41f5-ad3e-060980df36dc",
        "cursor": {
          "ref": "83190260-884a-47f1-912c-3c164122b949",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ccc0d5ce-dc4a-40b9-bfef-6042298d5b91"
        },
        "item": {
          "id": "579bb8b0-57b7-41f5-ad3e-060980df36dc",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "805e9d8f-2801-4c68-816a-f4f9089b4fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07172f0b-5f5b-41c7-90a9-661ae3c0045c",
        "cursor": {
          "ref": "b9e6c031-f28a-4076-b21d-c705e0e0b513",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "de2d79e2-748b-4f0b-9b77-7d84b3158f0a"
        },
        "item": {
          "id": "07172f0b-5f5b-41c7-90a9-661ae3c0045c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e2ad868a-963d-4549-a766-059a000c10f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a38ca83-243a-4955-9c5a-cf65b7d67e7a",
        "cursor": {
          "ref": "86edc701-4721-4192-b9f2-54dbe300c29d",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b20fa66-bc84-4d33-81a4-d228217e6c8b"
        },
        "item": {
          "id": "2a38ca83-243a-4955-9c5a-cf65b7d67e7a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "59a11e08-b55d-4bed-b4e8-1ef81978ca67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03115e97-adc1-475a-9683-df7b1fc0ad9f",
        "cursor": {
          "ref": "a29ffe9e-3846-4212-ab88-91760403354b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "38fad38c-d443-4da6-be85-c2d8ea71461e"
        },
        "item": {
          "id": "03115e97-adc1-475a-9683-df7b1fc0ad9f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "89f8ad84-0732-4f82-87c7-ce65cf8c2f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67becb-08f6-4154-b375-2f5855019ea5",
        "cursor": {
          "ref": "11972242-9d2e-483e-983b-ad022ba02392",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c196fcef-3e6a-4d56-b2c4-303c42fee388"
        },
        "item": {
          "id": "2b67becb-08f6-4154-b375-2f5855019ea5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e71aa4f6-4bc7-4fe3-9415-f940b68e3312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c120b69d-7657-46b3-bb3f-16b64eccd157",
        "cursor": {
          "ref": "a3162186-1747-457e-b995-7a3a1f98ba79",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35251796-4737-4896-86e4-ae04323c023d"
        },
        "item": {
          "id": "c120b69d-7657-46b3-bb3f-16b64eccd157",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f966ee14-7dfc-480f-a281-e11acb38579b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d549a45c-3fcd-40d0-81c2-cddf85426c94",
        "cursor": {
          "ref": "5490c2b0-3c9d-444a-a279-84430750a29c",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8cf61f49-7642-4b78-8736-34a2a696300b"
        },
        "item": {
          "id": "d549a45c-3fcd-40d0-81c2-cddf85426c94",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "015c8905-1b62-4fe5-8c8d-c30178eda5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287e4b44-67ba-4c49-a408-5116d597250b",
        "cursor": {
          "ref": "c2d0bdc5-3a40-44a8-b676-da93f324705b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f8480071-c7b6-472d-a7ab-28961b4d689a"
        },
        "item": {
          "id": "287e4b44-67ba-4c49-a408-5116d597250b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7740456a-2fd7-4dd5-977b-8f58439a5d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75437d0b-3033-4a09-bd8c-737697c2e506",
        "cursor": {
          "ref": "b1470e99-67ed-4556-9e69-b8fad82d0d77",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b1334329-1dd1-4b64-8731-fb0d2c7b5f46"
        },
        "item": {
          "id": "75437d0b-3033-4a09-bd8c-737697c2e506",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "021e9d46-ba9b-4b0e-95f6-6feec3e301b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6403ce8-7628-4bb6-bd61-7a2edea758ab",
        "cursor": {
          "ref": "4c691eee-c8b2-4996-b62a-37255420d1ac",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6eeec78d-b098-4b1f-9cca-5aca85102034"
        },
        "item": {
          "id": "c6403ce8-7628-4bb6-bd61-7a2edea758ab",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "14e71eee-88c3-444c-933a-a62315d470ca",
          "status": "Created",
          "code": 201,
          "responseTime": 461,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b7d6d2f9-f71d-46d0-8c3c-95c69e486848",
        "cursor": {
          "ref": "fe7f92b2-2229-436a-b379-8587d1ac9d56",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b2a40ed2-d6d0-4e12-83b7-73dc2c56279d"
        },
        "item": {
          "id": "b7d6d2f9-f71d-46d0-8c3c-95c69e486848",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "550f17f1-c037-4f62-93d5-1399aa0537f9",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "dd45b624-b77f-4d79-8cf3-9b4a631550a5",
        "cursor": {
          "ref": "d183d3ef-2fd1-43eb-a96f-a9c283e2a5e2",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "65e3c282-1c51-45a5-b532-3f42b8407535"
        },
        "item": {
          "id": "dd45b624-b77f-4d79-8cf3-9b4a631550a5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "76d67c9d-82f2-4166-baf4-f9be94274735",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e693e871-1973-4baf-a211-5bf4daf02324",
        "cursor": {
          "ref": "d977a7c0-ecaf-493d-8190-c91b00b2c0e3",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a073a27b-3447-444d-b5a9-b4fa4dc95fe2"
        },
        "item": {
          "id": "e693e871-1973-4baf-a211-5bf4daf02324",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e5acb946-e1d2-4d83-8063-b719b2712801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c1acea-11de-4306-8546-0cc4437f21bf",
        "cursor": {
          "ref": "3534fc9f-6998-4840-b052-8d412f974d5e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "219bd6f7-c656-4e6d-ad37-09e8cbeaeaeb"
        },
        "item": {
          "id": "d7c1acea-11de-4306-8546-0cc4437f21bf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c1a23dcc-ac1e-4bd3-9357-d916bd512287",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e4fb91b1-9be9-4d99-b1d6-7d285860e446",
        "cursor": {
          "ref": "86e1d7fe-1b1c-41f3-863d-44943f01cb67",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "54bb16f7-32a0-4dd4-bcf2-db0dcef9f536"
        },
        "item": {
          "id": "e4fb91b1-9be9-4d99-b1d6-7d285860e446",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eed5680e-e3f7-4139-8557-4818082df2e6",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2bb642a9-4cde-4e49-adf6-e3e57cc13416",
        "cursor": {
          "ref": "882e345b-fac4-458a-8500-52b820d376c2",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f6f863ee-a79d-4138-9ff0-cb70839ed537"
        },
        "item": {
          "id": "2bb642a9-4cde-4e49-adf6-e3e57cc13416",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "226e9913-1b8c-4305-b68f-bc1e5616f0ac",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f5d2ee06-758f-49bc-bc22-e626422a9e9a",
        "cursor": {
          "ref": "ecff12e2-a41c-4a84-8b04-28d6be358e10",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5cc373f0-4fac-465c-83e5-583beb1b4a1b"
        },
        "item": {
          "id": "f5d2ee06-758f-49bc-bc22-e626422a9e9a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "264c68c2-0ba0-4416-98dd-496baad81b37",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "27467a9d-f3e9-40b4-b24f-f4041732f326",
        "cursor": {
          "ref": "aabee445-6d1c-4a9c-b7a0-910db43d4d1f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d95dbdea-6cac-4802-95a3-72873bce4149"
        },
        "item": {
          "id": "27467a9d-f3e9-40b4-b24f-f4041732f326",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0551ab3e-3331-4767-8a60-aa4393a99f6b",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ac6128a4-ea1d-4ee1-a1d1-4e5e83c7585c",
        "cursor": {
          "ref": "3895615c-b1e4-4c22-ae63-1e1a8dea013d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "caf76536-ccc6-4e25-ae26-d4ef86ca98dc"
        },
        "item": {
          "id": "ac6128a4-ea1d-4ee1-a1d1-4e5e83c7585c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "94b5fef3-5247-4a63-84a2-38d494cf2754",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "db575490-c19a-4988-a1f7-d8b0e7022a37",
        "cursor": {
          "ref": "dcb883ec-ad0c-49b7-afb0-a391c8cff604",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "672cec85-fb25-4949-a9aa-35156c8075c5"
        },
        "item": {
          "id": "db575490-c19a-4988-a1f7-d8b0e7022a37",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c558d931-95e0-42d1-aea2-053c8ba2ede9",
          "status": "Created",
          "code": 201,
          "responseTime": 418,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3022216d-fa94-4d6c-8e81-b57205964670",
        "cursor": {
          "ref": "0d6a337f-4e4d-4333-8405-53144d5c52ad",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8f168318-7689-4492-81af-dff409889f28"
        },
        "item": {
          "id": "3022216d-fa94-4d6c-8e81-b57205964670",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4d7079eb-ed36-4e70-b378-88122d5faf43",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f6f39e46-a834-4c4a-8ad0-b1cf92057f5e",
        "cursor": {
          "ref": "f6abefe1-f517-497c-9ef1-47160fa32935",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "35f41197-59cb-4b5e-bb37-09d4b5926aca"
        },
        "item": {
          "id": "f6f39e46-a834-4c4a-8ad0-b1cf92057f5e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a75b49bc-b1af-42a5-935f-595e2ac7bc17",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1fdd9055-acb9-4ea1-9ccb-fc28e5cceb8e",
        "cursor": {
          "ref": "fc25d2e0-6785-474e-a709-94a195f50b46",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7e30e9ab-54e9-4f51-a958-5b510a34992e"
        },
        "item": {
          "id": "1fdd9055-acb9-4ea1-9ccb-fc28e5cceb8e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "544fa7e3-65dd-4097-9e53-f1b145bbe63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674f39ba-2fb8-45cd-ae2e-0129907242f5",
        "cursor": {
          "ref": "1b0b8bea-9261-4ff7-814e-0ed16805a9fb",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2c6814cf-6b9a-4fa8-badc-b50f0a222560"
        },
        "item": {
          "id": "674f39ba-2fb8-45cd-ae2e-0129907242f5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c7938f32-4cc8-4058-b96d-e9efaf49ffcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a013b2-f2d7-453a-aa31-85930a2bd694",
        "cursor": {
          "ref": "d00af80c-0afa-4ae2-9322-78c675e114c7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b5da5139-9610-4aae-8733-0f771eab9f6a"
        },
        "item": {
          "id": "28a013b2-f2d7-453a-aa31-85930a2bd694",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "beb9ded8-9459-4f20-9d0b-d982c8e59185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1c723d-38a7-4522-a69e-fcaa426405e4",
        "cursor": {
          "ref": "840661f2-041d-4544-afd4-cb495019754e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a44f0099-d1af-4da4-bfcb-2a26db047e1a"
        },
        "item": {
          "id": "bb1c723d-38a7-4522-a69e-fcaa426405e4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "491fc208-bef5-4e7f-b25d-e82847c27ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc23934-3ebe-45d3-ae85-d3083d38defe",
        "cursor": {
          "ref": "f1ea11d6-f973-4dcc-b3a8-d2f4da6fb699",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e2576fe2-6c2c-4201-8695-7c6790e3428d"
        },
        "item": {
          "id": "abc23934-3ebe-45d3-ae85-d3083d38defe",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "22a31d29-5b30-4890-9767-d5c29ca9c6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a32e59-3f04-425f-a993-5f09aa7e4b41",
        "cursor": {
          "ref": "0505b5ae-959e-4f34-9f99-e4c5f3ff5484",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b941585d-e476-41bb-8ff0-7d99908e0c30"
        },
        "item": {
          "id": "69a32e59-3f04-425f-a993-5f09aa7e4b41",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4eafbd54-2cbe-45b5-85e9-bab431ccb522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551edfac-f8b1-408b-8261-afd7903703e9",
        "cursor": {
          "ref": "6455aa54-d77f-48fa-804e-75832937c57b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6e931cf5-a64b-4f63-858d-4994b65ad909"
        },
        "item": {
          "id": "551edfac-f8b1-408b-8261-afd7903703e9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1bf6d6c0-f7db-4d1b-8950-bda1cc481c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92709c32-fd59-481b-bc7c-ec3fdfd9f96e",
        "cursor": {
          "ref": "3a077963-3740-40d0-94db-f3317f8d67af",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "be4c3b40-5d86-43d7-b33d-172c807cd1c6"
        },
        "item": {
          "id": "92709c32-fd59-481b-bc7c-ec3fdfd9f96e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "81803093-b6d3-4e20-8892-08ff6dbca548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949e49af-894a-45af-abac-29fe47711105",
        "cursor": {
          "ref": "5773fa6a-bff2-40e5-8b27-d5ba80fd767d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2eb7fddb-8c81-4187-8ece-6090a442a0e7"
        },
        "item": {
          "id": "949e49af-894a-45af-abac-29fe47711105",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0f292245-f88d-4c6f-b14f-fc16245da359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31621fce-b4e2-4adf-8761-02f48e968b4c",
        "cursor": {
          "ref": "1c1898e9-4a17-4201-bdba-79a06b5a9ba5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "098d7763-826b-4cfd-adb0-8ef5f72577c4"
        },
        "item": {
          "id": "31621fce-b4e2-4adf-8761-02f48e968b4c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ad78976e-b408-42d4-9a1a-1cfc62b5f8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80680a4-112e-4b61-90e8-28e0f4e0cef2",
        "cursor": {
          "ref": "630002a5-eff7-4553-99f3-5630b8cf4530",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "deee029c-3331-4c4f-8c81-5dfe762db704"
        },
        "item": {
          "id": "c80680a4-112e-4b61-90e8-28e0f4e0cef2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c8f7cf80-d323-49b9-b2f8-fcdac3738d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2a28fb-e9e6-473b-b163-40ec799350e9",
        "cursor": {
          "ref": "a12c7fcf-9bee-46de-bc76-808f6f6ed886",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7b93e363-42ba-4b7f-9a1d-99df416dfe10"
        },
        "item": {
          "id": "4f2a28fb-e9e6-473b-b163-40ec799350e9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d76f00b2-4482-47ce-b521-52bb1a841d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ed303b-58fc-4641-acbd-ea45db4cbbe5",
        "cursor": {
          "ref": "f5987939-fcd3-48d7-af59-8429166eb2ee",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fab95014-bffc-4540-9f7a-59f09d09ecac"
        },
        "item": {
          "id": "25ed303b-58fc-4641-acbd-ea45db4cbbe5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2cc61f4c-7581-49c8-8370-aaff140fa429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffaf9b1-657e-4f2d-a2b9-6858afabcc5c",
        "cursor": {
          "ref": "0dfecffc-690c-4795-9421-e782dc697a1f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30aa500b-207f-4da6-b327-113065420727"
        },
        "item": {
          "id": "7ffaf9b1-657e-4f2d-a2b9-6858afabcc5c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "590b4d06-650e-420e-9e87-074af237e608",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "85608b22-a886-42e8-b6d4-47d465d7ed1f",
        "cursor": {
          "ref": "fb025ee7-f700-4112-af75-2b7fe4612452",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "418e944a-06a0-4ea4-89f4-45baae79b140"
        },
        "item": {
          "id": "85608b22-a886-42e8-b6d4-47d465d7ed1f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d0e11a84-5022-4e96-b2c9-418b030b0d30",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e993320b-5f74-4049-886d-8b3c2cd3a067",
        "cursor": {
          "ref": "85b84fd2-ed90-42b1-a537-6dd69f6e3346",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fe6ddb3c-1720-4770-bc9e-0fbc90f2b6e1"
        },
        "item": {
          "id": "e993320b-5f74-4049-886d-8b3c2cd3a067",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "717c1203-3a1a-43ab-9209-66b614d94d85",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5fe74c3a-a83b-49c1-9721-5c7ccd3c2961",
        "cursor": {
          "ref": "11725fb6-f44e-43c5-955c-24e41a04b610",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e7281cd9-1cf8-4f43-849d-94eb77e064a8"
        },
        "item": {
          "id": "5fe74c3a-a83b-49c1-9721-5c7ccd3c2961",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6a515ebf-08e8-48aa-8712-590003031bf4",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "752da82d-0f34-45a0-9021-79ae65a1b126",
        "cursor": {
          "ref": "f3ad9159-3570-4bba-8196-cd7f9b6c6fcd",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b7487cc3-6c8e-4da0-8f57-3eedf15775fc"
        },
        "item": {
          "id": "752da82d-0f34-45a0-9021-79ae65a1b126",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a90131ef-e06f-450f-b2b2-33df04a9c951",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d8f5f340-db5f-4821-8b49-a60a4f10ee86",
        "cursor": {
          "ref": "d05dcc11-a373-47a8-9556-899814753d3d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2255d1a9-172c-4744-be43-44b6e825f8d0"
        },
        "item": {
          "id": "d8f5f340-db5f-4821-8b49-a60a4f10ee86",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "03c97058-8708-4366-a3af-2264be31c6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2b988e-35b0-4042-a512-e87b1ab3ba0c",
        "cursor": {
          "ref": "5a46272c-9cdb-4329-939c-2073dc55655d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "90429f29-6424-4bc1-93ff-9d55730e88d1"
        },
        "item": {
          "id": "ab2b988e-35b0-4042-a512-e87b1ab3ba0c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "43517059-2caf-41fc-aa3e-27311c629d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0c3d19-ed38-43e4-af43-f901a636f053",
        "cursor": {
          "ref": "1e7458a8-953b-43f6-b086-832e4b907fef",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dd651a88-fbaf-426e-9429-bd689a049f03"
        },
        "item": {
          "id": "bc0c3d19-ed38-43e4-af43-f901a636f053",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2a49e2db-75a8-479e-b85b-f991c627be00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0058eb-4357-4bcd-a3c8-0706a7fe6fc2",
        "cursor": {
          "ref": "77e61f2a-8baf-47ed-a876-c6ad5b47914e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e0ed9cd8-9907-4521-a9b6-87b8a30877a2"
        },
        "item": {
          "id": "ce0058eb-4357-4bcd-a3c8-0706a7fe6fc2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fd504a3f-42a3-4d35-867c-2b52ceee24e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6effabf2-70a7-444a-99c3-beecfef0c8ea",
        "cursor": {
          "ref": "7ea87f47-6232-4b2c-ae56-827a9a4936c2",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "890e9e45-be3f-4ec3-85be-4d6a974871c1"
        },
        "item": {
          "id": "6effabf2-70a7-444a-99c3-beecfef0c8ea",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9caf4dca-20fc-4c4f-8c37-27109250d7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e66b2f-ba93-4fbf-93d1-44be9f3ba6c8",
        "cursor": {
          "ref": "bf0e32b6-4d7a-412e-8457-d759c7f2e964",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "83bc2e12-ff4c-4299-8f8a-445252a9cba1"
        },
        "item": {
          "id": "d9e66b2f-ba93-4fbf-93d1-44be9f3ba6c8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1570b2c3-825c-478a-878b-f0df050d3063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279f0cff-1e22-4a53-a4f0-a2789a855828",
        "cursor": {
          "ref": "df2e2cda-458b-4388-9278-4ed704dfa306",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2dca4f1e-97a2-431f-9931-ff698cd9849a"
        },
        "item": {
          "id": "279f0cff-1e22-4a53-a4f0-a2789a855828",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f952a072-89fa-4541-a659-0c101f4b4d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea54893-cd54-404c-a709-c2d3055843c0",
        "cursor": {
          "ref": "38a18a97-0f4e-4804-aa3f-603ac746da72",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d3426a9b-72d4-4ccb-a9fd-9944365f2fb1"
        },
        "item": {
          "id": "2ea54893-cd54-404c-a709-c2d3055843c0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b2119e89-08fb-49d3-917c-276b406f5965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0bc66c-a75c-4ce2-8971-d94990fc5fc2",
        "cursor": {
          "ref": "87f712eb-bb01-46d8-b0be-00ecbba2917f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ec606547-c98a-4c02-9c5d-743748d13d23"
        },
        "item": {
          "id": "5e0bc66c-a75c-4ce2-8971-d94990fc5fc2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c82b96c4-7aa0-45bd-9b0c-28d66727c5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72212744-5cb3-45d0-ac37-4714657e94ae",
        "cursor": {
          "ref": "25c73cfe-1cc7-4a7a-8cef-9156d7f67a26",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "78a5ade7-f2cb-474a-8706-b16889fb46cb"
        },
        "item": {
          "id": "72212744-5cb3-45d0-ac37-4714657e94ae",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "344f8e7c-9ddc-49ac-9940-227f2f3e87c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71461fc-beb9-440b-beba-c331b8102f27",
        "cursor": {
          "ref": "30d27239-605b-477d-ad96-76b0172850ee",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "aca8c9e8-556f-4cd2-b030-ccff56d815e2"
        },
        "item": {
          "id": "a71461fc-beb9-440b-beba-c331b8102f27",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2b57ab23-2ece-41ef-a85a-bd0da0c2322e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887d263e-fc8a-4f9d-bf2f-b60546d72650",
        "cursor": {
          "ref": "510fcda5-75e1-4e93-8e29-c8d1759f46ce",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "72d8dee2-8c3b-43b1-9a30-aeac387e672e"
        },
        "item": {
          "id": "887d263e-fc8a-4f9d-bf2f-b60546d72650",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5b04a7d5-8443-4a19-ad3b-b4362c4e37ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2175c6-c7de-4d1a-bea7-66b4d6a03a1d",
        "cursor": {
          "ref": "6dcafe6c-94a8-484a-ab2b-643e7fa429c3",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3d456c58-57dc-4899-87cd-4e97135de4f0"
        },
        "item": {
          "id": "ed2175c6-c7de-4d1a-bea7-66b4d6a03a1d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "506b3159-9c87-47d5-89d8-65cd09ccc8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67a5dc9-dd00-4cb0-baac-50e5e334a6be",
        "cursor": {
          "ref": "0c814070-b2e9-48ed-9d00-97d268d9750e",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "91a22a0a-ff39-4555-b536-8b5cea84d4b8"
        },
        "item": {
          "id": "a67a5dc9-dd00-4cb0-baac-50e5e334a6be",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "af5e1ba0-5986-4f4f-afad-c9cf631f421b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b86f278-0679-408f-a052-53a6e4ee75f3",
        "cursor": {
          "ref": "ede76564-e136-4f89-adf5-bdded143c187",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5a6178d9-f63d-4f15-98a2-cd2babefcba5"
        },
        "item": {
          "id": "5b86f278-0679-408f-a052-53a6e4ee75f3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bd7aef91-e0d0-4eea-9dde-a6abf9d9c957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0d5833-8a19-415b-8daf-886fa1cfecae",
        "cursor": {
          "ref": "d7629768-4b90-4244-92c3-4fea779fae04",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b710b0a6-ccca-484a-8262-d0535be217b5"
        },
        "item": {
          "id": "7a0d5833-8a19-415b-8daf-886fa1cfecae",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1ba7a098-ff76-45f2-b1e1-dd7bc3db39f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3df3c2-87f1-46bb-90f8-a688dc74e37c",
        "cursor": {
          "ref": "100214fa-ec2b-456c-a49a-641db08ebb5f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4f663962-3238-4df0-bb34-759f77c461b0"
        },
        "item": {
          "id": "2b3df3c2-87f1-46bb-90f8-a688dc74e37c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6df9c8d7-a58b-46f3-8b2a-e73820a5e6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951408b1-6ae6-402d-a9e6-de6115826677",
        "cursor": {
          "ref": "9cc77db9-b97b-4680-b6ae-fdf856b6f77a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f39bcfa7-7c1b-4f5e-ab1f-45fad6bb0482"
        },
        "item": {
          "id": "951408b1-6ae6-402d-a9e6-de6115826677",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0fcde8b0-ad45-482b-bfe5-567caae4b713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2be7b4-c99b-4aa7-b4b2-64538c41f7b5",
        "cursor": {
          "ref": "ff080bef-c4fc-42e7-8404-5e367a32f380",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "30482223-edb7-4596-afe8-71a4514453f8"
        },
        "item": {
          "id": "1e2be7b4-c99b-4aa7-b4b2-64538c41f7b5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fea1cd6a-4879-4236-935a-31d78eccba01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0182cb5e-5f84-4fb5-93be-95045b39555c",
        "cursor": {
          "ref": "96352295-c6df-4feb-b34f-76f3fe8a63cf",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a540038c-373e-4fd5-af47-b235cee549f3"
        },
        "item": {
          "id": "0182cb5e-5f84-4fb5-93be-95045b39555c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bde212bb-76f5-4529-ab41-4908a5290dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1190433-9c02-4478-8dfe-9f97e8021399",
        "cursor": {
          "ref": "cf5aaf5f-5b0e-405d-817c-c7d0bb58ef36",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "34d670b5-3b33-4605-b8f5-d342eee81fd8"
        },
        "item": {
          "id": "e1190433-9c02-4478-8dfe-9f97e8021399",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cd8d3096-9ccb-492b-9562-223b88af2b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40620f44-4649-496a-9537-7a090ffd95ac",
        "cursor": {
          "ref": "77720b07-82ac-4187-9240-26beb2c1c16a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b12a89f-3796-4e72-b052-4e9afa6d90bd"
        },
        "item": {
          "id": "40620f44-4649-496a-9537-7a090ffd95ac",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a47b906a-f0cd-4c35-b134-984ef96a0a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42545a0-1aea-4354-b7d3-bb82aded0e57",
        "cursor": {
          "ref": "6b8bcd89-c793-4e25-a97f-604edfcd4bb7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c7a996ef-e933-4451-80a4-08080931cad7"
        },
        "item": {
          "id": "f42545a0-1aea-4354-b7d3-bb82aded0e57",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5eed415d-e6a1-4eca-be46-25e9b666cef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf22588-905e-48af-b972-c781b58c8886",
        "cursor": {
          "ref": "c0db1225-5015-4a1d-af4b-a7565ef6a07b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1a66bf2f-0026-4d58-92b0-14fccb6c0a6a"
        },
        "item": {
          "id": "fdf22588-905e-48af-b972-c781b58c8886",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "99261f6d-016a-4e04-b52a-2022f5698ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903b6de4-4102-4770-a10e-4f3cf54da0ce",
        "cursor": {
          "ref": "f811aa41-4753-47f6-924e-b73e868945e1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e8dae919-877e-4fd8-a2cb-9bc0d5447560"
        },
        "item": {
          "id": "903b6de4-4102-4770-a10e-4f3cf54da0ce",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "156efd29-40cf-48c5-b9e6-8e53df719ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3523429e-c841-4344-8233-c3422bee3d0c",
        "cursor": {
          "ref": "c5797551-2a78-4c76-ad32-8d29941bc678",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "19c9fb7e-ad49-40aa-b96a-54f0247b01d4"
        },
        "item": {
          "id": "3523429e-c841-4344-8233-c3422bee3d0c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9bd7d77a-039c-470d-8ebb-0710e93bdbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b82ca11-db65-447a-ab84-61bbbe678711",
        "cursor": {
          "ref": "7eecbf27-7d10-4276-983a-961258605496",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f830a668-81f4-49fb-b0fc-fa0ca2fef89c"
        },
        "item": {
          "id": "2b82ca11-db65-447a-ab84-61bbbe678711",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a9622cc9-8a7f-4951-be88-20d25bd32ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a15d64-c997-4ef7-bdab-2767ac7e204e",
        "cursor": {
          "ref": "42fe2513-351d-4105-b69b-03f8a92502e4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f1ce69d-f61e-446d-8210-9aa849381975"
        },
        "item": {
          "id": "64a15d64-c997-4ef7-bdab-2767ac7e204e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "289fc1dc-cc71-47dc-9efe-c1d137d25033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77789e3-b04f-47d0-9905-3cff01657db3",
        "cursor": {
          "ref": "df0b3e5e-6976-4026-aceb-d2afadca4187",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8ba3643b-8cdc-4e21-a1b8-43650bcd89b3"
        },
        "item": {
          "id": "b77789e3-b04f-47d0-9905-3cff01657db3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "668ba9ac-6fde-4843-ab7e-e74f3890d57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a66dc1f-a5c9-4b45-bd0b-ac0354a65c98",
        "cursor": {
          "ref": "851d04eb-fbe5-48d9-a933-3a869e8a4f25",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8b76d2ce-9d98-48a6-8cb7-2c7584431477"
        },
        "item": {
          "id": "8a66dc1f-a5c9-4b45-bd0b-ac0354a65c98",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1d6daa79-dea7-462c-812b-9ff82c849800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b7cd5c-4195-4569-b974-1f969e8e7d29",
        "cursor": {
          "ref": "e9544ecd-a05f-4d99-9c94-b8e45b296f47",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9cacf655-758e-4106-a227-0228acac5bab"
        },
        "item": {
          "id": "57b7cd5c-4195-4569-b974-1f969e8e7d29",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "add78019-ba0a-4b25-bb1b-81c05f7028c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217d3b30-3fd2-4f7f-85b2-9e21949154eb",
        "cursor": {
          "ref": "ac90168c-d5d2-4a29-b4a3-20978a799678",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "770a5b71-9127-4cb9-9d70-42eefdb61f42"
        },
        "item": {
          "id": "217d3b30-3fd2-4f7f-85b2-9e21949154eb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b83844eb-97df-4e8c-944a-12d2335989da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd307d8-cb2c-4eee-b518-fca19bcdd098",
        "cursor": {
          "ref": "52b902f8-a844-4ae6-94e3-4e23453c8586",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ef4d2168-9c16-4295-b53c-a4cf6a158ff2"
        },
        "item": {
          "id": "6bd307d8-cb2c-4eee-b518-fca19bcdd098",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "3c90c282-ab96-434f-8c1a-88fca9757202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3980bfcb-15c6-4951-a5a9-8e118aecd8f1",
        "cursor": {
          "ref": "3aa512c8-544f-4362-8259-3fa5d7ec9fbf",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9a1eeec1-56f1-4b2e-aa61-5e07407caa62"
        },
        "item": {
          "id": "3980bfcb-15c6-4951-a5a9-8e118aecd8f1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "55ec7120-663d-46fa-8b6c-37c890dd8984",
          "status": "Created",
          "code": 201,
          "responseTime": 391,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e428f6-dadb-49aa-a3e2-cc6c58944046",
        "cursor": {
          "ref": "61f53ee3-2861-4374-b391-897ab9817b8f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fa869092-3540-4e05-b095-d0663a47ba0c"
        },
        "item": {
          "id": "e8e428f6-dadb-49aa-a3e2-cc6c58944046",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "31467f28-292d-4e28-98d5-ed1fec0ea5c5",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49115526-6017-4b6d-8843-cc5ed7f19a40",
        "cursor": {
          "ref": "90711303-44ae-4057-8fee-8ae5782333cd",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6ad1e188-5637-4e98-99fe-4acb1eecb752"
        },
        "item": {
          "id": "49115526-6017-4b6d-8843-cc5ed7f19a40",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f6dfe9a1-d3f7-4a7d-9bb4-a4746cf9af45",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "447d3e3b-1d78-445e-9fe3-7b5aeda5b17c",
        "cursor": {
          "ref": "f18897cf-1545-4674-98d0-9bbe2c0ce1d3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fa625dc2-7c50-4117-9a6d-902fd7e47f4e"
        },
        "item": {
          "id": "447d3e3b-1d78-445e-9fe3-7b5aeda5b17c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8d470b2b-49c2-44ba-a1e5-ea6c717b1dd1",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c28aea5-4d11-4c1a-a7e4-48961b237bf8",
        "cursor": {
          "ref": "57582d10-33c2-4275-bbc3-4570716cee89",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "79a92ba6-c75e-4da6-bfb9-c94205640ea4"
        },
        "item": {
          "id": "3c28aea5-4d11-4c1a-a7e4-48961b237bf8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f06bfe7d-1236-4e58-b30c-4bc2bff99b52",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-25T00:34:05.946Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-25T00:34:05.946Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7c3b32b8-2e77-4916-b450-6cf61767d8a1",
        "cursor": {
          "ref": "e6d3ae59-ceda-4428-9bf6-51b9353efa0f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1ad34cce-a24d-4748-8a27-b0576d80df4c"
        },
        "item": {
          "id": "7c3b32b8-2e77-4916-b450-6cf61767d8a1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e9edd4eb-a2ac-400e-9420-8482fcf09aed",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595efe23-6611-405f-aa0c-4e9d85af4a84",
        "cursor": {
          "ref": "2564fbc7-247a-4df8-95ff-c72b0347e7d3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "292a1807-4d09-405c-9e8f-8072a8c131ad"
        },
        "item": {
          "id": "595efe23-6611-405f-aa0c-4e9d85af4a84",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "55c710c2-b983-48cb-9c03-97568c58ef43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd5e98e-4f3a-4c06-ae9e-c3217f52fd0e",
        "cursor": {
          "ref": "8431ddb5-bb74-4ed7-8441-5a2419b79a3f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3c1c4b95-b68e-457b-91c6-5c9da6df35e6"
        },
        "item": {
          "id": "9fd5e98e-4f3a-4c06-ae9e-c3217f52fd0e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98654dd6-b2e3-438d-9c08-fd9d3d63f8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588895bc-55ba-4fb3-b916-f42922c58338",
        "cursor": {
          "ref": "9b4a76b3-41a0-4997-b2c0-7a366addf8e2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc90c6f8-c469-4bc2-9477-23899295b768"
        },
        "item": {
          "id": "588895bc-55ba-4fb3-b916-f42922c58338",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac10200d-aef6-4878-a9d6-d12ea8632f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5b264f-8585-4c39-aa33-581abc88155c",
        "cursor": {
          "ref": "3d6c4f51-47e2-4e7a-9f73-90ec68d07f92",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7e40c4ff-41eb-42d9-85db-7ec56d8e3689"
        },
        "item": {
          "id": "1e5b264f-8585-4c39-aa33-581abc88155c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16575b24-420a-445f-81c5-b0ded2ca1c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05df7eb-970a-4738-a2e5-092f753f6469",
        "cursor": {
          "ref": "0613dbc4-e66b-4b48-bb14-ffcc1f2213d0",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "de2dc09d-5861-48e5-9d8e-6f418b2407d1"
        },
        "item": {
          "id": "b05df7eb-970a-4738-a2e5-092f753f6469",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7a23fa13-38f4-423b-b5aa-1e5235898511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67fa3bd-14ad-4d35-8379-e449b48d2ea6",
        "cursor": {
          "ref": "6bb1176b-5b41-403e-88b9-941d383a81eb",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1c870c68-e03f-48db-9e89-46e38b224ca4"
        },
        "item": {
          "id": "f67fa3bd-14ad-4d35-8379-e449b48d2ea6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b8fbf739-cb6e-4ed5-8631-ee31328f1c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eeb489-78e7-4ce5-82dd-e0ee31af5735",
        "cursor": {
          "ref": "8a4f0e0d-a3db-496c-a527-d7e91a68f527",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bfcfef2d-c2c2-41a3-9fd1-bef91d91e921"
        },
        "item": {
          "id": "00eeb489-78e7-4ce5-82dd-e0ee31af5735",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "728a982a-68cf-42b3-98ac-a375569ee69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401d824a-6e33-4792-ae6a-22a7d7f2cf9f",
        "cursor": {
          "ref": "95bda9bf-e320-451e-b138-15feaa03e48d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bea8cc16-b131-47ad-9fd3-531d21bdc335"
        },
        "item": {
          "id": "401d824a-6e33-4792-ae6a-22a7d7f2cf9f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6c80164f-f670-431f-87ac-ad84a3d65a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca50244e-61c4-48a6-8bcf-66a509d0305b",
        "cursor": {
          "ref": "2d958cfe-ee0f-4ba2-bccb-25d75820a2c4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6faa4283-23bb-437b-9d0d-f01b3a1febad"
        },
        "item": {
          "id": "ca50244e-61c4-48a6-8bcf-66a509d0305b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "79f460de-fcdf-458b-9907-8a12f5c558bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbafe0c-1e33-4cf0-9503-08a6a647b699",
        "cursor": {
          "ref": "46f3c8b6-1f96-4ecc-b9f1-7232b2a4a201",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2530ac95-ce99-4f85-88cb-50841d99ce89"
        },
        "item": {
          "id": "6bbafe0c-1e33-4cf0-9503-08a6a647b699",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f0b79be9-a0d4-4254-bea8-35cd564b8d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdc0f40-b365-44b5-8752-6301a338f171",
        "cursor": {
          "ref": "d08c8c34-4c09-4b1f-ac82-328110f84707",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "26d8adf9-d538-46d1-b91b-3ef45e647648"
        },
        "item": {
          "id": "2bdc0f40-b365-44b5-8752-6301a338f171",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f7df2f7d-b189-4d83-8182-cd7ccdcf73e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc11fec-0c92-450e-b56f-f36aa2261e9a",
        "cursor": {
          "ref": "d7d42e6f-2d8d-4a83-adaf-9173c9acaba2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cb11210b-8f7c-4161-893b-0937a3e5e3ab"
        },
        "item": {
          "id": "1cc11fec-0c92-450e-b56f-f36aa2261e9a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "073078b1-47e9-472c-96e4-6d10ed9c9e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ce7d4-f075-4aeb-9e04-19576fe84306",
        "cursor": {
          "ref": "784d83c7-3e74-4056-a01e-835a8059f0df",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fcfa0af9-d959-4127-8e19-6b7d55050684"
        },
        "item": {
          "id": "ac2ce7d4-f075-4aeb-9e04-19576fe84306",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d3f55c6f-6bfb-4ab2-be73-479625ee74e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a7399c-ca60-4bef-9751-c8130c171c45",
        "cursor": {
          "ref": "df188ce3-d78d-40bb-bbab-4cf33dd1733c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84208239-5b04-4517-8300-1f61e1c870cf"
        },
        "item": {
          "id": "d6a7399c-ca60-4bef-9751-c8130c171c45",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "489a76aa-2b63-4176-940d-fbf5002bef75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f837b71-b1c5-4137-9c03-513aa6c969fd",
        "cursor": {
          "ref": "3711fd86-278a-4cfe-a260-cdd437ec2067",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "881c78da-1395-4c6e-a59a-3e81586089af"
        },
        "item": {
          "id": "8f837b71-b1c5-4137-9c03-513aa6c969fd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bda7ecbd-2681-4737-bd50-82e5a0445223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39864a3-ef8e-4bde-bb25-a177addbefcb",
        "cursor": {
          "ref": "54fcf074-df15-4e6c-b850-458377be59c0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "df9cb9d5-a834-4ad5-91e4-2c23503b9bea"
        },
        "item": {
          "id": "d39864a3-ef8e-4bde-bb25-a177addbefcb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1afaf9de-0f30-4707-99d3-3273dfe8a85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fab87a-7386-42ff-8725-c7a795761773",
        "cursor": {
          "ref": "098212ce-402c-438e-9bb6-8d96a62913fe",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb4f34a3-fc45-4dac-b176-495309843c01"
        },
        "item": {
          "id": "c6fab87a-7386-42ff-8725-c7a795761773",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bb7f755d-8274-4524-ba4b-a23d09c96a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c74423-2191-4438-84ee-2f4862d17fd0",
        "cursor": {
          "ref": "2fae5386-4cab-46c3-b57d-199ac8c2dca9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "447dd353-f0ae-469c-bf1b-616657fd418a"
        },
        "item": {
          "id": "a9c74423-2191-4438-84ee-2f4862d17fd0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ecf79d74-2133-4cd7-b986-9312a5f232d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa7f768-1881-42c3-9155-684607fe752a",
        "cursor": {
          "ref": "5939f745-7858-4a55-9c48-c2eaa775a286",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a4677b4f-968c-42a3-8d7b-8d71031316fc"
        },
        "item": {
          "id": "dfa7f768-1881-42c3-9155-684607fe752a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "69828e53-a05e-4aef-9f46-ab37f2c84a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f61410-fd1d-4e32-9183-1cc485119011",
        "cursor": {
          "ref": "fdd35542-7d73-4977-b056-04bce5de3e85",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "689bb7c0-637a-4519-9f95-7435fd3f8cc5"
        },
        "item": {
          "id": "d5f61410-fd1d-4e32-9183-1cc485119011",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "98136a0b-a7a6-4d10-8e58-4e60f69cb8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79397dd7-9b9e-41f0-9171-8205255c6e32",
        "cursor": {
          "ref": "3dde07e5-7f01-4870-a786-45a1074e9a9b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6350df51-4fa1-4e7e-baba-27cd963ed6ef"
        },
        "item": {
          "id": "79397dd7-9b9e-41f0-9171-8205255c6e32",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4ad80ca-8c67-4f01-b709-7d0bae670e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8e1b30-2cf4-4b14-af5e-656eb1cc5530",
        "cursor": {
          "ref": "0359a1bc-b12f-4c4c-a746-d7577d061e94",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "eaf9fb8a-6379-478e-a81a-ceaed85d01e8"
        },
        "item": {
          "id": "ff8e1b30-2cf4-4b14-af5e-656eb1cc5530",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cecf9f79-e73a-4111-9b27-06c6f2c0fd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cdfcd9-8ec4-4d40-aadd-9e556799c7b2",
        "cursor": {
          "ref": "300b5a97-635e-4a99-943f-9ca80ec8974b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ef1ab1a4-30f5-41cc-a580-540b9b72e0a3"
        },
        "item": {
          "id": "48cdfcd9-8ec4-4d40-aadd-9e556799c7b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "24bed4c7-eae9-4be3-9bac-6daf62e36bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77a5509-2d83-43ce-86b7-03fc841c8193",
        "cursor": {
          "ref": "e7203670-9b56-4ca7-957c-e959d38e3152",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "647071af-5a66-438f-a3e3-74be28eb7e4a"
        },
        "item": {
          "id": "b77a5509-2d83-43ce-86b7-03fc841c8193",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d23bc84c-38f4-4b1c-b36f-ff70ead6b47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c076b5-e679-479b-a4ea-67a26f29faaa",
        "cursor": {
          "ref": "20a1608a-c157-43f3-b7bc-ee23ad4a613b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4ce3c1b7-2018-4aeb-a4f2-044282a002a2"
        },
        "item": {
          "id": "67c076b5-e679-479b-a4ea-67a26f29faaa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d6bea0b6-2ab4-4a96-8965-70ab5e1b8905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6134da3-2eb4-4352-8df8-cef19cdf88bb",
        "cursor": {
          "ref": "533598e4-04b3-43ac-8a5f-2aadcfefe94b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "57dd0c3a-ad02-4e64-b7c2-18cf4208a389"
        },
        "item": {
          "id": "d6134da3-2eb4-4352-8df8-cef19cdf88bb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b5ef626-2d29-4e4c-9a21-eb8e3a367ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85787389-0413-4d35-9a01-1e063856bcc7",
        "cursor": {
          "ref": "18b41aa7-6b90-4ebe-b2a9-fcc2c57920ae",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3ae86367-9ef0-4d04-98f2-e10d3c8925af"
        },
        "item": {
          "id": "85787389-0413-4d35-9a01-1e063856bcc7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aa4a8fd5-6bc8-40b4-a715-efed14eb9462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdffe9a-24c1-4f74-9cb9-160cda3d24ae",
        "cursor": {
          "ref": "1331b2a8-f583-4f92-b15c-c55af533a85a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bff05a4a-4a88-4beb-958a-a20b692aee08"
        },
        "item": {
          "id": "ecdffe9a-24c1-4f74-9cb9-160cda3d24ae",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4dec99db-c428-46bb-812d-1d8391aa9710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90eaf43-c655-4d5d-8ca5-b5b0b7b7440b",
        "cursor": {
          "ref": "869fc5c4-a459-4a7f-8f3e-2b0d1462de81",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "024669a9-a337-4aec-9b61-8754fab9c405"
        },
        "item": {
          "id": "d90eaf43-c655-4d5d-8ca5-b5b0b7b7440b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "459f5a97-c5b0-4137-b6ab-71727df0224a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a8c657-8f76-490a-a514-462bba94b98f",
        "cursor": {
          "ref": "688f8f1b-9d50-44a2-8abe-90b801cbe68f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4b7c8e67-9aff-45e4-b4c3-2791395a77b1"
        },
        "item": {
          "id": "f1a8c657-8f76-490a-a514-462bba94b98f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cc86701a-1bc7-435a-939f-f579b899cb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0ea223-f089-4b01-8b9a-a5a57998a92d",
        "cursor": {
          "ref": "4b6e9cfb-690a-4e75-8109-97dcdfca9ece",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e4dd70c7-959d-4e33-8502-7afcba9347e6"
        },
        "item": {
          "id": "dd0ea223-f089-4b01-8b9a-a5a57998a92d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4364704e-0e16-45a7-8c9c-ac07602b36a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa07e447-a73b-4cc2-a4e0-e5dd9867754c",
        "cursor": {
          "ref": "2c85e862-dd84-47f6-a84a-ca18647a1bb5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4a849f76-63ae-4b18-83d9-0c1ecd5234bd"
        },
        "item": {
          "id": "aa07e447-a73b-4cc2-a4e0-e5dd9867754c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a3e273b0-573f-43aa-a32f-1b0679b79c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca0052a-249b-4584-83ed-5e84b420db40",
        "cursor": {
          "ref": "2dcfe47f-d934-40d4-91c1-ce8d647bd2cc",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1541165f-4648-4560-8138-60d4386a2b2a"
        },
        "item": {
          "id": "8ca0052a-249b-4584-83ed-5e84b420db40",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2d6ecdab-28b8-425e-a8b4-96481a742720",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da5c512-1576-4136-924f-ae335b9bdcba",
        "cursor": {
          "ref": "1bf77e76-5763-4a01-bb64-9b1aa73363b0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9edd40da-ef53-4247-829d-8a350025b2ff"
        },
        "item": {
          "id": "7da5c512-1576-4136-924f-ae335b9bdcba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f51492f1-d27b-4cf9-9d70-cba486ceb0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5525d04c-f378-435f-99f9-add21d6e84cb",
        "cursor": {
          "ref": "05b29776-a479-492c-987b-2b098215a4a9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b0eb77ae-8be3-431a-8e7d-4f20d7d92b82"
        },
        "item": {
          "id": "5525d04c-f378-435f-99f9-add21d6e84cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "68ac4847-e5e6-43a0-9ec4-afd70008e9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bf0a8a-e6a4-4321-839a-b0d6c5d9ce1d",
        "cursor": {
          "ref": "252a76a2-a1ae-4076-afe8-595114989738",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "58234577-0914-41e8-80be-b8670ca2c612"
        },
        "item": {
          "id": "84bf0a8a-e6a4-4321-839a-b0d6c5d9ce1d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1be03780-ea47-4937-b4a1-3ac44c940b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319b7964-d114-4ae9-8ae6-683a01c11277",
        "cursor": {
          "ref": "205134b4-c4eb-4d22-a987-0d7c7945fff6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "990cef7f-8de7-479d-91ef-aa025321b9e5"
        },
        "item": {
          "id": "319b7964-d114-4ae9-8ae6-683a01c11277",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "30297579-1123-453b-af51-c26937c54493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dd2678-4058-4eac-9973-51fb73092f57",
        "cursor": {
          "ref": "b7dd3237-ea35-45e1-aabe-bb0c2ac1ff27",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "673efb9d-36f4-45e3-a204-333db9b1e809"
        },
        "item": {
          "id": "c4dd2678-4058-4eac-9973-51fb73092f57",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7c2d9902-375b-4c70-93c2-23029d675613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d77c44-f277-43d6-a46f-318cb63fc1b4",
        "cursor": {
          "ref": "f5027fa2-bb41-4466-85be-bb8a9113e796",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "846868fd-597b-4c96-98eb-aeb04868fa47"
        },
        "item": {
          "id": "f0d77c44-f277-43d6-a46f-318cb63fc1b4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8af46a65-9fd3-48f3-8c37-d7b0dd22c6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7408927d-a779-47d3-aafc-c1696c347515",
        "cursor": {
          "ref": "7ca3c07e-9b6d-4b39-88de-43a17e458d41",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bf8e0d91-fc10-49e5-af70-14544888deb6"
        },
        "item": {
          "id": "7408927d-a779-47d3-aafc-c1696c347515",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d33c5174-6c48-430d-be4f-78d4f8e9fd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8e98d3-2e99-44ae-8414-03e23b48bf29",
        "cursor": {
          "ref": "298edd5d-2d1a-4267-922b-11be2a6277c4",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dd6781bd-3cc6-4668-a800-c7449fd60e9b"
        },
        "item": {
          "id": "ba8e98d3-2e99-44ae-8414-03e23b48bf29",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f29e6975-d274-4094-b450-96359bf05859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a6045b-f7d4-40ee-b4d2-79c89d5713fe",
        "cursor": {
          "ref": "8decef03-bfe8-42ad-80ab-e525f153a295",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4749f17d-c43d-4360-a279-449c11287c40"
        },
        "item": {
          "id": "32a6045b-f7d4-40ee-b4d2-79c89d5713fe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f655e625-1f8e-4c46-beba-74c7b0874b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce4357e-72e7-4624-89d1-15e5ba03cc52",
        "cursor": {
          "ref": "aca0c6b8-3db8-42c6-ac6c-d772fd8505f5",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "df865c13-5aa3-463c-aad9-b6826bd13bc3"
        },
        "item": {
          "id": "5ce4357e-72e7-4624-89d1-15e5ba03cc52",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b79ae039-4c04-4931-bde6-a682d38c1e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5de4a5c-e589-40ce-b88c-1dbcac16e8ef",
        "cursor": {
          "ref": "0fcb7c9c-eb7f-4f11-babe-b88a01007e65",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "063b0769-a451-4702-a1c5-b3bde49ac2b5"
        },
        "item": {
          "id": "a5de4a5c-e589-40ce-b88c-1dbcac16e8ef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dd851ee6-2407-4663-aecf-f8318b82c37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee545e4-6fb4-44b6-a077-d93b55dd9cda",
        "cursor": {
          "ref": "c5c71fcc-a9b0-4a33-aa1c-eb9a4665686b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0279a743-f99b-4bf1-948c-b27331552f1a"
        },
        "item": {
          "id": "9ee545e4-6fb4-44b6-a077-d93b55dd9cda",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "17e9fc90-4114-4a08-9462-425655032d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5480a1d8-646c-4286-9466-d92c06598798",
        "cursor": {
          "ref": "88b12624-abf1-4def-9702-19976757c3a7",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d7a1306d-53be-4b6a-8d0f-60ac928bb7d8"
        },
        "item": {
          "id": "5480a1d8-646c-4286-9466-d92c06598798",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "daa09362-b937-4a05-91e4-dc566b56c13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5535972b-92b9-4bef-8f36-6a1b13f5ab75",
        "cursor": {
          "ref": "a064a481-c837-4954-bf01-4c524a3d854e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aff2740e-8bf0-4d85-972b-2b9769edf7f6"
        },
        "item": {
          "id": "5535972b-92b9-4bef-8f36-6a1b13f5ab75",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4887a0bc-0905-4ee4-8a48-9ad46fa59627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5e69c9-4ccc-465d-9118-c8b6f428a9c7",
        "cursor": {
          "ref": "0d6a3f8b-5e34-42b5-b563-0e3d3b477886",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3b0955d2-2c0c-41dd-90cf-dc8161eaf68b"
        },
        "item": {
          "id": "0f5e69c9-4ccc-465d-9118-c8b6f428a9c7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9d9a3f3-566a-4554-9323-c72ab736c0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1bb4336-b5b5-4e6b-add4-5f48746a1d41",
        "cursor": {
          "ref": "9432880b-e43c-4323-9911-7cd037aec124",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "958bb0b6-2b97-4694-9196-7763484f51be"
        },
        "item": {
          "id": "c1bb4336-b5b5-4e6b-add4-5f48746a1d41",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2c0a3607-298f-4bc6-b476-861dc6390c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6242a8-8859-4e67-96b0-73531f2251e0",
        "cursor": {
          "ref": "b054d874-99f9-4b07-a79f-fcdc0017d274",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3f705c38-c839-4687-a175-5e88e138792c"
        },
        "item": {
          "id": "0a6242a8-8859-4e67-96b0-73531f2251e0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e2b45366-f9c2-43b6-ae7d-e14a3f0e7ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2797e1fd-e8df-49e1-8688-e8752dd4e263",
        "cursor": {
          "ref": "db36fcfb-e1f6-425e-8583-4abdb6745f68",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bb6d2539-dcda-47bc-bb2e-3905ba104a31"
        },
        "item": {
          "id": "2797e1fd-e8df-49e1-8688-e8752dd4e263",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d0472dea-7512-45ed-9920-71fe90b1fd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953bbfd5-718b-471f-a32f-0a89bc3149ad",
        "cursor": {
          "ref": "aaf761b7-2e2f-4fb9-90e6-83d59ce51433",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3c4dca6d-be96-48bd-81c9-055845289a33"
        },
        "item": {
          "id": "953bbfd5-718b-471f-a32f-0a89bc3149ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "57a5a665-f785-4014-8d25-798495d4105e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696094db-704c-46a7-b0bc-30d3a527c460",
        "cursor": {
          "ref": "3da54299-774c-4eba-acf4-611d42d623a3",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8f81ffa0-341e-4cab-8edc-14cf72723896"
        },
        "item": {
          "id": "696094db-704c-46a7-b0bc-30d3a527c460",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "42972d75-97d9-4245-bf5f-95fb44307c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c48fe00-e53f-4fcd-aa28-523e752c1d8d",
        "cursor": {
          "ref": "08c38492-6959-4e1c-b42a-25720348a684",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7c4ce631-0b6a-4557-b997-644f8e571218"
        },
        "item": {
          "id": "8c48fe00-e53f-4fcd-aa28-523e752c1d8d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7cc44ccc-a817-48d2-9910-6cba72d333a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1468cf6-7fad-40df-b357-96f549407fd3",
        "cursor": {
          "ref": "5eac40ae-07f7-4536-9c8c-d9b5b0fcae88",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7e25e7a2-6408-49d8-b14c-5479694e790c"
        },
        "item": {
          "id": "b1468cf6-7fad-40df-b357-96f549407fd3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a41cbfd0-bbb9-408f-bbea-aef5c5cf8730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3a563d-e835-427a-a744-0278d30bf9fa",
        "cursor": {
          "ref": "80be314d-84c0-4506-8312-b803d66eb09f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3b0c34a6-f0ec-4a2c-9906-0aefd4822648"
        },
        "item": {
          "id": "ac3a563d-e835-427a-a744-0278d30bf9fa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "94088b68-9e04-49da-a991-e77529d3cab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0006d1b4-045c-4cef-96f3-eb5099167f0a",
        "cursor": {
          "ref": "2cd622aa-ef32-4ff2-a3fd-ffaa4b4d2ea3",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "863326ed-86f7-447e-baa2-1dd5e9d339de"
        },
        "item": {
          "id": "0006d1b4-045c-4cef-96f3-eb5099167f0a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3f11f4ab-27c8-410b-b2d2-547b3d46c496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f21217-eef2-4f95-a205-405f7c91aef6",
        "cursor": {
          "ref": "1c361b8d-de4f-498a-b023-28b8719fe7c9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4bb82cf0-eceb-4efc-84f3-77f2b64391b1"
        },
        "item": {
          "id": "a3f21217-eef2-4f95-a205-405f7c91aef6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c1e199e8-b9b7-44fc-a7b7-54cacc952c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b05c51-9b81-44a8-88b3-5ee068324cc0",
        "cursor": {
          "ref": "623e0881-9de2-42d5-8450-c58a342eabb4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "52854bb1-b182-42be-995b-1918e3605428"
        },
        "item": {
          "id": "f0b05c51-9b81-44a8-88b3-5ee068324cc0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d9cc4644-2027-430c-b9fd-6cedcc4da86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02de0640-d790-4387-b40d-274eaaf921c1",
        "cursor": {
          "ref": "602330fc-525b-4d3f-bb2d-7e590d31b70d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bdbf3236-ab3e-4656-9112-e6932fe3bddb"
        },
        "item": {
          "id": "02de0640-d790-4387-b40d-274eaaf921c1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b37c0d33-bedb-407a-a11d-8da3f9ecb27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef0cdfc-c308-4b72-b0e8-3b19e0780bef",
        "cursor": {
          "ref": "6d14b52b-44f3-44be-b877-658eaede43b3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fa13d4e7-5031-4a03-b669-93f84e693a6a"
        },
        "item": {
          "id": "1ef0cdfc-c308-4b72-b0e8-3b19e0780bef",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "30fde0b5-ac8f-48cf-94cb-55535de34793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11d5be9-ca6b-47de-a6d6-478d8aee712c",
        "cursor": {
          "ref": "c46fe4e0-77a0-4138-8e87-43c5ec16ff83",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2c691c1a-dc0a-4cbe-a8c0-dd24faf3df47"
        },
        "item": {
          "id": "e11d5be9-ca6b-47de-a6d6-478d8aee712c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4f490ee5-af8c-4764-a1b7-f36ab968a941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0a2d4e-91b6-45ce-93a8-71a859d912a0",
        "cursor": {
          "ref": "96c45f24-cdb9-4f45-afa0-24f7d90ac670",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2a73bb8a-4d66-465b-9ec6-5379a451248b"
        },
        "item": {
          "id": "2f0a2d4e-91b6-45ce-93a8-71a859d912a0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b41b45d5-b3b2-46ea-b5f4-3676d7ef2f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5244fb91-4cd0-4854-bbda-78ccf3a2607d",
        "cursor": {
          "ref": "5f27c731-92b3-43ef-934f-8f89dd1a247c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "daf1ef00-492a-44e7-a328-c16a6add3ca6"
        },
        "item": {
          "id": "5244fb91-4cd0-4854-bbda-78ccf3a2607d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "89b60212-b83e-4c7f-8fa0-81cdebb08b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da31acf-5709-430c-b4b7-7e770b17a136",
        "cursor": {
          "ref": "da7f3e94-3741-4fe7-842c-8aed7cfed18b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7bf96345-50ec-403d-b7df-3fd9b572f2a4"
        },
        "item": {
          "id": "0da31acf-5709-430c-b4b7-7e770b17a136",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "80121901-bb66-4088-b1b3-1cb7a3c7cc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1492894d-da5f-4ce2-a2be-27ce3fde77ce",
        "cursor": {
          "ref": "7c9e02e1-361b-4f91-8366-b7591566ff2c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f370ae37-d53c-4158-9fed-2e61aaed7a88"
        },
        "item": {
          "id": "1492894d-da5f-4ce2-a2be-27ce3fde77ce",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6395e76d-3e27-4e47-809c-9e3c4ee597fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eb2a52-6a11-48ac-8ad7-8f34b54aac80",
        "cursor": {
          "ref": "280df5e1-c43e-4fef-89f7-f1960cc2a0a3",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "86a7b0ab-9a81-4712-a3df-6ab4ec90998c"
        },
        "item": {
          "id": "e5eb2a52-6a11-48ac-8ad7-8f34b54aac80",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fe3ad20b-8e78-4627-a452-d524ea9714f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c393bb23-cccf-49d1-9e50-b7ce5b1f882b",
        "cursor": {
          "ref": "38ea2151-cf1d-4cca-a130-d6710fc30766",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fe7984ad-6ca4-4e45-8c0d-fb53df0770e1"
        },
        "item": {
          "id": "c393bb23-cccf-49d1-9e50-b7ce5b1f882b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1c4b3e56-77ec-4e8e-97f0-90da898dcbf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d269f1-268e-4d53-901f-38e67220f41a",
        "cursor": {
          "ref": "9d153d8c-aaec-44de-ba14-93f4bea4f5d1",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "61ea5d4d-3ead-4277-9ee2-abbd283c20ea"
        },
        "item": {
          "id": "d2d269f1-268e-4d53-901f-38e67220f41a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6da45f3d-d0c3-46f2-a2bb-282b986e56d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997e7bcc-862e-4508-87df-18bafe1e7a93",
        "cursor": {
          "ref": "0cb7e552-c423-447a-9b11-669b477e9841",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a9d87dcc-f7fd-4b0d-bd85-fda0d5850bc4"
        },
        "item": {
          "id": "997e7bcc-862e-4508-87df-18bafe1e7a93",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c2b4613a-04d7-4c3a-ab99-e415275adb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183e3d2c-cfeb-457a-a3fb-fc412bcb2a95",
        "cursor": {
          "ref": "0a19bf5b-daeb-4d20-96d5-7c5956367f15",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6e39857f-1842-4731-a676-ebd79e2b5e37"
        },
        "item": {
          "id": "183e3d2c-cfeb-457a-a3fb-fc412bcb2a95",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8ae7b056-982a-478c-8d2e-7e2e85dd7d27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9c2862-ce78-44d4-bc38-269e4a02b67e",
        "cursor": {
          "ref": "cd814f95-6865-4cd2-a0f9-ab288e65f09b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0b47ca69-196c-4aa1-a136-a68f1b195483"
        },
        "item": {
          "id": "3e9c2862-ce78-44d4-bc38-269e4a02b67e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7815d53a-7aaa-4fd2-a7d1-b768bce816be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821977a7-dd92-4596-9023-2201ea37b1f1",
        "cursor": {
          "ref": "c921a980-edab-4aa6-aa74-fe39e5839574",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f56bf5e0-0628-48e0-9443-f3d073009ba3"
        },
        "item": {
          "id": "821977a7-dd92-4596-9023-2201ea37b1f1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e96a0a33-acd2-4481-9512-402f6978f98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084b5ef4-b183-465b-97d1-a4f6d81ec6cf",
        "cursor": {
          "ref": "b057818d-7745-46c3-8583-c3959dc71993",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "914717ca-4e3d-4565-9c60-fb8562dcfe50"
        },
        "item": {
          "id": "084b5ef4-b183-465b-97d1-a4f6d81ec6cf",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2161eaa9-ebf9-4f98-bbe2-5e0179dc8cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e4efa7-ccdc-482b-8a91-a7dcb16de804",
        "cursor": {
          "ref": "6d7d7652-fb4d-41ac-b494-f87b8010931c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5e552bfd-266e-46db-a992-bc549acdd870"
        },
        "item": {
          "id": "46e4efa7-ccdc-482b-8a91-a7dcb16de804",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9f09a4e2-2a0a-472b-8cdc-d729077ce094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032076dd-02f6-49a5-a7b6-2557017b2a8d",
        "cursor": {
          "ref": "c73be211-e869-457b-9e77-9d3a05b1c90a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "857cf23b-7ba9-4d19-bf1c-c0d4f10e4a2c"
        },
        "item": {
          "id": "032076dd-02f6-49a5-a7b6-2557017b2a8d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "205f2a15-cb65-41c0-892b-eb7116ebe52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf0b94f-3a23-4a07-b11c-204ae852f3e5",
        "cursor": {
          "ref": "0633547e-f33e-4ffa-ba3d-0a8440d6a9f5",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea257148-6d27-4ae0-9dc9-8ed507ad6578"
        },
        "item": {
          "id": "2cf0b94f-3a23-4a07-b11c-204ae852f3e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1bf31880-fc03-4d5a-9805-1945bb9fc479",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e09536ac-a78b-4f23-918d-dbb8a0d8edac",
        "cursor": {
          "ref": "a2da5179-97d8-4de6-84e1-35668b0083ba",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "99932667-8984-4c1e-b363-b4efcea583cb"
        },
        "item": {
          "id": "e09536ac-a78b-4f23-918d-dbb8a0d8edac",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "68e4c45f-f816-454b-867e-ee9572a279ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74a06fe-5fc2-4d6f-b334-c257de4bc7a7",
        "cursor": {
          "ref": "16e5097c-ad38-4d61-84ef-0c9946fe3ae8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1b17c342-1d54-42d8-a4ec-59e2ec539f54"
        },
        "item": {
          "id": "d74a06fe-5fc2-4d6f-b334-c257de4bc7a7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fb005d87-073e-4ac1-8367-a804d4cf0256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6370cf-547f-422b-8310-dbbf3a52917b",
        "cursor": {
          "ref": "d620dee1-ea19-4158-8cb6-727ab1dd687b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "35baa9ec-dbd9-4ba6-813c-bd7b779ee31f"
        },
        "item": {
          "id": "5d6370cf-547f-422b-8310-dbbf3a52917b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fadc2174-1303-4dd0-abcb-ab663b1932fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d92130-b72a-4f72-9ae2-d62b53cf03e1",
        "cursor": {
          "ref": "3775edc4-f75a-41c5-bc28-039d9306d883",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "42304047-bf0c-4254-bdff-075e3efe2342"
        },
        "item": {
          "id": "35d92130-b72a-4f72-9ae2-d62b53cf03e1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "963727d1-779c-4446-ab7d-11294b419f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e73237-fc60-4e78-a651-6eb7277ae05b",
        "cursor": {
          "ref": "d8e45580-757e-44df-857b-6e779941a84a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bb564a44-04d0-45ea-827f-a308529a3a4d"
        },
        "item": {
          "id": "72e73237-fc60-4e78-a651-6eb7277ae05b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f6fca093-e641-4d57-a3e8-15099ba4dc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39aa6c2-4521-41ca-8bf4-ed5937e96cfa",
        "cursor": {
          "ref": "5f0237b2-c0fc-4529-af58-531afdbd2e85",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1c5bcd32-6f22-4350-ac60-65f70240d962"
        },
        "item": {
          "id": "d39aa6c2-4521-41ca-8bf4-ed5937e96cfa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "298e15a8-bf3a-43c8-8d29-f3caa7f344e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc5d1d5-57e3-48c0-9415-c7de071927d7",
        "cursor": {
          "ref": "77db308f-0034-4ba1-b114-ee80e2cab3af",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "53a15821-51b9-4c62-b79d-53e8fa8c70a1"
        },
        "item": {
          "id": "6fc5d1d5-57e3-48c0-9415-c7de071927d7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "07f9b35f-9458-455d-9e4d-7d17de6b19f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3976e569-9cf9-4755-94b8-0ddd6a67a8ef",
        "cursor": {
          "ref": "bd506c78-bab8-4c75-90a6-b3ae1a70e82d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "202e90ba-c084-43ab-a858-f38b807fb81c"
        },
        "item": {
          "id": "3976e569-9cf9-4755-94b8-0ddd6a67a8ef",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "98cee8db-a419-4ff4-89cd-b3526eb65222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6640c90a-9631-4a89-9392-1c1788e46682",
        "cursor": {
          "ref": "e68d1a9b-d34a-4875-96e8-a41d8d2df9ac",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "790743d5-3b27-40a3-a4dc-7f3b4290adc0"
        },
        "item": {
          "id": "6640c90a-9631-4a89-9392-1c1788e46682",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "08fd9cc7-58e9-40a2-b657-06f5508351de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5349e2c-8d0a-4cc9-823d-dfb890eb9ceb",
        "cursor": {
          "ref": "495cff1d-ba79-42e7-9ab6-0e6201e6d46f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d6dfc7f3-afbe-469d-9cf0-da03daf43f00"
        },
        "item": {
          "id": "d5349e2c-8d0a-4cc9-823d-dfb890eb9ceb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3fd7fe02-9b15-4e90-a362-237fd4e3fc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845e1e2a-353b-40d5-9a52-b5c700f8ae43",
        "cursor": {
          "ref": "b1d2b8a3-b108-4690-9d5e-12a7f58b31ce",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e6ac3a55-c8d1-40fe-bedf-4e6d18f04ea8"
        },
        "item": {
          "id": "845e1e2a-353b-40d5-9a52-b5c700f8ae43",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9fd246ef-0234-45b6-ba80-c98605a184d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64989be-b0ae-4bbc-a0e8-34bd77ade3bf",
        "cursor": {
          "ref": "e1a5c725-7b42-4ffc-8c03-f3bb63c7dc0c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cdb94922-43a0-408f-95c5-f24bd111c0bf"
        },
        "item": {
          "id": "d64989be-b0ae-4bbc-a0e8-34bd77ade3bf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "da666dab-0c49-4516-91df-d3d47a116e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cecadba-737a-48d0-a34c-2ca8f8569844",
        "cursor": {
          "ref": "a2822c2c-220a-434f-a195-faca3fa9a7c5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "80b883b0-62f5-496b-a6ed-ce0f8df8a18a"
        },
        "item": {
          "id": "8cecadba-737a-48d0-a34c-2ca8f8569844",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "387e1d08-73e6-4bb9-8544-e42bbac56d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a5e8d4-3829-4e02-a07e-08a91c648bdd",
        "cursor": {
          "ref": "3db17606-6a10-4b85-bd5b-065d41c8ec37",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f67eb982-ed99-4c96-8cde-0ef012b90e0b"
        },
        "item": {
          "id": "34a5e8d4-3829-4e02-a07e-08a91c648bdd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c799d7e0-0bb2-4253-b8ff-608bcecf95c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a72337-06e3-4d6b-8a7c-ec2c8af2177e",
        "cursor": {
          "ref": "623236f6-c6d6-4336-ae52-c7742b177f81",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "035e55ac-7d19-4bea-8931-4922d8f3a601"
        },
        "item": {
          "id": "a5a72337-06e3-4d6b-8a7c-ec2c8af2177e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4754da6c-1bf7-4af5-8b0e-65444b0370a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb85d61a-90b1-4d42-bd9a-81c6074850fc",
        "cursor": {
          "ref": "61395657-2ede-43d9-9d14-b18513706ebe",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5606628e-a4b8-464c-9348-e57e0dd51e14"
        },
        "item": {
          "id": "eb85d61a-90b1-4d42-bd9a-81c6074850fc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "03048a98-7989-447d-98c4-455f2eb9980c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd59a17-e969-4f4b-afb4-73c78dc4f97b",
        "cursor": {
          "ref": "024048cf-4186-4aef-b320-3b496b1f1979",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b939dd9e-82c5-4f90-bcc1-51c83d9f5c15"
        },
        "item": {
          "id": "0dd59a17-e969-4f4b-afb4-73c78dc4f97b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5c13d3b0-b130-48f2-8394-e8c858bb541c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05d062f-690f-45f6-8051-5daa7c1872b4",
        "cursor": {
          "ref": "fa54830c-5c8d-4589-81b4-80f93b08230d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "279ef74b-bcd8-4e81-af51-f4fe722bcff1"
        },
        "item": {
          "id": "e05d062f-690f-45f6-8051-5daa7c1872b4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "460d24d4-de8e-4298-aa5e-df5de9955bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6526cef9-843c-4dbd-9f4c-5c5f48e7ecc9",
        "cursor": {
          "ref": "41bcdafe-a660-4ab3-9712-0461cca78d6f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d9edd9f5-ada3-49d5-9fab-721e788d1955"
        },
        "item": {
          "id": "6526cef9-843c-4dbd-9f4c-5c5f48e7ecc9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d1be8129-f37f-475f-a698-4e74ca1252d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4e279b-4d95-40af-b959-f5c0db457933",
        "cursor": {
          "ref": "9e229123-b0d3-4107-b20f-4ace52393701",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7ad205dd-0e28-40e1-a0df-768908352304"
        },
        "item": {
          "id": "0d4e279b-4d95-40af-b959-f5c0db457933",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "783d1cea-4f17-43a5-a65d-0a1a8e0fead0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf0befd-67d9-4d63-853d-ea7b08dbd4bc",
        "cursor": {
          "ref": "bbf715c4-803c-47d1-8a44-175aca2e8435",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c4df13c5-0b08-4c50-b6de-f39d393df112"
        },
        "item": {
          "id": "7cf0befd-67d9-4d63-853d-ea7b08dbd4bc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "650891a5-8641-4201-9ba4-583c4b3e14cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c80ee6-5950-430c-be45-88df59424fb9",
        "cursor": {
          "ref": "380394b0-531d-44c6-ac8b-4f6255962ce8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6d12dd40-fdca-4351-b78d-57010c26e70b"
        },
        "item": {
          "id": "37c80ee6-5950-430c-be45-88df59424fb9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "97336d93-0dc9-4a11-bc9a-6fdb9121cd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29df7251-a1f6-48dd-9757-6394281b2566",
        "cursor": {
          "ref": "83a695b8-6a9f-40b1-aa87-1f81b437c893",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f8eb3f78-37e6-4770-a814-5c2cef5d3b05"
        },
        "item": {
          "id": "29df7251-a1f6-48dd-9757-6394281b2566",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8aebb0ff-b0d7-464d-9e27-90f0028105bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11a83d4-0c30-41e2-ab49-142ba8208456",
        "cursor": {
          "ref": "238239bf-e129-4e59-b0cf-031ac5ccb815",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "afd32b93-e7ba-43cc-b29c-24fbc7f8de45"
        },
        "item": {
          "id": "c11a83d4-0c30-41e2-ab49-142ba8208456",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1f7e50a6-be3d-464a-99fa-ea377ba85870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65368be6-a5f7-4f19-8c5c-03c98540eeaa",
        "cursor": {
          "ref": "13ff9427-de41-48cd-bce8-ba9bc4411ec6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "741fccbc-c4d1-4836-861d-7feac591262c"
        },
        "item": {
          "id": "65368be6-a5f7-4f19-8c5c-03c98540eeaa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "346f73b0-769b-4427-8715-949353c02f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1075e9-a9e9-4159-8cdf-0826c52ddc98",
        "cursor": {
          "ref": "2a68bdd0-05f1-4923-92a9-903e3c09e8f5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "356dd63d-51a0-42d1-b82b-7519aa5112f7"
        },
        "item": {
          "id": "0c1075e9-a9e9-4159-8cdf-0826c52ddc98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "30edd8eb-494e-4393-8d7f-db5838afb904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e8221c-5653-4796-80f3-c56720cecfd1",
        "cursor": {
          "ref": "5bdf2db2-ff5a-44e4-a9c9-b041ad40ec8c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "14e9f133-2183-498f-940d-199a8bcff0fb"
        },
        "item": {
          "id": "28e8221c-5653-4796-80f3-c56720cecfd1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a34443f9-4a30-44e4-97d7-5cf83d28912e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450a3cab-19f9-4163-b944-306adbdbd700",
        "cursor": {
          "ref": "57e5e8eb-7058-4fa6-b7d6-62edbb9f5565",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cc66f275-a160-4cf5-b835-4fe6e55681ce"
        },
        "item": {
          "id": "450a3cab-19f9-4163-b944-306adbdbd700",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a3ad39b3-e98d-4509-8652-f00341676d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937014d5-d287-48d9-a18e-e7b557cd583d",
        "cursor": {
          "ref": "651bc60f-4135-4846-80ce-40fea13e90ca",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e4468593-7a6e-422f-9dda-03e68e754115"
        },
        "item": {
          "id": "937014d5-d287-48d9-a18e-e7b557cd583d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "104df736-e582-41c6-bb17-892d11ef9476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438cfc33-9066-472a-a67d-40d2ac98ac5c",
        "cursor": {
          "ref": "506fd61d-2af1-4e78-a147-32c0a5e4d553",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a293f106-8540-4afe-a065-f7a1ff54e0d5"
        },
        "item": {
          "id": "438cfc33-9066-472a-a67d-40d2ac98ac5c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "51799b56-279c-4fa2-b574-584dce06b344",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d9d9f36f-a3a3-4a9e-9273-24597141fd30",
        "cursor": {
          "ref": "f81b878a-29c1-4f9a-b055-1e72b77444bc",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b054f2fe-e75b-4330-a9f7-79f1dc6409f9"
        },
        "item": {
          "id": "d9d9f36f-a3a3-4a9e-9273-24597141fd30",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "37ccc515-1010-4621-9c93-ccd4984e50bc",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c632f701-acda-4365-9388-1800153ddc25",
        "cursor": {
          "ref": "6d8939b1-72df-48c4-867f-bb4e57929767",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "424eab16-93f7-4559-9635-243db8af2a22"
        },
        "item": {
          "id": "c632f701-acda-4365-9388-1800153ddc25",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "27af191d-6516-4fd7-a7a2-46f3f1e6e58b",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7d320ffa-42e2-49e2-9f57-d4c48ad3a6d5",
        "cursor": {
          "ref": "00403f64-8297-4ecc-9e27-0b41d04c47cb",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "11e6e5a3-8fe3-486f-9a99-2ca394f2681c"
        },
        "item": {
          "id": "7d320ffa-42e2-49e2-9f57-d4c48ad3a6d5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5084fe12-89ed-4f7e-976c-997e41495480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6131c55f-35a0-4b7b-aa93-f71fa616e577",
        "cursor": {
          "ref": "f54f0733-6568-4e5c-9f63-d3eb1e79543d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "03ebb21d-a8e9-421e-a569-eefb2965f29f"
        },
        "item": {
          "id": "6131c55f-35a0-4b7b-aa93-f71fa616e577",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "de9d1455-9f03-4046-b260-8e5c39a28926",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "78849534-25b4-47ed-b498-106d47ccab9a",
        "cursor": {
          "ref": "288e8606-e6a9-4b15-8a33-521b3dd678e2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b382ccd2-2d3a-4629-b952-1b9cbcd854c1"
        },
        "item": {
          "id": "78849534-25b4-47ed-b498-106d47ccab9a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6b32748e-b503-4468-aa9d-aa41643721ab",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "973f5068-9ff7-4ea5-be5f-6a0f1a8e3fd4",
        "cursor": {
          "ref": "12c86f1d-a522-43ed-b8cf-abd7461370d5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "823823c4-cfc2-477a-85b2-98c55792de83"
        },
        "item": {
          "id": "973f5068-9ff7-4ea5-be5f-6a0f1a8e3fd4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9b00455d-12d5-4447-9ebf-c36344ead169",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d01bb277-6309-40cd-b8f0-41dd57c8154c",
        "cursor": {
          "ref": "894c365f-f30e-4a5d-b379-87c5ed60e339",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d22872d2-9c4c-4656-afdf-e1ea35a90a3e"
        },
        "item": {
          "id": "d01bb277-6309-40cd-b8f0-41dd57c8154c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a830fb35-beac-428b-876e-15625119698c",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "060e3d92-fd34-4187-9fbe-8b9a31ebca62",
        "cursor": {
          "ref": "791226a1-7f6b-4dc6-aaa1-783d72b74a50",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "581451d3-f4f0-475e-b5da-efba8bce2ecf"
        },
        "item": {
          "id": "060e3d92-fd34-4187-9fbe-8b9a31ebca62",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "48288912-7929-4f4a-a1b6-53d0c5a80792",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "904b4f58-294d-454e-b2f2-b7e712848583",
        "cursor": {
          "ref": "4776d1c8-949c-46e8-a03f-2fad9c3bc5e9",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ab0613da-bb03-4b61-a237-148f7d8cecf5"
        },
        "item": {
          "id": "904b4f58-294d-454e-b2f2-b7e712848583",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2970afda-d50c-4779-a440-8888373a6f39",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f1c524b2-0b9c-4f6f-a909-fe24d3d75bc6",
        "cursor": {
          "ref": "a90f721b-a058-4b4c-ae70-4e00eb0df574",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3e042cee-a468-4f0e-83fb-df891303944b"
        },
        "item": {
          "id": "f1c524b2-0b9c-4f6f-a909-fe24d3d75bc6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5a453da7-72fa-46b1-b627-78dadf101193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a384f88-5cc0-4fe2-bad8-a1e4a99f439e",
        "cursor": {
          "ref": "dfe464ce-8bc5-429d-8134-26cb0bc8dbb6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "659e557e-fc5a-4a15-a596-d299e3f0deec"
        },
        "item": {
          "id": "8a384f88-5cc0-4fe2-bad8-a1e4a99f439e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3e09bad2-a8f6-4d99-a63b-d0e8e989a9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6b3664-b59a-4011-8840-50dbe5875257",
        "cursor": {
          "ref": "2b4328e4-22cd-4f95-a9b9-6b26eca0985b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2a600026-c681-462b-bbae-567bd8656e61"
        },
        "item": {
          "id": "de6b3664-b59a-4011-8840-50dbe5875257",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1e08ea4f-fa82-46a7-be8f-43b7bdcbf443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253204d5-bce3-482a-9ae9-0f1fa0391470",
        "cursor": {
          "ref": "51f9a3bd-bb51-4770-8b6f-a994a768553c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e71b9212-b73c-4be7-9170-2a0d21fa9a1f"
        },
        "item": {
          "id": "253204d5-bce3-482a-9ae9-0f1fa0391470",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "73ff84a4-803a-4801-b584-41afc0f6dca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5a2f1a-b672-445a-90f3-57146ccd4a68",
        "cursor": {
          "ref": "463b65e6-ed11-4b1c-ae4d-e52446d95399",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "997275e6-5ec8-4141-8ac9-51356c4c5559"
        },
        "item": {
          "id": "aa5a2f1a-b672-445a-90f3-57146ccd4a68",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f348b8d5-6940-4cbb-9434-bc8276f83592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd58f2c1-c08c-45d5-9388-c69f75ec35d7",
        "cursor": {
          "ref": "6a3e8b07-ec91-4d7c-9a81-06c059d04e6a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a8dc2209-db5e-4012-983a-51d84ad0b160"
        },
        "item": {
          "id": "bd58f2c1-c08c-45d5-9388-c69f75ec35d7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "43a9c51f-1a88-4aaa-b3de-4036068bbae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcbe64d-141e-4599-b907-a7bbd1e35beb",
        "cursor": {
          "ref": "8aa6dfcd-581e-4ca1-a90e-ecc0cb104432",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6a2de12a-dee2-4dba-b7fe-11f094bcd195"
        },
        "item": {
          "id": "7dcbe64d-141e-4599-b907-a7bbd1e35beb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e283a282-d4a3-4c3a-a33b-02a65ddfb0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7452e65-bf00-4048-a0d2-407b55baca03",
        "cursor": {
          "ref": "5bb26241-572d-4cf0-b1af-fa569b228ded",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "405aae09-b449-44ee-80d6-4310ba688542"
        },
        "item": {
          "id": "e7452e65-bf00-4048-a0d2-407b55baca03",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ec585832-e606-45eb-945d-a67dd0c1f449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eda8bcb-a307-495c-8b90-ea1b59f18bb6",
        "cursor": {
          "ref": "b3f4a785-38bc-4f75-ba44-2b9a9e016a30",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "488ccc68-75be-4321-b7a6-1ad9403c8904"
        },
        "item": {
          "id": "8eda8bcb-a307-495c-8b90-ea1b59f18bb6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "436171fd-3d61-40f8-a409-3fb19f94234e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fe2116-fef1-4093-b9c5-c0f4983d16a7",
        "cursor": {
          "ref": "8847937d-2cf1-42e8-ab08-6e2959adc55a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "16f3b449-0c3e-4ba9-92e6-704d44a67157"
        },
        "item": {
          "id": "b9fe2116-fef1-4093-b9c5-c0f4983d16a7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "80fa0f06-62bf-44c3-a48f-70ca0c5ca27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9825fbc-c105-4030-a5ac-5219472507b0",
        "cursor": {
          "ref": "cb868e03-07c6-4f25-855b-8c07e0ad0903",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c36c4d01-3aeb-4183-b1b1-f3b556bcbb8b"
        },
        "item": {
          "id": "e9825fbc-c105-4030-a5ac-5219472507b0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fb958f53-a34c-406a-bc19-a6ce88b2902e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb96ba09-cb0f-4651-994f-174206a40444",
        "cursor": {
          "ref": "156c9d18-b037-4364-a74b-82f97bc9a584",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2b63fa3b-57df-4475-8052-85dafe2d63f5"
        },
        "item": {
          "id": "eb96ba09-cb0f-4651-994f-174206a40444",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2966afb4-0b8c-4dd4-96c8-732c8ea97a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3993e0-2c29-4275-bf32-826df9f46dae",
        "cursor": {
          "ref": "8f5b5c78-2f82-4b94-b463-79d8d76d1c8d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d773a63-1013-4473-9667-37649dac2fb2"
        },
        "item": {
          "id": "ad3993e0-2c29-4275-bf32-826df9f46dae",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "86c12e86-60df-44d3-88ec-7460bd28169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d37c898-a8ad-4485-b031-81a332c94702",
        "cursor": {
          "ref": "8a2822bb-7430-4a67-9972-0ace7c87412c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3ca365fa-a8f3-41b4-83ec-b64779c87b13"
        },
        "item": {
          "id": "4d37c898-a8ad-4485-b031-81a332c94702",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bc5f0490-b578-411c-b387-7af0e02628bc",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "780b8570-7c59-4405-b42b-f11c49269712",
        "cursor": {
          "ref": "51d99fac-e7c4-4e85-a67c-066727b52f27",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "eac607fb-957b-4516-9c02-4758a98d42f5"
        },
        "item": {
          "id": "780b8570-7c59-4405-b42b-f11c49269712",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d56bb6af-1792-4f4a-a7b1-7d5926b56c25",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3b4bfbbd-3144-4c2a-93ad-120adf6572de",
        "cursor": {
          "ref": "5ff938d4-4090-4aec-9319-6d170cc6eefd",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3525c776-c70b-43fd-9c7a-33d8ea0608bd"
        },
        "item": {
          "id": "3b4bfbbd-3144-4c2a-93ad-120adf6572de",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "54bf6b9d-09b6-4d8a-b44b-8d7441feefaa",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f794f85e-e9ba-46b6-b401-ff36bc19bd80",
        "cursor": {
          "ref": "3d166ae8-feb8-4d79-9056-af6c7413f38f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e5c74849-1b7a-4e09-8cde-a4215e7e89c7"
        },
        "item": {
          "id": "f794f85e-e9ba-46b6-b401-ff36bc19bd80",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8c6f1aa7-7ba7-4861-ac1c-b5806dab73b2",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c91b3626-af7c-4235-9c1c-2bdf447ac12c",
        "cursor": {
          "ref": "100a6549-19c2-425e-991d-7fd51782faad",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "30c4dff4-31a1-48ae-96de-7c53235383f7"
        },
        "item": {
          "id": "c91b3626-af7c-4235-9c1c-2bdf447ac12c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bc4ecc9b-8573-414d-8ac5-833be4d9463f",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9ed04f39-e0f8-4a3a-b51a-995fea956f3e",
        "cursor": {
          "ref": "00fc5839-a205-46c1-9e36-ec35c9cd8b3e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2e1bbffa-2665-4a6a-8035-7026ad1e379b"
        },
        "item": {
          "id": "9ed04f39-e0f8-4a3a-b51a-995fea956f3e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "11c9d75e-1572-4ef5-8345-09604283f541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3b371b-259d-44fa-9128-b0f5b7a08e1a",
        "cursor": {
          "ref": "71760a5a-d5b0-4191-8c8f-deefb563325c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8e0c3c26-beac-437d-978c-2fd43b741bc0"
        },
        "item": {
          "id": "db3b371b-259d-44fa-9128-b0f5b7a08e1a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ad471d93-3fd6-4f1c-bd94-29c738663cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8cedaa-3f2e-412e-a030-436ec0c9b21f",
        "cursor": {
          "ref": "52cc7c5a-0d59-42c5-84af-c834c1c0b504",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "24f5211d-207e-4edb-a999-2e620208c04a"
        },
        "item": {
          "id": "2a8cedaa-3f2e-412e-a030-436ec0c9b21f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "486045aa-484c-48fe-bdce-f80ab8686120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a31bd1-0e53-4f92-b005-5d8a6d245516",
        "cursor": {
          "ref": "d52342f8-3e7f-40c0-8ad0-b1140da73fc0",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f5405b4d-8e88-46f8-afdc-ff5d101bfc28"
        },
        "item": {
          "id": "b3a31bd1-0e53-4f92-b005-5d8a6d245516",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f663555d-6934-4615-8d62-9603d861b928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f57c6de-68bf-4525-88ca-7c4330ee2ac2",
        "cursor": {
          "ref": "820a671a-0539-4c7f-852a-9e8395c69782",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c31b562a-ef9e-44dd-8b55-75f365ca1375"
        },
        "item": {
          "id": "1f57c6de-68bf-4525-88ca-7c4330ee2ac2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ce166744-b9a5-437f-9cfa-fcf38ef1c488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c394069-8b7c-4ca2-a3a5-8f9a85d3540e",
        "cursor": {
          "ref": "91c7702c-f43e-4e07-bad8-eb477210a577",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "895869d7-792e-4c50-a07a-386d889232e7"
        },
        "item": {
          "id": "7c394069-8b7c-4ca2-a3a5-8f9a85d3540e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "74ae92ff-d348-4250-bfd2-93d1a5f64dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080c3404-b4fa-49e9-9ff1-a48b77f1115f",
        "cursor": {
          "ref": "84814edb-5fae-4bbf-8970-72e9662534d6",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "215949c2-df3d-4e60-b7a8-9026d5d4a240"
        },
        "item": {
          "id": "080c3404-b4fa-49e9-9ff1-a48b77f1115f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8313819b-35b4-4363-9c79-94b292bc92d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b9d21f-eed9-4017-88b5-aa44646fc7c0",
        "cursor": {
          "ref": "d69bbc64-9ab3-4497-8c37-3110c13898b0",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4d273fa7-062d-418b-a892-35af109be42b"
        },
        "item": {
          "id": "02b9d21f-eed9-4017-88b5-aa44646fc7c0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "26499d13-568c-4cf8-990f-0b6c5fee6d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715690ea-69b4-4bb9-a319-ce9819463366",
        "cursor": {
          "ref": "c4c3f9cb-0cb2-4ddf-b5b9-3bd7e00baf39",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3692304e-21ba-4796-9577-6beb34207d11"
        },
        "item": {
          "id": "715690ea-69b4-4bb9-a319-ce9819463366",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "af59dcbc-1650-45f0-8c52-31e13fb7d85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd5de8d-a717-4938-a4ad-a8d639234418",
        "cursor": {
          "ref": "7a4a79f3-cee4-4e67-afb9-fd5b5f792cf3",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c1f70a24-6d0b-4990-a011-0a1b2d4ca941"
        },
        "item": {
          "id": "bfd5de8d-a717-4938-a4ad-a8d639234418",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "76021cd6-032e-4817-8ab5-b58bef1251bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7737df-2690-4298-a764-8525e46c4dd0",
        "cursor": {
          "ref": "26b4e224-5e10-424a-a39c-718effc05033",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ca92a871-be4b-44ae-b7d3-f11bd163e10c"
        },
        "item": {
          "id": "df7737df-2690-4298-a764-8525e46c4dd0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a2c618c1-e96d-40aa-90f5-08d3cdbe78e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1f69a4-9b3f-4191-9080-c10b4628533c",
        "cursor": {
          "ref": "0dae7d88-a1ce-4c85-9a5c-e240fbecb83a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "aa017275-a419-4e9b-a461-8980052d5ec0"
        },
        "item": {
          "id": "1c1f69a4-9b3f-4191-9080-c10b4628533c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "58b4c9b5-02e1-4c89-aad4-63c567d6294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d41287d-bcc9-460b-99e0-fd17617710cd",
        "cursor": {
          "ref": "9da366b1-58c4-4af5-b4f0-a0f4558fecb9",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bd28fb47-a482-481b-9615-ac19bdf64837"
        },
        "item": {
          "id": "2d41287d-bcc9-460b-99e0-fd17617710cd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fca8252f-1ec5-4ef8-8475-54c4220da9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d544509c-3cc2-4251-abe6-d05a0235ea59",
        "cursor": {
          "ref": "fddaefd1-96a6-489a-a50c-0257251e76ea",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9b4f20f3-a521-4b2d-a4ac-95c0abe6bc63"
        },
        "item": {
          "id": "d544509c-3cc2-4251-abe6-d05a0235ea59",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8db07537-34f6-45c0-8614-d4eecbdd80e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed015b08-398c-497c-90f8-597ba1bfa42e",
        "cursor": {
          "ref": "a4216ae3-f577-4348-9481-7e8040beae38",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "eb63caa9-a25c-459e-9903-6270cfb306e5"
        },
        "item": {
          "id": "ed015b08-398c-497c-90f8-597ba1bfa42e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b419245a-2a20-4dae-9a5b-422ed985dfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3b6ba4-b4ac-4a4b-a988-3477ec7b3bb6",
        "cursor": {
          "ref": "bbc35750-9954-46f9-a09b-e571ac7ce879",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b5d93ac9-4877-4f28-a377-546c9d8b984b"
        },
        "item": {
          "id": "fc3b6ba4-b4ac-4a4b-a988-3477ec7b3bb6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b0e68e6b-d3c2-4343-a6bd-4ab231842f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfbb66e-ff36-4fc0-9a7f-7b840d83a93e",
        "cursor": {
          "ref": "91f755a1-b980-40ef-81ce-2abc9fd74ac6",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "45bc0a92-88d6-4ba8-a9f7-f98818496640"
        },
        "item": {
          "id": "1dfbb66e-ff36-4fc0-9a7f-7b840d83a93e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3998c133-9d99-47fe-89e9-f5db63f0709b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d75171-63dd-42bf-87bb-92f557063f11",
        "cursor": {
          "ref": "42bd510f-a768-4256-b109-6a87482e9432",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "724f97d9-32e0-4e00-9f7c-a8cdd13a1b98"
        },
        "item": {
          "id": "34d75171-63dd-42bf-87bb-92f557063f11",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "56dff90e-fa00-4047-9f79-81e767e9d4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a56d6da-b0f2-45d9-82cd-c51040e9e57e",
        "cursor": {
          "ref": "5b8360c8-3c12-4444-82cd-cf4bc6b76a67",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "35e67827-8839-4f88-a6d0-993212cb8e3f"
        },
        "item": {
          "id": "5a56d6da-b0f2-45d9-82cd-c51040e9e57e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a081732e-8800-4fe7-9f92-75fdba6938c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6690e6-4244-485b-b81c-3d2eff591ed5",
        "cursor": {
          "ref": "b53ccfbf-3e2d-4708-ab0a-1ec60c08cc2f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "298af5bc-74a2-4770-800d-f4fc14260056"
        },
        "item": {
          "id": "2e6690e6-4244-485b-b81c-3d2eff591ed5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2f7ce3b1-1730-4340-9d8a-1f0c1faa4b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e6aeb-d566-4b15-95c0-06eb9a6d7580",
        "cursor": {
          "ref": "67945699-f461-41e8-b54f-11288afb72fc",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dd964204-44c6-41a4-9135-ecebe0792731"
        },
        "item": {
          "id": "9e6e6aeb-d566-4b15-95c0-06eb9a6d7580",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fa72c42e-f45c-4546-af5b-8dfeaede3455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a596cb05-827d-4f4b-a80e-94a33048157c",
        "cursor": {
          "ref": "f08cbd0d-bbde-4a45-b8d8-c67508ac9af4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f28ca18b-9542-4f0a-bb1d-82746c28f5f7"
        },
        "item": {
          "id": "a596cb05-827d-4f4b-a80e-94a33048157c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e7f7ba1c-540b-4a39-aad1-39c6962864ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a311ef-0478-457f-8862-b8fd41958a7c",
        "cursor": {
          "ref": "7b72a31f-c7b3-4211-93d9-2e90ec80fd61",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7881d5a8-2926-4bb8-bff5-fa04f4cb6792"
        },
        "item": {
          "id": "44a311ef-0478-457f-8862-b8fd41958a7c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b2573111-a367-410a-a93e-dd08d7e939ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55809a2c-141d-46df-a32f-37b58de90d56",
        "cursor": {
          "ref": "3abe791f-9dba-49b9-a2ab-5c44da72bead",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a4efd6da-f7a7-411a-9440-1b40e783f94e"
        },
        "item": {
          "id": "55809a2c-141d-46df-a32f-37b58de90d56",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8693dff8-3c3e-41e1-9c11-95b3dd5367a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1318bac1-12ee-4598-bbcf-8f50c670afa2",
        "cursor": {
          "ref": "bf81a009-c157-4799-9999-23d104e590b3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e70e9a8e-05d7-466a-a2fa-7461efde339e"
        },
        "item": {
          "id": "1318bac1-12ee-4598-bbcf-8f50c670afa2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "eb9dfbe7-b247-47d3-b2ec-f21f9bcef31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa50849-ce04-41e1-ba70-558fcecb2fd7",
        "cursor": {
          "ref": "7c570d57-d8c6-4411-8835-2e5a3699fc1c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "55127756-5497-44fe-90c2-e2c12b0f7d21"
        },
        "item": {
          "id": "0aa50849-ce04-41e1-ba70-558fcecb2fd7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "96e17c1e-5fe5-43d1-b335-bda5a558c635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3975cfb-6fe4-4345-9720-f951b9b41c53",
        "cursor": {
          "ref": "705e4afb-5a5c-4a94-b91a-0cf1736e49f3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "cd5d6d25-75ba-4af0-a686-66c8f325f468"
        },
        "item": {
          "id": "d3975cfb-6fe4-4345-9720-f951b9b41c53",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5fa85eab-7566-426b-bba6-99b37e7ad1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1742d693-efd4-4bca-b91d-f4e71d7bf533",
        "cursor": {
          "ref": "55e404c9-c08d-4084-8224-54d4a05d90b5",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "957df272-eb60-4c84-837c-81244760c743"
        },
        "item": {
          "id": "1742d693-efd4-4bca-b91d-f4e71d7bf533",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "15025652-9eeb-46fb-8862-abb4f86a6f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b50cf1-fc12-47df-8283-9a1b36c9ba84",
        "cursor": {
          "ref": "7149dac1-d88e-406c-a28a-24dd854be4d5",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "febfeefa-2fe3-453e-8f14-d75b0db123a0"
        },
        "item": {
          "id": "59b50cf1-fc12-47df-8283-9a1b36c9ba84",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a951d7b2-4dd5-468a-ae3c-7558bf9cc7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908b92db-e04e-44cc-bacc-c41c7cf7d484",
        "cursor": {
          "ref": "03610525-8702-4e33-b5cf-79c8f6c6e789",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "035ec264-b431-43bc-bd27-f4c45f28dabf"
        },
        "item": {
          "id": "908b92db-e04e-44cc-bacc-c41c7cf7d484",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b36685a5-8139-4ed1-b0aa-bae8a4199b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f65b621-4df3-4156-a16e-dbe5ed25fc3b",
        "cursor": {
          "ref": "20487f84-8f6d-4845-a01b-6b5566d8fc5d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "dc5da4f4-7b27-48c8-aa2d-a809eeb2fc4f"
        },
        "item": {
          "id": "5f65b621-4df3-4156-a16e-dbe5ed25fc3b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "210c35ea-050a-4633-b3f2-55e5e65f436e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfa616c-4bda-41ea-977a-60e814e418fe",
        "cursor": {
          "ref": "1a310404-e1e2-4a73-88c5-b1a986685c40",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5d47f139-9636-4387-858e-c8b23e79cbe0"
        },
        "item": {
          "id": "0dfa616c-4bda-41ea-977a-60e814e418fe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "34bf3a0e-ff4c-482e-9fea-1bc788a95976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284c3ab7-638f-41a6-91cd-afaa6a5dce64",
        "cursor": {
          "ref": "a4fe2149-1758-46fa-8ab1-52bf42878165",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2b543c6b-de17-48a1-a846-0a976ffa2f0c"
        },
        "item": {
          "id": "284c3ab7-638f-41a6-91cd-afaa6a5dce64",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "418f2646-b549-455d-a51a-01e81affbb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a13ed5-bcaa-4db0-b5d2-8eaab51d061a",
        "cursor": {
          "ref": "7199028e-672e-47a0-81b7-71e52d17bf18",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e602c0a3-e8ed-4a85-b0b9-529d61aad2f4"
        },
        "item": {
          "id": "61a13ed5-bcaa-4db0-b5d2-8eaab51d061a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9b589961-c84a-4b03-bcdc-8312a2e2d6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5253ee7-26fe-472a-ae81-e1bd75f7c8a3",
        "cursor": {
          "ref": "eca70ff6-c695-496c-b3d7-c5284433645a",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8bda0d08-82f7-49ba-9bb4-2c57e17ef933"
        },
        "item": {
          "id": "b5253ee7-26fe-472a-ae81-e1bd75f7c8a3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22d1c40b-1d0c-4dcc-a28a-e6f27c54d3b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3a39ac-315f-42f2-ab41-dd46e100a6aa",
        "cursor": {
          "ref": "656600e5-bdf1-489b-baee-4efb265fc131",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0f8ffeba-e4bf-4ee7-af7d-05d3d9890d8f"
        },
        "item": {
          "id": "3c3a39ac-315f-42f2-ab41-dd46e100a6aa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "456eb32f-4256-4c03-b2a3-0a51b68db4ef",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "dd9d03c5-81e5-4d81-9332-d3efff2d9967",
        "cursor": {
          "ref": "2b0afdda-bf0e-4ed9-accc-d41790d0406a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fdd8cdc7-83fd-4c08-a3b8-8d3003bbc66d"
        },
        "item": {
          "id": "dd9d03c5-81e5-4d81-9332-d3efff2d9967",
          "name": "credentials_verify"
        },
        "response": {
          "id": "954d6451-499d-43f4-92b4-5345b52c5ca6",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bb2d75-6a78-4eee-983d-aebfcd58d41f",
        "cursor": {
          "ref": "8149bd66-53c3-465d-9b15-c07c4b3e42bf",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e894a6a6-8f04-4bf8-81a0-d49613186ef0"
        },
        "item": {
          "id": "92bb2d75-6a78-4eee-983d-aebfcd58d41f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "05dd3358-8fee-4e49-9b7f-302b3eff759e",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8cdf7f-dfa5-49ac-bfe7-b3acdde80aa0",
        "cursor": {
          "ref": "af0e8339-2caa-4e44-8955-61c38be9db7a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8cad9aaa-95ea-43a6-8e9e-809934bec6f5"
        },
        "item": {
          "id": "7e8cdf7f-dfa5-49ac-bfe7-b3acdde80aa0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c4f34d10-1631-4b05-886c-0833afd36994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8cdf7f-dfa5-49ac-bfe7-b3acdde80aa0",
        "cursor": {
          "ref": "af0e8339-2caa-4e44-8955-61c38be9db7a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8cad9aaa-95ea-43a6-8e9e-809934bec6f5"
        },
        "item": {
          "id": "7e8cdf7f-dfa5-49ac-bfe7-b3acdde80aa0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c4f34d10-1631-4b05-886c-0833afd36994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5145a3-371f-422c-a2ce-32df0ccd4809",
        "cursor": {
          "ref": "08e9f6b5-9e35-46e4-8767-e4e5b1b80428",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c7b02834-302e-4655-92d9-b66d74fecf5e"
        },
        "item": {
          "id": "ec5145a3-371f-422c-a2ce-32df0ccd4809",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c96ea936-818e-4db4-bfb2-e83a0dd1f6a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48e3a30-5c3c-4c85-bee9-efc94b42ec36",
        "cursor": {
          "ref": "3ef8a56c-26dd-44ed-84ab-513da00a4ef2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "52ea1859-0ea2-426c-a16d-abda01ecdcbb"
        },
        "item": {
          "id": "a48e3a30-5c3c-4c85-bee9-efc94b42ec36",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "94c28097-9e39-42a1-acf5-3f8bb094faf4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}