{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e2f8ba2a-fc80-4ffc-abd2-36f7b7725e23",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f81f24b0-2053-4539-969c-1198cee5d824",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebd79407-e2be-4521-86bd-c8b3e7d33244",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cc478091-e784-4cb0-8db7-69632076c356"
                }
              }
            ]
          },
          {
            "id": "6a98b756-bf39-404a-a6d1-96bfe6cea6a0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccfd401a-c8b3-4072-9eab-e6b53cec9a92",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "073edccf-4689-49a8-8246-811f7a9e0127"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e5a1251e-2cb2-43fb-9dfc-9378a4335d0a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a4361ed-d776-43a5-8f9f-695471fe7d21",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3ca06be6-99f0-4af1-9a62-829e9a701cce",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbd0a70d-e624-476a-a3a0-aaafe640969d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97bedbb9-443c-47a5-a9dc-9441613c1d01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc67e72e-6fc8-4efd-a153-cccb3134c5c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b910405-20fd-4893-9aca-78fd7f42b34c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0eab5682-dad8-4482-844a-704901dff1ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebc6a745-f219-4b05-abfe-297b2b1c2ca9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4efbb00-2d0a-4266-962d-c795efe16eaf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0f7be952-f445-4c55-b288-91f3c16ab80c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ad87cb7-bc02-48e3-bff6-50fb02e125db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de47cbb7-e60c-4101-8bdd-3393481a98eb"
            }
          }
        ]
      },
      {
        "id": "d02c5272-7dfb-4380-9293-df43025965c2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c611cf7b-56f3-4ea1-8849-a6a642cda071",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7f34e8a-73ca-4262-aa4d-7aaf81622ab8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52a91102-2182-44e3-87bf-ada93ed7dab7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edad2d2c-9080-40bd-8153-a4e23f225101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c11da60-9a80-4973-8432-833419566287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba5eebf-053c-4a1c-aada-6a3ccc79f311",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67614dd5-edc5-427b-8303-5ed3bb18e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c1c828a-0411-41de-9557-1c83c5e1764f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29b39f5-1bfc-4d97-88d8-35facd40e4ee",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9488539a-c765-43ee-a9ef-03d6a7dd044e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "815ab5b9-fd8b-4624-a616-7db530ecf1c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "07118339-1984-4ffe-b46b-f8c562056ef1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a33cb0f-397d-46d1-8e5c-bac6da234aee",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f32433-9a9b-48b9-8c4f-cb88dc4e22ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a97574bd-bfd6-4c3e-8085-4e2352b74998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f1809f-8ad8-42ec-b385-5a629321cb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d803e7f4-96d6-4741-9b17-54f245ba12c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bff584-beee-43c8-977d-70ff3e25bb07",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a822f3-fe1c-452d-bb98-814f3a2e8ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86290c2c-7729-47da-b93c-88eefaab4fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebfdbc3-21db-44ca-98f9-0d8188d3d01a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "987a8c13-38b6-44cf-81fe-9e302f0fa3b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "487f74e5-141b-4549-b9ef-f1941e290992",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2807f7cf-6d56-4703-8d74-ad4a237ac66a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eae5f9d-5aca-4742-8771-d593dfec5e7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "907a079d-39e3-404b-b151-e57ab3325b23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b9016dc-277e-41f3-b6ae-3ed6b71a22fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6c259778-be2e-4c63-a2f8-cf3ad4023c31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5fa52f1-cf82-42d6-831b-3fa89f52b55f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4725424f-8f1b-43af-8e06-ab498092fba8"
            }
          }
        ]
      },
      {
        "id": "97ddaf2b-ac2e-4a5a-869d-d8ffdd28ad8a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "17bd2aed-d0f0-45d1-afa7-f6009a1169e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f4a59d8-3f53-4ee9-9718-201885027ce9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c6864f75-34b6-4334-9930-bb11cd46c21e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26994d99-6edd-4ddf-b9cd-625be91c9c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103cdd18-db3b-4876-be87-6e8be91af39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e13abf-d7e4-48b3-b960-201ed78eb567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb45890b-b113-43be-8880-db887c8871af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f5ad83-8b07-42f2-84d2-e00c4f4e4dd5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84953119-2a00-4dc0-ad66-95a63edf09ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4342f0-b99b-4a17-8327-3258a79e6121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8b5f25-a304-465e-8222-f5aec8eabacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d672344d-f999-4b4a-9daa-1ee7da129b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea00acca-c0ca-4849-af4d-9ebe932d2e52",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1422c01c-7536-4fcc-8315-74af82645786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92647748-f647-4d78-b6e4-f6d5d15ab2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7734e712-11be-4417-8cb0-53d58607bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9ca7ea6-dd5f-4da0-ab69-0f760d9ee3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63eaccac-a56a-4520-bd4f-4526da6c844f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b9dd38-2e86-4731-bc41-7b98f3a3d69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f93f32-16f2-46ac-aad9-529e13737c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc317d3-c099-438d-933a-1a8e35128866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6a57dc7-e828-4f87-ae13-085b433cbaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71504313-2f47-4ca7-b1ea-2b2ca046ebdf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674795f9-35f6-4584-accd-ae0f9d514738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1280db2e-3ecc-4a58-a66d-144398505869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a28032-a2b5-42e5-9335-5b57efb2658e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bbd9375-d769-4f94-a5de-24de4b7107fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db7cdec-6b5d-43d5-928f-db4f8f8d6372",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920767ab-e780-4f14-8691-6ed0cfaff1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e487b2-b37c-4c51-8e77-cbc4ed22e31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d652dc-0d9e-4137-95da-34fd8fe5a416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7ed5dce-6b94-4517-bd5b-796389df60cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5df203-2219-4742-b5a7-b392d1cc16b6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec382bc-cd90-44ba-be75-33beb792a064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36889340-c9b0-4f9c-ba19-fc3185755c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6972bce-d324-4a97-bab9-69144452efe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b954ab3-fa4f-40eb-a60a-b49e1f61682e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d69130-69a4-4f44-9f38-a4a648a0fcbb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5ac605-9f5e-4ebc-b5ed-1522a6e89afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6930941d-e78f-4797-96d9-1c5971929bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b517ea8-84b1-45cd-bfea-72535e53dbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79685501-fcdc-4846-8e40-448ecbd383ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5815170c-15cb-4c8c-ab26-682c8e550f65",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f1004a-2ccb-4f8c-8480-58141a7d534e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3521e2b-9864-4cb2-98e5-980a605b35a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ea5ae2-8d8a-4142-a260-38663df6eced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4221c65e-eccb-40b6-9804-184f97609b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dab215c-0498-42c0-a933-d2c14a198fd1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817f7772-a1b1-4d66-bce9-c114d7609328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1aa2a3c-b2be-4382-aedf-234c440eb169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9c5ed4-7d37-46ad-9105-d8b57f9f5564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51769c45-110e-401c-8a12-2786ce64c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7886381d-39fe-4e01-ac23-91936726897c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150bb942-95b6-474e-879b-dfb9afef888e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eeff8e5-de7c-4395-beb8-441422804269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe93f8b-6f44-43b4-8e69-dd62366d07dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa3f2f6b-5cae-494e-af76-ae56f0929f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffeac53-7ed2-4102-9b7c-c12f7881bd7a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b25f00-7bb9-48c0-86f5-d357ca0ed820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cbb8ce-a809-4f9d-ab72-33aa9b367253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241d89ac-0442-45d5-a577-87d292482f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "790dc44f-69d5-490c-88e1-4a7062c6b552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588880f0-ab33-4cfe-86ab-ada25ed124c7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1495a83-6b56-4256-8b25-72084e1f6afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225a0141-1b8f-4c4d-bfc5-8d9330ee9b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24c6985-77c6-4f0b-b2d9-408444b7a319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f3fcfc1-ce4c-4035-a0b4-06987b2c9be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e3f836-3494-4ffb-bda0-2e33c87eb3e2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa42834-56da-40f8-b303-c8a931acc332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0026502-cc11-4e93-8263-8f178dbf0d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374c9bb2-94b6-4936-bfaf-bfe8616ddd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64919ba8-9834-4523-a2ec-60981316e77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185c1f39-17b0-4a4f-bbea-5c1aba9ba893",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e59a10c-9add-4b0c-b991-344cff9645a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4df466a-ed8b-47c7-b174-f38f6d0e5180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d15dcd9-c429-4e75-8ad7-6a162e370f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fca2d968-eae4-46fe-bb42-a79f55378447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43585e41-1e19-4bc6-abe4-3142f58bc14f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3bce38-bd59-477c-baeb-8d0918d027a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf3ebec-04bc-4b45-980f-91226a7c9645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfe1d21-c13e-41f6-b266-c69aedb925e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fca2e648-a172-4f89-bdd2-bdcbd860a7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddd0a39-8bf5-40bd-8e20-796caa0565ec",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce57a8a-6319-48c5-919a-67dbd63a3546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa68daab-2c70-4a32-abfb-fab8e3f6056d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a0bb56-15bb-424b-b21a-de9e68c9e7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23aa2b06-a21c-4a1a-b37c-c9a3cd33044c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca066b34-f28c-4297-9c8d-07128c2ce18b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc6cb9b-28ea-4244-a645-7a2d83ca87c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae955b2-7204-47bc-bb32-9cdc1dec7c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b9ae40-a607-4644-ba3e-82990f01b2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6260c399-8ed0-4194-87c7-f301edab13a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5378aede-82e3-4446-987a-5ca87dea512c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5785f8-3eaa-414d-8f65-d43f23d92284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1285dc-1fc4-4638-b861-365f75f711ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7771ab33-2f21-4828-aa47-3b4056da5a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14b540f-2c68-4825-b9aa-024fa0be1159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f979ea0d-9ff2-4369-86c3-b3f3d60e0f3f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efeda32-267b-4506-8499-9cfcaaf43f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1bbbd5-19dd-47e8-84de-d2cd296991e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37742ae8-3564-42f7-8e6a-9a2c0f3342b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc353220-7a7d-4e79-a392-d934e846a7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd57a338-52c9-4eb5-90fe-54a462e7015c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da58d50-991f-44bb-a19b-bb1f888864eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b829fe1-6d14-418e-98e3-e93fdd764286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85c2858-6c57-417c-981e-4b7ff92474d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a578a4a-7af5-43e0-a4ca-660417f46003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faa5373-0f72-4074-9eb6-b2e16bcfded5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d489a7-2191-4109-895f-7b05161660b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44034c99-bd12-4458-a634-2e801584c3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43e8d31-7611-4e72-9b38-d03ae6386f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6cbe22-6e99-43ce-b404-ea74bac8bb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a0ce73-08de-42c7-b186-b90981749d9a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ee7df8-e7d8-4feb-adbb-6a2357c8d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e34776-bc01-41fc-a6f0-877ad8254e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e76aa71-bfdf-41c4-9d33-b4ab1ef26526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4df65805-ec5d-4ce2-acb5-b664a5416995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c926131b-4f02-465e-8252-9553aab6c62e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e48da1-b42a-4121-a905-1efda60fd090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624d3554-c405-47f4-b8a4-dc6a097ffe27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e25f7cd-5b13-408d-b091-d4b6e194a563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b07fab1-f69d-4768-91ac-c38db9fb28b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67811e1-3004-4768-8415-584b41a94798",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866650b2-c879-4296-82bc-d5e9469fa1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab58455-9581-475d-8ea8-2909986d378d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9ffe3b-c663-42be-b8e1-b350f8b5d0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63af0de2-16ca-43ae-a497-de713e220aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce8f925-7cad-4363-ba57-29487e0fcdd6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8397e15b-45c8-41a0-88b8-77a9a99b6635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e5de65-4bfb-418b-95e8-1deb78180284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1ed43b-2f00-4a29-a9c2-31124171a15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2591fabe-09f4-4275-a558-d143e5a5d713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84119c13-f289-471a-8caf-106aa4186157",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60434efb-6a18-410d-9cc6-0944648f04f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd77b37-9173-420b-90d1-fa3dd08d883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc5e019-2078-4c72-ab23-236db2fcf20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c9bb2f-7f3f-465f-b5ac-938c476e9a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa5cb6f-9b15-4d88-8d1a-e91a0d71075b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42f62c3-96ae-4f59-8a84-6d57b5d2defc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cd75e4-0368-4c46-9eeb-4ceb548c6fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf3ebaf-44a7-4908-9971-8a8ef3940342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee6dc56-6376-4a2c-a0c7-3deb42bca3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5d68db-9c42-4922-8f55-4af1721e8d13",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec74878-6fc7-4463-a59f-6bd3f0f4c769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35355c0d-6397-4d8b-b90c-82ea4c51d095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d44d00f-2b85-43b2-9490-47a39189eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3958658f-c6ff-42cb-a069-d12d1b3e199b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ed9239-a58a-4864-af88-7cf9af9e1357",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78575db-bc9e-4935-b9da-62a6b00fc842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c204eee-c7f8-42a5-b641-92bcd2062bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6759b3f4-f47b-40f9-8308-e4be46c506a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba5953f-32f7-4139-b55e-3f87ca422d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551ffe70-ae99-4845-a997-d1b2cf9c0c45",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046844df-df2e-4b62-8547-151e504a3595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bf13eb-c009-42ab-9746-f804403955c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c884648-f6f9-4a37-ba54-c32cae90e757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efa622c-d8f7-4cab-bbe3-de4022491afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4119daf7-e603-4e64-a4ca-710c06c0cb46",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a870a85a-de68-4c08-8432-58cdb675bc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb59dcf-8cd2-4a67-a605-256950a1c6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f7297b-08ad-4ffc-8e9b-8d34ab0ec085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24293306-032c-45ae-a43b-64c8f33c4a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adc77ea-aa14-445a-b90b-c139e5aa4db5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b8e5fe-2182-437f-9867-de0c039ce4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9246a8-3d02-4e6f-9daf-47bdf516ccea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db698ab-7560-4895-bf72-f186cfbfad4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7724b5b0-e262-4c43-8989-2a9aa1ad6a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c05688-a3ff-46fb-8851-5e74d2a1298a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b57a2c-397a-4fe8-98cd-1fc6d684676a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e96663-9ad2-4aa6-89a1-1122052cdc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc12d71-7a4e-43f5-b297-bb91decd1285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c75c87f6-f016-4b44-b2be-634b4e0407c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84249999-d189-4c36-a8bd-1dfef6660425",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681a6a48-1676-4bef-9973-d369d9f43422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d99821-5e76-40ce-a4a0-504a54a416d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e13f013-e881-4090-8771-25a8ce9326c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8d1149-a079-454d-bf6b-9076195a9ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de5c570-5590-481a-86c7-9eb9f8599982",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559a6ed8-dbc7-4b87-bbcc-8b3a7a13ea54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ef8f1a9-8c78-4cb1-9019-44768624bd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865c2a13-9591-4e7b-b51a-d9f1c3e4708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fca762ff-2164-4bd2-a0d1-36fcbc52b30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e18e16-5184-4efa-9ec0-89e1b9b01d4a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bebb27-4c45-42e8-bde1-9196309cd059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a507c0c-ebaf-4063-b4cc-6affa5ba902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f159fb22-6bf6-44d0-9ba2-9ed3bdeb71d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98affe27-a962-4049-a593-7fa692d32141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872e84b2-3ad4-42d4-a0a9-26bb9b848c96",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0a9a22-f913-40d7-a67d-3d79d4f5739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07a69d0-c17d-493d-886d-a7026db49512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e32dfa1-f47e-480f-b6cc-abc73dd45730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f923731f-020e-4591-9201-0845087eca9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e69b30d-f0f0-434f-9c60-6cad4d19b46a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3951287e-5881-407c-a606-0ae64094d7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35c42e7-afd8-441e-9307-d03369803f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cddcf73-dba7-40a7-b4dc-4b06623cc76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f87d8be6-b274-4d5c-ae69-cc151e776e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff3bd4d-77ba-4c80-9747-8e295b035e0e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0021485-1012-4ee4-aeb5-97e2f12e5ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5535d9df-4322-4448-a6b5-668945ef6045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4e1eff-8eac-454e-a980-92a2f2200fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aef11f3f-46c8-4898-b326-ad39a97f4e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e94a25a-b74f-463e-a4fb-016d9bf584ca",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff40597a-7825-4b6d-a9eb-62d146a60972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6be55b3-4e45-45f1-bf99-e85a672aa6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4e884a-dbc1-4006-b24a-f8e2c2173684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4b4039-392c-4dda-b687-44a60205fdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db2533d-e60b-444d-af59-7f68ffb90332",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b0148d-8ffd-43b7-8982-32395a8e394e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128da12f-75b2-4a87-9aee-3741b859920a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ff221d-56a2-4c31-b11c-1239e0a90ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d53e58-3d8c-4d5a-a26e-e0d6c5f25a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78402dde-d42e-476f-83d3-f143bcd55587",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32840229-af45-4ace-9205-98b26e039369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b11b94-3dae-4dfa-94d1-6c3c15b7f765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390fd237-6273-4317-86cb-3d93413c5af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "06911563-f6d6-4a45-b7a9-18b0baaf313a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fff8a93-bee6-4966-b4c1-df96beaf439e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b3e803-0326-4750-8daa-ff3e60c12c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728d2c51-4407-42b7-b210-a7861f3ea2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45bf756-0f99-4f8a-b230-802fcce9e336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70eec87e-1a0c-4195-8d15-395430751c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3200cad-71b7-43c5-aa63-ecaea0730cbc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a545fb76-0b41-4cdd-b517-9b56053085b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce090b99-32b6-4a21-9893-c5317cc31417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62b00e5-6381-4d36-bd70-c6be4ef66999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e7b7e3-69b9-4de7-a093-d22dc8c35eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46be363-a20b-4087-b1d7-1772cf6e1efa",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a62dca9-dd1b-4068-a161-c8d05845d7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b505b17d-e7f5-4ec1-a319-6e6a8690b44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8285abce-6aed-4e1b-a9d7-f0c42b94b8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f481aec0-79e6-4d81-b68d-5657c843f085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b19f09d-03a2-4e40-8f0a-5a22b31992d8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14442950-56bf-41da-aac9-4e468620ce4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708c7638-f999-48d7-a0db-8b451d80ccb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51deed03-207c-415e-aba5-6b55a3e425c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d4ea19-e8d1-492a-95de-0ea9d9288159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54860a7b-2c0a-43df-83e8-14878575d383",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8da1ee9-905f-4ea4-9319-7f96c0eb7e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4306f274-bd1b-4f87-a8e1-cc89c99eaa5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f3d741-3cc6-484b-a81b-383aa65a5e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "476204b3-5cbf-4e12-8d84-f6110e8551f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f5b632-bc13-4f8b-905e-6086653fe1ba",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dfe4e5-e388-4209-a08d-41eff8856d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c630ee4-ac81-4eba-99b4-d18fb93fd579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ac0d2f-59ee-418c-bb64-1eee3c9dd13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baee6f52-5aff-4f40-a1eb-eee3904bd042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f26e5f3-74ac-4b71-ae17-259a0fdca379",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2b619b-81e8-4fbd-99bd-a3cb0a6516dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c271a71-937c-442c-a01f-f86350ee61a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09000296-6dcf-428c-9d5f-80ea741f4c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f348f604-c6c2-46bf-bf0e-4befd563b9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe122fc-90c3-478b-9cfa-2b5e761d4858",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ed99dc-f9e3-4e4e-8584-6ca2b04ca598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c09210-e554-4d3a-b4fd-efbd014e49ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e41ad-bb57-4fc4-baef-9ea2d67cc4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "01668c80-2595-492d-a23a-5ed27a225f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e158ef9b-f886-47c8-88db-099e56c0127c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0661f039-a8ec-4a5b-8974-d8612c5173cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a2a063-499f-4267-82eb-e84e5c352249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2982792-e629-490a-9f99-011992f83c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a8cee8-b534-49c2-87f8-56bb4390236f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef1d95f-8ff6-4bf6-81e2-d3cce7a5cea9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086de0ed-bdd5-47f1-aa05-0512d2c0c3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617b2651-7bc1-4c97-ba3a-b7786c7d4700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afec1b2a-2efd-4c4f-8780-fccfa248cf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb1271b-f248-4b8b-b00f-af9227c3112a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd6263d-c4c9-434a-85f8-35e6ad85357b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f212eb-0bbd-458e-bf59-ac8fe8394b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7599ef-2477-4d98-9036-6495253037dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621ddf88-2309-43c9-aed8-8c45ca569bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b516a99-076d-4e39-b395-4ebea8ba137f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39873e03-71b7-47ce-b98a-cee3a4ccea14",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec030270-884e-4a63-ab76-c8dd10e058a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680f66ae-7fbd-463f-b832-80d62b94a3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1462b9-0401-42f6-b03a-a80b00a2043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f965862-a7ad-4509-87f6-5ea45a44f31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bca2c91-de8f-44fd-a2ea-c0d2a5983fc9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b419f8e5-7e1b-45db-9726-a4f5370fbc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b9b8ef-f271-4fc8-8c32-b8954d762492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eae2f52-5a0e-4946-9510-5d490887015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "13d72a3d-2bb0-4c29-a8be-4ef94d3205d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203fbeda-7172-4684-98e4-9a1dcc5b2c02",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0bfc7d-a0a3-42d1-a85d-e65f3de2f316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbaf886-2d6f-4b9f-824a-61f86bb6a93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc74365-3922-4d97-b662-e7a1755b8bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "08c256fa-ee98-44cb-95e7-42552e08a434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b1f281-fe45-4316-aa47-a8d94068b57d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d621b406-6429-4ddd-bb85-c0bbb6f17904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba979a9-7d14-403f-9910-1d4d072a1323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2365bd2a-a29e-4c78-ad73-af6523d00b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "607dbf13-dc8f-484b-be8e-e6c936f7af97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4bbb48-514d-48b6-afa2-e650dc7c2dd3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bae5525-b7d4-4360-9578-efa2a3f3166d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0093c1f6-9c52-4651-b07b-6a0b55cdc52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991f1775-1246-40af-bc76-2e2c881f45b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f558c9-8354-4f97-99b3-8ee857aee45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8417cb57-cfdd-4f9c-9147-d63eeacb7e00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b1c917-c38d-460e-91f4-0dcd56a4d06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d1f2ac-ae07-4da0-90ee-8f86bd223524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f1306b-4065-4e57-90c3-9593420c4d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf06096-41b0-4c00-a5a7-30685267ea4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829d24e8-6894-4915-925a-8431c7db862b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5e24b4-0c59-4e59-acdb-84f7dbd5e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83eb15df-81ec-4e35-8968-27817dbe0e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897762ee-a975-4b88-970c-04b28b11be60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3425f50e-412d-4046-a948-35a16f5e1c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed6183c-b04a-48cc-b962-005aba67b534",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249b37f5-5911-4fd3-8e66-97632139c569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe6a93e-3c8c-4b47-a147-40b0231cda25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ac1362-d381-44d0-b9cb-e05633a5aab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e50b8f-f49e-4a77-9cd4-f3854587979a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761301c3-741a-4f2c-9b86-8def4564316a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3beb9a87-9e0a-46c8-b416-1edeb85b173b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f7be48-b1ce-4366-99b5-2d9efe0ceed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dc5dee-a843-4c25-90b7-0a6e0fbcffdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5042f76b-e31f-443a-9202-436ffa0beb2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe04c84-1e8f-4063-b5d9-86b03bf8dbfb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d13015d-4ffc-4726-9c80-6d5e195b0bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf9ce74-e468-4c76-8f97-47c2687cf839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb6b8f5-8fb6-42b4-820f-739397c22712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "069b9139-2ae4-400f-bbc8-2a3bb736418b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c88485c-84d1-4905-adff-813e19efaa41",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cb427e-b9d6-488e-a1e1-0a544dd565e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce73e9f9-c57b-429f-9f0a-d352fe2e4bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cddec92-3b3c-47b2-b594-eed2b8c519a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50fdf8f8-4af7-4eb3-9a0b-ed58a4761c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0e2afa-5f33-4a3f-b76f-26e221494cb2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e44e7d-5f2a-459f-aa96-74671ae2613a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3842320d-f21e-4595-94e9-28304d2eea20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518023dd-80f5-4330-9bf2-d6cf471f2d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3738808-c01f-43c5-85c4-d796d26815d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04dc49f3-559f-4abe-a9d9-0dc0ec41591d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d6e185-bd7e-4f17-abbb-8af7267e6294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2872809b-8b36-4398-be69-54b35ff77bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ffe186-d8fa-4aed-82b7-52a8c4c1c2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94d5ff35-bbaa-45cf-9495-ae2d9a05d637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc6a74b-e86e-44ff-9b63-9b9fa2e91d6e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f008aa56-b361-4c9d-85aa-ec0bed16c50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b436dac-54d2-4970-9b85-e60296501ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a35024-eaab-496e-ad6c-0af79e86248e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2620de73-0e93-40da-a5df-5388628ed4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aabe050-d6b9-434b-bb27-e4f7f3f43e85",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67617f0c-9607-4ece-99d5-cc09e8dae796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db1c767-29f7-4572-8481-af3c2644133d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c46f36-b1d8-4bb0-a6cb-f734766d0213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5e8ee8-9c8a-42e5-b2ff-da0569f5934f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e171a92d-0a19-474f-80fb-b52a4a7b0adf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b49db2c-bf3a-4d0a-b453-b154ef1aa718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c206445-337a-42df-bfd8-0fb959652fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a3eaa4-b802-43d6-9a7a-20923b3ee8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f98208-a6e1-4c8c-a3d0-a786ec9f1622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42066903-31c3-4e20-b901-dcac8d57a34f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27a39e4-5413-4874-b6e9-2302a8cbcd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826f8174-c920-4229-92b3-42eb289d48cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca801dc-e138-47ef-a68b-50046266f8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1c5eea-06d3-47c6-8930-ea57fb4fa385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3944f09-ec3e-4097-b1be-f23613d80f42",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79db2cde-a5e0-4cac-a5f0-9add02f2a7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623376b2-2417-4171-85fd-2a75a6290988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88514a22-da1a-44be-8a3f-cbd21581de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b1cf3f-bc46-458c-a832-add922f95ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de48399f-f06b-4a16-b59c-925a38dc0263",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d3a8e6-01fe-4b0a-ac15-3a637daa11ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3812767e-08f5-4d8b-9565-f1f2cc37ffe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbaa0fd-e430-4189-a97e-d4be74b23bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "612b4747-4c0c-4978-8d26-03fa7645d95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1e7a90-2a18-4e50-870f-37a4ad387125",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26a528c-ba67-47f8-8f36-a5b6cae0d3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fd4dd9-c8ff-4e37-ae68-3246d0bf059c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db5f51-810f-4a89-a909-a21f3369e203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eca5ffd6-b123-41fd-a8d0-c0c8c3969e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90507fc-4667-4232-8cbb-1fc9bd2c6c6b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c9471f-ed52-4b0b-972b-3f125510279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7005c7c3-33aa-49f4-b530-a11b03ad873a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc5d3f8-4d89-4198-88f5-c77de39ec250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "254335f0-b6d2-456e-b5f6-9f83d7f4df3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce85e071-4a6c-48a5-ba88-30eb74c1acaf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d032a277-507e-4700-be90-047acb804fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea533d67-3d1c-4bed-a1e7-0273442c6103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33acbd3d-1b0c-40e9-8431-dae1bc2dec90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae16c0ec-05d1-4f84-be4c-71f4dbf57fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7348ffb-ab26-4762-b057-a90f5c56f960",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cee8d8-3f77-4b8c-aa5a-70a98af195ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e005866e-d7de-40e1-b978-09ba5374a94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019c9bfe-3965-4157-baf2-52a95fe558d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb767413-d010-43f4-a183-c616401713ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97731bfa-8933-49bd-aed6-1757dfbf0a35",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb457506-ad26-4202-bfc6-9364919e0503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "875d33d3-e4f9-4fa8-8b05-40285e2ecfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd13001c-d5ad-4fcf-b1f8-b518ef9021d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef48936-7257-4da5-9d3e-e1e8dbd2705f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f8c02f-5df7-4733-9081-4327ba9ba71e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7d2033-9ded-46df-81c3-409cdd089443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3a5a33-fb1a-43ea-9e5a-fb61d5424143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec96520-262a-41ff-ba32-a54a6289674e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b63ad0bd-3752-4474-91f6-f2b98e5a1c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca990213-d9ee-46c0-9a5d-6cb8d5b87bf0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153f1ad4-fafd-4f5a-a7b2-46b9a3d8ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c027b88c-cd29-473b-9b05-72e0c1313ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ae1b23-a409-433f-ac75-2710d80b3a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "784cf457-7dd5-4d71-9032-a15bdac75ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46d7cfc-5389-4efd-9d53-0b0e5348cb45",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bd6f62-42d8-4355-b802-5608ad003828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a405b48c-cddc-470d-b217-875a26d28271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e570f56e-ab23-4fc2-98a4-0ee7e6ef12c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "38fa2872-9733-48b2-81fe-1dd41645a95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a61cb4c-5e6e-4b8d-a16a-6b93a1b05002",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99f81bc-2299-4621-90c0-1dad405adaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b50570a-3282-4660-b3fd-94f7ffe6f7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a48ed7-84d5-4e92-b514-59fb814aa3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abb229fb-a192-4c4a-83ac-f04033b38fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b6f391-aa90-4ad6-aecc-d5c64d19750b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e97d1-8543-43c0-92c3-ac9617cfc95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac03e026-6bf5-4759-ad3b-037c410755f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c5e293-9a02-45b0-807c-c797dbff2271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90fa3a08-04b4-4bf1-925f-62a3a55d7759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bccf72e-1050-46a5-8370-f44c6a7e0db4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c258f6-bb69-49d5-8c31-864951590eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9faa38e8-961e-420c-8e64-5956476ca3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37708fb6-4fb1-4af3-beea-eef2242f39cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94c8c843-b855-4ea5-8fa6-c4c9e63dbea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffec5488-7252-47ad-8213-034caa17bef6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e421ff2-62ea-4c86-89f0-2f04363b9f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf0d2d2-6382-4be0-b065-0594b8c65f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4212b617-ad5e-4126-aa4c-30b40bbe48c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bb23a7-2877-4d0f-a7de-ffa154feb7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3663cd6c-ee5f-4381-b685-6ab53d8a9c56",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279f2046-da25-4882-84da-686f2ac62827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3aab8ec-07b9-4272-b338-152e6853997b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8238a00f-2b99-435d-a3f0-7cc9cd151908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79d1cb7c-0352-48e9-96f9-424e86b0612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9fb091-82de-4036-8ba7-45bab5d7c849",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3152ca6c-2b21-4e31-832c-901f01669fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3062f44e-ad74-4d4f-80ec-8d5144cffa6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cb7906-725d-4520-a8b6-cada7a0a49b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8edce7-43d9-44b1-a3e9-59059ace34ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa06c1aa-2a9a-4f49-bf1d-aeef0ac00d53",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed6bc0c-6a53-44b3-8f9f-27cc7fec5438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f6345c-fe9d-4065-ad2c-2c17bfbc8572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9413905b-49da-4ff5-aef6-b1fa9e970397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "def04ebe-395f-4bee-af22-53ebdf542311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f45e2a0-72e1-4ca1-9cd9-6b9f97e35bf5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cdc405-4922-4954-a44d-d4cdc7d5f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ed02e4-e437-4647-948a-ca4075f7491f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a70b5e-7cf7-4350-8704-85ef861dba6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7474b2-7551-4f24-84c6-d9359247b526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df733687-eca0-40af-b8a2-ec795fc14dcf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741118dc-3a35-4a14-9533-bc4303032671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48dfc88-7541-4ef4-a54e-3d4e09e1e98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121316e4-0133-4f30-885c-e54a6350bd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf2bc8a-2ee1-4df3-8d2d-e15bc3fc0714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1237a6-8026-48f3-8882-e12b587c6f96",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151f6d65-0bee-414b-92bb-664847ba7d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b422f151-4ea1-4daf-a6f8-0b43631d5161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a793e7-c174-4ee5-8c05-85f439c53b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "63ae883d-0530-4b3c-b73c-30f2572fdc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e1bfb-5856-4f0b-b080-728e71629831",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf96ea52-f73f-432a-8150-cd782f13e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f9f5fa85-c7b1-4419-a106-b05de130b193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c72493-6f2e-42e3-9dba-b2e96c4dbde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d9534b-c2cc-485b-aa50-062f3bafee0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db18432c-35fc-4df6-b4b4-2dfa4af865e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fa34c40-3cf0-4f51-bd96-a5461be7db0a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecff18b5-2750-4186-8f17-d0ef80bb77ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9520201e-b92f-413c-99b5-6f7a87d282cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadd082b-c017-4b82-ade9-166a00d759ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afba26c1-4fb2-4cf7-9d50-4e96919aa1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0c9edc-12b5-429f-acd4-1b505e23519d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb02cb6-ed7a-4dae-929f-34dec9b6aaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8cc8586-dce3-4c93-972a-74b49b78317d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c14e4ef-937b-4909-9660-2166772b223c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f554bbf-4391-4603-8442-e885d45155ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e9439a3-4b21-44f1-a1a3-02a8ee4f7ebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7d3788d-5f0b-42f8-88ca-43791db77e45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34f6ad0a-bf17-40e0-9987-7c0271c203ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f75e7667-af13-4e2a-a31e-a11798a648d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3de17a33-7cf2-44e3-b97c-bcc48f6b7fc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03449306-1b08-48ef-8b70-d11dcdd4921f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98e54abb-3e7a-483d-b65c-03dfaa5c01e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25850467-dd8d-47b7-98b0-f8680766dc4f"
                }
              }
            ]
          },
          {
            "id": "56178529-e033-45fa-8148-203ace5d2d67",
            "name": "Positive Testing",
            "item": [
              {
                "id": "870fe132-7e72-4733-a0cd-e4ea01fc8170",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55fe726e-338a-45ba-96bf-0699e0471107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa56f10c-4cca-4548-bc34-c67eb6d08e29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0c1ef1f-0c33-42d4-89f2-c1727343b135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2bf68aa-cb90-4a64-be7d-8bcff772a612"
                    }
                  }
                ]
              },
              {
                "id": "22046c28-06a7-4468-a463-e48f5122dc98",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "928cdec9-84ea-42ac-912c-657c8e994637",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ddc0bbd-3875-4de0-b179-d31c4f90dc6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aad90aea-fd7e-45b6-b4be-3736ed13e44d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d01619d-f8c2-4be5-8a40-5cb4c5901aea"
                    }
                  }
                ]
              },
              {
                "id": "314cb282-60c0-44c4-9133-adf460d00087",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb355c1-f4d5-409a-935b-0368d3a25965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac9e27ad-930f-4e16-bc0d-b35ac3f19325"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4136f930-54d5-4fb0-ae99-a88169db2e7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5229e847-9046-4d99-a315-8b6fc6a97ae4"
                    }
                  }
                ]
              },
              {
                "id": "d47742b7-1e8e-4475-a81a-b907dc4df399",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "767b850a-a3ec-4b0a-ac3d-6f783467f45f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e004b7bc-ed94-444f-b315-6bcadd61e083"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b26b0bb4-ce0b-415d-9b0e-7f94d3d3819f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cca636f0-7584-47c5-aa39-8871f1997e07"
                    }
                  }
                ]
              },
              {
                "id": "781afd0a-3198-4afa-b938-b7dea8b353af",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50444ffb-2f60-4bdc-af48-9083dd0a0441",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0c5a897-882a-4172-9017-474780b2fea2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b452727-39ff-4082-9f4d-1b555180d518",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1ab7453-47c3-4e2f-b4f0-acef8e632803"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a5aee36-a627-48ee-8b9a-3c526a2200e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7122c84-5000-4b67-bdc1-2a5a9d7ee936"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa7a614a-ba00-41a5-8e04-21339cb50cf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a054aec-10b6-4482-8463-7053050141a6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "014dcb90-b641-4e68-830d-b0e270e118a6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "89283645-3838-4ea6-82e4-135c234350c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ae563cd-255d-4f13-bfe7-4ff551b1da55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71e22a6b-b635-4f0c-bfb6-9ad8a2ec567d"
            }
          }
        ]
      },
      {
        "id": "21a15471-d04e-4f4e-a7a9-78b859af59c5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "66217e9e-dc7d-41d4-96a0-583fde7ef2b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c44b73ab-361c-406a-9bc5-dd5bf91a1f83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1ec17a6b-9946-4bc2-8b32-93175dbce6db",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9e881c-0ead-4fbe-8f90-f539eed29c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b822dff-3163-4f24-b981-559ce2c035cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2219fa4b-0726-4961-bf80-f67af8f1a21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d824cfbe-a7e5-4209-b11f-d69ad9416b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4fe732-7efe-400a-8129-59cda25e9334",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59dfb4e-d170-4a62-b929-c4cc1b69f92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc1b319-7276-469b-bd7a-e059d7437f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e252ddce-b54b-4f42-b169-8e372bf0a29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e95d77e-0f79-4204-8c8f-d139f9fff74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026f362b-aeab-4e7b-969b-43f796eba066",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6f1122-4067-4cb1-b021-055e68b4c149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806e6ba9-f231-4a0e-888b-48c342475017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bfb5cf-c84d-40f1-a281-66d316bbb0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc291f1e-27d3-47b5-a7d9-45cd0e3a96fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959ca3b9-fff3-40a9-a119-0ecac46eeeac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffb5b8c-1688-4ed1-8158-cfd54a8eb48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2447d2c2-9009-4f02-897c-5f5e52aa68d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47e5bb5-27dd-48c5-a7d7-c50c5609a43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd23a36a-6846-47a2-bcaa-a51f794edb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eee0bf-f005-4975-a843-43af9d66bfbd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d6bda5-08f3-4532-b965-6c651f61ae74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa429978-9af2-4a00-9623-8f3f85b7a2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a015d9-0a0f-40ff-9a25-1c06fdca9859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d09c157-3dba-456f-b58c-4c35f963e6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ba05d1-33e5-4220-92dd-ffa5b33f473e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20742e91-acf9-4a80-a01b-029525176480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d33f23-2211-46d1-9051-6eaaf7829c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5064fad1-b102-453f-bdda-15fc874793b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec61d1c5-658f-424e-9539-4723308acd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5cd417-acde-4f40-bda6-407c2995ff39",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fcb4d2-8368-438d-8d2b-29acacff356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5336ce6-d976-49b7-983c-12c0726753e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f173cbc9-43a0-4a43-bd2f-aeafbbb3c796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f79c715-25ea-4b5d-9788-68a608b617d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a521a171-3cef-4de9-b55a-cad476a5fbd8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e653d1f5-4991-4e9b-8b41-be0731b75290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d345d2c8-f20f-49e8-92e0-4a98838665ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6e4e83-afe1-4c0a-9b7c-8bffa3a73100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61709be0-6710-4c28-a087-60ba7e254ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87abf746-dc0f-4e17-9588-190ea746df81",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bca1a80-a586-4664-9652-feff80afedba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5c56d3-390c-4631-9888-0d8833a0ce5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf868ca-2d1d-4ed8-a6bc-720f853b54a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "521f0bd7-1c1f-4dcb-8259-b627f5fd97d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced0dfac-cbdb-4ef6-a835-403f98b188d9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b61cf2-235d-4c87-ac74-e0139d9f4ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a81623-8faf-4f18-886c-454a88da827d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d26af7c-bc3b-46fe-8ea9-ea79e542a4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11290b85-c0c9-4c7c-83b3-e5635c0091a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaca1913-6683-4ce7-ae9a-7097467eb3ea",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d5e24-4c87-45fd-9462-91eac681286f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd25cfb8-8489-4f75-b17a-ebb517927430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc7eb6b-11c9-483f-a97c-09f0de1d21d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "afe00fa7-d6f0-49cd-856d-c6b30e1ccb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184685ae-f529-410a-85d5-435634118adb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8cef88-f678-4fc4-8541-9d11f11ae8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62394012-107d-40be-8769-d165e5c56630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ba0ca9-341d-4e6b-9d05-04faf455d595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7e0cbd-4085-40c5-be40-bcbada481f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c616bb-8e48-43e7-9341-b78e0b1162cc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9a1e9f-e290-4269-9333-6c56adcb0360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c4cf5e-ba7c-49d5-855b-18e5327659a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69846f8-18a2-45eb-a435-0ff4b3003c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1f6011-71c5-4477-a5b5-445fa6f7cdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517e632b-1f37-4112-ae29-dbec7165445e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9719b14a-7cbf-4b28-8d5a-a8f209b2427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e32202-4642-442d-bb5d-5f504a9938ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80696a0d-89f8-4f9c-af6b-5bf705cf48b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f88d50c-623a-4214-8d8e-bb4c5f61acd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d253eb98-e0d4-4ac3-989f-4f44226e137b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713789cc-5bf8-4097-b056-fa962401b348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28becae0-11f1-4730-bc3c-74798acf3a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdccd55d-4d96-4781-abd3-6b0c8fd48e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "26620d73-26a5-45d8-bc2d-e4a9c0310b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a1df2d-4719-4df8-8f6c-c78c8c9551aa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27bef4d-f761-47ba-ab27-683f4d8e26e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc269262-dfc6-4318-bb6c-c741cd5cf8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3de253-7ca1-47f2-be7b-c1344551cae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f762fd00-9165-4c69-8970-9932f707eefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652d07c5-f119-4d69-95ad-35dc9af3fc8c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7c4a36-4935-4f1d-a4b4-c4d159e07641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e93c49-ee8a-40df-bd97-bee44b703aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e76beb2-fee7-43ec-98fc-db9b9c32eae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6926b19b-0cbf-4fae-8724-4783632f3bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cddd24-4cc9-4b48-8f52-322d3d97b50b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe16c889-9cdf-4695-832c-9bc0baf5bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f42803-d589-45af-932d-fa5aaf513e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f232530-9e3e-4edd-9fc9-6e483589dc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d625adc1-8c90-4324-bb0b-0223a79a95a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767c8329-e7a1-4893-bbee-546cec066c3a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6eac68-0848-47f1-8591-9a6f0b906654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31737503-fcf7-4728-a70b-e54f63d551e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afe5bd9-98ba-4751-bbf8-2f213e2bbad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c86461cd-ba08-4bf8-8024-723cbcfab4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5a0858-f6b9-4019-8875-5da2b79da1bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eab43b1-1c44-4c37-9a2e-444a822aad9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffda3f4-9efd-4bb5-bab8-144b93ac028d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45cc1cb-691e-4cb5-a8cc-b9c88ed81f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "512e86bd-c3a9-4a03-9acf-e8f9ea1450e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467df979-7a76-4f17-b145-9d6774aa78ee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457a01ae-1a84-4af3-8a46-133877c00c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb8fa1d-f12f-4b86-8d93-8e91f7835468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5942c6f5-7c25-4827-bc98-f1a1b21c99be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d320d03-1438-40ce-acb9-6e1af99e4351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34a0c0-122e-4a12-b9a8-915840bf9972",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d29ecf8-3436-4e6b-b618-6f0fba6c9158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609d1668-2fa7-4059-80bd-1b1f264ba00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccca7fb7-78d9-416f-ae1c-16b6d52c0970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "786a4451-083c-42fe-b7f4-3ecd64cf094b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f065df01-d296-473a-b4bf-7769be9a9569",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0879b61b-2ea2-4cb4-bc34-06c12533b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1de4fd6-2898-4244-bdb1-387d3a5f3dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7788aa-6210-441b-8872-f525f6e088e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0197e520-8869-4832-b252-5854281c307f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcbb757-08ad-46cd-93cc-249e6ce396cb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9fc25e-05cc-427b-98f6-14f0a9ed2051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8a51d2-fd70-485c-b59a-b1f0af177f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880897ff-e914-4e53-aa83-f9fb58ac6f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "579904e6-b303-46b9-8bbf-63d4762ff8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaeea41e-557a-40c5-8888-dbfbc1a81df2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f24cbb-f954-477e-a669-4956443d4e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56123e7-35ee-4370-84ae-0979b8090c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202a1ea7-7141-462a-a976-581b18effcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a283e33d-aaf8-465b-bc6f-467764bc2beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec10414-c8c4-4945-b6dc-af4bb6e5c896",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5926ab6a-6aef-4ea5-8eba-daffc2065253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a45c5b-2594-41dc-b0f1-199fd287b30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed05488-2e12-4b56-b007-4dafa3d76e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2389c16c-06f2-4ad0-be9f-fedffac56903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d961e4-0153-49a8-92b6-9bc35ca4757d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f4eb08-b243-4c23-82d5-85c0f760194e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe62624-b6db-435d-8c71-c165f57cffa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f85f1-a8bb-4c4c-8dec-3a77bd6a6a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab617c1-a745-4fbb-ac37-e838c8351229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce070eb-2856-40b7-b2d5-a7590612ab8b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ab006c-d9d5-4cb9-a328-b8797e3ad92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d564285c-ff0e-4eec-8fef-69ecfb806da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a5a0fc-70e0-4685-8cdc-c695d2889d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94001a43-fed8-40f0-91fa-6e919418f45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3180d-9cea-4289-ad4a-bd838c567e4e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa313aea-b111-4f9c-910b-f8dbcb77a5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e1769e-d32c-4211-948a-010ef362ba98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f0d5cf-691a-46dc-8254-f93b40a7add7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4910d99-e0d2-49f4-8215-6440f3107295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb556519-cda1-4c4b-85ee-97217a867b06",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8893fd-59f7-42d6-92a6-12bb5bd4eb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9982755-a60e-4a19-8f93-d5e803902246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acada02-fc9d-4a73-957a-c9c0da6e0e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67c96d1-c412-4bcb-8df6-6f989abc27f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63248a5d-1e8c-4eba-b045-d9b65678b03d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6546ce3-aef8-4f08-8a5f-2c48ade0b6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a6401c-b001-4a84-ae6c-832c89e55acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c2f38f-5bfa-461e-a4b7-336e49c9cd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8049e2-2a54-4c45-8159-8a7699c1ebff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def1b2fd-2752-4f1f-b857-543ad8501b7e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019da3a2-53e9-423a-b8d5-4594265b0f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2992259d-258f-4438-b9dc-3f7ef3947c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66761df-d8a8-47d4-82a1-e3480ec5b047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ead8475-b134-4546-ab71-604096bc48d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bad93af-40f9-4b0b-97f7-c62deff9300c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "973fbfd8-5845-4294-8528-2a2e2d483d3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2444a9a2-36d8-49ae-afe6-409fbd6cc844",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "57c66dba-31a5-4b15-b3e0-eac910301ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dd9c2c-cdfd-4cce-a10b-228b81df93bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfcbd9eb-7aa1-4e1e-84ae-d6944482a3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb3deac-2f92-45d1-80c6-4198230605ee",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616cfe96-3d82-4f22-a2be-0887c9f31c51",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "44bd7442-0787-408e-b7f3-782560360957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492620f1-2f0b-4711-a35d-e00f72709e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b3c7156-e6a6-4469-ac6e-bfa25239504b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0e1e7fc-c81b-4c7b-9641-07c50eebeb48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85e595a5-4d78-4e33-9d9f-8860ad9a543e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc8482fd-0327-4289-91ab-18d153aeadae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e41776b-dcd4-48b7-9963-31670f5b1254"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9d36668-3add-4d67-8635-1d88b8d24f9a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "56ff879d-a368-4a3f-a01d-123103c09112"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb1e938c-69c0-4c0b-a3c9-b127abfbcca9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80da6697-08a7-473c-8047-9989fd3e1ac8"
            }
          }
        ]
      },
      {
        "id": "ea281bed-4afe-4054-b208-f52d5752b1fc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6e12eb6c-530c-48db-8bba-6cf1154307de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "267f6ad0-7303-4d49-aad6-7a882d7dfb3d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2f880fc-d67c-4142-8f7e-e442c0c5b2d1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf27c21-3bfc-4d31-879d-618304466b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8373370-738e-439a-a39a-e9efdcf00d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b03055c-967f-41e7-9723-eda5520be7a8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba35176c-03fa-4bba-ae7b-d7f964cfd05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1425111d-07b3-4a31-898b-881ef345250f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1148f6a5-6808-4701-9fea-c76715e4a573",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59275af9-fbae-46aa-8ceb-4379e7a310c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a637b5d-ec2a-455f-9d47-e0c47f761498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b642542-e6c5-4ea0-bac3-2495853003cc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c604d7a6-47e3-4145-94dc-39e669b48e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef30d81b-2634-4ccd-9ef6-f9d9bb0028eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cba376e-cf22-4fbd-ab67-490e1917898d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5b2f25-9aae-45ff-b393-7847894d18ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2def819-cb88-4adb-9299-98263fe07f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7ea9fa-06d5-44dd-8d8e-ef8e8a807594",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613dcf9c-f772-44e8-8ba4-966105557299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cc56ec-a81b-40d9-a907-de558d28b154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4cdd3a-4218-4903-8511-fc153eac6f98",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fefdab8-184b-4935-a10b-04d57a741f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0b9f3d-4939-4dd4-ad8b-03d2ee64f094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c1ec5a-bf41-4672-8dd5-f5e8064a7279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebfc04d-7b35-4ae7-a48e-f85f58fbd92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8e1c37-bff2-40f4-a072-a55a11ad7810",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc292f9-7957-4cf4-a8f7-8e55566dbd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ebe817-e651-4e76-9505-1ed5874997dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c4ca76-6068-4165-aea4-2c7a0cf53ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f3ea51-a517-4016-88a4-3e84d146cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884007a6-5234-4603-8b69-394c267b9310",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07e5aad-c50a-415e-97ee-30ad7f94d9e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593ab422-72d7-462f-9511-10d404b33f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4ecf39-7eab-4961-bb1e-31af2f53997f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9117173c-6b41-46fb-9ff8-3f6c203bf951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d95c68f-7d43-4e58-b672-3124f59d49b3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be8c3b-414c-43bd-bbfb-bf241067c4e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99943ef0-1f8d-4fd8-aa53-919154275a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a2d39f-ddf7-4bfe-bd41-f601439cdd6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8537ea0-511c-4996-b290-df5c6969c0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424b6856-42cf-42e2-8c7e-af1edc9ef3c3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e043ab6-7987-4e16-afb8-125bccfa3caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe7992b-5244-4571-97c2-047c53290a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ca1cff-a101-46ab-9b75-b335b0fbac67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961ac389-fdf6-4859-9fc5-9f32a9426c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31989609-de9a-4597-97c2-b681e3a9036d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d410ea5e-6c54-4f9b-a40d-a7337dc7cce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a51dda0-70a7-4c15-bb18-981f4ac94dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbd1e10-61a1-45ff-9d0f-f0b820651c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7625cff8-95c0-41f6-8dda-9ba94eb93a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870d63e0-3aef-48d0-b82b-540e96feeb89",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a095bf23-c7fb-422d-a6eb-09937e201faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d375608-398c-4390-9548-358b6759c99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99eb787-f669-4309-8fd7-e9c4daef7959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7696a526-e434-4f64-9409-33fd74c9234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fae21ab-a156-480f-9945-d15c40b88d08",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacaacab-3697-43ae-9435-a5af78ceabc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fbf3692-2a33-451a-990e-cf08a3c37454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864c248e-8eb0-46c3-827b-30f02ab6f180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504eb85e-22c9-49bc-a853-5b0541e58baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d289ff-8e1d-4333-9d99-e5cb12ae6774",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8ed6e1-0a2d-48fc-b9d8-b998ee6f95f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5919489c-ee1d-4e6b-acc9-eddd4eda8be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affadb08-4c79-4822-a690-c6180ae76155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32308a4-b99b-482a-a300-52dcf9446cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8508993d-7fa9-4302-be8d-aa53678ef6f1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db86379f-f67b-423b-bb4c-154c8e67e3e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50635d0b-ffd0-49b3-bf19-895ac0c6d4ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57706ba5-0cfa-4524-8371-3acf13720536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afda6b29-dad1-4e89-9477-a4f5c7d42251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2541b5a-96b6-4a7e-9e99-0137a4c300db",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8b783d-b1d4-40e3-8bcc-9987a09b909f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9091c1-729c-4100-8811-12204a70c116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9967d34d-ec6e-4523-a5f3-f7fbf102adc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51131a65-4374-428c-9c0a-5b05d5188f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671638a8-c62b-45fb-a08c-0fdc7a61c8f9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fde1d8-8bda-4f0a-8a42-b02c21c4078e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe7190d-8ae6-49af-b6bc-b29eb057afce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5f0c1d-4ed1-4230-bd8c-8e8dcb2dd9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9221c34a-5669-446e-aa00-a530dfc2d5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfc8c11-e91d-4744-a1aa-d19ab843b8dd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8a3519-d101-4ca3-bd24-e84276da72e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27b419e-b3ca-4617-bf45-493809eac069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b036aef7-fa12-4a77-9a1e-6c8f738c1e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb97f36-64a6-48e0-be25-fd1ce1cc5c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02d0c7f-aa3e-4ab4-945d-af5cfec5344c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfeb36d-327e-46ea-9773-974cc92b44b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8998415e-1da0-41b1-93a8-6db0f6fa572c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70618842-7db8-47a3-b9b9-7fe31dfd8dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7faa24c-c7de-4a83-916e-bd68fdd01e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc09da2-2225-4ddf-85e3-49750dbf6f4f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee2163c-5bce-46c8-b5b9-95799e576374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dffe0eb-0ab3-43d1-b2cf-78e998454277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e58791-879d-4612-abe8-a8e44bf0d784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1c4461-633e-44fc-80c4-48d0bf749696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82195249-23ec-4f7c-9605-fb140dcb7033",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4ade1c-5584-4409-a3f8-372ed00555e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594f30eb-b500-4f8a-ad1c-13323ee31c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d2811a-d2e5-42ea-927b-5325d13538eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21c9283-5c29-495b-91e4-516fb7170d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d242c59f-baa9-4988-a07b-f51f27f1fe49",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48cc7de-bcb7-4382-bf14-9ee158a9949c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1319a0-aad6-4e24-b9a8-8e064ae338f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d68800-1125-4318-b772-70bb10f9cfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee0cbf1-3cc0-408a-b955-cc1c85e550b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933708ff-f00f-41ff-a03d-1af31315a674",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d76ae1-e185-4894-9f85-5002a0de2125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a739343-b723-482e-8311-5798b67dab52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da6498-18d1-4d5f-9c92-0e5c75ff5684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2f6462-9b46-4325-ba13-6ec3bef88c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d501e3fc-d273-42e6-9ffa-5c153082d56b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20b826b-2d24-41ae-b6b6-afa066365b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95ffa62-9bd2-4e18-a811-4688a0a820e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d6dd9c-1f79-40f3-b8a0-7a9b0859e0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f51c470-55bf-4d55-b521-c4d1e6003dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4487ae48-f865-42a8-b257-3c2e384c8ca6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3c15ef-4c39-415c-9b69-cccae65efe6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c016189-9cb9-4f57-a286-ef529a4cbbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ddeb24-5b8c-43c5-99e4-24829c384a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e932224f-1d34-4f5c-8f0e-bbf1efe3d71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc13b102-b237-4535-afb9-eb9425c4c84a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de1c903-fa93-4018-a3e3-ee3bd0999090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "addb911e-4e6e-4de3-95c3-259027ef74ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d99524-2ede-4430-bf19-1ed5892f9985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71bb827-33a2-415a-91dc-ddf749d376b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a34a63-0f6a-43d2-bdc6-b35f544b37a8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e0831-b3a8-425c-b01c-e2142dfe53a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b4f129-0d4a-4b7f-82e3-f5ee42b912e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcba6a4-6af3-49cb-ad81-21f1a1933180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60993e99-6427-418d-bb94-61b13dbf3add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d01dff1-86d0-4fe4-9cf8-aa68574f94fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbd7b59-66a3-41e3-8a3a-2ef0456a6b3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a598a3cc-d804-44e2-9078-53e4a1bd86a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ecafea-c363-4ea7-8904-8a920d8badc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace95763-1dfc-4531-92fc-4a4bdd60d294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af8376b-0113-4402-9922-0d4fecf86c06",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acef0f4d-93a4-4c22-b82b-43dea4713212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47667ac3-1fed-44f3-9e84-218d729aabae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b6d803-a094-4d9a-ae30-aac2ad32c1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d0640b-9d4c-4b18-a908-63a8c76f437a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124f214a-b218-457f-90b7-fa7d6de7f1db",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be37834-1109-4086-a241-a995c0942845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe3e9f7-da6e-4fc1-a117-12ff2950d482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7fe014-94df-4fba-a13c-fca105cc890b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06749e5-6e14-4936-a913-269abb053f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506f153a-48d9-4343-a309-64e7c1c62850",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61da36eb-44d5-4062-8bc9-6ce0e998aafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ec5c779-8e06-40d3-9773-65bb3fe77a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9322d9ce-1ba6-4b45-8714-90685a4ed566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72deca70-f553-41e0-8fb6-d2c5ed64d8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2ec2b-c758-40b0-9c65-193b0fa86daa",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80872d4-c5dd-43d6-b5b9-1c78e907ace7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8d55c5d-735d-40b6-89b1-5a9b356a43d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44756b6-db5e-4ab9-a517-e8cd6263c415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5178411-ce1a-45bf-8658-01454cfae34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feea0a8c-33d9-4373-9c37-796735c116de",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a706cbd2-10e0-41e7-b1d0-54da3dbcf572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2f7c70-89da-4d5e-b9b2-3b337e1bef66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b4a9e4-bdf9-4841-bc7e-6c0d37ab4f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b9ecee-663d-404b-88dc-c7033388b4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52415f43-0b2f-421a-b741-2a511c8affdb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b0cd93-d1f8-4e09-8115-7ec9ace82f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ed1730-4486-4fd7-a69f-76d708cd2038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19480e89-1c74-4882-a190-7ea98afd28d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc6d5ea-ac0e-4ea7-879d-45e7115baf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb53cc0-a422-4a57-ab92-f73a7d1802d8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a906552-43fb-4037-b341-811a72e8a369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c20b03-555e-4970-b99c-5e07fea26428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f31268-d173-4873-a20b-eafe6479a413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e716d895-5284-4550-83c1-a6abb1b10795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbde1067-4125-4f7e-b614-e01390ca9c8a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc30f41c-866e-4f9b-bb95-77184e380759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db86cfe-d65f-4a8c-abfa-0da7f9df9bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef932e6-bd69-4c96-a547-1f7544cb32d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f424df2-1c60-48eb-ab7f-565ae1d0a297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22187b8-e3fa-43df-b4d2-08653b2871eb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120da7f5-d62e-4c28-9618-d8b436b592f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8691123e-5549-42d8-8238-59e38497c184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c516620c-115d-4938-987a-8b720af558c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df762e05-64d5-41ea-aa7d-0a63e82737a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98de6a0b-d6a7-46ec-a167-87e97f6c0af2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456c1f40-2999-4154-9d61-16530c439a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a61b60-bf7a-49a0-ba57-677f49208830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43cf570-f609-4275-b643-3c161fbecb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c46a344-4964-4eaf-9efa-dc8c3544500c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80356593-160b-4eb1-ae3e-2a543c52e5bc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9506e1e1-790d-4734-84d4-c77cd359b4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9efa82c-0e41-4f33-8043-bab627d74286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a822bb1-7123-4480-b2c1-df969fc5983a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878c0165-8813-48d3-a004-bc34e76ce191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb94274-0442-4937-8f09-19cbdb2fdfbf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7ec427-d5b6-424c-b4e2-2d365cb68812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5434b80d-0f3a-4d1c-8f42-5b577d98cd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cc96d8-e2dd-4dea-be31-71a31cc0904c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa51a0e5-076d-404f-becf-7b247c9caa78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79b6b0e-2a9d-4b84-82c8-f60bed754173",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc75fc-9ba9-49ea-a310-c0a223a57a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51526e21-2fae-45a5-9f2e-498b73aa9ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a57011b-e4f4-44f9-b9d0-18700727110e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b803952f-3d2d-48b3-bf1f-31231d97d5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27650ba4-8c6c-4e70-8989-02a50a16ee33",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1275c6b4-d314-4633-a900-49da1a0ca326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2de921-e262-49be-a582-6375b1504edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5bc546-2126-4464-8199-c184cb779a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffe823c-7b6c-4794-98d7-7d5ef11be34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79c4439-c3b1-4d82-a04b-2fd099d06198",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f72a68d-bdd6-48cc-9316-63c5999158ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396372c0-3273-4f7f-a347-d432a8b5c137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee25702-d448-4a98-9d16-8fbd3cabb0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02a9291-7355-49d1-8c44-a3e3858f204d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694d5afd-876d-42a6-a2f1-363de6be7338",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4629f736-8d3a-4244-bc14-deabc01cf2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52626eb8-e26e-4df3-a327-1e5f193f77ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136865ad-8189-47e9-8f66-12db0e5b1df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c07b58-59ba-4c26-ae64-3f2b2eb2ad46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b80540e-505d-4a92-b5a5-9c1fdc034798",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f008ba4a-cf04-4117-9a8c-2c02401dd9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9bef56b-4af8-4e55-b223-e2c4fda2e564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204c7c16-ce28-4b6d-ae39-4372ce242657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d29e099-9f7c-4a2c-a7aa-59fa7eb50d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c608950-ddd4-435a-a689-ae38022119ba",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8614a9e0-b8b0-416a-9c13-35f2abaac3fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c1873a-9508-48dd-9882-68732e17ab49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f65709-70d1-4520-ad53-8a86a78d13d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99faf29-bb0a-4ccd-b066-027128a44007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a7a5e8-4279-4af4-a051-9514ecdbe417",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c010ad08-1e45-49c5-ba2a-0383d9baf601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a60cbb6-bdfd-40ee-8101-42e880e291a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bf7fe9-cef7-429b-8c24-eeee60bafeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d4a08c-4362-4387-82a2-c03194cc9c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8ccd14-993f-4fb5-8561-24364b84c4ee",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae197218-42c8-4a11-840f-586ae1ac2457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ad0237-9563-41e2-b86e-1137a36dd663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f795d0a-1b3d-4613-a0de-96d72a3af196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bcec12-928e-4f33-a90c-e1308a54768a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f1112c-8251-4374-87d6-4d8c3ee9063f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cec9c6-4e1d-45f0-83d3-0bde66f8bb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf01ca2b-6139-4192-9d61-f55862f922af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aae3bd7-fbb3-4c97-ad85-9098791ea426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956fc74c-dc7d-4b1c-a528-36b1a9eee1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa70da2-a81d-46fc-9e66-59c4f99f74df",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fd96f0-775c-406f-bcde-4a99a579556f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c54218-0c9c-4aa9-94ff-7ea5d144293f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670d9a3c-a973-4c7e-9b8b-9eb1b6b1921c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c1c114-062e-4d9f-ac32-bd2b8017f45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae5caa4-1836-4b15-be13-f1eaaed8c2de",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4519a2c-6b5f-4cea-bf68-a96f1604efb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757bee84-83d5-43e5-9bd2-e955dc554c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6769b320-4c42-4bcc-8d14-d9a42800dfcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff8c153-89fb-455c-9182-2f6eaaa41ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad284a73-83c7-4e3a-a677-99561fca7c83",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37931ccb-8700-4197-90ad-8c94ce0eb0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf83fd51-e59e-4931-90dd-919ddf4d80f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d491edf4-b6dc-4b63-80a6-bebcf8d99319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7a6035-f645-4a0c-9001-96e5aad48eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2b1417-03cc-474a-aa8f-855e96f1e439",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f0418f-ca69-4b73-af95-ec909d02e42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca02bc85-85fa-49a2-a7ea-68d49a1b9a1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499633af-840d-4239-a35a-109867b8a07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916c29ca-be37-4e28-b8b2-b689588129a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a914f6-09da-4871-b829-2854c2779ab8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7497e8-9b00-476b-9ad1-0dcd3a20d105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c84fedb-072c-48d5-ac28-8a8e44096be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daa7531-24e1-4b28-a3bc-d2a906198f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4efc30-5d21-4689-8ae5-23414b90ef7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612e0637-45f4-4be9-a2dd-0451de5142c9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cec1af-a5a8-4a77-b2b6-6c2ef915f8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7655f0-fbdb-4d8b-b490-c1b60bcdefad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa88dbd-d140-4c09-a335-250cf1b3cd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4168d29a-c6fb-4bd1-b27d-73f7f3b0dcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc65fb5-56ef-4abb-b9a0-a05d06bd74eb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5cf394-9778-4f16-8751-e6e8921e2c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae1aa98-8515-46ac-a3ec-d3a095424cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8954c257-7dcd-4b3e-88f4-f72f2a70ff5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f72432-68e7-40af-a429-469b2c722537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ae05c0-ed24-43df-81ee-e4715c5a5fbe",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d09d1e-df4d-44d5-84ce-acffe6e422ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90b805d-8aaf-4fe5-9bc5-5cba1d40a22c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106a8bc8-3a2e-4cb9-8bb9-95047fecd9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fdfb73-7dd5-4cef-86d3-89523ca1d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc9739d-8e39-4819-9ab2-3cfd7c18187d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfc8625-f644-4fbb-9981-25698395360e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f69319-66a5-4be3-a526-7632fde2a6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a507f350-ca96-4ede-bef4-430849bf3e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04429c3-440e-44c2-b72e-904fb44f9d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5221944b-f60d-48fa-9599-e478c870efd1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af31290-4e31-4590-837d-3d5ebe9b9b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0ef8bf-b622-4ddb-9e00-81e73ec27e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95844b54-5f2a-469b-a579-395a286f67c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4769b90-ad63-455e-97a7-42bdcd854c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80942379-1c41-4838-a45f-e27d1225f228",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30716d8-7928-4d84-b853-8aa0168ffc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707c6dbd-0c56-4b55-9b95-37532c5f8a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7059be-0ba3-42fe-87f1-95fe1e45a34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff019be7-5d81-4d14-be4d-e8673771c2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5818d7-f521-4ee6-9d9e-93f18dc2a031",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0179dee-72a9-4242-9d36-ead04ea4f484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2218f3-837e-40e8-a19e-d21969d9689e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8f6289-b740-4507-a01f-2540eb2dae21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b16c3fe-21ec-4d37-a63c-835a03a8f5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b55b27-7ed1-4c49-8562-6c1dd1d34cfa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fccfabc-3679-4a1e-b5c4-e1a49b05ecfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c917bf8-4d67-4bf4-b102-beee1ae657cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944bf138-ed94-4f2b-9dbb-ee967544c8f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9337d49b-1419-405a-9400-a408ef81b14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d86a37-0de3-4ba8-ae02-9f8e3ec222a0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3ff059-2b1c-49ee-88c3-48bb68fed9f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b486cc5-ef75-4bf8-9d2e-136a6016eb22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16b8bf1-a6c9-4cdf-8d63-a14d690d4d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6dd498-1dbc-4e04-a023-879fc073077a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39dd819-c823-4e74-88ea-e622be78752f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24092fdc-cebe-4e26-b517-3c0a29abef85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "076158b6-7027-4bd8-a448-c1c36c1156e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9af53f-ac9b-4679-bd49-05a4c3daaae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149a7823-d0cc-481d-952c-9a702025acd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e7cb56-3a68-477e-88d8-68fbe325cbd2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f34f3-fb51-4911-a47f-b8d6a9fbfae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0cdaebd-f8a6-4804-88ff-24a9cad63ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da03d70-a02b-4b61-8037-a7ba5eb22a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edbef69-41ef-40d1-a519-faad79fcfb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9071fa30-c1e1-481f-8bbc-b950489cc0a3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e88f4f6-a885-49f8-9f8c-b65e10ef3bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8049f29f-28ac-4d30-8e80-323b1839bd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb793a76-ed85-438f-9f45-39888d94ce9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25cd831-2c04-46c4-ae29-374b51c180c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d621bb30-4cc0-460e-a102-98d62d24997d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0724c55-cba8-44de-a421-6b3beacaecad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a61306-82ab-482e-b833-e3894e7ce4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c8ac73-5f05-4c2e-8737-5c76ce7cab4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f3a405-9c6e-4780-8484-8e0fc08865c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4188489-1ef5-471a-b7d4-467aaaf5a73d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da882a5c-5fbf-452a-8a8e-9cccacb7ab31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c79f1258-1df0-4696-8ad8-0b92ebb730ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5cd7f2-d25a-4ce6-96c2-23d7c17c8962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865076ef-4cb5-4896-92f6-3175d432fe7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ade70da-7def-4950-900a-9e43609f898c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb3945f-241e-4dac-9279-aba84ec69568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375b0a8f-2532-4020-936b-5c71636b72bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da473b6d-ad0b-4e93-8987-e5d3e49e4acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e03a0d-876d-40df-8029-5eb426e47323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d12093-26fd-4654-9a2b-9eec292267ac",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ab1593-852d-4aa9-af98-23fce40fb5c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c6b1668-9c30-4d73-bdfb-9d53733e3044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c299dce3-8bbb-4be3-9844-14e99572a0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a23b55e-1ced-41bc-a27f-0be63cda8309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da292d26-7608-42bd-90f9-1bb5d3206280",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2529ecb3-e817-41ea-8a5e-8b8e6914888b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51cf3487-b379-4398-a7d0-e8abe6f5e843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c066e471-5c07-4f94-9317-464e4c3e98cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81bfb2f-c16e-4c54-bb98-2f2d47df97aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94b676a-acd7-452a-af3b-9fec77b735e8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa3f4a4-0abc-444c-acf9-d4cceb6b0eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc4d277c-1d3d-4457-abd6-cea71e740994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1341ca26-f473-4802-83f8-a14561e9cc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6181ac39-44a2-45e3-bbe3-2bb0d2cacef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdde84a-9ffa-4020-8709-0fb93d01476c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f4b679-0917-4ee5-aebc-06c3348ca226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5796501-8faf-4d8e-9188-e0284df34cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15616d33-4337-47a0-88d3-4dc7ef7e9e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85993ff3-71e6-4146-8529-f27a0ecb9a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5deeb510-7433-4a9e-9085-49fd7d3e5d17",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eca0d0-05ae-40ed-ac11-88183117d810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1b7544-ebdf-4c71-bda4-b29482a11ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf20706c-ee3f-4536-a06a-8aa8a9840705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d647b51-d098-4d9f-973a-3bc3a59e15ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117857b7-0d70-4967-9732-a8e39ac41b7b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9891dd-392d-4d43-a322-618464bc8655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b688adb8-8d53-4118-a73a-2386055bf2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b943d01f-d085-46c7-b14a-61ceb6a19e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e63c67-1d41-4985-8f0c-fd44e1e55b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d5dad6-0bb0-43a8-a177-9f6570cf80e1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a45065-032d-4b19-a77f-502c0e0ab448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61210f9d-a901-45f1-8d3b-7d60480d0be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f49c02-f20c-47ae-be91-f8caac35ffb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28935bb-9329-4aea-b26f-f16db6ce9a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402108c1-fef5-4ff1-be21-ef104259108a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21c3f89-0f07-4467-a594-ccd63a10a72d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ada4bba-b106-4138-a3b8-1b0d3942a38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d92a0dd-d43d-41a8-bf06-67c755e573ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c724ee-2ddc-43f6-b395-592f74f5f700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1614047f-b783-48f7-8619-9732acb12b66",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f502573e-6c30-443a-86ba-613970103e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e656bd-3087-4067-b1f5-cb23ce7c8cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943e1899-d9fd-47ea-b900-90042194e4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef111e28-20bf-4b2c-9aff-4b340d222b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772e5c1d-e4c1-4346-9589-22d02b3389b2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fed46dc-4e6f-4989-8a33-d7a2267894a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70428539-57db-49c8-a5c0-82842aeebf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fef729a-92d9-4bf2-b607-5606db174aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b59f90-b202-4fa8-8b43-1a22d8d2c9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df17d88d-ac56-4602-8c0d-48efa166c002",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69597cd-748d-4fc1-a649-871bc8f1475b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9122b0d5-1d25-45f1-9505-7d2dc6804956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12706a27-1d02-4bcf-8189-1f4a0b1d2b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493b59f9-cb37-40a1-9006-b85c46b41eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596245dc-d67f-49f3-a486-b14903a2bfe8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c935bac0-b570-487d-a3e0-d62607f9b605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c897d46-021b-4661-b010-6dab1e69143b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb6da70-6528-43fb-b494-42c14703d74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f96ad7-01aa-44f9-8860-be02b6e80e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa4f465-f3be-466c-869e-15abbab65056",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bbc61f-04a0-47b7-9e75-337dbf5f4589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5722e6d5-b162-476b-84a1-6e6e220bacb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15386310-47d8-4a43-811e-9ab7ea3e7fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86888937-b6d9-43f0-a98a-9a6856e79d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932cbddf-61c4-4506-97c0-fd1dffc13f79",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1174fc4b-6fb9-414d-84e2-28080c01b20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c593a9-4494-4fe3-b745-430f2c89e6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aafaded-65e8-4cba-9ec0-6d07fc8770be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7133380e-114f-4878-b404-137560a65915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cd03f2-a8d6-49b0-b443-25d85c15bda4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d94eef3-2540-473b-8f9e-c306134597d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4fdd9c4-5550-4963-839b-a673cbede822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eb9ff8-c2a8-47bc-afb0-0d0120d8f4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c50430b-bcc8-48e9-99b5-f5d8e544546c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83a91fe-788a-4b6b-bd50-144c3bd9bd5d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68de39d-f8ff-4cb3-908c-969f6ab7b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc63e47-d247-4feb-a354-69c7693c7923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bd4a1e-c2db-4726-928d-f5183ffcf814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deddffdf-1914-4fd0-93cd-dc2c1908718c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c75c131-7156-4872-9128-3e805af8c495",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e701c1-edf0-4d15-984f-a467b4d07692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e904077c-9e83-438a-b232-d2d263cf9e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0744ca88-7b1d-4cba-97f1-ce1336b93f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273b12b2-54df-442d-8c11-b18fe15d0228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab657cc-842b-4a9f-98a8-72a55323a9a9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464b8505-2b32-46e1-a2e5-c26dea02dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe6af76-2755-4193-82b3-98d17f8d20e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed418cd4-3806-4e61-a93b-165b0591c4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6446f7fc-bf38-4342-a1b0-a1b8f70bd73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccbe7ac-a453-42ec-baea-da5d4f90a95c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215a96aa-fa87-403b-9d8d-3042ac920d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b9603d-5a2d-4036-ad31-1f6ffe237288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5769e9a-1569-42c6-aa61-2f16267e1208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255a817f-4c44-47e0-be5b-670853932f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d98b837-96c6-43af-be58-892dbd70850a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a993189e-ed0f-460c-9412-812465ba45d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d114892c-47e3-4739-9a82-d8d72b021dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf99feb3-46b2-47f2-91c7-522109c2fbf2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4782367-ac69-405e-8ec4-0cae79d31eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f9db3b-e644-461d-8ebc-5931d5e071ec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ad24ad-cec1-4ebe-87d7-e7417083a886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e8a2c9-9041-4ada-893a-a00c0fefd968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544a11ad-21c6-473d-86cb-8826e986e265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd2fd59-794b-4b9c-9372-248fc776ec81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eca03e0-1d33-4dd7-be85-11f6c2b2f7f1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954e3961-eef8-4941-a8b5-a77853528eed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243802b3-4141-4dd8-869f-c910b69b1079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fc40ea-22fc-4acb-a847-0296d0e0f917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6ad11b-03ee-4a49-a473-537d7768e400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9646c3b5-9cfb-444d-81c2-b045cce5342e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db16388-3302-4b8c-b210-d7bcdd2ac0e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b6c56e-bd93-40f3-86e8-a04b4c978f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad08c00-b438-44de-a081-5c35c49e7d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5fa0d2-e4e8-4bc3-a2ec-1ec6a7dd7dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40208df-5f93-448d-ac8f-d2790a8b9143",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f9e2fd-6d04-4141-aa69-10915954cdf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d46cbc79-d7a0-4971-b2a7-a08bc2da9a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbe6e7e-39b7-489c-ae6d-619b4ae49509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1513e13a-bec2-4e42-a831-8a79663c99fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec74158-df76-4977-9a86-dcb228bb5608",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74eebdd6-3347-4a03-8cf1-1a0de63882b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f0bcc9-44c2-4a16-b149-d27817be421e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b04d2a-6cbc-4f22-baf9-86ed5ef11faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cf4dab-56b1-45fd-b8b7-c1ef21c0116d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb9ac9-8dcc-4741-ba4a-55ae22af7c9a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73a0bf4-655c-4370-9cea-f91ec29f4111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47738ce-06b9-4c37-b3e3-d6db526db148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06c9f11-b36f-48a0-966d-71f55bed17ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93379b49-63f2-4353-9306-786e31cb0483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0997d2ca-bbc5-4362-953e-fb145f656c78",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728c84fd-a9fc-45ab-a758-d79706840b8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89905bd-88f2-4883-b7e8-66ab80c7c5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc879aa-4e57-428b-b24c-bad1780e796d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d188600-8dfd-428b-b07d-2c25bbe10eff"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8edcf43-82a6-435a-acdf-5769edd0a406",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a774670-eef5-4e25-a4a8-996d5f12e0b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dba2dbf0-e6f4-4480-be72-98c22144bbd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be8c9009-e90c-4914-be04-19e1233ac493"
                    }
                  }
                ]
              },
              {
                "id": "e20b3519-73ee-4882-b72a-bd90e6ee0ff8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74a7b23c-16ec-4ce4-ada0-cfa284bcab8f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeacbe0-1e4b-46b5-b2eb-576b72ec84c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dac45117-bf5d-4e06-84df-b5e2feedbdce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c865b0-3559-465a-8853-5cc86b425adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66f60acc-c42f-4a42-b3d1-cd419f6d4703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fd610f-119b-4987-b0a7-f95ee6555d62",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8348d9d7-e4ce-46ed-863a-2ca3717165b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "46e3f711-0448-42d5-aff6-6cf1d6b1fed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9741202c-1d01-4f2f-960d-c368f8ca4235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2efb309-1ee0-4a61-af4e-446ea9a5189e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cfa048d-72ef-4e52-b6aa-2e018d06c68c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8afc5dd7-bcf0-4798-bda2-1f001cf02d52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "807e7b7b-95e6-4204-82c1-123313016615",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c800155e-1169-40cb-aa57-324766665b3b"
                    }
                  }
                ]
              },
              {
                "id": "b04c248e-44fb-4c23-9b81-460fb8b6763a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "41be88fd-7385-419b-af56-e8b33bc9b665",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5828acb-4a47-4847-8726-d68284329408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "09b6462f-3476-46aa-a148-85d49d9bf415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06c2e65-0c86-4d96-8713-50f68e4c9150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46629863-09e8-44b0-97c2-e3aed1adacec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47967dd8-d7df-462a-b11e-4fc1f46c6534",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3eb39ed7-9b06-4c8a-9860-4429c6539123",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b223c5b1-905b-42f8-86a3-70d568a925c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1e0bc12a-7397-4599-8ffd-3a93a128ac65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ef745d5-8b3e-43c2-a91a-ce567eeb4fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f0ea4c3-313d-4a19-9168-d83100391da2"
                    }
                  }
                ]
              },
              {
                "id": "f89da0ba-3d09-4ba1-86c7-a390939418be",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27dde96a-1c6b-453f-8c30-f76b08e19fea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e66f0665-3fe8-4d4c-b7b3-30eac8884bed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1953a7a-bab4-4dd4-a2c1-64359d0710a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d3365c5-e285-403c-a271-c629ad074c80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "847fd399-46bf-4445-9eff-cbfa02137480",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "acd8ebb7-1cc4-4fd8-80ff-3520937571d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a27246e2-be0f-4e6c-9d00-9c81b83f1c64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abc6561a-139a-4a69-b564-f664556040dd"
            }
          }
        ]
      },
      {
        "id": "3f469950-b708-4f79-808d-12a199154427",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6962767e-5576-445c-8277-ddb3940475a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cff43054-e529-47c2-b33d-91f690dbb9ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e6cbfa-b6c9-490b-805a-645463023650",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92d7d29f-96d4-4140-9919-299c9627094a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a91c8af-cb8e-4a71-9bc7-141ac7878fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deca6026-bde4-4c6a-9b33-980a3bb67302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42ed5e4-b307-428b-83fa-6424a033c0df",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df942c1f-dcc6-47c7-a704-4555a9d3774e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3cf68ef7-c92e-4676-a914-efe680712015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ef9e81-950e-4367-9d7f-361b9747b3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2176c59b-3dcf-48d3-9d75-9add5efb3cc3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39434042-7daf-4510-a12e-7432cb11358f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbf71df2-6101-42b3-a57a-ba457eefbf05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c55cf9c-120d-4d25-85f3-63bc709fa112",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "566636d1-afbf-4961-a07f-919d36154a05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c9a55c1-0d3f-41e9-8866-d22b7ef61536",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "217b493c-0895-42c8-8e08-3e9d66fcc638"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11f92d83-8fd1-4de6-903c-f65ba65c3723",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f76fe0ec-9942-46ca-8d00-69022bc65c27"
            }
          }
        ]
      },
      {
        "id": "beb48b0e-9176-4b4a-9d59-2052e4bc299f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bc779f90-3436-49e3-b1e0-c4701cf84383",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aeb11c57-061c-4715-86ae-6ce8a087915c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe9e205b-5f00-441f-8154-670805fb5c8b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afb5f0b-b5d8-46fd-ab7d-da61923db1fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09fa143b-f2bf-4d4b-acf6-de932cd81be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceea3922-3d97-4244-8040-0c9610568f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "991f0d93-d2da-46a5-b4ca-d3c573d7e549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824836ae-126e-41ef-998e-b329424a90ad",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d95a44-75fe-4e61-aad4-903cc5845108",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7182d139-96a1-45e0-a33b-44d9dd10666e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6d12e4-e7e1-46de-97e8-92b563e154fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5edda4d5-c399-4415-bae2-bc515385af89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27cd79d7-039e-49db-bf28-1ac85687faa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f268ee3-7c3e-47ed-8c27-62cd857a2dab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8316ca2-ec89-49ca-bba2-8e68a708b655",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03c35abb-30a6-4b40-a978-ea98d7e9e051"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90ef14b4-cb64-4739-9dc4-6a852a722664",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa4e3191-2839-4185-aa82-03b678db2f56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18dcfe1a-0373-4b06-9128-66f209771539",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46970bff-e712-4ae2-ad85-0f8d8cac6ec9"
            }
          }
        ]
      },
      {
        "id": "28f4fd0b-35ef-456a-92fa-84595d37cbd4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a796f1c5-ac4b-49b0-aec5-c1e08f64ef64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aae93ee1-fc63-4090-99aa-0060abebdc53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0ec7f8c-ff07-4cc1-a5ce-8a815b21e3cb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4c72f6-4e1b-462d-9e8e-2d11c728b55d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48572831-e31e-469c-a128-7d8f942c9504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eb636e-48b1-4963-9d8f-98e7ae86d0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44ce4b2f-7bfc-4453-ba75-f903d4ba666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011ec895-219d-48c1-8a14-b8dad389ed49",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbac504-da5b-48e0-a93a-4f01278f9226",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e67b50ef-39af-46f1-944c-35fef76a2290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626403b4-779a-44d2-b94c-d8603cdfa43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4b4bd23-f850-4ca6-ba87-6267a77753ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01137e73-f399-4534-b2c1-8c05d9cdb39b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1d751cb-c881-4f56-84da-d459acbfc1a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fd2137b-86c6-48ce-a063-3e7e4e7a0d19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9deb410-6c07-4220-93dc-ec40bae3219b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e45d9b80-5fc3-49aa-95ca-d1bdb72379d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "59e3828f-6216-4b8c-a60c-41fcdf88638d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dceed4ac-f2d8-42a8-9989-bebaf86a815d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f6f41cb-5f45-4272-bcc3-268e91a9f248"
            }
          }
        ]
      },
      {
        "id": "59c752ac-017a-4e50-9193-c36fe2b11b7e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6550330-83c9-4f65-8c6a-97d5cc675f6a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5645ce06-8483-4aeb-9ce5-c04cab3ad022",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e92ef4f-aed7-463b-99fb-1bdb255999b3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9722df52-37ae-4368-9360-775e03950a83",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d2b0846-6d69-4df8-b08e-8607f4517904",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 298.56370656370655,
      "responseMin": 22,
      "responseMax": 10114,
      "responseSd": 952.3894228396506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678494968302,
      "completed": 1678495056269
    },
    "executions": [
      {
        "id": "f81f24b0-2053-4539-969c-1198cee5d824",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5223f98e-5f1d-4b1e-b7e8-b3e1e9f3937a",
          "httpRequestId": "9442eb1b-ccec-4e5a-afbc-32e6a2a5e235"
        },
        "item": {
          "id": "f81f24b0-2053-4539-969c-1198cee5d824",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4537447a-2bb7-40dc-a65a-3ec42f27300a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 0
        }
      },
      {
        "id": "6a98b756-bf39-404a-a6d1-96bfe6cea6a0",
        "cursor": {
          "ref": "86f4180d-0f41-4419-8ec1-608953d9b7a5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f14b1ebd-e51b-48bf-916e-df24874a5393"
        },
        "item": {
          "id": "6a98b756-bf39-404a-a6d1-96bfe6cea6a0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "83d35548-de3a-4c7f-b397-e2910fb09201",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "3ca06be6-99f0-4af1-9a62-829e9a701cce",
        "cursor": {
          "ref": "fb6c217e-9b40-420a-ae37-fc04babbbd30",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1f58bbee-fa2a-4d99-ad61-0e9bd479a734"
        },
        "item": {
          "id": "3ca06be6-99f0-4af1-9a62-829e9a701cce",
          "name": "did_json"
        },
        "response": {
          "id": "dc6f5a09-3949-4cb2-94d9-acaa2455a40d",
          "status": "OK",
          "code": 200,
          "responseTime": 516,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a91102-2182-44e3-87bf-ada93ed7dab7",
        "cursor": {
          "ref": "a726ff8d-6e1e-4080-94e9-2521da824e26",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8a110b3c-b9c3-4b05-83e7-11e328b23438"
        },
        "item": {
          "id": "52a91102-2182-44e3-87bf-ada93ed7dab7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f8f103c0-48b3-4365-8255-eecb46d8c0aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1275,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "52a91102-2182-44e3-87bf-ada93ed7dab7",
        "cursor": {
          "ref": "a726ff8d-6e1e-4080-94e9-2521da824e26",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8a110b3c-b9c3-4b05-83e7-11e328b23438"
        },
        "item": {
          "id": "52a91102-2182-44e3-87bf-ada93ed7dab7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f8f103c0-48b3-4365-8255-eecb46d8c0aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1275,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0ba5eebf-053c-4a1c-aada-6a3ccc79f311",
        "cursor": {
          "ref": "8101ea40-c45d-49e4-a942-7b9439f79b6d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c7337b60-6af8-4aa1-a33a-7434f99063df"
        },
        "item": {
          "id": "0ba5eebf-053c-4a1c-aada-6a3ccc79f311",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3b2c150-e88c-4607-b157-407a9a159e73",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29b39f5-1bfc-4d97-88d8-35facd40e4ee",
        "cursor": {
          "ref": "cdcce67d-e05a-44e8-b807-9014b8a6709e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d67bf1a-05a2-44b6-8a93-a02a8c76082f"
        },
        "item": {
          "id": "b29b39f5-1bfc-4d97-88d8-35facd40e4ee",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b821d662-b135-4850-be86-c3bc7021c2c1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a33cb0f-397d-46d1-8e5c-bac6da234aee",
        "cursor": {
          "ref": "6ba3a75b-7bd9-4a80-9b4b-ffac7b265999",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ee13b2b8-19d1-41bf-ab2b-f656e7b71678"
        },
        "item": {
          "id": "5a33cb0f-397d-46d1-8e5c-bac6da234aee",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "30ba4fda-b10e-415e-8f61-51d75297d3d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "41bff584-beee-43c8-977d-70ff3e25bb07",
        "cursor": {
          "ref": "5df38514-e2ea-40ac-8915-f0e434ce243e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b0b2448a-c925-4670-8580-0d490de20132"
        },
        "item": {
          "id": "41bff584-beee-43c8-977d-70ff3e25bb07",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ab5f3829-451e-4416-8168-261ffe127d5d",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "41bff584-beee-43c8-977d-70ff3e25bb07",
        "cursor": {
          "ref": "5df38514-e2ea-40ac-8915-f0e434ce243e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b0b2448a-c925-4670-8580-0d490de20132"
        },
        "item": {
          "id": "41bff584-beee-43c8-977d-70ff3e25bb07",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ab5f3829-451e-4416-8168-261ffe127d5d",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2807f7cf-6d56-4703-8d74-ad4a237ac66a",
        "cursor": {
          "ref": "3b52b613-3bb1-47cf-98ad-065b187febdc",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7ca183ac-3cde-41c7-b296-d48a146ab12b"
        },
        "item": {
          "id": "2807f7cf-6d56-4703-8d74-ad4a237ac66a",
          "name": "identifiers"
        },
        "response": {
          "id": "58e3b3d5-7f15-47f9-bdf2-7e332f495b23",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6864f75-34b6-4334-9930-bb11cd46c21e",
        "cursor": {
          "ref": "f1d2a950-0c9c-413b-9101-6d53a731ca54",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5e7e0ff2-ced0-497e-9ec5-63e6e2081166"
        },
        "item": {
          "id": "c6864f75-34b6-4334-9930-bb11cd46c21e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "96c1bf3e-32b6-4825-8d05-a909ede2eeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6864f75-34b6-4334-9930-bb11cd46c21e",
        "cursor": {
          "ref": "f1d2a950-0c9c-413b-9101-6d53a731ca54",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5e7e0ff2-ced0-497e-9ec5-63e6e2081166"
        },
        "item": {
          "id": "c6864f75-34b6-4334-9930-bb11cd46c21e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "96c1bf3e-32b6-4825-8d05-a909ede2eeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f5ad83-8b07-42f2-84d2-e00c4f4e4dd5",
        "cursor": {
          "ref": "04f81644-bd8f-4748-9564-8120ec54ed18",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "120bb415-0cf3-4691-8e4a-9246391f6ef9"
        },
        "item": {
          "id": "04f5ad83-8b07-42f2-84d2-e00c4f4e4dd5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "db935664-1f27-4c8d-a91b-fa25d1a54a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea00acca-c0ca-4849-af4d-9ebe932d2e52",
        "cursor": {
          "ref": "b9d9ed4b-8b65-4103-9a3e-0763ca5ec933",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b250ddc6-8933-445f-80a8-2d15852ac293"
        },
        "item": {
          "id": "ea00acca-c0ca-4849-af4d-9ebe932d2e52",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c626c13d-110d-42bb-ad09-a98c0bb4420b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63eaccac-a56a-4520-bd4f-4526da6c844f",
        "cursor": {
          "ref": "e7799394-98ca-4774-b8b4-414ea3adac56",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "19701d05-106c-4249-b2a1-0cae3482564a"
        },
        "item": {
          "id": "63eaccac-a56a-4520-bd4f-4526da6c844f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cef9867e-4dca-4b82-a671-fdc666eb8103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71504313-2f47-4ca7-b1ea-2b2ca046ebdf",
        "cursor": {
          "ref": "2bdbad92-edb6-427e-9589-8780d0c3b320",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8537adf3-32c1-43b1-9251-c37169c0198c"
        },
        "item": {
          "id": "71504313-2f47-4ca7-b1ea-2b2ca046ebdf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "15c12902-64eb-4b21-b32b-de315e25df17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db7cdec-6b5d-43d5-928f-db4f8f8d6372",
        "cursor": {
          "ref": "c514dbd3-0582-462f-8d15-2b05662264af",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e51e8845-f098-43ee-ad97-2c49d07ebf40"
        },
        "item": {
          "id": "0db7cdec-6b5d-43d5-928f-db4f8f8d6372",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d2d23363-4e49-49cb-918f-cfb6f04beb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5df203-2219-4742-b5a7-b392d1cc16b6",
        "cursor": {
          "ref": "f41fd09c-325d-4228-a896-8c78768f47cb",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fce0c59d-40f6-4c33-9619-47ca4086caee"
        },
        "item": {
          "id": "fb5df203-2219-4742-b5a7-b392d1cc16b6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c9b52689-f41d-45b0-ad5b-6f897ff61ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d69130-69a4-4f44-9f38-a4a648a0fcbb",
        "cursor": {
          "ref": "4a7e6397-40ce-49b7-a6d4-da8a0098287f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7bbe71e9-da1f-47dc-b918-8717e34a3aa0"
        },
        "item": {
          "id": "f9d69130-69a4-4f44-9f38-a4a648a0fcbb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f05daebd-15c5-427f-b7f9-e7051c35df27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5815170c-15cb-4c8c-ab26-682c8e550f65",
        "cursor": {
          "ref": "52cce964-3d05-42d9-87bd-8ca99e6ba94a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "22b72fa6-e7d9-4ceb-b881-90a6a6b7e0a3"
        },
        "item": {
          "id": "5815170c-15cb-4c8c-ab26-682c8e550f65",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df141123-3c04-4394-98a0-8b8708d7249f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dab215c-0498-42c0-a933-d2c14a198fd1",
        "cursor": {
          "ref": "3e6b4f11-afbe-4a5b-9a7f-38ef29b55b5b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1369f28e-bfef-4153-9a7d-f5cfb502756e"
        },
        "item": {
          "id": "1dab215c-0498-42c0-a933-d2c14a198fd1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8e8c97e9-bb9b-4f4a-afa3-e5c4d4356697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7886381d-39fe-4e01-ac23-91936726897c",
        "cursor": {
          "ref": "09755e1c-4e17-41d0-a588-1329be9aa014",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4e13fa94-e1bb-4a67-9147-d96875be9769"
        },
        "item": {
          "id": "7886381d-39fe-4e01-ac23-91936726897c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e46377cf-80c3-4e64-bbcb-d2d8bb9dfd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffeac53-7ed2-4102-9b7c-c12f7881bd7a",
        "cursor": {
          "ref": "5302a3fc-be61-42e5-8c56-9b71840c729c",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "600cf3f5-87cb-4c1a-9d63-5f8be77813a2"
        },
        "item": {
          "id": "8ffeac53-7ed2-4102-9b7c-c12f7881bd7a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d79193ab-07a7-4059-b164-e3b5d13511c5",
          "status": "Created",
          "code": 201,
          "responseTime": 695,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "588880f0-ab33-4cfe-86ab-ada25ed124c7",
        "cursor": {
          "ref": "864051be-69fe-4385-88ca-aba59964594b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a3c58e5f-f133-48d1-9eac-3774aeab52f2"
        },
        "item": {
          "id": "588880f0-ab33-4cfe-86ab-ada25ed124c7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0425daef-4a82-41ac-847d-2c8ff518a2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e3f836-3494-4ffb-bda0-2e33c87eb3e2",
        "cursor": {
          "ref": "11f1d84e-9911-4c04-9116-bf042c18c2a7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4da6aa75-44a8-41b0-9676-6ca637699351"
        },
        "item": {
          "id": "90e3f836-3494-4ffb-bda0-2e33c87eb3e2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "41455037-9a5a-46af-9770-474cb8c60e57",
          "status": "Created",
          "code": 201,
          "responseTime": 7374,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "185c1f39-17b0-4a4f-bbea-5c1aba9ba893",
        "cursor": {
          "ref": "ebf8877d-d4af-462d-ab5b-b3f49d6a40ef",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "09542642-a623-47a6-89b5-703a2af8ac63"
        },
        "item": {
          "id": "185c1f39-17b0-4a4f-bbea-5c1aba9ba893",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b2572c99-fef0-4600-841c-2666b6b75398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43585e41-1e19-4bc6-abe4-3142f58bc14f",
        "cursor": {
          "ref": "000c575e-5880-4b74-ae2d-2a634ad1fcad",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "73431b31-c09e-47bf-81d3-d0506e4e7f61"
        },
        "item": {
          "id": "43585e41-1e19-4bc6-abe4-3142f58bc14f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "981d5f8f-2923-44c2-814a-b1ec0b6785c8",
          "status": "Created",
          "code": 201,
          "responseTime": 10114,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "eddd0a39-8bf5-40bd-8e20-796caa0565ec",
        "cursor": {
          "ref": "1dc2a126-c227-49be-b36e-33c2131f80a2",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3ca47b57-2e0a-48cb-b9ba-d339c9621536"
        },
        "item": {
          "id": "eddd0a39-8bf5-40bd-8e20-796caa0565ec",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d4b364d7-0acb-4987-951e-223d25cda6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca066b34-f28c-4297-9c8d-07128c2ce18b",
        "cursor": {
          "ref": "0fe304f0-053a-4d74-a72d-3554a7352830",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d6bab642-4f7c-4ba0-a903-e682425ec6b2"
        },
        "item": {
          "id": "ca066b34-f28c-4297-9c8d-07128c2ce18b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "10a0ef8b-4ab7-4b4f-aca7-27cde50bef35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5378aede-82e3-4446-987a-5ca87dea512c",
        "cursor": {
          "ref": "27e61c36-e758-4052-b52b-0ac16fb9a45f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0adfa0f9-b06e-4980-add9-616ed02a198a"
        },
        "item": {
          "id": "5378aede-82e3-4446-987a-5ca87dea512c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e210452b-0d59-4184-abeb-3e4b1405b552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f979ea0d-9ff2-4369-86c3-b3f3d60e0f3f",
        "cursor": {
          "ref": "74f538ef-b26d-43eb-bf73-4f92db11d663",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b40e50c2-4d93-47ed-b611-237113ced984"
        },
        "item": {
          "id": "f979ea0d-9ff2-4369-86c3-b3f3d60e0f3f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3b32bfcb-865a-4879-be69-c0a6b2f2d1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd57a338-52c9-4eb5-90fe-54a462e7015c",
        "cursor": {
          "ref": "bb9f7e51-1bca-4df4-9c2f-731a7946c440",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "11b9dc21-189f-438e-9282-d5157fd47992"
        },
        "item": {
          "id": "fd57a338-52c9-4eb5-90fe-54a462e7015c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f014fe7f-5582-4c64-96f6-a7af2e9620e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faa5373-0f72-4074-9eb6-b2e16bcfded5",
        "cursor": {
          "ref": "b38092e3-7ad2-4453-b2a9-4eb2e59a42d2",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "61d1313b-3e94-48cd-9e64-10674914ef06"
        },
        "item": {
          "id": "0faa5373-0f72-4074-9eb6-b2e16bcfded5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3c4cda1d-de3d-4660-809c-f5845506133d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a0ce73-08de-42c7-b186-b90981749d9a",
        "cursor": {
          "ref": "3036f39f-6c10-4dbc-9818-aef043578819",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "69605d62-fb4c-40be-a9af-6986c979b04c"
        },
        "item": {
          "id": "52a0ce73-08de-42c7-b186-b90981749d9a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d49152c7-b393-49d9-abeb-8a220a22a7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c926131b-4f02-465e-8252-9553aab6c62e",
        "cursor": {
          "ref": "2ec1e06c-64eb-422f-b609-df8d2f751332",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dcf9c6d4-cc71-40b0-9342-213eb0e5dbc3"
        },
        "item": {
          "id": "c926131b-4f02-465e-8252-9553aab6c62e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f0eb44f8-487e-4e29-ac0c-25a67ba4c4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67811e1-3004-4768-8415-584b41a94798",
        "cursor": {
          "ref": "0fa47ef1-381d-4d98-84a7-e1a2e9fb176f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9da8779d-d64a-4eee-a1aa-02afba8c8793"
        },
        "item": {
          "id": "f67811e1-3004-4768-8415-584b41a94798",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1334de85-acfe-4344-a9f1-46d980574fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce8f925-7cad-4363-ba57-29487e0fcdd6",
        "cursor": {
          "ref": "f41b418c-f060-466f-89b7-eac5fc067747",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "35ad86d0-f392-478b-92bc-af6d350c6a0a"
        },
        "item": {
          "id": "1ce8f925-7cad-4363-ba57-29487e0fcdd6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4fac3591-1bca-4de4-ac63-7460d7dbe018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84119c13-f289-471a-8caf-106aa4186157",
        "cursor": {
          "ref": "cae2b49f-7e57-4820-81cb-2e8caccafda0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2361cc65-af0f-4c04-9f73-0f7803111a0c"
        },
        "item": {
          "id": "84119c13-f289-471a-8caf-106aa4186157",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b9bc8b83-828f-4619-821b-9f53eb1dae72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa5cb6f-9b15-4d88-8d1a-e91a0d71075b",
        "cursor": {
          "ref": "8104a375-abd2-4b40-a954-fac9f9091491",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b514f3d4-f414-4969-b5e5-e858ab89da8f"
        },
        "item": {
          "id": "8fa5cb6f-9b15-4d88-8d1a-e91a0d71075b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "40be9a69-864e-4582-b6dc-94ef07b45a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5d68db-9c42-4922-8f55-4af1721e8d13",
        "cursor": {
          "ref": "11fd87e2-d06b-4247-9fd0-c76cd9a9152f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f95adf0c-9385-4d05-8739-2defdf6866f6"
        },
        "item": {
          "id": "ff5d68db-9c42-4922-8f55-4af1721e8d13",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8d057472-2c5d-49e9-8fe9-17ca01d9d2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ed9239-a58a-4864-af88-7cf9af9e1357",
        "cursor": {
          "ref": "5373947d-868d-4ab2-ab6a-089461392a21",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0b50755-51a3-4ace-979b-af59b844b4d4"
        },
        "item": {
          "id": "59ed9239-a58a-4864-af88-7cf9af9e1357",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e9e38cc2-6ad9-403f-8a3c-c8cceb9ad502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551ffe70-ae99-4845-a997-d1b2cf9c0c45",
        "cursor": {
          "ref": "fe068062-1ef3-436d-adbf-03b7a98e016b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9e1c27f0-5ca8-4f5b-bc09-85e7578a310d"
        },
        "item": {
          "id": "551ffe70-ae99-4845-a997-d1b2cf9c0c45",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4c8ca0a7-37df-4c1e-a56a-fccbc0bb148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4119daf7-e603-4e64-a4ca-710c06c0cb46",
        "cursor": {
          "ref": "4c9a519d-a7ad-4dad-99fc-0a29491b64a0",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4a62fe53-0919-447f-af84-d5c52c0593ef"
        },
        "item": {
          "id": "4119daf7-e603-4e64-a4ca-710c06c0cb46",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "04528eeb-2e6c-4128-b5dc-3a7f3aa73cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adc77ea-aa14-445a-b90b-c139e5aa4db5",
        "cursor": {
          "ref": "7c26510f-e259-4a58-b746-69dfb981239e",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b6a6bb30-fcb7-4d16-a059-5398c7447102"
        },
        "item": {
          "id": "5adc77ea-aa14-445a-b90b-c139e5aa4db5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "932ef939-1540-4cc8-9c79-cab2b590efd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c05688-a3ff-46fb-8851-5e74d2a1298a",
        "cursor": {
          "ref": "3adee300-ef95-4280-886d-113667d217b2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "74332281-ba26-46d4-b9cf-ef5457a14625"
        },
        "item": {
          "id": "41c05688-a3ff-46fb-8851-5e74d2a1298a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "de4617ca-6f68-483e-9240-3b1275739337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84249999-d189-4c36-a8bd-1dfef6660425",
        "cursor": {
          "ref": "4f38c841-dd98-4499-ae7a-dcbfa30767c6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15b873f5-032c-4ef0-8ab6-c335ceecb26c"
        },
        "item": {
          "id": "84249999-d189-4c36-a8bd-1dfef6660425",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "756e0b83-914b-433e-b0e4-6708aebf4771",
          "status": "Created",
          "code": 201,
          "responseTime": 2043,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2de5c570-5590-481a-86c7-9eb9f8599982",
        "cursor": {
          "ref": "1bff5a70-e87f-479c-bb78-1de20e7da022",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5c3ba52-d88b-46c0-a6b2-3e8554e9b42d"
        },
        "item": {
          "id": "2de5c570-5590-481a-86c7-9eb9f8599982",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2e625bb7-ee1e-4253-9548-6c7b9ad4ee42",
          "status": "Created",
          "code": 201,
          "responseTime": 2764,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "23e18e16-5184-4efa-9ec0-89e1b9b01d4a",
        "cursor": {
          "ref": "816790e5-0d9a-4d5c-9876-897d8472f874",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "144e9100-a642-4858-991a-6553d0368dcf"
        },
        "item": {
          "id": "23e18e16-5184-4efa-9ec0-89e1b9b01d4a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e1914511-a42b-4455-8440-b3db704260b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872e84b2-3ad4-42d4-a0a9-26bb9b848c96",
        "cursor": {
          "ref": "b5bfaf86-4a69-4497-81d8-78b55ccda2a8",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96b7ad94-57e9-4a62-89c1-8e685906e699"
        },
        "item": {
          "id": "872e84b2-3ad4-42d4-a0a9-26bb9b848c96",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "aa73daa1-0a4b-4c21-b416-4b5d2e2b7818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e69b30d-f0f0-434f-9c60-6cad4d19b46a",
        "cursor": {
          "ref": "97ca55b6-ed8f-456b-8511-9173f5b3a0ae",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d48a72ff-f302-4143-b9f7-1a02f17dd286"
        },
        "item": {
          "id": "0e69b30d-f0f0-434f-9c60-6cad4d19b46a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "42f57206-31e8-435e-8749-b9ca18bbd9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff3bd4d-77ba-4c80-9747-8e295b035e0e",
        "cursor": {
          "ref": "01427744-4694-416e-93a8-72262e1e37b2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cbc0b813-8fa3-489f-a30b-98d10770b658"
        },
        "item": {
          "id": "3ff3bd4d-77ba-4c80-9747-8e295b035e0e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2830f74e-6440-4b54-993f-c0938a0e4311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e94a25a-b74f-463e-a4fb-016d9bf584ca",
        "cursor": {
          "ref": "317aa2fe-a42d-4c02-8c10-61979d74941d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5c096701-503a-430c-8e81-ee1c8958c323"
        },
        "item": {
          "id": "2e94a25a-b74f-463e-a4fb-016d9bf584ca",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "16a3783a-e302-461c-8604-ccc6e24df7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db2533d-e60b-444d-af59-7f68ffb90332",
        "cursor": {
          "ref": "49aaf09c-aa9e-4884-9fcf-5bf57c009568",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b22c875d-8a50-46d1-ba28-7211559aea92"
        },
        "item": {
          "id": "3db2533d-e60b-444d-af59-7f68ffb90332",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "50de6c19-065f-46b9-8060-a05181a87afe",
          "status": "Created",
          "code": 201,
          "responseTime": 2915,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "78402dde-d42e-476f-83d3-f143bcd55587",
        "cursor": {
          "ref": "b764d166-8a34-4ffd-9703-2260473f615d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "60896fd0-7eba-4caa-ad43-b1ff918683de"
        },
        "item": {
          "id": "78402dde-d42e-476f-83d3-f143bcd55587",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "14308c4c-f16f-4749-9fd4-56d9745988f9",
          "status": "Created",
          "code": 201,
          "responseTime": 2445,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2fff8a93-bee6-4966-b4c1-df96beaf439e",
        "cursor": {
          "ref": "440eb45a-64b8-4b33-8f6b-810014d11706",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1721b612-7431-4735-81a8-2c2f1bba07f0"
        },
        "item": {
          "id": "2fff8a93-bee6-4966-b4c1-df96beaf439e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2ea3cbc9-66ee-4077-b730-a09d2659e60f",
          "status": "Created",
          "code": 201,
          "responseTime": 2442,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c3200cad-71b7-43c5-aa63-ecaea0730cbc",
        "cursor": {
          "ref": "0ddf5ed1-caa8-4e92-8e73-85197c5788c5",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6b013d9e-3d48-4d47-b8b7-efeb7b14a8f0"
        },
        "item": {
          "id": "c3200cad-71b7-43c5-aa63-ecaea0730cbc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0b77882d-5865-407a-9ece-b2f92f2eada8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46be363-a20b-4087-b1d7-1772cf6e1efa",
        "cursor": {
          "ref": "3f5b85ef-8ea7-4833-a761-940de9fff0ce",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d085142e-6370-4d3d-9a6e-eefc5e0227d3"
        },
        "item": {
          "id": "f46be363-a20b-4087-b1d7-1772cf6e1efa",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cff30274-4c30-4863-8231-92bf06b8c2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b19f09d-03a2-4e40-8f0a-5a22b31992d8",
        "cursor": {
          "ref": "47392db8-9301-408b-bd97-a5f16af37ab8",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "17ddfd3b-4192-44f0-b970-156abe64d2ec"
        },
        "item": {
          "id": "6b19f09d-03a2-4e40-8f0a-5a22b31992d8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c8608005-06a9-426b-bb62-3749d67dfb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54860a7b-2c0a-43df-83e8-14878575d383",
        "cursor": {
          "ref": "7b73d00d-29b9-4a1b-a42b-2206b980b111",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3828ebd5-817e-40ca-b8d5-2dd834a64fac"
        },
        "item": {
          "id": "54860a7b-2c0a-43df-83e8-14878575d383",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d41b8b1a-a6ea-461b-9f98-e71acdb71c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f5b632-bc13-4f8b-905e-6086653fe1ba",
        "cursor": {
          "ref": "a993b11e-6d3c-41cf-9a72-f953880e3b82",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b979166c-544f-4c07-90d0-bd2b07946c2c"
        },
        "item": {
          "id": "b3f5b632-bc13-4f8b-905e-6086653fe1ba",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2e6c846b-30e9-45c4-a9e1-1caa4a92a266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f26e5f3-74ac-4b71-ae17-259a0fdca379",
        "cursor": {
          "ref": "aaa7e5f3-3ae8-45b9-b905-d83377357d0b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7c13329e-332b-48af-bb22-a5ca076dc6ef"
        },
        "item": {
          "id": "9f26e5f3-74ac-4b71-ae17-259a0fdca379",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "493e0d70-0de4-43dd-b43c-48782b7ce26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe122fc-90c3-478b-9cfa-2b5e761d4858",
        "cursor": {
          "ref": "53871aa4-813f-4221-8aa8-a3fa1c97485b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9b27c814-1eeb-41ff-8a00-3708aa6d1f9d"
        },
        "item": {
          "id": "3fe122fc-90c3-478b-9cfa-2b5e761d4858",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c77358d4-f67f-4256-8201-656caee7223e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e158ef9b-f886-47c8-88db-099e56c0127c",
        "cursor": {
          "ref": "0a0ccbe5-4c02-4761-abc9-264576421f5d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "94748572-0763-437d-8d20-c5b68eab482c"
        },
        "item": {
          "id": "e158ef9b-f886-47c8-88db-099e56c0127c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5b9793a5-dba8-4859-a974-5983568f99dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef1d95f-8ff6-4bf6-81e2-d3cce7a5cea9",
        "cursor": {
          "ref": "357fd875-ddf2-4d99-bea6-3ed04293240f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "48d3a8ea-c2b9-45dc-8bcf-471dec51e745"
        },
        "item": {
          "id": "7ef1d95f-8ff6-4bf6-81e2-d3cce7a5cea9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cd38675b-8fc7-45de-b221-48c8c9b3cd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd6263d-c4c9-434a-85f8-35e6ad85357b",
        "cursor": {
          "ref": "6cde30af-fb9e-485c-a51f-b08d4bfbf341",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "19bd967c-79f8-46b1-a90b-8712cf927124"
        },
        "item": {
          "id": "acd6263d-c4c9-434a-85f8-35e6ad85357b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "266f0b40-64d3-4f1f-8e07-4ffec5631055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39873e03-71b7-47ce-b98a-cee3a4ccea14",
        "cursor": {
          "ref": "5a387a90-457a-4f06-8608-615c170c8d06",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "36501540-1181-49fe-a90b-8bacd9d63bdc"
        },
        "item": {
          "id": "39873e03-71b7-47ce-b98a-cee3a4ccea14",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "408ee711-ee59-4226-8305-fbb4e7b6f5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bca2c91-de8f-44fd-a2ea-c0d2a5983fc9",
        "cursor": {
          "ref": "0c5484b0-1916-44b2-9553-14381a79f8a4",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6739f4c3-dbfa-416d-82e5-70a5ec55b10d"
        },
        "item": {
          "id": "2bca2c91-de8f-44fd-a2ea-c0d2a5983fc9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "981d9a36-05c9-4b1f-9047-896e89593ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fbeda-7172-4684-98e4-9a1dcc5b2c02",
        "cursor": {
          "ref": "4f18dc11-1421-49ae-b71e-b978abfec34b",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "347bfc95-6983-4cd7-90fa-5423748c45e6"
        },
        "item": {
          "id": "203fbeda-7172-4684-98e4-9a1dcc5b2c02",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dfff57e1-d276-4607-a4e2-1621eee256e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b1f281-fe45-4316-aa47-a8d94068b57d",
        "cursor": {
          "ref": "c10bc6b7-0a47-4f16-a065-858b6877fb22",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8e3e6d9c-5a6f-4fda-bb5d-c632b0773391"
        },
        "item": {
          "id": "67b1f281-fe45-4316-aa47-a8d94068b57d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "38967409-bcf9-4261-a354-363bb2f9c17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4bbb48-514d-48b6-afa2-e650dc7c2dd3",
        "cursor": {
          "ref": "1ecdbe66-87f4-4477-a825-2ac7164cbad6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ea63056e-bdb1-4ffd-ade1-463b87927404"
        },
        "item": {
          "id": "dd4bbb48-514d-48b6-afa2-e650dc7c2dd3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bf65ee9c-d338-4975-bdfd-1082409311b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8417cb57-cfdd-4f9c-9147-d63eeacb7e00",
        "cursor": {
          "ref": "9cbb03ad-91d9-4bca-a207-9d237ec8b0db",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b44de550-bf94-4d26-9d83-9e217a083a6f"
        },
        "item": {
          "id": "8417cb57-cfdd-4f9c-9147-d63eeacb7e00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b3d24db1-faaa-4292-ad19-7e9c3ea2aeea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829d24e8-6894-4915-925a-8431c7db862b",
        "cursor": {
          "ref": "0d908dc2-c111-434d-aa82-47efc2e1d1f9",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20cc1b9b-6fd6-49ad-9534-3fced1377b14"
        },
        "item": {
          "id": "829d24e8-6894-4915-925a-8431c7db862b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d14cbffa-f279-4f21-9bf4-9ac65f4831ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed6183c-b04a-48cc-b962-005aba67b534",
        "cursor": {
          "ref": "e3359a30-48df-4725-8718-bb4b2d0f4c54",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6d3cbfdb-f623-4a14-9cf5-32b1d634d725"
        },
        "item": {
          "id": "bed6183c-b04a-48cc-b962-005aba67b534",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d2fbf736-9aef-40ea-a9f3-ecdd57cd38c5",
          "status": "Created",
          "code": 201,
          "responseTime": 1946,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "761301c3-741a-4f2c-9b86-8def4564316a",
        "cursor": {
          "ref": "ff524d86-791d-4bb6-9b0b-aecc9cb48ef4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6a8fde4-4e4e-4729-8890-5f61674b4b6b"
        },
        "item": {
          "id": "761301c3-741a-4f2c-9b86-8def4564316a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6620ab06-be1e-480d-b867-1b8cf87dae30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe04c84-1e8f-4063-b5d9-86b03bf8dbfb",
        "cursor": {
          "ref": "3676bf5b-3b93-40a1-ab0d-83cd70d30b98",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4dc90ce5-172e-45c1-b147-690de2b25d8b"
        },
        "item": {
          "id": "ebe04c84-1e8f-4063-b5d9-86b03bf8dbfb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7de6b6ba-fcaa-4c89-885b-f58f2f2d7b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c88485c-84d1-4905-adff-813e19efaa41",
        "cursor": {
          "ref": "53346ae8-55e3-4b11-93ec-6fc75bec8d4d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6b6e97f0-80a5-4fdb-a559-662e67497390"
        },
        "item": {
          "id": "3c88485c-84d1-4905-adff-813e19efaa41",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4f690d72-557d-48c4-8cb9-7f8f35144a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0e2afa-5f33-4a3f-b76f-26e221494cb2",
        "cursor": {
          "ref": "a9b7af4d-f0ff-4acd-ae70-df74e19da4ab",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "45bb0eb3-113b-46e9-a66f-88621aa5c018"
        },
        "item": {
          "id": "af0e2afa-5f33-4a3f-b76f-26e221494cb2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "35c0f757-7cca-4fba-906f-ab7872b21572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04dc49f3-559f-4abe-a9d9-0dc0ec41591d",
        "cursor": {
          "ref": "d87bcdec-026f-41c4-85b1-2c089acb7a8a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c883850a-ee10-4913-959f-8be2bd030605"
        },
        "item": {
          "id": "04dc49f3-559f-4abe-a9d9-0dc0ec41591d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "744c92af-c4f4-4af9-bb7e-3822c5652755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc6a74b-e86e-44ff-9b63-9b9fa2e91d6e",
        "cursor": {
          "ref": "37cffef0-c417-450d-8cbd-0d68308bb420",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb99c6cd-d85e-4c40-bd63-c36b8c9659b3"
        },
        "item": {
          "id": "5cc6a74b-e86e-44ff-9b63-9b9fa2e91d6e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fd20cfeb-e121-4008-ac86-887d7eebc70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aabe050-d6b9-434b-bb27-e4f7f3f43e85",
        "cursor": {
          "ref": "b791f394-033c-4e20-a497-af97b5f4052c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bf586528-8605-4806-98c5-41bc35f6271a"
        },
        "item": {
          "id": "0aabe050-d6b9-434b-bb27-e4f7f3f43e85",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25cc52b1-c3e2-445e-a20e-c8d89cc37471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e171a92d-0a19-474f-80fb-b52a4a7b0adf",
        "cursor": {
          "ref": "3a7081a8-a721-4dd9-9ef9-a24713b83917",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8ea10c83-a969-4290-91be-b1f05223fc6b"
        },
        "item": {
          "id": "e171a92d-0a19-474f-80fb-b52a4a7b0adf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6cce5375-e745-43f2-8f30-896587f98e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42066903-31c3-4e20-b901-dcac8d57a34f",
        "cursor": {
          "ref": "f6f6fe23-d841-4fbc-8d6b-ca48bb19dc08",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6bc30b11-4f0f-4b2c-87a5-cb21461038ed"
        },
        "item": {
          "id": "42066903-31c3-4e20-b901-dcac8d57a34f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fc90ace9-45f0-4996-be99-ef6a3c1fc930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3944f09-ec3e-4097-b1be-f23613d80f42",
        "cursor": {
          "ref": "ef2211ff-f7a8-41c4-a47e-c5ea9bdf9a36",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8cb452f4-f316-48e8-9272-7a7af495c336"
        },
        "item": {
          "id": "e3944f09-ec3e-4097-b1be-f23613d80f42",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b7d828c6-df22-4556-a67a-70dc9bc0b448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de48399f-f06b-4a16-b59c-925a38dc0263",
        "cursor": {
          "ref": "e408748a-5ee7-4b71-a9c3-ee50cfd0f020",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "75c4d3da-a4e6-4a67-8a37-50b14e532049"
        },
        "item": {
          "id": "de48399f-f06b-4a16-b59c-925a38dc0263",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "483b2753-1164-4176-b95b-68aed1518469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1e7a90-2a18-4e50-870f-37a4ad387125",
        "cursor": {
          "ref": "88346c27-0625-4a75-ab5a-ca6911b614b9",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e1297231-3ecd-4765-9df5-36b3a7526ae4"
        },
        "item": {
          "id": "fd1e7a90-2a18-4e50-870f-37a4ad387125",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6bc57e6e-a0d9-4df2-96ce-e9046b5171ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90507fc-4667-4232-8cbb-1fc9bd2c6c6b",
        "cursor": {
          "ref": "03e3c629-1270-442d-b65c-60dd88de84d2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dc40a0e5-f56e-490d-8c90-15c2df778af7"
        },
        "item": {
          "id": "a90507fc-4667-4232-8cbb-1fc9bd2c6c6b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7eb816a6-e777-4d27-834a-62f55d550b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce85e071-4a6c-48a5-ba88-30eb74c1acaf",
        "cursor": {
          "ref": "3f90d034-af58-4501-a674-8cf6dc0535fb",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "38fe376f-0d53-4855-a2cf-8eb270c5b319"
        },
        "item": {
          "id": "ce85e071-4a6c-48a5-ba88-30eb74c1acaf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b449b024-01ae-4a96-a0f9-5bb877149f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7348ffb-ab26-4762-b057-a90f5c56f960",
        "cursor": {
          "ref": "37392d50-6455-49be-952a-c1ea9ed18751",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "50d626ce-0bff-4888-91c9-640c4cf6e172"
        },
        "item": {
          "id": "f7348ffb-ab26-4762-b057-a90f5c56f960",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ce62e07c-52cb-4cb9-afe5-89c200589aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97731bfa-8933-49bd-aed6-1757dfbf0a35",
        "cursor": {
          "ref": "ebb757ed-c6da-4734-8b44-d4dd9a970d36",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c4ff7515-9670-4698-a496-7ac78cc0ad15"
        },
        "item": {
          "id": "97731bfa-8933-49bd-aed6-1757dfbf0a35",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "14398df4-7862-4d17-bd93-87d872ceac94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f8c02f-5df7-4733-9081-4327ba9ba71e",
        "cursor": {
          "ref": "335ce06e-a363-4236-8730-0ca2e8a1498e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a312305-6219-459c-b46b-3b19b1ecb057"
        },
        "item": {
          "id": "a6f8c02f-5df7-4733-9081-4327ba9ba71e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8ed193ca-763f-4dda-8c13-5c2038b5f2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca990213-d9ee-46c0-9a5d-6cb8d5b87bf0",
        "cursor": {
          "ref": "3f44dc29-ec94-46f2-b9a9-468326f09f79",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f530bc4f-86a8-4834-af4d-0186aa8c615b"
        },
        "item": {
          "id": "ca990213-d9ee-46c0-9a5d-6cb8d5b87bf0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "edfb16af-c926-4469-9e09-cbdcc03b5ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46d7cfc-5389-4efd-9d53-0b0e5348cb45",
        "cursor": {
          "ref": "a4112921-0517-4202-9123-177c24acce60",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1ac7489d-8416-484b-bef0-b0c518505be4"
        },
        "item": {
          "id": "c46d7cfc-5389-4efd-9d53-0b0e5348cb45",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2562711e-6340-4191-b5f8-533cc4909503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a61cb4c-5e6e-4b8d-a16a-6b93a1b05002",
        "cursor": {
          "ref": "f8028c75-b4a4-4f48-9013-999fb04af3fc",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "45abb75c-5c49-4ccc-a678-54a3ea288db4"
        },
        "item": {
          "id": "6a61cb4c-5e6e-4b8d-a16a-6b93a1b05002",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e39a3d2f-ac99-4ee9-b320-c9bad4b29c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b6f391-aa90-4ad6-aecc-d5c64d19750b",
        "cursor": {
          "ref": "f2e7e970-306c-49c0-b00c-ee15ba86eacc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1061620d-9238-4d4e-afc0-0d0d893c387b"
        },
        "item": {
          "id": "b4b6f391-aa90-4ad6-aecc-d5c64d19750b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "af37e357-1184-4c71-9384-ee9142ba80e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bccf72e-1050-46a5-8370-f44c6a7e0db4",
        "cursor": {
          "ref": "8dacd9fb-5960-4310-9365-37276ed128d2",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7ddae77a-8f57-41a6-91ef-55b099492ab3"
        },
        "item": {
          "id": "7bccf72e-1050-46a5-8370-f44c6a7e0db4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "72a17d10-27b5-41e4-bac4-2e0b44564f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffec5488-7252-47ad-8213-034caa17bef6",
        "cursor": {
          "ref": "c4b8cc5a-2cce-4d82-9ee5-5e7e98bf92a9",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a27ac4cb-ea2a-453b-9db1-92a27f9a71f1"
        },
        "item": {
          "id": "ffec5488-7252-47ad-8213-034caa17bef6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b99f9ea5-4ed1-478f-8f24-232945d21943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3663cd6c-ee5f-4381-b685-6ab53d8a9c56",
        "cursor": {
          "ref": "be9218f6-eef7-4c01-8d84-bd787246455d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "59b31cae-e6e9-41a4-b57b-bbcb68ca4dfd"
        },
        "item": {
          "id": "3663cd6c-ee5f-4381-b685-6ab53d8a9c56",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9bb7729e-71f2-483f-a228-50478d586bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9fb091-82de-4036-8ba7-45bab5d7c849",
        "cursor": {
          "ref": "6780844d-d918-496d-bd73-36c674c3f1ef",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "28b66ea0-5812-4027-8354-c544c2a003c6"
        },
        "item": {
          "id": "bb9fb091-82de-4036-8ba7-45bab5d7c849",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ee7b2522-5572-41f7-a6d6-c858cd137f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa06c1aa-2a9a-4f49-bf1d-aeef0ac00d53",
        "cursor": {
          "ref": "a32bf37a-4dbb-425a-82dc-bd95f3919529",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "15ba5841-55f8-4bfb-9588-d81e7f6bfe63"
        },
        "item": {
          "id": "fa06c1aa-2a9a-4f49-bf1d-aeef0ac00d53",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca759d76-2d0b-413a-8f99-f2af76f6b050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f45e2a0-72e1-4ca1-9cd9-6b9f97e35bf5",
        "cursor": {
          "ref": "525f5384-8408-4199-aa0d-8cc50bcffa3c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5f4325de-01a9-49f3-85d2-bc2ef62c411e"
        },
        "item": {
          "id": "7f45e2a0-72e1-4ca1-9cd9-6b9f97e35bf5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5b4aa244-343b-457b-aff5-7305889c3bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df733687-eca0-40af-b8a2-ec795fc14dcf",
        "cursor": {
          "ref": "3751913e-71b0-407c-890f-6690442e1b5d",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a93528e2-f9c2-4369-be76-4a7fa07b28a2"
        },
        "item": {
          "id": "df733687-eca0-40af-b8a2-ec795fc14dcf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1c964432-317a-49c6-b4f8-72cdc532e24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1237a6-8026-48f3-8882-e12b587c6f96",
        "cursor": {
          "ref": "500bf89b-373d-4b6b-b860-afba03e5a68b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6256b9dd-f4b2-4a52-a377-f074e60038fc"
        },
        "item": {
          "id": "8c1237a6-8026-48f3-8882-e12b587c6f96",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "981a772d-12cd-4f5a-b45e-147ad07571bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833e1bfb-5856-4f0b-b080-728e71629831",
        "cursor": {
          "ref": "067fa43e-6ddd-470f-b802-80f93f4e36d3",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3ea468b9-f6b7-46ea-bb07-f7a705f79ea2"
        },
        "item": {
          "id": "833e1bfb-5856-4f0b-b080-728e71629831",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a60764bf-598f-4e21-bae2-f3d6493f30e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa34c40-3cf0-4f51-bd96-a5461be7db0a",
        "cursor": {
          "ref": "25921b25-67ef-4272-9d38-b9c73a312a5e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "40a1793c-7370-4898-82f7-571a700617b9"
        },
        "item": {
          "id": "2fa34c40-3cf0-4f51-bd96-a5461be7db0a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "176884f8-47f5-41e1-9bf9-db79fa30e303",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ef0c9edc-12b5-429f-acd4-1b505e23519d",
        "cursor": {
          "ref": "1b5e9d13-fc1c-403c-8c29-93c4f4cb56dc",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3e3a242-6620-4582-bf24-daa47d0d51c3"
        },
        "item": {
          "id": "ef0c9edc-12b5-429f-acd4-1b505e23519d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "64aa06b4-6e6d-4d1f-9398-d0b583c1534e",
          "status": "Created",
          "code": 201,
          "responseTime": 2043,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "870fe132-7e72-4733-a0cd-e4ea01fc8170",
        "cursor": {
          "ref": "0bda8692-60f4-4933-8bf3-28f083015d16",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "164f43e5-c1b2-4379-8cd1-cfbae528a700"
        },
        "item": {
          "id": "870fe132-7e72-4733-a0cd-e4ea01fc8170",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af19808d-0eed-4e78-85e1-338daed3756e",
          "status": "Created",
          "code": 201,
          "responseTime": 2484,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "22046c28-06a7-4468-a463-e48f5122dc98",
        "cursor": {
          "ref": "70398241-726b-4428-8f1a-8dfbdfb6fc8e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e4b008ec-2cf0-4c93-91b2-e1f41500f6d9"
        },
        "item": {
          "id": "22046c28-06a7-4468-a463-e48f5122dc98",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "307cee59-9f97-4d20-bb6c-71eaea685cd3",
          "status": "Created",
          "code": 201,
          "responseTime": 2773,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "314cb282-60c0-44c4-9133-adf460d00087",
        "cursor": {
          "ref": "3f9917ed-d135-43e8-92a1-43cdf3cf82fa",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "022bd085-3d7e-4ff6-9a02-43a7df56838d"
        },
        "item": {
          "id": "314cb282-60c0-44c4-9133-adf460d00087",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "531e00e4-d483-4b52-ab8c-94515432624c",
          "status": "Created",
          "code": 201,
          "responseTime": 3405,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47742b7-1e8e-4475-a81a-b907dc4df399",
        "cursor": {
          "ref": "857b972f-1738-4f2b-91bd-0d735381667c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bbb62521-9c9a-4a23-b14a-c7f7f25858a1"
        },
        "item": {
          "id": "d47742b7-1e8e-4475-a81a-b907dc4df399",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5a99f8e3-1d62-412a-bcfd-4a9c38d306f0",
          "status": "Created",
          "code": 201,
          "responseTime": 2928,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-11T00:37:08Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-11T00:37:08Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "781afd0a-3198-4afa-b938-b7dea8b353af",
        "cursor": {
          "ref": "24796f8a-3200-4974-a745-090acbf054a8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f90d94db-fccc-471e-ab1a-34b825596402"
        },
        "item": {
          "id": "781afd0a-3198-4afa-b938-b7dea8b353af",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1ea49a38-91a9-44da-9106-7b77a04886ec",
          "status": "Created",
          "code": 201,
          "responseTime": 2605,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec17a6b-9946-4bc2-8b32-93175dbce6db",
        "cursor": {
          "ref": "afb64c3f-a471-43e2-96da-f9c170c760c6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7f776cad-04e9-4b2f-8ff0-850931b1c063"
        },
        "item": {
          "id": "1ec17a6b-9946-4bc2-8b32-93175dbce6db",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e194ae8c-e427-4e88-9e25-d7a281799183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec17a6b-9946-4bc2-8b32-93175dbce6db",
        "cursor": {
          "ref": "afb64c3f-a471-43e2-96da-f9c170c760c6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7f776cad-04e9-4b2f-8ff0-850931b1c063"
        },
        "item": {
          "id": "1ec17a6b-9946-4bc2-8b32-93175dbce6db",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e194ae8c-e427-4e88-9e25-d7a281799183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4fe732-7efe-400a-8129-59cda25e9334",
        "cursor": {
          "ref": "6bfa7c63-5920-4b09-b5f4-4238346bfb89",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "090246b0-cd97-46d4-9d8b-bc7a32cf7a8a"
        },
        "item": {
          "id": "4b4fe732-7efe-400a-8129-59cda25e9334",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98f37f2c-a5ed-440d-8b5a-652437be8d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026f362b-aeab-4e7b-969b-43f796eba066",
        "cursor": {
          "ref": "a702e519-a270-4f87-b6e1-8e3c2c18de6e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "80dd05d1-b484-4b93-81db-686b817a1963"
        },
        "item": {
          "id": "026f362b-aeab-4e7b-969b-43f796eba066",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eb4289dd-bae1-4a95-a26b-ec91e29d6db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959ca3b9-fff3-40a9-a119-0ecac46eeeac",
        "cursor": {
          "ref": "256d11b1-a26c-4947-816f-175ebfb29b72",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "60e4a210-6f54-4277-92e0-055a7be6e8b5"
        },
        "item": {
          "id": "959ca3b9-fff3-40a9-a119-0ecac46eeeac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab6e16c2-e06f-4a64-a261-6f431c3d9ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eee0bf-f005-4975-a843-43af9d66bfbd",
        "cursor": {
          "ref": "bfbc23b1-57c7-4c2e-8ef9-c17ba8a5bb56",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4a9ddc6b-f9ae-4aee-9e8c-af60c365f1e4"
        },
        "item": {
          "id": "26eee0bf-f005-4975-a843-43af9d66bfbd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ebc9c151-2627-498a-b946-4c1b73bdbc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ba05d1-33e5-4220-92dd-ffa5b33f473e",
        "cursor": {
          "ref": "014f392f-9c0f-4093-be61-fdaa5cf90666",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "78a2d4cc-9a34-4f3a-9112-d973b538f114"
        },
        "item": {
          "id": "d0ba05d1-33e5-4220-92dd-ffa5b33f473e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e4db6a80-8a83-4576-92d9-8cfd184bd7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5cd417-acde-4f40-bda6-407c2995ff39",
        "cursor": {
          "ref": "f7736c31-f14e-43cf-8f16-4d1a5bf5d6ef",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2aea693b-9440-43a6-8093-c8e0ea982c50"
        },
        "item": {
          "id": "de5cd417-acde-4f40-bda6-407c2995ff39",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1625fec5-e7f6-458f-88f4-78a31878bd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a521a171-3cef-4de9-b55a-cad476a5fbd8",
        "cursor": {
          "ref": "50214abe-b389-4bfd-884f-878bfde9b1e5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7ba52100-47c2-41b5-9e52-deecf1c6b7bd"
        },
        "item": {
          "id": "a521a171-3cef-4de9-b55a-cad476a5fbd8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3df9ae3e-d348-4e28-a8d9-f64dac62329c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87abf746-dc0f-4e17-9588-190ea746df81",
        "cursor": {
          "ref": "c2f2a25a-f415-455c-a7db-486bcd62c6f1",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8fd52035-6585-45f4-aed7-79ec4feef3bf"
        },
        "item": {
          "id": "87abf746-dc0f-4e17-9588-190ea746df81",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9c6ea3ba-57cc-470f-9421-a6e547f46dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced0dfac-cbdb-4ef6-a835-403f98b188d9",
        "cursor": {
          "ref": "1faa4b9d-5f82-435b-bba5-c93bfd6cdc28",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4f9a7e6b-4978-4c6c-8d86-60af5055c2fc"
        },
        "item": {
          "id": "ced0dfac-cbdb-4ef6-a835-403f98b188d9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89f613f5-0146-4300-9e58-12f5cbcf2000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaca1913-6683-4ce7-ae9a-7097467eb3ea",
        "cursor": {
          "ref": "7b8d7298-ecda-4c28-b617-d8e9e094b9d4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4238f4c8-72e0-4385-bf31-f4f15bd8357e"
        },
        "item": {
          "id": "aaca1913-6683-4ce7-ae9a-7097467eb3ea",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fe960b5-4e5e-47a0-9a59-237c18ab5a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184685ae-f529-410a-85d5-435634118adb",
        "cursor": {
          "ref": "8fbb6b6c-e78d-4b10-b7fe-f5ce57c342a8",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2ceff439-a8ab-4796-9ac1-289b0f27fa42"
        },
        "item": {
          "id": "184685ae-f529-410a-85d5-435634118adb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eec3b939-f315-4a72-ba57-ce91e4135f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c616bb-8e48-43e7-9341-b78e0b1162cc",
        "cursor": {
          "ref": "e255ac5a-153d-4c80-b3bf-a5435447a02f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8cb2cf03-96df-4926-a4ed-0b1cae1c947d"
        },
        "item": {
          "id": "70c616bb-8e48-43e7-9341-b78e0b1162cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dfb7f0f1-cdf8-45b9-93d4-8ab9948b7446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517e632b-1f37-4112-ae29-dbec7165445e",
        "cursor": {
          "ref": "610ee5cd-0542-449a-9659-ab954104e128",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7d51c4f5-ae05-4d43-b39c-580be0dcb7ad"
        },
        "item": {
          "id": "517e632b-1f37-4112-ae29-dbec7165445e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b0a0e67-67aa-49b6-b11a-71d2e4c96f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d253eb98-e0d4-4ac3-989f-4f44226e137b",
        "cursor": {
          "ref": "72f7587e-bf5e-4372-81c1-b553d3ac39cd",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cb0827fa-846a-42df-a92e-fcb2d1eebc21"
        },
        "item": {
          "id": "d253eb98-e0d4-4ac3-989f-4f44226e137b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35d93233-b86d-4cf1-9c40-758341f15868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a1df2d-4719-4df8-8f6c-c78c8c9551aa",
        "cursor": {
          "ref": "37f8ad29-ad9c-4fe6-95d9-1320fdabc547",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "30b8e25e-5431-4246-9868-187e9e934cf6"
        },
        "item": {
          "id": "86a1df2d-4719-4df8-8f6c-c78c8c9551aa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ed14c330-3d91-4ab0-ad2c-7252eb3d0517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652d07c5-f119-4d69-95ad-35dc9af3fc8c",
        "cursor": {
          "ref": "9269ffde-6d81-4d09-ba3a-755464f1c0e6",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e036b64f-aa4a-4b37-b209-d51be64ae372"
        },
        "item": {
          "id": "652d07c5-f119-4d69-95ad-35dc9af3fc8c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c71bfee2-2a63-442a-a50f-a47cf77b0a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cddd24-4cc9-4b48-8f52-322d3d97b50b",
        "cursor": {
          "ref": "ea85eda4-9c25-4a39-9495-20dec8a09bb3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "767d2790-1b5d-4d46-81f2-5dd6b772188c"
        },
        "item": {
          "id": "49cddd24-4cc9-4b48-8f52-322d3d97b50b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23f07c0b-8694-41f8-8a0c-bb7c7b24e65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767c8329-e7a1-4893-bbee-546cec066c3a",
        "cursor": {
          "ref": "bdc742ad-0bd2-4bdb-8f7a-10dc28097221",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e6b346b1-f9a1-41c1-8f25-55aeaaec043c"
        },
        "item": {
          "id": "767c8329-e7a1-4893-bbee-546cec066c3a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c4bcc376-f9ec-4cb1-8b6b-42de5b38f771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5a0858-f6b9-4019-8875-5da2b79da1bd",
        "cursor": {
          "ref": "720ca3b5-3a61-4dd5-83f9-41ba12a578f3",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "265942d7-0253-4bc2-a79b-dd86f863a529"
        },
        "item": {
          "id": "cf5a0858-f6b9-4019-8875-5da2b79da1bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "84ec7e22-911e-4c9b-b794-fff30c9d9bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467df979-7a76-4f17-b145-9d6774aa78ee",
        "cursor": {
          "ref": "afe5f901-b704-4324-9b2d-ccbafb75ab5a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d2eb7118-793c-4031-a4db-c228f33499e7"
        },
        "item": {
          "id": "467df979-7a76-4f17-b145-9d6774aa78ee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "60b410ef-a06c-4b9a-b14e-23685b5370be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f34a0c0-122e-4a12-b9a8-915840bf9972",
        "cursor": {
          "ref": "6443bb9c-0bc4-4972-814b-64716c738d2a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c760eddb-8024-4448-bd61-91df3f0d0da6"
        },
        "item": {
          "id": "6f34a0c0-122e-4a12-b9a8-915840bf9972",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "07887bb0-3eaa-4bfb-ae44-5060a06e29d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f065df01-d296-473a-b4bf-7769be9a9569",
        "cursor": {
          "ref": "f8a3e3a9-8fd8-4102-9b36-c208d663697f",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "35f2d525-1aab-4f51-8170-20d3940de837"
        },
        "item": {
          "id": "f065df01-d296-473a-b4bf-7769be9a9569",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cf40a078-1624-4077-8cb5-753fe337cffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcbb757-08ad-46cd-93cc-249e6ce396cb",
        "cursor": {
          "ref": "804f40d0-3447-4f1d-a934-076d180755b3",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0f9cedcb-933c-4f77-a6ab-87cbcdfad002"
        },
        "item": {
          "id": "7fcbb757-08ad-46cd-93cc-249e6ce396cb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "01a4616b-110f-4f8d-82b0-f5db76bd2389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaeea41e-557a-40c5-8888-dbfbc1a81df2",
        "cursor": {
          "ref": "b6fac7af-58da-4f95-a029-3680a1331870",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "41bd33c8-f359-4241-abdf-edfe506a6db6"
        },
        "item": {
          "id": "aaeea41e-557a-40c5-8888-dbfbc1a81df2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "639c7ff1-fd75-40f4-bd38-ae832bfdb6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec10414-c8c4-4945-b6dc-af4bb6e5c896",
        "cursor": {
          "ref": "90d2bc24-a545-4293-978f-4bbbd44182ff",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ded205bf-18ca-46a9-b805-9808532623c3"
        },
        "item": {
          "id": "6ec10414-c8c4-4945-b6dc-af4bb6e5c896",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a45d3a06-88a6-4ca3-a85d-42754a152527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d961e4-0153-49a8-92b6-9bc35ca4757d",
        "cursor": {
          "ref": "c6b462e1-b7e2-4491-bc1d-a1ef7fb589e7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f8a029b0-151d-47de-a09c-effa152e2f52"
        },
        "item": {
          "id": "46d961e4-0153-49a8-92b6-9bc35ca4757d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "755bddd3-471c-411f-a0ee-84eb2fc94e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce070eb-2856-40b7-b2d5-a7590612ab8b",
        "cursor": {
          "ref": "c9c99d8b-becd-4909-a09f-cf484d815768",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "197e0615-727c-4fe7-ab14-11c6f2423034"
        },
        "item": {
          "id": "6ce070eb-2856-40b7-b2d5-a7590612ab8b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7083db05-e6a7-4571-b25a-02b90a841959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3180d-9cea-4289-ad4a-bd838c567e4e",
        "cursor": {
          "ref": "e10e2540-e5d9-4f38-bf0b-16793a00a871",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "219652bd-906d-45e1-b688-8790c037c75a"
        },
        "item": {
          "id": "c2e3180d-9cea-4289-ad4a-bd838c567e4e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9cb4e29-8dbe-4900-abee-f740fe0f9633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb556519-cda1-4c4b-85ee-97217a867b06",
        "cursor": {
          "ref": "da2ad722-1e99-4215-81b9-3084121fec64",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fd9d0f36-3cb7-407d-9a93-ac2b5c65d49b"
        },
        "item": {
          "id": "eb556519-cda1-4c4b-85ee-97217a867b06",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e97f96f8-e3cd-44c3-96a5-414466d3c5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63248a5d-1e8c-4eba-b045-d9b65678b03d",
        "cursor": {
          "ref": "7187bda3-0b01-4695-9c6d-9477d1ac3b0d",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a295f901-d4bb-4393-b670-05ef297d9ef3"
        },
        "item": {
          "id": "63248a5d-1e8c-4eba-b045-d9b65678b03d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "11372f3d-d34d-449f-982f-c18839f8349d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def1b2fd-2752-4f1f-b857-543ad8501b7e",
        "cursor": {
          "ref": "fa487c23-de30-40ca-8960-bc2d3ebfde96",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "748411b7-6b9a-4a03-8cd9-653165740558"
        },
        "item": {
          "id": "def1b2fd-2752-4f1f-b857-543ad8501b7e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "25187774-786e-4caa-8762-5f992ca2aa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973fbfd8-5845-4294-8528-2a2e2d483d3f",
        "cursor": {
          "ref": "d051f6eb-abe6-4a67-9c8d-e047f09755c5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2ea5ea40-5148-4b5f-9e69-7b61f6d10fcd"
        },
        "item": {
          "id": "973fbfd8-5845-4294-8528-2a2e2d483d3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "451dbe50-d9e4-4370-9776-f60f44cbd525",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ddb3deac-2f92-45d1-80c6-4198230605ee",
        "cursor": {
          "ref": "c16a0912-fc55-4b8e-9d13-f3c94794eb0a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a6606f8d-4ab1-4cc9-8e12-767b1b6ce1fa"
        },
        "item": {
          "id": "ddb3deac-2f92-45d1-80c6-4198230605ee",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6aba6485-1864-41fc-9bac-9fd37f02f057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f2f880fc-d67c-4142-8f7e-e442c0c5b2d1",
        "cursor": {
          "ref": "3a7223d4-f173-47fa-933d-95ad8224cc60",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b66b10c8-869f-4400-915a-970791f589a2"
        },
        "item": {
          "id": "f2f880fc-d67c-4142-8f7e-e442c0c5b2d1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a171bc16-a786-4706-aac3-d36cf6f6e3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f880fc-d67c-4142-8f7e-e442c0c5b2d1",
        "cursor": {
          "ref": "3a7223d4-f173-47fa-933d-95ad8224cc60",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b66b10c8-869f-4400-915a-970791f589a2"
        },
        "item": {
          "id": "f2f880fc-d67c-4142-8f7e-e442c0c5b2d1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a171bc16-a786-4706-aac3-d36cf6f6e3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b03055c-967f-41e7-9723-eda5520be7a8",
        "cursor": {
          "ref": "e67ea647-ea1b-45fd-9808-5dfb651ce0e2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86cfa814-5653-411d-a863-e420aec24699"
        },
        "item": {
          "id": "4b03055c-967f-41e7-9723-eda5520be7a8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d4c99ff6-ef37-489c-8c31-d99c0b04c7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1148f6a5-6808-4701-9fea-c76715e4a573",
        "cursor": {
          "ref": "2543da5c-d660-427c-8034-0d2bb0b50f17",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "694839b5-4252-42fa-8dde-c7c287569605"
        },
        "item": {
          "id": "1148f6a5-6808-4701-9fea-c76715e4a573",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "acaf96f9-0a45-4043-9c7c-089210cef097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b642542-e6c5-4ea0-bac3-2495853003cc",
        "cursor": {
          "ref": "55f2dc59-d96a-432c-a125-a5ed5125ba36",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f4845ed3-a0ab-4fa9-b9d4-8c6f5d485552"
        },
        "item": {
          "id": "5b642542-e6c5-4ea0-bac3-2495853003cc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "643c86f1-751c-4538-b884-a6530a4f5dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cba376e-cf22-4fbd-ab67-490e1917898d",
        "cursor": {
          "ref": "8ee11efa-0b66-4021-aa96-040d1ec4caf4",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "74b71140-30bf-4e06-a8d7-c205710071b4"
        },
        "item": {
          "id": "1cba376e-cf22-4fbd-ab67-490e1917898d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1799c4e1-60cc-4815-a329-864555764875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7ea9fa-06d5-44dd-8d8e-ef8e8a807594",
        "cursor": {
          "ref": "01413caa-c4de-4376-b29e-d9dd4be0d9e5",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "18bb6486-8d9a-4896-aa2e-c95b57a2343e"
        },
        "item": {
          "id": "5d7ea9fa-06d5-44dd-8d8e-ef8e8a807594",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5451e02d-20d1-48be-8df9-84e90ff83252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4cdd3a-4218-4903-8511-fc153eac6f98",
        "cursor": {
          "ref": "3c4951c5-ac0f-481e-a1dc-e972168ba823",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5f7faf16-ede4-4b14-8835-4595617f79af"
        },
        "item": {
          "id": "5d4cdd3a-4218-4903-8511-fc153eac6f98",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5339c70e-c5a3-4811-ab80-5514e5dd6e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8e1c37-bff2-40f4-a072-a55a11ad7810",
        "cursor": {
          "ref": "b4efb278-38a5-4d65-8128-f9cf03c9aba0",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bd1a5409-d532-44ba-85c7-30cd29eaacb5"
        },
        "item": {
          "id": "ec8e1c37-bff2-40f4-a072-a55a11ad7810",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4a331a02-1eb0-4e00-89c5-9fda53ce0945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884007a6-5234-4603-8b69-394c267b9310",
        "cursor": {
          "ref": "30b8c0ac-376d-4044-8058-f8a91a988744",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d5f14b8f-8d3d-4091-a5aa-51978605c787"
        },
        "item": {
          "id": "884007a6-5234-4603-8b69-394c267b9310",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6a548fd5-ef99-4ce9-a986-f03b3021c474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d95c68f-7d43-4e58-b672-3124f59d49b3",
        "cursor": {
          "ref": "cc2a7680-b2cb-47f0-ac4e-4ba5ab852eb6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bc39952f-35e6-4eb0-915e-3392bec45399"
        },
        "item": {
          "id": "6d95c68f-7d43-4e58-b672-3124f59d49b3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dc592678-41d8-44c7-ba39-b46d4e4c4171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424b6856-42cf-42e2-8c7e-af1edc9ef3c3",
        "cursor": {
          "ref": "62f092f9-6429-4b3c-a065-41fd9a35d63e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "450ccaa8-ee5f-4885-b6a9-3a8a4b3bd44a"
        },
        "item": {
          "id": "424b6856-42cf-42e2-8c7e-af1edc9ef3c3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9e404150-d665-4f3e-825d-f6393a32befe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31989609-de9a-4597-97c2-b681e3a9036d",
        "cursor": {
          "ref": "573189ef-6134-4506-b437-72b830f3a134",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "acf3dcd0-3cfa-47b5-853c-7582fc42c4a6"
        },
        "item": {
          "id": "31989609-de9a-4597-97c2-b681e3a9036d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f493ab29-b764-4e4d-b4ff-8f92dd0d44f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870d63e0-3aef-48d0-b82b-540e96feeb89",
        "cursor": {
          "ref": "55caa031-08a2-462c-88d9-3cdf8e1c089d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "28f0d18e-e883-4e2f-9498-18e140fd616c"
        },
        "item": {
          "id": "870d63e0-3aef-48d0-b82b-540e96feeb89",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d0f978df-4ff1-49fc-a132-373dfc668650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fae21ab-a156-480f-9945-d15c40b88d08",
        "cursor": {
          "ref": "ac9fbab3-5924-4afa-b4f5-643eb513f402",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "81b2d5fb-e285-4859-8964-b8206657facd"
        },
        "item": {
          "id": "1fae21ab-a156-480f-9945-d15c40b88d08",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "da20e3c3-2fe2-44ab-b97f-5254f8bd5378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d289ff-8e1d-4333-9d99-e5cb12ae6774",
        "cursor": {
          "ref": "c6bce025-2b58-4cbd-a3e1-1020799516b5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "80c7b7da-85c9-4b16-b494-70e34f9312bd"
        },
        "item": {
          "id": "d3d289ff-8e1d-4333-9d99-e5cb12ae6774",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b3e2ef80-46f2-455e-973f-47acad948817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8508993d-7fa9-4302-be8d-aa53678ef6f1",
        "cursor": {
          "ref": "dc05a212-893f-4447-8d19-14d22d950b82",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "973a1988-8a99-4174-bcb5-414e746604b3"
        },
        "item": {
          "id": "8508993d-7fa9-4302-be8d-aa53678ef6f1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7f07c563-a0d1-4b0d-b119-226da1d3cf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2541b5a-96b6-4a7e-9e99-0137a4c300db",
        "cursor": {
          "ref": "c33e9cd3-9646-41b7-9684-85a8ed320f0b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1339cae5-19ba-40c1-8d16-3522b1b40955"
        },
        "item": {
          "id": "a2541b5a-96b6-4a7e-9e99-0137a4c300db",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "daa73792-ce88-40e6-a448-94d32c15128c",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "671638a8-c62b-45fb-a08c-0fdc7a61c8f9",
        "cursor": {
          "ref": "e63ff16b-c44d-4ffc-a288-7c856eb94761",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1480b5b3-7586-4230-b43e-02b9d326fb00"
        },
        "item": {
          "id": "671638a8-c62b-45fb-a08c-0fdc7a61c8f9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "26b2c268-a450-4b85-b4dc-a0dc2dd02190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfc8c11-e91d-4744-a1aa-d19ab843b8dd",
        "cursor": {
          "ref": "c0016e45-346b-484e-a6a8-f305ad9d5a9f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c5a47ce-34cd-43b8-8c19-9736963b388b"
        },
        "item": {
          "id": "acfc8c11-e91d-4744-a1aa-d19ab843b8dd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fb648d22-7117-452e-a51a-61fe6e2f2a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02d0c7f-aa3e-4ab4-945d-af5cfec5344c",
        "cursor": {
          "ref": "e1bbfa86-bac3-411e-be85-18891ac56237",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "23a10f3f-ae4a-409c-93a4-f2e655a21ce8"
        },
        "item": {
          "id": "b02d0c7f-aa3e-4ab4-945d-af5cfec5344c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f9c2ca74-eacf-474b-8e1f-c9cec81882a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc09da2-2225-4ddf-85e3-49750dbf6f4f",
        "cursor": {
          "ref": "d4633c0f-117a-4a56-a1c9-13849b648074",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b1dc933c-f501-42b6-920c-eb593db6964c"
        },
        "item": {
          "id": "fcc09da2-2225-4ddf-85e3-49750dbf6f4f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0b2f5729-6c31-46e2-b3e3-ae13feacd395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82195249-23ec-4f7c-9605-fb140dcb7033",
        "cursor": {
          "ref": "3fed4163-18ae-4c03-9b2c-3e0f70cf27ec",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1b6a3fbc-d344-43f6-b955-232f46938387"
        },
        "item": {
          "id": "82195249-23ec-4f7c-9605-fb140dcb7033",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d38fc81f-5dfc-4123-9bb9-862bfeb754c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d242c59f-baa9-4988-a07b-f51f27f1fe49",
        "cursor": {
          "ref": "d4ff3158-1612-49bf-b55f-cf0e5d3e1c18",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "32835b02-3d1f-4e92-ba36-d05cd96503e4"
        },
        "item": {
          "id": "d242c59f-baa9-4988-a07b-f51f27f1fe49",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d4125fee-4819-4c96-a756-abf39d86ee9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933708ff-f00f-41ff-a03d-1af31315a674",
        "cursor": {
          "ref": "18a4595f-87bf-413a-8efa-b317def9e203",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "861eeab0-2258-4ce6-8cd7-2751a6aa1d2f"
        },
        "item": {
          "id": "933708ff-f00f-41ff-a03d-1af31315a674",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bd52925b-b64e-4333-94c8-bef67d0a6b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d501e3fc-d273-42e6-9ffa-5c153082d56b",
        "cursor": {
          "ref": "9ad1d27f-4768-40df-8b4d-ce521548511a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d539df82-91cc-41ec-9e7c-3d9c999ee2a5"
        },
        "item": {
          "id": "d501e3fc-d273-42e6-9ffa-5c153082d56b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3dd9558d-88c7-4907-b778-31a91e943134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4487ae48-f865-42a8-b257-3c2e384c8ca6",
        "cursor": {
          "ref": "d6d1b263-000d-41ab-916d-570344be2e0b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0f0e219f-1916-4198-9bba-1391142140b8"
        },
        "item": {
          "id": "4487ae48-f865-42a8-b257-3c2e384c8ca6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "42066671-68ae-4aae-af5c-02d02836531b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc13b102-b237-4535-afb9-eb9425c4c84a",
        "cursor": {
          "ref": "927087d0-c3d3-440d-b764-ff3367b8c624",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6e0ead7d-d7d1-4369-b3a8-a6387eaeb7d4"
        },
        "item": {
          "id": "dc13b102-b237-4535-afb9-eb9425c4c84a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a81e740e-fa17-40e0-a735-69b493cce4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a34a63-0f6a-43d2-bdc6-b35f544b37a8",
        "cursor": {
          "ref": "800f14d8-5d46-489a-93d5-22e906c346fc",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "642084bd-81e8-4776-960d-4382d093610f"
        },
        "item": {
          "id": "c5a34a63-0f6a-43d2-bdc6-b35f544b37a8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "646aca3b-9313-4dd7-b932-6147f809e807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d01dff1-86d0-4fe4-9cf8-aa68574f94fa",
        "cursor": {
          "ref": "a6c1530b-bf87-4f8b-85f9-2ae962d61cc1",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b225cea0-ae46-46b6-9595-d807418c250b"
        },
        "item": {
          "id": "2d01dff1-86d0-4fe4-9cf8-aa68574f94fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "980f94e9-3d4d-402d-9452-6356e0ed50a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af8376b-0113-4402-9922-0d4fecf86c06",
        "cursor": {
          "ref": "9e152b3e-6eb0-4607-b018-36efecdede43",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e3a4ffc2-8abb-4663-84fd-7bd6ce0f2f23"
        },
        "item": {
          "id": "8af8376b-0113-4402-9922-0d4fecf86c06",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "252d3ebd-8cb3-4668-b666-22e0c33e9fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124f214a-b218-457f-90b7-fa7d6de7f1db",
        "cursor": {
          "ref": "f8d33f82-6dcd-4f6d-8744-a4cdaad5b43f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "09b9e488-9ee9-40e5-8673-c303b6411810"
        },
        "item": {
          "id": "124f214a-b218-457f-90b7-fa7d6de7f1db",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "714e267e-ceb8-441b-8266-75156bdadd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506f153a-48d9-4343-a309-64e7c1c62850",
        "cursor": {
          "ref": "5f7de819-e3a6-459c-bf44-26c9f127a9d9",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7949e854-8372-40c4-83c9-2c41676b68cf"
        },
        "item": {
          "id": "506f153a-48d9-4343-a309-64e7c1c62850",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d72980bb-d3af-4da7-8be7-e2380517108f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d2ec2b-c758-40b0-9c65-193b0fa86daa",
        "cursor": {
          "ref": "2d42e343-c8d5-4e62-97bf-f23964ef3ae3",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "902d2ca4-6042-4b14-9ebc-30125c0e3658"
        },
        "item": {
          "id": "26d2ec2b-c758-40b0-9c65-193b0fa86daa",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8bc4b75b-a94b-4256-8c2d-f667a8442e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feea0a8c-33d9-4373-9c37-796735c116de",
        "cursor": {
          "ref": "d0e8cd14-77a5-4fea-b0b3-ad999c643828",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "44a90548-dfc9-4db2-97ab-389761f0ddee"
        },
        "item": {
          "id": "feea0a8c-33d9-4373-9c37-796735c116de",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b1074837-bf96-4d40-9b60-5ec643676dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52415f43-0b2f-421a-b741-2a511c8affdb",
        "cursor": {
          "ref": "44f6c3dd-28b1-44e7-9fe1-d22b99c3f085",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f80c37e1-806f-460b-972f-2a3763b05861"
        },
        "item": {
          "id": "52415f43-0b2f-421a-b741-2a511c8affdb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "756d7954-0fb4-44d9-bddc-608b66482cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb53cc0-a422-4a57-ab92-f73a7d1802d8",
        "cursor": {
          "ref": "7e819a0d-70f1-47c5-bad3-cec8f6895496",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "05eaa95d-16f0-440d-be52-8717fdb58458"
        },
        "item": {
          "id": "abb53cc0-a422-4a57-ab92-f73a7d1802d8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "adfba540-37f3-46f1-b180-4cf7a34564df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbde1067-4125-4f7e-b614-e01390ca9c8a",
        "cursor": {
          "ref": "d4c06474-b687-46ee-9857-aca7c7218985",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9cb1efe5-0a84-403a-83dd-ce76415a934d"
        },
        "item": {
          "id": "bbde1067-4125-4f7e-b614-e01390ca9c8a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5d9abc07-0a52-489c-9cb6-a1406ecd4c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22187b8-e3fa-43df-b4d2-08653b2871eb",
        "cursor": {
          "ref": "86fc14ec-fa9d-4ff9-8f97-9cce0fb00cbe",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b117298d-0f4a-41dc-a73d-9bf33fd44c6b"
        },
        "item": {
          "id": "a22187b8-e3fa-43df-b4d2-08653b2871eb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6524038f-54f3-4b9c-aad3-18406808ba6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98de6a0b-d6a7-46ec-a167-87e97f6c0af2",
        "cursor": {
          "ref": "3b794a7b-03b4-42bc-8603-260ba57b1ba2",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "34836750-790e-4085-a80d-dab5d21e4c43"
        },
        "item": {
          "id": "98de6a0b-d6a7-46ec-a167-87e97f6c0af2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f3e7c844-7269-4610-ac98-f26338d79ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80356593-160b-4eb1-ae3e-2a543c52e5bc",
        "cursor": {
          "ref": "12e7f09e-1fca-483e-a6fd-6699838e86f9",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "736f0701-c702-49fe-8650-337341b69405"
        },
        "item": {
          "id": "80356593-160b-4eb1-ae3e-2a543c52e5bc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6cc4e951-d0fe-4223-aca8-9826b198b31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb94274-0442-4937-8f09-19cbdb2fdfbf",
        "cursor": {
          "ref": "405fe680-2347-402a-a194-e50591581b2c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e715574e-10df-4fe1-88fa-fd84fc1fba52"
        },
        "item": {
          "id": "ebb94274-0442-4937-8f09-19cbdb2fdfbf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c6e70965-2946-4c2e-9ffc-38164bae0247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79b6b0e-2a9d-4b84-82c8-f60bed754173",
        "cursor": {
          "ref": "acd0d1c5-27ff-4139-8c54-abdf99a941ce",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7a0a297f-6f21-41bb-9bd1-c5edcb3d9da4"
        },
        "item": {
          "id": "a79b6b0e-2a9d-4b84-82c8-f60bed754173",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0525ec8c-aeba-43f0-ba2f-02ed8ed085b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27650ba4-8c6c-4e70-8989-02a50a16ee33",
        "cursor": {
          "ref": "2080a1a3-4498-4602-8f19-0e12890a53da",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7cfd9f09-2029-4a28-aaa5-4d8fe009f0fe"
        },
        "item": {
          "id": "27650ba4-8c6c-4e70-8989-02a50a16ee33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "132763f1-b9a7-436e-8940-2b839b539268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79c4439-c3b1-4d82-a04b-2fd099d06198",
        "cursor": {
          "ref": "d09d4576-5973-4c7d-8ec7-5676fd9e2708",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e47f5484-c188-4072-a86c-38f469189020"
        },
        "item": {
          "id": "f79c4439-c3b1-4d82-a04b-2fd099d06198",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5bac39f7-a7ad-4a10-9357-46c0a92ad558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694d5afd-876d-42a6-a2f1-363de6be7338",
        "cursor": {
          "ref": "71e3ec9c-5b99-45d5-8c64-a62dd3bcb658",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ee0f6c6b-42c1-46d9-8186-27a8a9d01f8c"
        },
        "item": {
          "id": "694d5afd-876d-42a6-a2f1-363de6be7338",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1daef9be-7c13-4bf4-95de-60b025ba20c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b80540e-505d-4a92-b5a5-9c1fdc034798",
        "cursor": {
          "ref": "3d1abe3b-cbb7-4c03-b022-7b35f93b3aed",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1c3d54c4-668e-4a78-9872-ba93c570915f"
        },
        "item": {
          "id": "6b80540e-505d-4a92-b5a5-9c1fdc034798",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2cfdd84b-f131-4c4e-9ee1-541214fa6650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c608950-ddd4-435a-a689-ae38022119ba",
        "cursor": {
          "ref": "a7e8f323-6839-49c3-b499-ad15e070eba6",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a5380cd2-e699-4702-acaa-06a3cc6e462f"
        },
        "item": {
          "id": "7c608950-ddd4-435a-a689-ae38022119ba",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4ad015a6-62b8-4c94-ab15-1b167f5812de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a7a5e8-4279-4af4-a051-9514ecdbe417",
        "cursor": {
          "ref": "3993b2e4-5d14-4d84-9287-029cc5ffc74d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "22f1b553-8f00-4029-87f9-c18dab4aac69"
        },
        "item": {
          "id": "d8a7a5e8-4279-4af4-a051-9514ecdbe417",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f2a9eb06-b321-4fd8-a78c-1113c46ad4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8ccd14-993f-4fb5-8561-24364b84c4ee",
        "cursor": {
          "ref": "50b44ef2-dc1a-40db-aa9c-4d6bb051ebef",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "67712241-4b51-4d0e-b7ae-683ef4dba89b"
        },
        "item": {
          "id": "9b8ccd14-993f-4fb5-8561-24364b84c4ee",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1abc0d78-7358-4678-8b41-6b735a3afe64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f1112c-8251-4374-87d6-4d8c3ee9063f",
        "cursor": {
          "ref": "1f77a84b-5ede-4285-bbf9-155c35b573cb",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "181c5407-fb70-4474-ab73-ccc59cb5467c"
        },
        "item": {
          "id": "35f1112c-8251-4374-87d6-4d8c3ee9063f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1f080394-cfd7-4a34-a91d-acfe3625210e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa70da2-a81d-46fc-9e66-59c4f99f74df",
        "cursor": {
          "ref": "62f51a6e-0f11-4f64-ace3-7c39290c3a75",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f736e9d0-446d-4872-86c9-e8b5b35b9430"
        },
        "item": {
          "id": "caa70da2-a81d-46fc-9e66-59c4f99f74df",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "44996f21-a813-4bb6-abea-5f871c2451fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae5caa4-1836-4b15-be13-f1eaaed8c2de",
        "cursor": {
          "ref": "60fde255-fcfb-4784-a08f-9adc05e41eeb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3e28f819-afa2-4726-8f13-486216bd49c4"
        },
        "item": {
          "id": "dae5caa4-1836-4b15-be13-f1eaaed8c2de",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "45a443a0-d49d-48e0-9e93-743f5ac6fb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad284a73-83c7-4e3a-a677-99561fca7c83",
        "cursor": {
          "ref": "77d2819a-1b26-4992-8b9a-04d7469b66d2",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b51c1369-69fb-4e12-879e-3d035684dd53"
        },
        "item": {
          "id": "ad284a73-83c7-4e3a-a677-99561fca7c83",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e08d9fc3-b4c0-416e-86b5-df41320da115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2b1417-03cc-474a-aa8f-855e96f1e439",
        "cursor": {
          "ref": "8b81cd3f-509b-4512-b860-cb1f61f9dc27",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3586f162-ad18-4525-a8d6-6d664bff78bb"
        },
        "item": {
          "id": "5e2b1417-03cc-474a-aa8f-855e96f1e439",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "205c0706-7bb9-4971-b4cf-ab03b5c92aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a914f6-09da-4871-b829-2854c2779ab8",
        "cursor": {
          "ref": "141d717f-f8d1-4ad8-b542-79567bf59815",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5eff30fe-7c70-4f65-815c-239a0ec74b2c"
        },
        "item": {
          "id": "40a914f6-09da-4871-b829-2854c2779ab8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2518e9ab-7787-4499-9693-fdc1fcd120d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612e0637-45f4-4be9-a2dd-0451de5142c9",
        "cursor": {
          "ref": "3c29b8fd-85df-4a16-82fd-bfa11a601a95",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1ca5f025-1418-43b2-92f1-801bf786050b"
        },
        "item": {
          "id": "612e0637-45f4-4be9-a2dd-0451de5142c9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "498ba08a-fff9-4a26-9661-688faba57e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc65fb5-56ef-4abb-b9a0-a05d06bd74eb",
        "cursor": {
          "ref": "be6d2929-0cca-4c67-91e6-690e190542b9",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0420dc1f-f09b-45dc-ae45-7d1f49e2ee42"
        },
        "item": {
          "id": "ebc65fb5-56ef-4abb-b9a0-a05d06bd74eb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "74f86af9-223a-465c-a837-64a195e4947a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ae05c0-ed24-43df-81ee-e4715c5a5fbe",
        "cursor": {
          "ref": "a0adebcd-9e5f-4e59-8d9d-916642e3da13",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4a28661b-3318-4d8c-aaba-1a99762d6844"
        },
        "item": {
          "id": "c7ae05c0-ed24-43df-81ee-e4715c5a5fbe",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5951102b-db27-4e89-bee6-025c4ccf2e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc9739d-8e39-4819-9ab2-3cfd7c18187d",
        "cursor": {
          "ref": "e8f3e346-bdde-4679-b6f9-fe1a0fbf41f6",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "acb2653c-3fa5-4b98-9c14-3875f85e8307"
        },
        "item": {
          "id": "0cc9739d-8e39-4819-9ab2-3cfd7c18187d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "57a612ca-2853-40db-8ba8-73c518943c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5221944b-f60d-48fa-9599-e478c870efd1",
        "cursor": {
          "ref": "39e6f4d1-107d-4798-bca4-c70b46c28b11",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8174f238-099f-4f17-bde0-791e7b1d07df"
        },
        "item": {
          "id": "5221944b-f60d-48fa-9599-e478c870efd1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e04056dd-100b-415d-ab6f-5c4332f3caef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80942379-1c41-4838-a45f-e27d1225f228",
        "cursor": {
          "ref": "3c79e809-057e-46f7-bb16-d47238e3a811",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6b20a6fd-a309-48b6-818c-fb9696811fd2"
        },
        "item": {
          "id": "80942379-1c41-4838-a45f-e27d1225f228",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3dc69392-9e4c-4a45-9228-49023ca2a1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5818d7-f521-4ee6-9d9e-93f18dc2a031",
        "cursor": {
          "ref": "61c00e5c-9a71-4a08-bc92-cf0f012817b9",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "14168e40-2b53-4d97-afd8-cf915bf04ac3"
        },
        "item": {
          "id": "7b5818d7-f521-4ee6-9d9e-93f18dc2a031",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "11eb8b27-60de-4657-8810-93ae6fba78de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b55b27-7ed1-4c49-8562-6c1dd1d34cfa",
        "cursor": {
          "ref": "71024652-59fd-4028-90db-2a83e689b4f6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b85052fb-282d-4301-b749-073f4c6bf638"
        },
        "item": {
          "id": "79b55b27-7ed1-4c49-8562-6c1dd1d34cfa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "04b197b6-f4cd-4e6e-8e34-ce316984c969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d86a37-0de3-4ba8-ae02-9f8e3ec222a0",
        "cursor": {
          "ref": "ac71844c-691a-49d4-8a33-e6f4c0ed6694",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "310ff35d-52ff-47f4-ada4-d393a8e58945"
        },
        "item": {
          "id": "90d86a37-0de3-4ba8-ae02-9f8e3ec222a0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b3d21114-94e8-417a-b5f3-cc8548ee78d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39dd819-c823-4e74-88ea-e622be78752f",
        "cursor": {
          "ref": "bac2e3fc-919c-44ab-a638-1056ebd8e8d8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "52327843-60e0-423a-bc52-0c6a0d8750d4"
        },
        "item": {
          "id": "c39dd819-c823-4e74-88ea-e622be78752f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "121dc407-9d3b-480f-8ee4-6e357b8bb571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e7cb56-3a68-477e-88d8-68fbe325cbd2",
        "cursor": {
          "ref": "b4f34bc7-9048-41c0-a142-c88ade971904",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c384150c-349c-4454-ba7c-e1674d8f9565"
        },
        "item": {
          "id": "02e7cb56-3a68-477e-88d8-68fbe325cbd2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "38035dbe-4726-4a34-bf27-23d6d3ee5712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9071fa30-c1e1-481f-8bbc-b950489cc0a3",
        "cursor": {
          "ref": "2db3ef93-b959-44b6-a963-86f69df786a7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0cb2061f-933a-4d5b-ae0a-27aec066521d"
        },
        "item": {
          "id": "9071fa30-c1e1-481f-8bbc-b950489cc0a3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3cd83c4b-11ca-4600-80a4-bdfc5f9a987a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d621bb30-4cc0-460e-a102-98d62d24997d",
        "cursor": {
          "ref": "349cdf06-2a64-4051-b91a-8efecf5257c5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c6f4901c-aab9-4606-9ec7-323e0c151a0e"
        },
        "item": {
          "id": "d621bb30-4cc0-460e-a102-98d62d24997d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d7c8b3a6-b387-4728-b703-811d8c429ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4188489-1ef5-471a-b7d4-467aaaf5a73d",
        "cursor": {
          "ref": "0387e204-1086-4a0b-9c8f-d6934850db80",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "02e7021c-467d-4597-9ce7-c417d651443f"
        },
        "item": {
          "id": "f4188489-1ef5-471a-b7d4-467aaaf5a73d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "52dc3f62-3e00-48fb-a651-39c1eab297a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ade70da-7def-4950-900a-9e43609f898c",
        "cursor": {
          "ref": "2c8228c8-bb82-41b8-9eb9-c706d9ed762f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "faca9957-d445-48d6-b5a6-8ca60154b7b3"
        },
        "item": {
          "id": "2ade70da-7def-4950-900a-9e43609f898c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d03d2b85-1e9a-4ec7-8fba-4a39cc699527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d12093-26fd-4654-9a2b-9eec292267ac",
        "cursor": {
          "ref": "96051b8b-49b4-4500-ad30-413d9a07816a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ca6ec79b-5fbf-430a-bf93-56e572c908ab"
        },
        "item": {
          "id": "d1d12093-26fd-4654-9a2b-9eec292267ac",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e17655f7-4432-4f25-8444-ee90b843e43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da292d26-7608-42bd-90f9-1bb5d3206280",
        "cursor": {
          "ref": "e76e51d5-384e-4395-95e5-91ae3a1e7484",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "da87a233-4d2b-4c75-a588-c686ead95f41"
        },
        "item": {
          "id": "da292d26-7608-42bd-90f9-1bb5d3206280",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8c75c744-aaf8-44f8-af13-91ac504c69fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94b676a-acd7-452a-af3b-9fec77b735e8",
        "cursor": {
          "ref": "49965995-e7f0-42d5-9ed1-ecac83843435",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9ce88bdf-804a-46c3-9af6-6c03edfe1946"
        },
        "item": {
          "id": "e94b676a-acd7-452a-af3b-9fec77b735e8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb40b370-64b2-420b-92d5-1145792da605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdde84a-9ffa-4020-8709-0fb93d01476c",
        "cursor": {
          "ref": "39185a8e-c977-4e63-953c-f0c99908e482",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "755ca2ef-e0b3-49b6-ad82-40e9199194a3"
        },
        "item": {
          "id": "8fdde84a-9ffa-4020-8709-0fb93d01476c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f38f63d6-fe8c-4a0b-866b-0f3f589dcb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5deeb510-7433-4a9e-9085-49fd7d3e5d17",
        "cursor": {
          "ref": "0bfd7dbf-064a-4418-a5be-030883ed11e4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "90e5b86e-48e4-4d4a-b9ce-1f257c8b7514"
        },
        "item": {
          "id": "5deeb510-7433-4a9e-9085-49fd7d3e5d17",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "59a310f5-9902-4a25-bb66-83745a166ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117857b7-0d70-4967-9732-a8e39ac41b7b",
        "cursor": {
          "ref": "585f4156-1bc3-414b-8c26-0fe1845b81ca",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9751b6b4-1d32-4ab3-b1d2-6291afb6d3bd"
        },
        "item": {
          "id": "117857b7-0d70-4967-9732-a8e39ac41b7b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "768d8dfd-eb17-4926-abbf-dd9ca4da3ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d5dad6-0bb0-43a8-a177-9f6570cf80e1",
        "cursor": {
          "ref": "a3912920-6ade-4937-9ac4-f66f84a04143",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7e3dfc60-3596-4c1a-b393-e55100cda168"
        },
        "item": {
          "id": "d2d5dad6-0bb0-43a8-a177-9f6570cf80e1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a2a827d5-0dbd-498e-8eaf-0cf905629e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402108c1-fef5-4ff1-be21-ef104259108a",
        "cursor": {
          "ref": "edb53238-4fcb-4e2f-8d14-885d6e332de6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e00b5d5a-5a8b-4dc0-aa3c-6956ddc688da"
        },
        "item": {
          "id": "402108c1-fef5-4ff1-be21-ef104259108a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b9a0baff-a782-418a-92b6-55d9253b9837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1614047f-b783-48f7-8619-9732acb12b66",
        "cursor": {
          "ref": "76bbbeaa-3c73-4348-a338-8773c09dc935",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "41b439b8-a3d7-4d78-8561-02f58e1d51e0"
        },
        "item": {
          "id": "1614047f-b783-48f7-8619-9732acb12b66",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "03be755c-a713-40aa-be0b-b56f0a2c4cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772e5c1d-e4c1-4346-9589-22d02b3389b2",
        "cursor": {
          "ref": "85340c3d-2e86-49ad-aad1-c2b55e8c7598",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aa2b757b-3659-44d1-a493-332cdbe4bfbe"
        },
        "item": {
          "id": "772e5c1d-e4c1-4346-9589-22d02b3389b2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "12301363-c6d6-4047-9fa1-10e416bf4a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df17d88d-ac56-4602-8c0d-48efa166c002",
        "cursor": {
          "ref": "7e6fc373-b076-421a-964b-7b69744f2756",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0aac368a-57a4-40c2-ab71-7984087d7073"
        },
        "item": {
          "id": "df17d88d-ac56-4602-8c0d-48efa166c002",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "013ff47f-cd32-40be-bf8c-1737358b9ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596245dc-d67f-49f3-a486-b14903a2bfe8",
        "cursor": {
          "ref": "77e34c99-e3ac-4425-a927-0a6dac32da12",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6360811d-dcf8-4364-a684-dc5458de670b"
        },
        "item": {
          "id": "596245dc-d67f-49f3-a486-b14903a2bfe8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cf7ff7d1-2de7-46b4-a35e-e515d251970b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa4f465-f3be-466c-869e-15abbab65056",
        "cursor": {
          "ref": "bad348d4-f65d-4097-b8f7-b2f6d407f271",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "40fca698-2989-48fa-a50a-b66cb945fcc2"
        },
        "item": {
          "id": "cfa4f465-f3be-466c-869e-15abbab65056",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d21cf39a-000d-4d90-8464-1e7b65d17750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932cbddf-61c4-4506-97c0-fd1dffc13f79",
        "cursor": {
          "ref": "29145598-86dc-47e5-95e6-eb9449960b68",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5891b615-37f2-4907-922d-74d0f91d1f43"
        },
        "item": {
          "id": "932cbddf-61c4-4506-97c0-fd1dffc13f79",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "28e033e6-a195-4f0f-addf-e0a0d0b88174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cd03f2-a8d6-49b0-b443-25d85c15bda4",
        "cursor": {
          "ref": "a27e71ff-c322-49c8-8339-c37d0a10c8e1",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "eabfdbfe-f3da-41b3-bb7b-077709efc060"
        },
        "item": {
          "id": "f8cd03f2-a8d6-49b0-b443-25d85c15bda4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "74059270-f7f4-450e-9b32-6966b4e16be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83a91fe-788a-4b6b-bd50-144c3bd9bd5d",
        "cursor": {
          "ref": "93eb0942-317d-4fd2-9d69-9b0798c8c658",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4c47fd53-fe89-4a63-8170-8779291d38db"
        },
        "item": {
          "id": "d83a91fe-788a-4b6b-bd50-144c3bd9bd5d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4ca8749f-3e4c-4faf-8365-82a5acca89c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c75c131-7156-4872-9128-3e805af8c495",
        "cursor": {
          "ref": "44af0dbb-38b0-42ce-b3c4-7ad0bce678c1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0f77a38a-4413-4665-baef-945822c31ae7"
        },
        "item": {
          "id": "2c75c131-7156-4872-9128-3e805af8c495",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1ef8e978-5c3d-4080-9fe1-552ec905d57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab657cc-842b-4a9f-98a8-72a55323a9a9",
        "cursor": {
          "ref": "9ad0804a-b82f-4d2b-9ecc-86fb0442ad6e",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ba4cf0f3-b889-4970-8fd3-4777cadd26f5"
        },
        "item": {
          "id": "0ab657cc-842b-4a9f-98a8-72a55323a9a9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "559dc5a0-c0b9-4364-a4eb-317818573ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccbe7ac-a453-42ec-baea-da5d4f90a95c",
        "cursor": {
          "ref": "4c27932e-cc6f-4ac8-b366-1a6d9a6249aa",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d59c2781-2e17-42b4-ac3c-a7fa70da95c6"
        },
        "item": {
          "id": "eccbe7ac-a453-42ec-baea-da5d4f90a95c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d86ec718-b136-4082-a7b5-50ba5cd5bc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d98b837-96c6-43af-be58-892dbd70850a",
        "cursor": {
          "ref": "1321212e-f06d-4dc8-95ae-c3c87b0457dd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "131aa0ab-fd6b-4c85-9f3f-242209482987"
        },
        "item": {
          "id": "1d98b837-96c6-43af-be58-892dbd70850a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "91d69c9f-56ea-46a4-88c8-7b83357bc9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f9db3b-e644-461d-8ebc-5931d5e071ec",
        "cursor": {
          "ref": "ed2c2656-dfa1-46dd-9dc3-93fe567b1b96",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c741a269-def2-4b21-9510-e6b20dc619d8"
        },
        "item": {
          "id": "b4f9db3b-e644-461d-8ebc-5931d5e071ec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8dab1d2f-3099-4c86-97f4-13b2846c7028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eca03e0-1d33-4dd7-be85-11f6c2b2f7f1",
        "cursor": {
          "ref": "a97f265a-6d36-4a31-9bfd-94b4bac1500a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bf4671ac-a714-4684-bfd0-b0fe047497b0"
        },
        "item": {
          "id": "6eca03e0-1d33-4dd7-be85-11f6c2b2f7f1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "388bde6a-00ef-4fd9-8237-21819cb6c386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9646c3b5-9cfb-444d-81c2-b045cce5342e",
        "cursor": {
          "ref": "d0c3915a-e56b-4d1f-a791-13066344cea7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f259024c-b001-4160-80ad-d0aa08c75ad5"
        },
        "item": {
          "id": "9646c3b5-9cfb-444d-81c2-b045cce5342e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0159a002-6b0e-4a2d-83a8-89434afefe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40208df-5f93-448d-ac8f-d2790a8b9143",
        "cursor": {
          "ref": "ee6839fc-5403-4c76-8a6a-674452adb1c7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "63d5120a-e10d-4038-a794-888d4afb7fc4"
        },
        "item": {
          "id": "c40208df-5f93-448d-ac8f-d2790a8b9143",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6b21a0d7-916a-4973-94c8-c93c8c4aef21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec74158-df76-4977-9a86-dcb228bb5608",
        "cursor": {
          "ref": "507230f9-ebaa-41a9-b4f1-eafad19c6463",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "377d5785-812e-4a80-8e0b-2fd09c25e1fd"
        },
        "item": {
          "id": "0ec74158-df76-4977-9a86-dcb228bb5608",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3f502b2e-38b1-4f28-b866-aef73118949c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb9ac9-8dcc-4741-ba4a-55ae22af7c9a",
        "cursor": {
          "ref": "c70eef08-d7ef-4037-b34c-641f9d0b1dda",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "80cdf127-7415-4c47-981f-91920354aabc"
        },
        "item": {
          "id": "dfbb9ac9-8dcc-4741-ba4a-55ae22af7c9a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e228c1a3-564c-41eb-b59d-f8a592eb2bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0997d2ca-bbc5-4362-953e-fb145f656c78",
        "cursor": {
          "ref": "41388942-5657-4b52-8ae1-248332019ff4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1bb70a73-0cde-4e4e-ba72-e748fe0c07af"
        },
        "item": {
          "id": "0997d2ca-bbc5-4362-953e-fb145f656c78",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "66e3262b-c9dc-4c84-b5b8-6ebb417cf53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a7b23c-16ec-4ce4-ada0-cfa284bcab8f",
        "cursor": {
          "ref": "ebb58086-000e-402b-a1ec-a852129e577f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "48a87230-c4e1-47ec-984e-5026091d2f22"
        },
        "item": {
          "id": "74a7b23c-16ec-4ce4-ada0-cfa284bcab8f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "56db3a05-7817-43ec-b920-becaa2bc490b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "83fd610f-119b-4987-b0a7-f95ee6555d62",
        "cursor": {
          "ref": "af0dc7fa-86ef-4877-b3b2-6a3bcc016c5e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6faa5d66-388e-4c3e-8026-dd81ae8bbd71"
        },
        "item": {
          "id": "83fd610f-119b-4987-b0a7-f95ee6555d62",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3cefe5b7-4630-4276-b343-542584fac861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "41be88fd-7385-419b-af56-e8b33bc9b665",
        "cursor": {
          "ref": "8b7e9eb6-a3e2-4bd2-94dc-b414672c081c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "73868085-7a30-4927-be1c-fe63cb42585f"
        },
        "item": {
          "id": "41be88fd-7385-419b-af56-e8b33bc9b665",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3a4aebb8-64bb-4258-8cf5-be73281d9182",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb39ed7-9b06-4c8a-9860-4429c6539123",
        "cursor": {
          "ref": "41843e06-7397-4a3d-9e65-0da2ccbd1d9f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "137b4eee-4e78-4e33-ab45-3b649af8c958"
        },
        "item": {
          "id": "3eb39ed7-9b06-4c8a-9860-4429c6539123",
          "name": "credentials_verify"
        },
        "response": {
          "id": "585473d0-6199-4e89-90d6-caf1539894eb",
          "status": "OK",
          "code": 200,
          "responseTime": 2498,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89da0ba-3d09-4ba1-86c7-a390939418be",
        "cursor": {
          "ref": "e5fe95d6-6514-406a-851b-2b30b93afc29",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e108dd64-c529-4551-bc50-0b8ed53e88dd"
        },
        "item": {
          "id": "f89da0ba-3d09-4ba1-86c7-a390939418be",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8b4f36a8-43cd-4a1b-a9d2-861edabb956d",
          "status": "OK",
          "code": 200,
          "responseTime": 2667,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
        "cursor": {
          "ref": "1ed273a0-1647-4fde-98a2-6131e2d99ffb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa3b4264-e2d1-41e9-af1e-f404b826c4cb"
        },
        "item": {
          "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2e888488-ebb5-4689-958f-7b83a425f5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
        "cursor": {
          "ref": "1ed273a0-1647-4fde-98a2-6131e2d99ffb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa3b4264-e2d1-41e9-af1e-f404b826c4cb"
        },
        "item": {
          "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2e888488-ebb5-4689-958f-7b83a425f5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
        "cursor": {
          "ref": "1ed273a0-1647-4fde-98a2-6131e2d99ffb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa3b4264-e2d1-41e9-af1e-f404b826c4cb"
        },
        "item": {
          "id": "5d4a3d7d-4f76-4de0-8597-03aeef65597c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2e888488-ebb5-4689-958f-7b83a425f5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "d42ed5e4-b307-428b-83fa-6424a033c0df",
        "cursor": {
          "ref": "0837b67c-2bf5-44c1-bb78-c4f339b725e6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dd4f179a-5b0a-4ec8-9bdc-5d30caf96ac9"
        },
        "item": {
          "id": "d42ed5e4-b307-428b-83fa-6424a033c0df",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d881eee4-f8b7-4dbf-a3de-759a5bd2ae6f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "fe9e205b-5f00-441f-8154-670805fb5c8b",
        "cursor": {
          "ref": "777c514b-8b7a-47e1-b415-fc9adcc9658c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "48da8caf-a739-4ee6-8eed-2c967337ec35"
        },
        "item": {
          "id": "fe9e205b-5f00-441f-8154-670805fb5c8b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2203b50d-3ccf-4c64-b75f-7335e3d1453d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "fe9e205b-5f00-441f-8154-670805fb5c8b",
        "cursor": {
          "ref": "777c514b-8b7a-47e1-b415-fc9adcc9658c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "48da8caf-a739-4ee6-8eed-2c967337ec35"
        },
        "item": {
          "id": "fe9e205b-5f00-441f-8154-670805fb5c8b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2203b50d-3ccf-4c64-b75f-7335e3d1453d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "824836ae-126e-41ef-998e-b329424a90ad",
        "cursor": {
          "ref": "dcef04cb-74cb-444b-a833-05a793c71813",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7955999c-23f7-463a-a5c7-1b41c012e46a"
        },
        "item": {
          "id": "824836ae-126e-41ef-998e-b329424a90ad",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c1400968-cbea-485c-8745-3df23a027863",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 151,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e0ec7f8c-ff07-4cc1-a5ce-8a815b21e3cb",
        "cursor": {
          "ref": "9b8e5389-9f58-4f5f-a372-0b54404a1cf4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0dd1abe9-fc72-4233-987d-d88ecb2a5c79"
        },
        "item": {
          "id": "e0ec7f8c-ff07-4cc1-a5ce-8a815b21e3cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46cafac0-4949-4696-944c-3a8cc0a8d207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e0ec7f8c-ff07-4cc1-a5ce-8a815b21e3cb",
        "cursor": {
          "ref": "9b8e5389-9f58-4f5f-a372-0b54404a1cf4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0dd1abe9-fc72-4233-987d-d88ecb2a5c79"
        },
        "item": {
          "id": "e0ec7f8c-ff07-4cc1-a5ce-8a815b21e3cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46cafac0-4949-4696-944c-3a8cc0a8d207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "011ec895-219d-48c1-8a14-b8dad389ed49",
        "cursor": {
          "ref": "8602f813-f3dc-4979-bb40-f48d39c9c53d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ddd12d5c-7fae-4b9a-b38d-091566fcb58e"
        },
        "item": {
          "id": "011ec895-219d-48c1-8a14-b8dad389ed49",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e59130c9-9425-46c0-afad-fd7859222471",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}