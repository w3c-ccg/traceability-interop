{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6224a858-6385-47e9-a9f5-afff902f497e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09178423-5894-494c-acaf-b0a2ae7544b7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e2f6644-57fc-49b5-8d33-c6478a99116f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dc987cf0-b60b-4776-bda4-04c17ed1d982"
                }
              }
            ]
          },
          {
            "id": "62ff6db4-e6f4-4545-b460-f19bd266cc32",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "041ce177-7649-4ee0-b71a-657b60fcadc7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df9bdc9e-3c0f-47b0-9c75-30de9eb8f53c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4586a7ae-fcf8-4850-8b5a-9b0cd5634aca",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d9dc8f56-de09-457a-b383-abe9a47acb91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a89224c7-1f65-431d-bf99-87c065d554b3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42a9f96a-d513-41b1-8a3c-9975e3fdf049",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f52f39cc-432b-4140-8f57-4910d0b0f57f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1d1c72d-b420-441e-bb25-8b399037b4ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bed70dc2-1d53-47ea-9a06-70487d0a4135"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41f129bd-ef36-4eb2-86c7-5a17040bb3f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b5fbb4e-eeb7-43b2-b663-ae9816f8801c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43d6b98e-7348-45fa-94d4-45e8dd0ffeb0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9d269b9a-ef64-40d4-b4ac-d11d96c509f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6844604-f391-4088-bbf6-738d6066be6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60c594b1-924c-4dc7-98e8-ad99dc2cab94"
            }
          }
        ]
      },
      {
        "id": "ca6dbdb8-2ecd-41cc-aa65-ee101d68c667",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "87d46266-b299-4ca1-87d3-d09339a54a02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff1f5e48-9b36-4baa-aa0a-bcf938ffce30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1135ed9-35c7-4c76-964c-e13983171a8b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414e85bb-eb01-49fd-b4d1-f2442c21eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffbe228c-1cc6-494b-b78f-2dc596117740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1625a8-45cf-4c1d-97dd-b7be3d25fe73",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1193633b-06b4-4b3b-8912-22555b4fd177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9a4c4e7-4e04-4359-9c2c-9490f6c285c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e2d092-7e1f-41c5-9bfd-bf7edbe85a26",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab446f3-ffd3-461f-a133-99f87d9395da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d226b8a6-d1ce-4182-b73d-5c0994cb6b4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "679d6248-29f1-4efb-a9d9-6652ae09b9df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7778db67-5690-4a75-8157-0fa908e0d3cf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b24feba-63a9-40af-b212-fb7f43d2f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a97dd9e9-b08b-4cd2-810a-b125d3af4b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df52332-c1d2-46d4-b38e-0904569a4936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4531ec0-1fde-4182-83f4-404023ca383e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "063302ec-9cd8-410c-8c55-fd35476da954",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18d91c67-f875-49ab-90d7-682fd5d1e6c7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "433d05ea-0405-46b0-92dd-6014d0441705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c26f6f77-5c81-4795-83e0-47c23939f5c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06c3b350-f56d-4d67-a961-b05f7bc41c62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "133a458b-8d8e-4017-9436-f655abd2bd3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddd61daa-4768-4877-a7bc-f128b4bdcdea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc205348-8957-4a32-a759-67ce82356d8f"
            }
          }
        ]
      },
      {
        "id": "6eaab58f-0047-4a7a-9060-53430f127d6c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1aabc518-d266-4c17-853a-184f4d21a5e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "017fe86e-5add-4d93-8b03-eeee87faab46",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bebe4045-a609-4a53-8e66-0711efece29f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b08f402-732c-43d5-baa7-c544a1d3ab77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dfd8e18-425f-4362-a297-5113c6536bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcd0e83-8efe-45c3-aea7-ee58e477dfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eac7c51-dd64-42eb-9eb6-16a2af79af38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d40fdc0-298b-4a7e-b4ae-f51e21bcb925",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7473c46b-9272-4321-8263-1693d2063182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241b9af1-6654-4a35-bb41-d01237031750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80ba5e5-e50a-4e4a-9630-4af3e65099ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bdd60e0-a5f8-4385-8735-bcbb0e34a318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff52cd4-00bf-49bc-b4c1-56c72e32bb29",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2a2bd6-7d28-4b47-a039-c6dd589a6639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab365838-5f1c-4d74-9bce-7bae32b1636e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2371d8-5239-428c-80de-b6771bbaac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58bc3577-3415-47bf-9978-b220207dc585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed018cd-58f2-4a74-a15d-a6fd66f55ace",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e00b6e-a7f1-4b94-821b-0e48f457b5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab7b900-78b9-4669-89dc-be7e1277f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b933d1-45d9-43e1-8da6-1328e54fce6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dc88cf2-44c9-4797-a260-9f5778820f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bff5b9-b03e-4042-b450-b59b6dcbfde8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d052977-3cd8-43c2-8e9f-731dbc1237b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09ab258-51bf-42a6-98cb-cfa3484bd48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e437ecf2-f046-4025-abcb-3f786fcf95db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30a92ddf-f374-45d1-8656-5e2d6bf99a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374381b6-21bc-4b0c-a0ce-329a38739d56",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0d0b0a-396a-440c-882c-82518eaeeccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06420f0-7722-4164-a013-0f3a7365a21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3793088-0e33-451d-94e3-c0758b3fb450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fd6a6bf-c893-4128-8627-3d30727f6746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac96ed8-5c18-4350-851f-f49991d860d1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0294fe-3eb9-4523-bddb-a14f85fb1635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b5da80-dc6f-4ecc-874f-b772bab293bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51090201-8fbc-4ff3-a7a7-caf162859064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "270edcf4-c0d5-42b0-89e9-9ec5ec8adc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183a21a7-16fe-476e-b3fa-9ba80c1fc3fe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb49fbd-df89-4fb5-a764-ecd384f5c2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad17584-ecfd-42e4-88cd-25efbb7ab3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a683df6-1eff-44d6-b1c7-93bd187be172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e592f98-5add-4923-a055-215166c48682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999fa068-8a3b-474b-868b-c2b0dd7120cd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcef0e04-2989-4cdc-af4e-2259619cb5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0abcc01-b617-46c1-aac6-a6acb944b61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716c1b99-c3a1-446d-979c-a7482198b4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fad8697b-3732-4671-859f-07c80001f129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6ff2ee-a92b-4727-ace3-36e797f80135",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c08a75a-2000-444e-804a-a24aef735954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e61089b-7c5c-4435-a343-7e4152bc1532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd66d8fb-a138-46c6-b82a-ffceb54913c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d813b112-773b-491e-a0cf-2cbfb0f7c264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12932f01-0f75-46e6-a9f4-b4ec77fe5ccf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cd1afd-01fc-426e-b3ca-39f7b39ca64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730299dd-98a7-4dfa-86be-3e7707c09b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c907c1-094b-429c-948d-060a435a6e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24f407f9-1339-4c91-aa6c-dc91d0f16781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b614b9-83b9-4a70-90ec-e080f3ce01f4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bab35d9-a5d0-457e-91a5-f84a95d6cdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ddf0b0-4756-44f1-8d6c-77b3e08bd692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc8b5c5-6c8b-4f48-9b17-a6021ab68e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "178481da-d7d3-469c-a8b8-fbeb275138d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d597cc20-de57-4d31-9b5f-d1884b5efa66",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f971e51-1b71-46e8-ad59-8dc155f2587f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbf5d5f-651e-456f-a79f-ed1b7ef8e456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7723de-4392-4006-a0b2-1299b90b544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86e2ab97-0325-4dc4-bf88-8ed78d0e74a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c5ac34-14ee-475e-9869-d9aad7d8665a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2038e199-c31d-4ac1-bfec-1e8d2d865baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1ad0dc-9a4f-4e2f-a12e-aa1597f58701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d700b0-1b64-4f54-94c4-01e5bac7a13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c925569-ba1d-4994-abf9-2b902c78ebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca721b5-218b-48e3-8e8c-22e972d45ca9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c0bc7b-f775-4441-afa3-cc2893ab69fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4317924-19aa-49c4-b6a6-d771f9bbbabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7462177-d5ca-4154-b23c-0dccd007567e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "690fd0d5-269f-4263-ab65-ca6fb1785d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c2eca-c70f-4364-8343-cc82baa75c7e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b573cd3-0cb7-49e0-9d69-85d8bc2d9e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6193fd8f-e44b-4d44-b04e-bd77cad1277b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9c080d-4f08-4b28-b632-e6d851a00631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51a4e33f-4d75-4d8b-ad31-92bd445fe80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cc82e0-bd79-48ed-9393-e66bd1670e95",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa710ecd-5f80-402e-a340-b76f9fd30baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00269a73-0c40-4d74-bd4e-d37fc3f57f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0a7171-30ff-431b-b45b-9f86ff3ba2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89614a7f-3d95-4e2a-9580-51f9ca5fe7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a916bf9-9faf-41ab-a343-f5624a9193cb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5466892-15df-45f9-bce2-7cac2a22fe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3db8561-39c9-4804-89fd-536527ba4d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bd1184-2b49-4674-8cc4-5e9cea90eb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2548004e-405c-4108-849d-8ee76a40beb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1dfe93-f849-4efc-940b-d4e765c0c1e3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69587f9-f204-4738-b5dc-da08d117e671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a04fc8-92fc-48ab-8a38-e4156ed04c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4952d033-eaf7-430b-877a-4731466fc6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cad59d4-af99-48e2-ba84-0fc16d0a635c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcca304-7fbb-4561-a21f-329d9ac72f1e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4fc35d-0888-4915-8635-52f7b276d682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6178923d-cb98-4a28-a67c-9507eb19bf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba51bd40-2563-4d63-9e78-a993c2fb578e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db29809-327e-4023-bcee-16c072fd791a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f7280a-e3e6-4d17-84f2-c8521e1959cd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec5ca06-aed7-45b3-91a4-136d2b919c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cbef20-b3d8-4821-afdf-e02f5bb69100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfba618-43d4-4de8-b60b-ff73a94eb67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6d76a1-74e7-4f6c-8cfa-b58850f2d418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ada3e0-e259-426b-b430-859c409e4a2f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb6cced-715c-4978-a8b7-27fc90e9b7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0b4634-4441-4c5c-9f03-9a0a93c3c35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cb6a96-0393-493a-9503-a5cad7e1930a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79b1c4c5-53d0-43a3-a49d-154619789f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4249001-9c3b-43af-bc9f-820b3df15179",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4343d31-82f9-4ed5-83e7-ebc75bec0d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca068d42-a933-468c-a7a9-d6b011f58706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f89c47-cf60-4dba-9b83-f9b0c55947fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f06d9847-12ad-45b6-89f8-65405fb360d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e690d68-3570-460b-b9d7-96c0a9d1d8a6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade5a269-cfac-4496-b88f-80f50329a936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f24a16d-24cf-4103-86dc-5b3da69b8201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e49e53d-9148-49bf-befa-159963103ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2149b6a9-61de-4118-83e2-fdfd8f9a8f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deddea2c-9ecd-46dc-829a-d04c368dcb8b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e343de35-9691-4e58-8bf0-9f3cecaf8969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ec0599-4002-4e2d-8f0e-f91ab223fe50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc699e4-9376-4fa3-a557-c71e896ce574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c600f6c7-d9b8-48f3-bd21-417339c5f046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61633e6-d202-4f70-a3e8-3220aecd22bb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6df2aee-1b9b-49d8-91e4-6a19dc76d0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c673476-bda7-4a02-a1e8-85655904a28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe1e70a-d517-4759-80a6-1d99a1011c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7641fc1-9dfb-48ea-8ff0-93b5a913b495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219bb76a-a49f-406a-a345-f46a39fb0286",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b67fd1-20bf-431d-9f4b-a9cff6c59932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00c67d9-2dff-4cb8-b609-78550837aaa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b6f37b-9626-4fba-aa85-79920e4de8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9902f49-36cf-44af-866e-0aa888661728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a72a64b-7a07-459d-bcac-855556338df5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c10e531-efc9-46f9-b9c3-76590fa16180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9773c288-f672-4c39-9f80-c983604a1f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f47c2f5-7da7-4247-88dd-dc58369c41d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c242536-2817-4b7d-8574-cd3d6d419612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966999f8-36b2-4ba2-8cba-a2cd6a1f91be",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90eebf25-c74a-4a42-9c6a-9e48072f8f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0adba12-0845-4546-bd79-b8ae59ace1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcf1dfd-c17e-428f-aa69-6976ae13cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1947e8-b62d-4fed-a9ac-1c9b7dbdbbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d3e087-30a6-44fa-8d53-ea8e65c53b15",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2122781b-9b44-4642-be77-898ac135602d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abac01b2-849f-4c3e-81d9-c71006f62b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ad32a6-0fd0-44e0-8dd3-3abd506bfc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f419e8f-23c6-4b18-906d-5010b224f439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f721f1-cc24-48c7-805c-49d13810b479",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e280f060-c042-4bba-b027-b6ff5b72f1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd08aee-14b4-459c-844c-3b14c6efb1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95ccae9-7624-45aa-b395-3cba91ddd0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fafea72-e19f-44b6-8739-cc21467291f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922127d4-84ef-477e-9a69-98c050758599",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ba856a-1d7c-4538-9be2-676d4b156270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502de931-2be7-486c-a130-d1ce3012e929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b930fdf2-af12-4824-b2ac-42fc5ad81f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d610aff-a3dc-43f8-bfd3-c6e89ff3affc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023d58d8-ba01-4743-b885-bd29175fa70d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb23609e-86ef-4a15-8c41-f51e029bc848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630b1c39-e9d2-46e4-afe0-55417135709a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a35a37-f468-4807-bf3a-beb6d9b6b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22a43f06-9c61-4c1b-b4eb-93e57e1e012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e01b974-6799-447f-905b-7e3503b9ffe3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f74961-8b5f-44ae-9c0b-23df06f5d232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366898ff-e454-455c-a5a6-e13eb05a7616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d5e8d9-034d-4103-b050-4f5d57ab5609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3d5acc-4a4b-4b7c-a234-7395fa16cbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f69b7c-2e91-4bbf-ad42-c8f99c4b12f9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e68c82-c48d-453c-ac7f-825a40225cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b977b5f-1d7d-4e37-bb5f-09037e5d7d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a60abf6-1f24-4f52-9bae-7004c19a2b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9e5b0c-9528-45b7-a2b8-ce9d74689f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2fd933-449f-4226-b32c-89f46741a42f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910f82e6-79c3-44dc-9287-2b04bce0fd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d933e19-d3d4-4cc5-97a1-3298341ab0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a1a0c0-71c9-4643-bdf4-49b23bd2a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "438391ff-aa4b-46fb-b3e5-a9e9400124fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18654652-ff93-4ab9-b399-9873e9a0107a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9831c2e2-c24a-4eb7-b66c-ec2584f95221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00b222c-e07b-423c-9c39-82f667f2305f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b02950-b090-435f-91af-829fb490e0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01a017b9-ce41-41f6-990c-4aa638ea395f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2343074-be81-47b8-a072-06b4f234d4e8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40900f73-09f3-45f8-8e23-b927eaf82e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60906987-6b76-4781-97f4-758b26a51641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca2d797-370d-46c6-800b-2f64508fe96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd216d7-24c1-4d81-8760-e2e2ddfb3a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c0371f-3332-4413-83fc-e1864ab06530",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddff117d-ce74-4af9-a259-b6d52faadd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3545e3-a35d-41f3-8f63-539f2c1123e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bed0183-9acd-492c-b0d9-c3bb0a3d0da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d501ea-29ab-483a-a89f-0262a32f174b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe14b710-5ebc-4fcb-908e-65d7b041a0e7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6060451-5e90-432c-b2ce-abb692ba5c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a4dba3-0353-492d-96a6-55ab66397a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9402c9c8-4c21-4956-9b1b-017a2919fb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97e6ec10-3c35-4d93-ae05-cdf73fd6c172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d770560-c531-451c-9010-36fc03007dc3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf80575-779a-4d55-b1ce-3f126899491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360f068b-320c-462a-a12f-b1a201d6820b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e42755-7765-47b8-b7c7-ac10a582c209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f560cd-2782-4a7e-8511-a7e0fb78bc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db029ae-500e-41b4-9b95-ffdbe7d37d97",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9e4072-3372-4c50-af1b-945722486b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be2281f-b8c4-4269-a80c-36c8bc9c2cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dfbabe-c1b1-4ca2-b426-241fe85ea220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3479b146-e3bc-4036-88ae-227218d696d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc07dc8e-d033-4097-851e-36e2117a3f43",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a33cbe-6b19-4a7b-ae33-ce6cd5874fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e80a4b4-5571-4d99-b7cd-e2e17e130c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa2a7ee-26eb-44bf-9f36-ecbca7de0841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4947a5-0e12-4945-a26b-3a2440f86a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230d460a-30d7-440a-a489-80199df1d97b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06c2bad-2f78-4ad5-9d2e-1fbe2bf450df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86246ef-099b-41c9-9096-1c518a58b9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1226776d-d89e-4bd4-8a1f-4da2e79f320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3380d128-22fe-443d-aecf-97ab951230b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d842f7f-1d42-42f7-b638-40f29b603920",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4725e14a-4cfa-40c6-b758-d3ffefcdbddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dea5ab-8435-4e9c-a16a-bbc130da1e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d978ae0-93b2-44d2-9596-bbfa7f9c267c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2c7b47-204c-466b-bbc9-4a3e26c177f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306a8658-8b6d-483f-b228-a2bf20b0a99e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3827bf43-494a-4ced-946c-66aa9bae13d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972690b8-6e46-4a19-ae74-09fce7e2cf61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23be6d8-477e-430e-8fcb-b931d8123c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb21f635-75c9-4892-b9cc-2263cbbb1a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a1cee-3b7a-4da7-b0e9-a271da628eff",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93800e4e-5ce4-4fbd-9d43-ca864f01c797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb10e2bb-1116-4221-8132-7ede7096e93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc76378-066d-4b7e-b013-8594dfab3564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34b4ab84-a719-4ff5-a272-e4c4ba6a23b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c69054-bdea-4853-bfb9-792478ad2cb5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61525875-b0c0-4de8-a54b-d19a60006ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573107a9-314b-402f-bc89-5d1b059a3bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79126dc-baa4-49c6-a641-6b2956c2b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1ba429-fb8e-4741-8dc2-084da4b8cb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1306761c-0867-413c-8246-0daaf16ba8ce",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3139d763-bd2f-4d4e-8e52-d6f47ac4c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902b6c83-82e4-47a2-b9fd-224f01274fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fc09bb-9163-4d5f-a4ed-c4cb35c2e25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24c12ad6-7d89-4fc7-a9fa-7fcc0ae1c4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13632e5-2ca7-4ac0-95e8-b6773af76fcd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c210ec-79b0-4347-af2d-708583245c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23b5544-8a98-42df-b82d-3b98fc623d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61b4dbe-f34b-4c8e-8999-9339c5487b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bac4072-b24f-4795-acc6-c23026accb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef18ab3-21ee-42dd-ae34-557a1c30f207",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2249917b-5495-427a-b653-01177c4877b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de06ac22-ff02-4d86-baaa-a80800c8568f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dc9530-52aa-4a65-ab8d-bc3899e50b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "93598f92-285c-4bea-b7a2-c67789a1dc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89c87df-937c-4375-b0ee-bab080677bc9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38218f0f-0b74-4ab1-b30a-430ad57d5fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3e3c92-200e-414d-89ab-f6720c54c162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c69c895-cfee-46a2-91ed-6ea06f561fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1934cd-ac87-4eea-b1b5-a53a9f0e98fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed14ac8-68dc-4961-980f-4fc1fd4c5a76",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811ad251-65eb-420c-940b-c77ee1b46c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c52fe91-16fb-4d86-ae9b-ece5d37946ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505a703a-ebcc-48da-8e7e-d0c153ce0494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ded6d3-c7b8-49f5-98c5-a89acdeb4679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fdd3d7-9094-435a-be50-30cf34e50dcf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83bc1f-3253-4ce1-9c3d-c96155ab5567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a635304-a333-4359-b94e-ee51541f0d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab4267d-80dc-4afb-bcac-5627f55179b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bce584-b532-4be4-bb80-c422473a022e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8846c8-8793-4ac0-8900-e7c9027eb72f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2357b1eb-c8ab-4dc7-8944-e75c294508f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094c87e7-479d-44ae-9f65-e7dab306ef38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86586d91-1629-4efe-9744-fbff5f5c2503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a360cfe-b0bb-4355-a8e6-5781e5cfc908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838c199b-8e43-477b-82a5-b02388848b77",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c0302e-3e9e-48c3-ab4b-3615e486ac83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad66226b-db06-4832-a18a-6ba0297b49eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ed8026-b691-4a46-b17c-799a66d2babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4556bb73-d9f7-4bf7-9ee0-c567de3bd8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dae3bf9-73e4-4040-8b61-539ce3c5f01d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecc4806-7fab-49e8-9d03-6400a0996950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c599c71d-93f1-4b15-9158-2332ecf6a2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b6cda3-8ebc-4569-b83b-fb5d87ce7f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06ba9702-f48f-493d-8b65-84ad13829830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538fa597-4234-465e-be04-d153aa8da00d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a9f244-1f6b-4fc5-8639-a53148b89c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c6ef20-807f-4340-8a4d-d82c3fecc8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d5addb-a739-43ee-8e93-8ff271ac1b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79878403-c9a1-458f-ba63-a17cbd470961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297b608c-30fc-410b-b248-caf3ef9972d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307e266e-798c-41ec-b7d1-5163fd7f4b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bd8156-5a0a-4613-8d8f-6bbe947a319c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16b9816-e6e2-428c-b647-7289c0fe41bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b094069-bd87-472d-a429-6bdc9c978e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52b400e-641d-43d0-ab1c-269aec3f6c84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885b1278-9b05-4fe0-9b8b-ef4d51ae13a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffca914-c204-4637-b419-8a04cdb58344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb80d91-2a30-4b29-8f64-e35810e4599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "054f7200-535e-4c31-abbc-dfe00f0a02c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eac8189-ff98-49c0-8ed5-6f4ff8772f1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690081f5-976d-49b4-8881-72e6dbb03a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5879b3b0-39a5-4cab-95b8-8b1aaca56fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0331eec-4c31-4b08-ba85-291b717d2555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c290877-c8e9-43d7-853c-4ff4f411b929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3de71c0-7c92-4622-ab96-4d143efea315",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c020106e-b723-4c5d-90ad-fdbe73561217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ddd37f-f556-4d29-8dc9-cb3e3b0512bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03c2f54-81fb-4cef-b5be-3551f3b59243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "49d698f7-02e9-4783-b313-6103316a4dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7274cfa1-c8be-483e-9dd5-243bb393c364",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9dd625-8587-47a4-801c-9db3d3321f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ab5428-7852-4c53-9d02-e9466de2e0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37b7f3b-6253-4d51-9f9b-39e74ba9638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7e11a8-e4ca-412e-b8fc-d1f0d1c28fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550d03b7-57da-4f1c-9b1a-12927cedf8c6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49782b60-2254-4d1e-96e5-c9c1901ba9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ca5e0e-527f-4215-9b69-025b41788abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6348002-f564-4009-9e96-e2d3d5063b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3217d23-c548-4824-a7e3-ec6dc56aeb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce3c00f-22b4-4f4a-a6b3-cdb7c9b6b9aa",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf1741b-0771-4c06-8fbf-6a8aeec310a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903446df-ab7e-4621-8b2a-a4b2d75205f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67542e75-d54e-40e9-a609-b94f29118757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "587bd4a6-682b-4bcc-85c0-ae9036ec3e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43179f99-5ce2-46d4-a886-6f4e18752a5a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770da9ef-cb32-4c1c-a8ea-ebfc3f3f8913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471b2b9f-09eb-48de-a3f1-52e205707ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc44ba5-fadf-4f47-ad6c-65b890cb67d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e72884-0794-49e8-8806-d10c40db46a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a99d66-54e7-4fd7-a659-e44e23ebea08",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41b0c4e-d8f6-45b1-b884-7ff6cc667f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb8234a-ff42-408f-a96e-4d06f54c0fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3e53ca-5118-427e-bd79-d0d4e706ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52d2b889-b215-4869-a9c8-83885ac4dff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f87c079-f452-40ca-b2b1-b5ef77353f24",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4734cac4-2bcc-4696-9008-0c14910e3a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b59cc1c-580b-4e46-a81d-629602a62dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b66473b-c626-420c-a437-834444a8ad01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4f254f-1d38-430a-9f43-0a6ea6e74b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ddb1f5-4e50-455a-8e49-5f94d2276116",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae97933e-03d9-4b37-99db-2576e78c727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b592e761-badc-4487-aa3b-8c860831559e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a11339a-82c9-4e84-a455-3b38ad635acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb48970e-68a0-4d0a-9cfc-edb482d17b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca51ed6-5d7f-45eb-9bf7-07bfb7378ba9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4837761-1eb2-4602-b297-6ea7c6dc0f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbf7d03-7448-4b61-851c-ced78b57cce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d74d3e-4f04-4af6-94b9-7996c3c2fef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee71bc8-f263-4618-a564-66fdc1fe7b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d654b29-a716-4952-9a07-9a5eea215a75",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097baeb8-e526-4485-bf16-7cd293b3c424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d561486-b57d-413b-b4d2-6035a5f61d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fb8968-c5ad-4ef1-9865-9aecffb43a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8888f1c7-572e-4244-ac55-067acdcae8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4476d751-369b-4169-8f26-f2cfea64efd9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d47ef2-921c-48cc-a2ed-ffc62bdbe293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba17eac-56da-49af-a848-3fce676a269a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed3042a-674f-4740-929e-86b20da11c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e3d87a-1ae8-462b-9112-e14d130ae204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc659ae8-c84f-417e-9e57-98d439d7b551",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420db619-a7f5-447c-82d7-3b95d330890c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d16678-c7c7-4715-87d5-6d058699b964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b190ed2c-920b-4343-b6bd-50fd737a8718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4db00f7-c74c-47dd-9832-3f02db9aa5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee2e490-6a16-47d0-aebc-87ad0aad278c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c478c32-96a6-447e-847a-9b047b1defa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ad30fe-8e9f-422a-acc0-3c0201b69a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e52d24f-e637-4550-a023-0d6e52401d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "395cf126-0e07-4f29-8932-833e06e13775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7830fc42-1ff2-4978-85d4-7398c20d886b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b802d71-ed89-4a5a-bf4c-f5c829c51406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6043f78-ea0d-4fcf-840d-d69e841c78f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812d9a2f-9149-4184-b202-eb60f7f02703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f944a0-cc7c-4169-baea-dd88b132c51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c127210-7700-4f86-a613-d714edbb1d57",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f87cd0-88b0-4750-bc0f-e7e3a721bec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf0ab91-c1b5-4302-b7af-7d97b962af2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d4e507-cafb-4a47-81d3-6485d7b3ec9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d433df-7a63-4f09-93e5-d695c4ac2da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff65e1f-3d33-4b9d-bfb1-ba23e2225090",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430034ce-4a1d-4b7a-9ee3-60892231b1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb388e64-8f27-4afe-b0f6-342026ff7004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469c5905-26ff-4ffd-a539-56c5389c6d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc766731-6393-47fd-9ad7-322d52c3239c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f0849d-6e3d-4430-88c5-2aae7a49a6d2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90eb6e86-c4e0-4e47-ad1e-636202c7bbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42db66d-d736-4df0-a85f-79359a8db089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7cf7f7-ee36-40d2-9378-395e0dce5b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c4948a-45da-4fc1-83ff-4994555c166a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3c2e9e-7585-465c-9c6e-acac1662a86b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f5efd6-8caa-424b-8978-44f294f129be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a06f7e-9519-46be-9221-fd2c3827a929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0efc673-18e6-4d5b-98a3-75534b50c1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff794698-d6d6-4d7c-90cd-94c25dc2135d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99345d0a-93df-4895-b809-41fb788b48ae",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43004d81-046d-47b1-b52f-937044b46999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ffe867-eaa0-4ae0-a12d-e22b9b151a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578d1539-6e5a-41ac-8756-374d56c325da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10439896-46e8-445d-8907-a04166af40fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ce135d-3ba3-45cf-a7fe-5e9bce76c106",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83874c1e-6fd8-4d50-81a0-04c6faf821d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042a8e5f-e884-4e17-bec0-eea979ad6fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c53f8f-5ced-4f8d-98c5-7d14ab75a091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e721e0b-fa8a-419c-9563-0b480586379a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fadedb-3901-41ce-9c87-af2317f7d428",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34552029-27e1-4e67-92ae-b238ce143724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c57fb90-57b9-49c9-b3ed-291792e56e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d16f25-abfc-4d59-98d2-1212c54631c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab2ee50-d656-4558-8bac-81e6d378a706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242a590b-3352-4af5-b36a-64d02b4dd58d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df5bd70-0b6c-42f2-ae8a-6ca9de8a52a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522b603d-f654-48b4-9112-9dd20c10dbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fa9863-dc37-46c2-bd8f-3ab006870326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fb03c2-9396-4295-a665-c2051cc6866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10005359-afbf-4ee7-8fdd-1385676f5694",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd6b84c-e5ec-4c5a-a7a3-af28c767878d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee59cb9-625c-4f72-b520-2e41854b9096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30473ed8-10d7-4fbc-9482-6781ca3ac028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f19adbf-0911-4e5f-aea8-49240c08f83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2fef7e-88da-448c-9baf-d4dffef92b06",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a4bd86-3ad2-4683-8720-07ff8c459f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9b8306-deb6-418b-a13e-aec13b3c19ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa5b4ac-1ccd-4a8e-b96a-9b991640b07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c12e6127-9f76-46b2-9516-f705fd17bfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f6c870-cd65-4811-bf20-3b7a63343c6a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b495218-1a80-4a7a-b78d-15b043ed50cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc67626-fd2e-43ad-9ba7-d1a310fa81f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce628960-9bbd-468d-82a6-64e8ec78b85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27640b16-219b-4932-82c8-759bcc95be79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9439a6-c29e-4bbd-99d3-42ecf54ab4bd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c1da91-f43b-4316-9b04-af2b29b64e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f451990-0a36-4dd3-b39f-f211d7716283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7470bc-61b3-49ea-9505-b344ddacc355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "35708ba8-06e2-47cb-8a57-b3ba70340fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01d81bb-a228-4a3d-a3b1-2c5c1fe620d7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d48be9-9888-43c9-85b1-bfcf717f3a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fcfbc77-6c86-4c27-9338-39e401682441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730871ec-5345-40cc-a0ed-b3e4b3c26c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aed59d98-17e7-4ba8-a22e-ddbefce9fb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f2ea3c-8685-4cc3-bbbe-8f2614795368",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b93d94-dd0b-4f67-97ee-15bf3c120a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc18338a-0e52-4fd3-877e-9c180902679e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cb302d-be53-49cc-8230-8cc920e9f1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "420f59a0-5899-4b21-8eca-e0e6fa4bc3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cc642b-db24-4a1b-b4c8-fef4a0a6b064",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf3ab9f-2386-4660-be58-945f61d3da68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8dd4f6f-33d5-4cb0-8698-30754943f8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbafb8e5-8bca-4faf-a371-0f0186b994b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcd9706-831f-4a79-9cc6-20b06338db30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe20afa-34f4-402e-88c7-72c58d9f3809",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ee8e85-053f-49b9-9f8a-f76d2392bdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1ceaf8-bde7-4ced-a25a-c742295b34a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fefd78a-3da7-4b97-9193-f85be1cbebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade7c28f-7a59-4442-9f84-080139c6fb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d565611-930b-4ced-b3d3-2ddb220911aa",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17afc773-1175-475a-9541-e1512a2adbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "889e7c53-b574-4f8d-9701-32cd130dc6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77876cd-00e1-4e82-a84f-69bc14da91f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd96301-20ab-4718-bbdf-479c1c5a3f92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7baefbd8-ced1-40f0-abfe-cf93afcaa6c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fba16ad-c2d9-4d50-8c76-fb7d19f4efd0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ccface-9daa-4fc5-be60-e0bd55aca59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e68cf60-35be-4298-9d6a-7cee86c6221c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6baa9279-ee84-4222-8943-c2640074f04b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3e79909-baf1-4823-84b7-378d76411683"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad3ac990-6fa0-4fef-9365-03140fdef185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44ea3018-6404-4b03-b1e1-942dc4213205"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c606469e-3a13-4f69-b214-81571f2f8e14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3afa6a52-20e6-4dcf-8623-4dd8ee176df7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cfa689ac-8017-4f97-8c11-00f17cbf6023",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85bb2026-f3dc-499e-8752-473f0a1f15e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e798babb-02c8-46e5-bb82-392bc67c0c0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb2d3263-d100-4b8d-aeb6-610a8ece2d28"
                }
              }
            ]
          },
          {
            "id": "b1db132b-fb39-4100-9225-e19d6527271a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87e4efbf-bd0d-4f03-971b-3cf68e6c0e2e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "21e31b1b-782b-419c-82ec-ef98b4610c82",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dc11b8-3d62-46cf-a200-0f5dc01f6cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ad31ba50-3d02-421b-9455-fca58dbb874f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841ec661-d1bc-420f-a383-1036298177b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f67cbf9-1328-434f-8f42-e08bb383bcc7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f1f61b0-7e86-4d68-b876-139fcd959e77",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a30573d4-e179-4179-a9ce-94c21541bac6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4df97362-8d01-464a-954b-80dd10cedee1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fb4dfc5-e496-43d9-baf2-64447ce03ab5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b0952b0-a0f5-470c-b8f9-629c932e0ceb"
                    }
                  }
                ]
              },
              {
                "id": "eafede07-fbaa-4300-a621-0dd023c5bdce",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60ec5e65-eb86-401a-8b87-a19d995d5778",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8c69ef3-9347-4973-a33c-b104aed5a208"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68ec5f35-676d-45a0-b8a9-eeb7c54e058c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3353d694-c589-4ae6-89ab-f7c88dfe90ee"
                    }
                  }
                ]
              },
              {
                "id": "8c7e8712-5168-4d0b-855c-7278e816b037",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e8d61d1-1414-42ed-84f6-41f83af4afbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cf00e63-8a75-43ef-8a7e-659521e006b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faf64dbf-3bd8-4413-8389-00de0f1961a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "959d388f-98ab-4339-a3dc-82a40e952f88"
                    }
                  }
                ]
              },
              {
                "id": "f1a96c6f-b77b-4d39-a797-b4c09a309bbf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e1a57e4-f864-4e43-af6a-be4b943cc672",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21969d7b-fb30-4199-8891-c5d8ba06a3b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c9a5f2a-d1c5-46ec-83a3-a443569202e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fa31751a-54dd-4b25-81f8-6b1ec4335b78"
                    }
                  }
                ]
              },
              {
                "id": "76911f49-4bee-4121-a6d6-9f9fb23be529",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf51fac7-91f5-4564-884a-396c4e9d82d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bfec681-858d-4527-b207-6b747b4faafa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6be1639-cfce-4add-85b9-c15884f57337",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f44510be-09ae-415a-8aec-c529a28613e8"
                    }
                  }
                ]
              },
              {
                "id": "e2994753-44ea-41d9-a929-335dd4277b92",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b43285c-3684-48a2-9806-694fe77f583a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b33377a-3204-48ce-a12f-92a5ae02ba9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9426aafd-c793-4773-a08b-8adae9def63e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "31ec92af-7b37-4ad9-ba23-842894a6247c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0bb5b05-aad0-4d9b-9855-a9ff97a20936",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2928893-ad6d-4559-959f-f95893318b4e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9dfde06-9096-45e2-9fb2-4c660d972998",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a80a66cb-d5b8-42d3-a2df-d6f2fc6e6568"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c65c5e1-415b-4011-8e68-9ff262929900",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e22ff555-2c70-4c17-9b57-bf24f8163eb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "662eb624-058f-4fc6-86b0-9b3b5984287f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b748f322-4300-42e3-8f9f-0ff215d982db"
            }
          }
        ]
      },
      {
        "id": "30b0a977-73f0-4d56-bce0-ff144d33ded1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2b1ac630-b1af-4542-bc03-6b25f6c6ed5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdafda12-6199-4b0a-89e3-396182eda6d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de03a6f5-006c-4071-8402-830f40a43aae",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9381e5b-1d69-4028-a18b-0753d0204f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83de9b59-a65c-4ade-9da6-c62ea5a18637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8199fb1-5bca-4883-b9e8-8033e33deb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1317d4fc-310e-4f31-a123-1be5a7a9967c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b50aa8-a247-4a3c-a6ab-29a1fe1a15df",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2535182d-3fe8-4bc4-b12b-fa12d1926362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e250f1-8fbb-477f-8a9a-0317176ebcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341ec9f5-3c18-4e29-aea3-c8bb312180a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f600ff74-ac6b-40a2-a6ba-2435d73e2485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ed6b97-2608-4fd2-a216-087b82e08de9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b49710-d82d-49a6-ac06-5a7c0179b325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbc7ca7-68f6-4dfa-95b1-02975e9df6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2d26b3-8c78-471b-bd66-518ffccf5283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "705b9740-e823-4fd8-b334-ab9304237bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdb5d12-4a69-4838-a3ff-0b30d3e0ce14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0982fd1-d6f4-47d5-8242-2985bf95f71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31ecc07-b906-441a-b7a5-511d1c02ad63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6a6965-4743-46a7-ba4d-55ac7aa0d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9960210a-d8f0-4b29-a87d-53e32ff776d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceef4f2-7f96-4a43-bc3e-79e9edb54728",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478f5329-a0f0-42da-90b3-c64a2a67f2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efc135c-7205-4f79-a8f1-a6939cb99491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3658992e-7be5-4659-a2db-0fb9e9595c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e92a836-c23a-45ba-88ce-4aa3aa7a601c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8a6562-4e42-40a5-8c4d-3b6ea6df0886",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc04a33-8d3e-48c6-b57c-762f8f77a901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ea206c-c1d0-43dd-a5e3-7d04c27707c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7823ea-0f08-4f0c-b040-233aedab7d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "772666c4-a48a-4bd2-968a-a679bb72fc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f496805-178c-449d-8b5d-afd33790cd61",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb5a31f-8e63-4108-9a7f-83144ba7e0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40fc188e-232f-4c86-b1d3-ea32c47dc364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d45a49f-aadc-46ff-95e8-8bba07be730d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57a7c74-0db2-4f9e-8de0-1f5364bb9383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97bf5f7-0e30-4f94-9866-aa2cf99a258d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d19f60-c46d-4d10-88ed-88e9989de930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e779d89-6e78-45ab-931a-f1c06c1e2360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11b66b0-c972-432e-acbd-5d3be5a886ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b03bb9b-026b-4641-ae42-e994e1fc2bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c04e08c-15c7-4761-a5a2-c6d9f0d40f8d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a81e1b-365a-435a-a6c1-6971d901c404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41db348c-caa5-4038-ac70-99e0800135b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b0d30a-771a-406f-969d-60c41a51db9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "546cbd96-4a07-4d15-95be-9a24c7769697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f724be5-44f4-418b-b252-476ad4164434",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ebf1bb-a351-41bb-a709-781378ec0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a243d3-78ba-4e2a-86bb-cdfa9b986ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d4430a-77a3-4b96-a637-09d93bd19821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6a7edc-dea6-45ca-9d99-a7dde940a95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaec3857-a179-4206-89fd-404c2a45e8e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906f52bf-54b5-42ca-be87-04ee7571deee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f46c05-15c6-4e4b-9c62-e844b209ece0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4964f494-a8c2-4c80-944d-5c4ce7d6a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d76450-a9f3-4f74-8226-67d6f2f15dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52512b5-27b3-4364-b8ae-6c91ebe84d2f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c946184d-f760-436c-b67c-bae167df7dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6283d96a-2018-4edd-a4da-df831eb5b340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d18edb-ca6d-429c-81e2-97d7522f13d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1554bf9-404e-4816-b4c9-b941f3a5a11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4e0120-7c58-4e6d-81e3-0d4635c0e636",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd56eb49-c0f5-4b3d-b2d6-7ffcbbd91362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f557f311-857b-4b4d-808c-14845f5a7d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29c9dd9-ecfc-4f04-9acf-324502153ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb0a366-ce30-4adc-b1e0-a52dd1a486c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1b7ec8-5eca-4e6f-a1b1-ef91a811e887",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837d9dab-73d4-401a-8a43-b1b10412e0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d54618f-9aff-4ba0-8672-2d4e51f6b86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518511ec-0478-4fcf-97ec-195799026537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5526ac3-44d3-40e5-9e48-eb89f4e56844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5d3ca8-f23f-4ce4-bd29-2209a6b80a10",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be0bd4d-eec6-4396-a0fb-84e32b7f62d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3936c184-dfa0-42ef-8797-d3687601be19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d72665e-2928-4a9f-9e6d-c3753c083417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc0663f-a07f-4143-936c-7174077ce668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8980d0a-e778-48a2-b2d6-a0c848245cbd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccff8fd-0fa4-41e8-95a5-e7e87a7b18a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796e68b6-72a0-4d85-97e3-5c1c84d6f71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5428747-e607-4537-abe4-0ee559562ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "52c842a4-f6d2-4c36-8894-b07677db8828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edba30b-6e3b-49de-bdc3-a5fa9844999a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84355a69-0037-4486-82e4-e3adc09e9f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638204a7-70ef-494d-a9c8-dc8d2b01cab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db05755f-cb2f-42b9-bb9e-9a0bf4c1942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e5909b-19c4-4e17-9bf2-4b3edbd235d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9475994-4a91-4104-a393-94f401650a80",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d020eed7-b93f-4338-b117-3096c51dbb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dfd439-38ba-4759-a639-1a5528c9abe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6656feb4-e475-4d18-8d98-f1ca1cdfa905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f2d6f6-f811-4849-a530-20056f36f5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd306ece-cc96-403d-acfb-eb654a461c51",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e2d114-ba3c-4847-9133-31585cd52449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6319df6d-4668-4e62-a029-07a36ce7ec09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9111ba34-a615-406e-9400-64f231649700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77b86a80-e2b5-4c89-82fd-2d88ca9fdeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e67add6-d1c1-4620-a8a0-8c50bd2d4063",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c1c3b4-6fb2-492c-82df-62c306a04bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b3ca2b-95d6-4566-a023-cef7e1d26739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7551a39-f823-4b67-9f76-9c9cffbf3699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69479692-9474-4894-8b2f-603ce40942fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9e6df9-a4b9-405c-8ec3-f6f6c78f7ff1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1c28dc-f060-4f6a-bf81-de096966f882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15e51d2-c228-46fe-922b-277209100a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852ab4ec-05aa-4a02-8163-d6c4135ef682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b7de73-a5bd-46b9-8129-51833a86cbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2161e43-e3f5-4aa1-b75f-6837d052a98a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db80bbc-c8fb-42c4-a151-3333c269f208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78da1e09-39ae-4da7-ae0c-34eefab97894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a54c4c-c44b-4818-affd-e591409bb4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f00099e6-fffa-4d66-8d17-91f75297325e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827d02af-365d-4109-b585-343a13522f4e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688867a4-ffb1-4f36-9e1f-7ec3d5a84d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943ae44e-4014-4286-9e09-7458a639002a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12296a1-466e-49d0-8ddf-3c2ff65e072b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c53b886-8507-4bb9-9feb-580fe57e8eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2011c3-8b53-4eed-a5cd-49a6f495ded4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fcf883-fac4-4b2a-a06d-357bd395e87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726c01ec-4be7-494f-93e7-472bedfe8152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c536ad4-89e1-4bd7-80b8-0e96c2f94036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bb2fad-25a5-48b1-95eb-8662deaec20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51815b6c-55d7-403b-9ad0-7117d5915c85",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6e2671-a838-4e76-8f1e-ce2dd103a252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1876724b-ca12-43ed-a673-a33c19de8e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9fbfa0-072a-44ff-a62c-23c3f902ff5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26eccc2e-6364-4b12-9e47-194d025f8d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f952b0-5e79-4467-af61-1bb812ed0a44",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5ceb0d-83df-400b-b13d-e64a40a03ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8a6e25-7fc1-4e33-a811-8a77b6a7dca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d06b814-906e-406c-a12b-1d25deb5b6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f75e99-8148-4ca1-865a-6790f0c88c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f9bdac-1f47-4a30-9b17-7933b12ecaa9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfe6f2c-77b0-432b-98c7-d0a5d164aaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069b9bdc-b061-4641-8196-6f173316c5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cb2132-751f-45b1-8fe1-0246f21776d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5583b475-9fb2-4c38-be17-8df1e25e65d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627dc137-92cc-4ef2-b232-9d1221684474",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c7d959-42bc-46c6-a40e-1ad3b6b88320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c50090-f581-46e2-b78c-1d1e3003adbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c130d672-dbe6-45ca-8a83-37547b09d466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94f886a9-454e-4b8c-aeec-ecb6168fcfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ad2a95-04e4-411a-82e1-c86909444174",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8695f6a-8538-48ff-b74d-5ad1fd70d84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f367b6-eba0-45c1-b9f3-94f7b76782ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba16bc98-f69d-4c30-aeed-d63fc731c6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da0e4e5-a54f-4aee-bfe3-3017e532e6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac61d5d-430a-40fd-9bee-875ac3c88a13",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451f18d8-f330-4078-a9f1-698a3acbf2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baff8e8d-dd14-480e-9d3c-d5e856210a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921f0015-d08d-4b04-9fbf-e6307cb9f166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70a848e7-f2c6-4e2d-9785-fed667d2a8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2072c99b-f766-47bd-9fd6-1b518a8a58ec",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc2142d-a5a3-4e4e-8c43-330366a3cfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86dd15e-7057-40e0-a4b9-fae6cef73a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76774bf3-c5fe-4ced-b6d0-97376b8be7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78216f05-8216-413e-b0d5-60d47db869b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b300c55-b487-4418-80db-82f8d45dad95",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040f5540-4c7b-4751-9bcc-3b7e123c3557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd582673-96c4-47f9-8624-0d35d199d7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1d0f7d-5143-46c0-8643-858803c52511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff15c60d-7f8d-4614-97ed-61964617aa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29caef4e-0d89-4586-b5c4-c0ab553ffc97",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7842d4de-ba43-4245-906d-84002597c90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832996bf-9bd0-4d91-b330-387fcb86ad82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4954126-b836-4950-a84e-858356d3f7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a64600b2-83ae-4731-82d4-177467827b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eacb638-337b-4087-b4eb-93d28da757b0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3c83b1-4c7d-4177-bf81-852500cc77a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ff5ca6-dbfc-4c66-98bd-fc2377c372a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546aef39-9250-4119-9161-611ffcfed184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a8414a-564a-4250-b90c-4d5aabad44b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b22026-faa7-4b26-b28a-7a936e1e5f96",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bc9ad1-29a8-48e8-8446-6dc19b129b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50bc93e3-2516-4ec1-a85c-2d954dee1854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beccf474-2729-453f-8e1b-84b7f969dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69585b9e-f830-49c8-91ea-2e961e0cf446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e22743-1260-44ea-8907-59cc4f8d966d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28560f5f-51c2-4ec6-899a-5cf91e33adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a63b87a-a6ac-4908-a1dd-bb60c0571380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c41c282-4e98-4979-8e16-54432ba521b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2189fd04-a61d-4cb0-ba51-f423e0958ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb7d672-607f-4e9e-8176-65dd54acebaf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f064a388-ed04-4734-9640-88b2f26054d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914a841a-07b1-4972-a0fd-d9c018350ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53719238-c702-4d6a-aee4-be3588f70fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2e9383-e7e1-4e09-ad98-a2bd803fc14c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25850bfb-d81f-4890-a3be-f36dab9e38a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3a62ed3-12c3-4eec-8612-3be1808de10e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09041217-14ed-4373-875d-378aaf75fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "90549263-70d2-4e8b-b6f1-7811711065c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a618f5d1-3552-4b28-ae17-314d04c707d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e511932-296b-4759-bed4-5a4cc5816f5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c05ab29-2a70-44fc-a272-3792d0d62442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e5de42f-7d27-420e-8fb1-3aa4a12b6dd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bcba896-cf0e-443a-af77-c99ef0497b20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d267ec7a-35f7-4087-8702-20f6439dcdd0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90f39e1e-5dcc-44c3-9010-4cddb6be664c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "882ffecf-25b7-4fdb-a395-54882c134fcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "052a15de-332b-4ef8-8c5f-1f11b3345523",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95e69e48-ea91-4081-ae2d-65dfffa99c3e"
            }
          }
        ]
      },
      {
        "id": "6a821d46-0715-40ce-bd8a-ed6bf3161f8e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c1b8c13-7a26-4eba-a9d7-468b39f67cca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9036d4d-cbde-44c6-8b26-6a84ad6ef447",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2de49f88-92b3-41e0-b5d1-71c7a9a9fd11",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5b0896-41ac-444a-9102-5f9b1016c06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68591264-be81-4ddf-a94a-8b2d20125665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca8ab80-8078-4e02-853e-ed2e77248680",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2df0e45-c04c-494b-a505-3cd7577ddec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a379e92d-0a0f-4ccd-bd8e-633a43d940ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1184e076-e80b-4aad-9a18-8f9f4d4bb913",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2be18d-3c5a-45c7-9ff3-a5e1ff286ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd5f7da-a00e-460b-ba5d-34025d5f726b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b965fc-5c11-4d61-898a-75ffb5415418",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a30326-7a7b-4b98-b6f5-cfe51c886b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce89586a-90b6-42c0-aa98-32293fb2d288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f66b252-5c9a-4ee4-91d4-4fabb3d0d05c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec759e9-e8bc-47f5-921d-d51881003190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecaf97c9-e835-46b5-87f1-cdaa8a972504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1fc6a5-048e-4853-a7d8-740ef45f7b00",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1394129-4d6a-4544-9191-581d0d0ec328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4fc67b-211e-4cc8-93bf-79a3d30f6b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c05d6ed-3851-4d16-9636-0de0c41d4acd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c60159-2ac2-4d25-94e5-1b89735907ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc580fe-7298-46f2-bcfb-553675043c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bf8418-bf94-40da-8adc-0ef8075c69c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315e8885-8f3e-4775-85e1-2d0d7459b18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81f982f-f6eb-46e9-ba2a-7fee14d5e21b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a85e1e0-44bf-4203-ae57-33807686a0c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39d0b0b-ab18-41a1-b811-c02586e0ffdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc036e52-1a8d-48d8-8bd0-d8708084dd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4ccdb5-13c0-4c23-8c75-743c182bbbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf62ae9-1995-421f-ba20-1f4dc8b68d13",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5649adb-d80d-4c1f-8ed2-815d65cfb016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b098164-ab1d-41cc-ad40-38c1bac5f099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f80718d-8037-4f73-b196-5261883f77c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f47e799-1998-406b-9de8-2b39b14ed946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115eaa71-1b7f-4351-b0dc-9bed716de391",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd6f13b-8b26-4b95-8038-a3422a0a7076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e77892a-d6b9-4d8d-a6cb-8c475c7b51e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae63d74b-13ec-4602-8321-94aa5fcddf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006efaec-43ee-4d32-b07b-4e1268b8ce97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead9b87b-84d7-4146-b232-c8c013434637",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298a897a-ebb7-4d71-9667-6ed886b8f4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9627c601-6c60-4c82-8e97-acdf50afbafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b6b6cb-a1e8-448d-8370-ff25f1d618e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bcb5e5-a710-4646-a042-0a362152e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dad305f-d7c4-45b8-8761-b6e0f256ca17",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec0d931-c9ca-4a29-ab40-7b7f53418e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8e2960-12f7-4e4f-bbd7-828a3f3fa670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f16b9b-c34f-4a89-afbc-63466e5d0346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b59d68-ab4d-435a-9a44-e88befb60d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dea8ca-acaf-49fb-af5a-0e148527ca22",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cee780f-67f5-4fc2-a134-672f1612b435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eddde44-3d9e-4189-bbed-4990d5258496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9439c5f8-c094-4818-8f99-e05ad9683647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47be294e-2cf6-4401-a136-149da82e0d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488c9fbf-13a3-45c2-91b1-2dc61f372345",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9c3eb6-99d8-4334-87b6-39ee80aa58e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490fc60b-46ff-494e-89f0-9189f2b33a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b871d84e-14aa-4896-9f9c-aee200e22eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb86beb-27e3-4b66-9616-12041853c217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ba105a-907e-46a9-a978-e12558425bbe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25041a6b-295b-4e6d-b1e5-033e8f689de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825bcfd0-5833-4e73-be9b-4fc56f97c18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e577c6-6937-42e2-843c-69adb7094927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a8aae5-e33b-458d-8886-a67392009faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8403bd86-743e-47bc-8c3a-223365764f12",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c246858e-12b3-4bd6-9570-e128fba99552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d9268e-38f8-474d-b665-37b1fbf087a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf18ec98-3818-41d5-a95b-5cc38c7becb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504eeee3-0d47-4839-bb74-45ebc6f9722f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041154b8-af75-4497-8f48-817d5d39dde9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4e2ea9-a57d-4864-9c4e-ec3eccb61843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289b826d-4860-4cd0-b08b-c2a6b425113c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dac60d-4dcb-4cac-b051-d65fd6ae23c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ca9634-2196-40ca-a5e9-ae8ebf6ac7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747723c7-5680-43d7-8cd7-32720a213502",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b28842d-5b65-4c0a-bc4e-7a9fb35201dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bbe91a-e09e-4931-afec-2dd4b887df55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0da0333-1191-40b0-8289-23b0b8ebc7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea580cf-739c-4cae-9e7e-99f84b411381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e145c0d0-06c4-4b28-ad53-1c3073786bd6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366d2c53-92dd-460f-8e62-87308e6cb862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594ccbdf-bc85-4df9-a2ac-cd6fd7d09571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbec1e4-02bb-42a2-9ca3-7f4f8286e99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dd4f5c-23a7-464b-b358-cb6a31e29e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c19770-fab4-4c6f-bdc3-ab50e0daef0c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e287e7-9b6c-4f4f-986e-e4416b8089a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3a4552-ab92-48e4-b7ed-11b73abb21c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9c49b5-8e10-4bde-8122-b6444ffab039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52aeeeb1-dde1-400f-8429-7108acf492e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15876a13-5b34-4594-a021-82b9166f5dd5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfdfd1a-82d4-4b49-8fe1-3206356fccd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1caf54-5eb1-486f-8f2d-1eb77772b452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7948c175-db62-4275-88c9-05630514e8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2238d07-5ed7-4844-b156-2189d0360364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32741690-73c6-4c5d-8b31-51d986fdd275",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9b0235-f60e-4250-8d81-f9682d371a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4671dbc0-dc80-48be-b06d-a8887f37b8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb126f08-d71e-4341-bae3-ca4a37fe43f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083801dd-00a3-4eb4-b74b-e12d2a8dd62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234a01ea-bd17-4110-99c4-f28c6677d8e5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2913298-4e45-4782-bceb-00c4fad340ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d54d9a7-b17b-4bdc-ba5d-4b463a7a6f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416ed631-af5c-4553-a317-58dfb7b29a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e426cb7a-d799-4100-963f-7822c79b78ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb1e2de-5495-47a6-8bbe-53403e3c572f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0303435-dea0-461b-88ae-ae23832359fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d372027-9e27-4534-baae-7423db8c37e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb13ab-8d6a-434c-89c5-eae886e953b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c02b8cd-b948-411c-b6d2-8c4debf9d927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a91de48-c1df-4027-a0b4-dad747ae263b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22c1295-caae-4d3e-952d-6a6efb6d9b40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ee8636-311a-48f3-882e-87bae1e118fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43094bc0-2dde-4663-93af-f7064f1c815c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b688c62c-e8ff-49c0-9ebf-987b5fa2dbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f713e9f-6e38-419a-95af-6c8236ac539e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8ae00d-75f8-47e1-b645-21ffeb48a16c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfa44070-b9d2-4de5-bfd7-221bffcab703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c09d45-0bc7-4a1d-b7fc-c8f25392cc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36a92ef-86a5-4986-879e-132ebfcf2a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80a29a6-5ca9-489a-b9ff-49240dd7050e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff1bbde-c3a8-4045-9955-a3a34bdc074d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b70e69b8-2873-4431-922f-1cc351d40d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb96106d-f112-47dc-8432-849159926a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2893d8d-b218-4a1f-a045-2b8cb3dd95c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08233c7-762f-4719-9025-dda114479387",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebed59d2-0706-4cf9-8c02-2338c970f3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56dc0d3-d3b6-4381-8f26-4feba15d42be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba213b2-daae-4efd-a0fc-349280fe7a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b8be94-d427-404b-8f7b-f1dbbe761213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913436d6-ac20-4d02-a2a4-d307b5422738",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d3db56-b061-4a6e-b34c-9580755ed1c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662cf311-f9bb-4a33-a2b6-a16c007f7035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04df22e-2cfe-43d4-b4e7-09de396ceafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f5ee17-2f4d-445a-a1db-86fc5c88dcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491a8930-5d40-4830-a57b-5e4b3619b2a9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd8d99c-956e-45f5-8369-57b044c11e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b013d48e-0942-43c0-a65c-bc2ad5551fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096b786e-da74-4bca-8a88-f09cc0727a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad6759a-ebd5-44c7-9ba0-f0118ef7d362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1723ad6d-f8b7-464a-8a59-a9da2eb5992b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c68b70-26ff-4057-83fa-0ecfbefd2898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a2756fb-fe52-4504-89e8-e3eb2c5d02d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58139fbc-f7d3-421a-9d6d-0212243d68bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a258bce-9cc1-4d67-acd3-9feaa2e96008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6097a9-bd3a-4c10-a60b-79d1bfb0b512",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc25ff1-a290-4fbe-96b9-77c05ee4713b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "105b825e-f5ec-4383-9ede-3a3b3a6d413c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6896bd-3f81-44c0-843d-184b184ad51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4f7132-81dc-449a-b6ad-cb5c2e49ca59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118db703-6619-4cd7-b863-997d9db7ea18",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7f84d5-b817-4831-86d1-80a63196af3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34b3909-8883-4588-83ef-e6ea8581b0cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cb8157-b8b0-4345-a78a-a1e5b9cf0080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1673727f-0d42-42b7-9679-e18523a41570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655bc21-23a6-4414-a0bf-5f71388fdba0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02398117-ebc3-4123-b7b1-9eb48bde7ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d0268e-da35-49c5-9571-b2471155689e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d221f0-c28e-4e06-9aec-fa393a2de12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d51e1a4-4d7d-4d73-89a5-0150c787d2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc99b57-e571-4a65-b7c9-459850a77d70",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f348a5-dbb5-44d5-88c8-abe1a9d6644f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3450834d-931c-4bae-ad91-bbdd51bc52a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a744ad57-53ed-4eb5-a874-a4cd90eb8a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b75366b-5043-4e8d-a035-1befe44f3369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac3f981-1684-4fa3-a693-0f57e1218c61",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ace2ca1-f01d-49d0-b17b-485375a7ab3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5e84fb-4301-4316-84c7-77064631b143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b42ee56-380d-4196-8051-7ad36ef7d993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d78034-e697-45c0-958a-691b10f7f5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c61e76-073c-4639-824b-95a92c44af8f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0c3930-5fcb-4dd0-bee2-2ad28433e5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e1fcb6-484c-400c-a8b3-e708a0ddf883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c02e51-2658-456c-ba5c-83b27246b3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736fbd96-0792-44b2-abbf-01c8f8730653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884ff842-b60b-4b92-b934-8eda386eedca",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4817cbac-e2e5-49de-a521-9b52ff2325b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3520162-77e8-4932-b62c-917325cb67ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d880a2e8-7e72-4145-bd72-47d68c9c3698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c413dbfd-4ee3-4a53-b24e-4760f55e8c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3365eee1-0cc3-4319-b779-a1d68dfd401b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dc3467-e342-41de-bc84-48dad234295b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a29cc8-8197-4417-81b4-daa384aa4a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077a1887-a219-4a22-bfd5-7f3680671a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2556c3ba-2294-48f9-b4ed-6b647bd6b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a26c2a-d7fa-4372-82c9-689bb5132902",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d37cc9-d9ea-4890-b3f7-d69ee0fd24e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39248c0d-5611-4529-b09c-3157ced20eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0768a3dc-e42e-444c-bf54-f3d23ceb7447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b1f7fe-2dc4-439c-8438-2c135ef8ee04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd52cd9c-f7cd-453a-b296-f187ac072155",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67582ea7-1eaf-4050-9466-c0784bfcdbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb8b85c-3fa3-4fb7-9a0f-045119778475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574dda34-132a-4897-9209-0d23c03d001c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4969c76-f546-4b87-b8f6-5a9e7b916fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd99b4ea-b880-4b60-b550-324e0e7f4985",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732eded3-65a6-4300-a1e4-4d272df208dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec94ed8-9d9e-4a53-be71-ef0dc6856271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a599f4-114b-4ef7-a8f2-c5969965991b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48dbacf-85b0-493e-9cab-62d6be5a4b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e17dfc-e19b-4f75-af9f-7bb987e39858",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c746ccd-1dbc-47cf-a29f-69f6610c5ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f2d3bd-0a77-4055-90d4-cdc47572986d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926e8d1-3d48-48d4-9c2b-684024257817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c85274-7964-4526-8c39-8b513277fe67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce17a3f-07ce-4c8d-9e3f-9e21ed5a8670",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffbc735-3128-4f4b-90b8-579b8f0b2ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d688f881-158d-4fac-9440-666978333859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01781caf-90aa-4396-a998-0e9e5fa32307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8ce56d-6523-4a05-8fc5-72279978683a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b4ff39-0bc6-4d36-89d3-7a35748f5cdf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7323c88-11ba-4ebd-8d5a-2f8ccc54b704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b12e310-3f81-420b-8a17-2b7a4e965b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dc5920-1663-45e5-a8e3-41ae59284c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a720abc9-1dcd-4c7d-b67f-7df3749f4d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a826d0-eb76-43b6-8c17-5a2ea6fe3aa3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791bbe49-fc14-451e-8cb8-25a9b1045556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a20020-fc56-4f06-8e8e-95a700b98be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5652ea-efaf-4fe4-9001-604857600f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489f9d70-a8d8-4ed2-ac63-13c1f8340262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e058674b-f83c-4779-9ce9-c16a54583188",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba1ab60-d266-4aff-90eb-ba649cce6f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097525e9-e3a4-49b4-ba62-60087a183f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff51a36-96eb-44dc-bde4-7357b00277b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3320382-5135-4091-aba7-ef453e1aaaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d706d39a-3bb3-4c67-9864-593b917b51ef",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b38ff98-3f95-4252-bd83-9dfc4e579218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ca7b6a-14bd-4c14-8fcd-cc918ebd535c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85d34e1-d838-473a-ac70-36725aebca7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0378a992-4913-4c47-aa44-ef63dd9fd74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843eb014-cdbd-418f-9532-33077011074e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca80d2a-0738-493b-8248-ba1bc9b7260a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ff32c2-e0ea-4d9c-aa4a-a87f261f971e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7257885-eeab-453d-b8c3-9778d6f2ecf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06566ed-5748-4cf9-8f35-7654b802645e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8657878a-0d36-42e0-a1c4-93ba1e8664dc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43060b9c-9f0b-45ad-a9c7-5212724f3c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46205b69-b861-4da2-8d20-f79fb4579869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bac5a1f-6fab-44a3-aa0c-a25b27de41a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3357c3e1-7f04-417e-b393-5139440c6745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f67e8eb-0353-40a2-add6-e8c090e2b555",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2644982-30b7-4434-bc16-7010b7f80a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f22a866-6883-4a99-a6d5-b41ec006b088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777b882f-aefc-4770-a7e6-daca17270367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a187c9e9-cf9d-4d63-8bcd-0ff34ce33943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288b5400-4ac7-4391-a981-cd4bffed608a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b91a32-3e44-4fff-88ab-8f6d6b387bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ba3727-1240-4fae-bf84-07e48da9765e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "277ac71e-e3df-42cf-9b7d-a70b5ef25f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d90681-5725-4b80-aae0-c13defa6eac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f8f1d5-ae9c-4adf-9774-58649cd22883",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275fd761-243a-4822-87d1-cee811b0cde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9e4bbe-7296-4a02-a363-66ed6618ba97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca48b90-3960-4e4d-ab81-f16d1d6829ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46d6513-7c11-4c8d-a043-4d384defb9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bc445f-f6f0-46da-b87c-a40755309794",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6176428d-9354-46ee-b8fe-93474408f5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d3eda6-9279-47b0-be3a-7c59132559d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b58a607-d034-4a1a-9386-23644c64a444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17e5654-150b-4008-8ec5-d43de680b708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf21f65a-ca30-4456-b9fb-6f1303c32eea",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5a97d0-c7b2-4a92-b0f5-f9b75cd9255b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad92ebe-fa5c-4e70-b0cd-7a1056ae47b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a36f4c4-8026-4441-9761-60df5502a6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d846723-7697-4679-beb0-cb52b44c9ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03fb1f7-ff07-4a9f-8488-a4422b07599d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2fc6fd-4b4e-40fa-a801-ac5b951b5563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd2b57c-5819-49f4-8a57-f211dbef4d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d7dd0e-16fa-4b5f-b989-852fd2db6e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cf2740-a112-4a64-b913-7397d159e89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47eff0dc-1364-46e1-ada5-cbae45f85f6a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffc3209-0ee8-4aca-b18c-4f957cbd97b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17786182-5549-4ce3-88c2-c908a72ea5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ede60ad-29a3-4401-825c-5896e1246c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2454b429-459d-4a71-85c4-04732ce7a769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416137d2-95d3-4134-ad78-57f96cdab28e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98c5d00-b9a0-4520-bd3d-2353b83c1079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258d9f3c-941f-4261-8d0b-1a27ffcc2db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43edb09-f5bb-4d4e-b24e-af6fa91150f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9c5b62-e720-4731-a3f1-0943bb14bacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842442c9-7d2d-48f3-9992-88d895ae9c1a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669e57ba-0e30-4082-abf6-1e4d63a5cfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af2923e-e816-4a53-8e3b-d93da9ba50fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a1b65e-30eb-497d-9aaf-d2950ac22377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcf19f5-c6e6-40ac-bda8-3034a95f86db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2a8e3a-a370-4fba-8a30-f138907dbf34",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4494c808-7e87-413f-bdf0-f4c911d007d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156c447a-2451-416e-906f-22412da6eaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc72eb5-28ad-4e3e-8ef2-2e64ab40f990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1a2c60-4852-43d8-9026-4c1f106d1d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e44c53-438c-4cd0-bb33-8f874361af3f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0fb94a-fa29-4100-a098-29cf4286b00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a32de5-03ed-46f0-84f0-de8ceb59492c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640d608-212c-4ca7-9eaa-4ed769d84ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0441cfc7-8959-47e7-816b-a74e91290c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544bd28c-1302-413c-bd62-c2052c0aaddb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6cde96-20b3-4e2a-9925-3318b6a8fcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa01c4ae-6fcb-4b69-bf73-970dd9ffc876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8f33b0-094e-4484-9c92-1bc27fa448c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5353af-2275-4f5b-b79a-038527d8c7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7b190b-0f1e-4d8f-a142-9b0dc3eba7b3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e75c8e-b70b-4f5d-8cea-0d541683d290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c820d17e-5121-472f-9d40-36efbd68ee2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7850b613-b353-4872-953d-e3f084dd617c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22574f35-9850-4b9b-9614-638fcabcd677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b24090-1b71-4325-a820-c5df95e671b9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6019b5d-5be5-4dee-a3fb-94412d32bb83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d432ef7-6491-49b8-9621-a2c829607f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156d3be5-9027-45de-a327-2396b36ecc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfe84df-1938-4d5f-9bce-7d76610f8f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67179f4-582f-4ec2-92e9-1e473cdfb3e0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045defb4-7e50-42b5-83a0-10081755174a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8d9d77d-17d5-4241-863f-a41e0766f116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235a6a5d-07cf-4aba-9053-bd87149534a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801af4d8-59ac-4152-af69-9751a5a0df97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da68205a-4fb5-4f6e-a3d5-72e8774420d4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d99adf-034f-4a3f-bc6a-a59c608ce1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c5248a-0b1c-4030-bb81-44486f6f646d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0758b71-bd83-49fb-a551-fcf9a717e768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24be8dd6-8a30-48ff-88de-89d05eb0c9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011274ca-8177-42a5-a551-58696aeda1ce",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0f5dca-35c3-4acf-b1b5-1008bf2a9310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f0e8093-c4fa-43b0-8f11-3bef1be4c3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514458f3-9295-425e-823c-e4fbd49abb1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1dea9ba-0d38-484e-9b87-36d9ca1f8b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efcab96-e2da-4f4b-9628-620659926f59",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c64c52a-5d7f-4c70-adec-c10802e0956b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27ff1049-7c46-4f8f-9dcd-861984f4e5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616a4517-e958-4cdc-88b3-5e3849dd9c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b11886-43fd-4cf2-832b-66d612919836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10ca45e-664e-4dee-889f-d5a96d0a71a8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fedc456-0cda-4595-8b62-1065ae9c49b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6203ad-8d63-40da-bf11-4a8e885b9176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfc5aac-7ae8-4fef-8dbd-460be32100c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de046cf3-6668-4bac-a89a-916670d881d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943f7a84-e7b2-4216-9d93-dd2739c42684",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1e74fe-055a-41ac-9312-4d0685722485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ff75bb-6153-4cae-943f-4c55795ba2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1ae841-8ea0-430e-a621-b4f13b7affaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941a4fd0-4ba6-4a08-9180-067cdbd45fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8aab2c7-a208-48db-94b0-ab995150aee5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1968433b-5340-4b4a-a655-311c2851a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d11d812-9e5a-47bc-99cb-01d4e6517259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c00e19c-e1b5-403c-86d3-b08a0c9d2880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e682491-34f9-476d-9f02-e543e390b3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580f5c7f-e3d6-4d28-adeb-359ea93ad8bc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc28234-3d22-4dfb-957e-83940432f7db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d80b21c-f12c-4ca7-9a7a-81b8da520eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597b43f4-21ba-4143-b42b-36cd00006e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5479fee-ceaf-4f25-bc01-30ab9f9c86f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3580c5-7e4e-4d76-8f5a-f8a58a52b672",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb5bb29-e8bb-4097-b24a-9fc8c04da002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "536a849a-16fd-4624-be92-766080b0e3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc95591c-9157-4075-9660-a2035a66cce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed3d3be-a5d2-47ce-82ba-50a017e7e2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2ef3a6-a545-48e1-89ec-032443f5adb1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8743745e-6a3c-41b0-b6d8-374acce9bac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e453a00-9fae-422b-9392-afad55bf5cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b42f29-b2c5-41dc-abbb-6d6471fe3816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f23c3b-571a-44c3-a5d5-c225412d49b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc4487d-ee11-4a34-b716-2d1d6086647c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecfea23-52dc-4177-889f-0ee9b1e9f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eef1b640-a09c-48c3-b45b-a8f2c8367918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66ff292-1087-48f0-847f-d2a40b57fb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6780aa18-a5a1-429a-a328-3010853b3384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac6c0fc-4f47-47f6-b537-02830520d778",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c223adad-43c7-48f6-a67a-a1bb3d9e93b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0577bb09-ec7c-4a00-8121-8cd95f7f34be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c838d4d3-b308-4580-abda-cb9215c12b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413722f1-e594-41bc-a9af-70bab20833b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e000b0-231d-4123-b49c-b38fe9a64808",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c958e63-c749-491b-aae3-eb4c23c74d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37585dbe-037e-488b-a890-f7d75027623e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2754e035-7497-4555-814a-842291d61e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0f9e2e-2127-4f10-bd3a-a5e0366ea2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb42bdee-5fcc-416e-bdca-dcce8102a8f7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bb4dba-014f-409d-b20d-1ca4ac6b1b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a089cc-9c2b-4c9a-953b-2fb2721d0391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a642efde-0e0b-4eaa-a111-041e18560d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb86a939-2dc8-45fd-8a99-71731af7a505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b59454-c431-494e-9871-f9f5617b5609",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5f39ed-a77c-4a1c-9c51-1c0c39a5957d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e611ab-45de-469e-9ab0-c24e6257fb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036f4031-0658-4d14-ac3f-fc2843dc5232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daefa6eb-b7ae-40ec-a17d-3c54ce64f19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7201c0-da66-4874-84db-446f9f2ebd25",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e2f91-0bc0-4dbc-8c23-6d7a8fc07e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e693d68-46de-436d-8142-79a81aedb053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418aec85-c21b-4b1d-997c-8d408a71fe68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2083e79-799e-4190-bf14-0a0ccc0b86cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c902fa9c-1c2e-4659-ab23-678c12ec7f21",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b80a226-9c16-4c66-a611-f4d2fc23edfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c451f3c-9cef-4a48-a3ac-2c61016c6eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d42426-e800-4aed-80e4-e77ba3b261d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87da5baa-a4df-4ff4-9fa7-a3056d046180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62998b5f-46ea-44cb-a905-c3a8a3f7db80",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ec0454-5663-4176-9123-e981e2a6bd20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "272048c7-2280-48e9-bc08-31df7d3f4bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7134aa-57e5-499b-b75c-8b81e4b7e809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c70b32-5ac5-4bdc-98b5-4d1d7e50afcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e86fb2-cac0-4cb9-bb2d-5cd606d9a7e3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0756d4-4421-409c-bcd7-9759729bfdc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "739e2c71-fec7-43ac-9792-b8eecbdfac04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2a8049-7c53-4740-bf09-933694f919b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5694e5ad-c08d-4407-bb9c-5978d3912eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28106cd-84a8-4882-9b90-f12177227514",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e1ab59-3abe-45ae-a912-f28dd1aa6219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af8c835c-5c7d-4a53-a8ae-b6d39263b8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49ad417-2e62-41a6-9510-ee2fbae8bd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c138eaa2-5449-4a62-be98-3214c638fe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c59ec9-0792-4b5e-be57-e1263e105aa8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249c8d7b-628c-4710-bf0e-17caeffe2f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59c6ad4-c961-4bf5-997e-cb2dbb8a6f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccf4f57-a775-4382-83f6-589e8a71b918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbe85aa-7a81-4d4b-8edc-38c5f65943ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d64771-2524-451a-a286-162fa8c17438",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e43f2a-93ec-46da-ab58-1d0e763acc68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e218453-b152-456d-8478-892f2ade8ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168084ce-cace-484a-9bee-110165e2db1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0bc958-e635-4bac-9a0f-7f29529427d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951dc129-56f1-4b81-b0a5-c277b247b9e8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166f169a-34cb-4e6f-a147-b4aa008103cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69830125-136a-413f-a923-53fd2a4b140c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064d800f-80a2-4455-88e1-8d22fdee4669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a203627-bb16-4927-a44d-b90f779ef5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cfb2dd-0d68-4c3b-bd5c-857d8cc1b8a3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52c03db-6572-40c2-a65e-6f0828b0e18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8612cdbf-bc94-4434-a610-cb4978f15be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955cf3f3-7582-4d80-a2c9-f44039bff146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bbdf34-5421-405e-81e4-e53073e4b8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d933960-1681-4e76-b556-2e43713554cf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cf3e36-fbd0-41cd-9ecd-85f0fb26cc4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747cd8e8-d9bc-410a-ad68-b03335d0bd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25086b3f-fc09-4027-8064-a8295c0962f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88513bef-3f3e-443b-9c67-fa6ac898d327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aaecfa4-c8f3-43f4-b2bf-8594bbdb4c09",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e80f857-2ef3-47ad-a127-86bc5e410273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45c6c76-3f10-401d-a10e-7dc2b255b5e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3598b2c2-9173-4f8a-960f-1289e01f6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5224227-7264-4de5-b334-f9a886072248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1380b4dc-85e0-4285-90b0-f12d4579d335",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ebc346-3565-4941-818c-4d934491861b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "956e4932-e588-40ec-8a68-4015c35e83ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7923eff-68cf-4a61-8794-a98b3310296b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759e32cd-e10c-44c4-9bcb-36b765dc7c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc844d1e-8b28-4e0b-8967-3544759708fe",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832fbf84-1df5-45f3-85a4-bd8db07acc93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e29509-e36c-4119-b4f1-006885e128c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae67d9cc-aa75-4597-a014-59b87a34bd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf7d2ca-802b-45b0-84e3-cf6ca949f47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db6b464-e287-4d83-8536-85d75f919dfd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e076a5f-77d9-4fa6-af60-6deaeec311f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8497213-3967-450c-9c46-1cfcb3b1028c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f456472b-d2a8-42ab-bb77-735b14917189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e872fd-85c7-4440-8dbf-c1488e552f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d30cd4-9eaf-43ee-b200-599ac3c893fc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5112abc-4d74-4974-bba5-00dad65d38fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16459842-d8c9-47ed-98c9-af863805ba3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238d9717-545f-4483-a916-d468e38fa018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b301418-8ffb-4b33-bb46-c1a0486546b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348fb604-6cc0-46ad-922a-b1e7885fbe12",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1385fd07-353e-4617-a938-325a82db4819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92789ae-a603-4259-94eb-90ed92738b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15124062-5230-48c0-8caa-5496a19b0c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39bac18c-ed17-4e54-8c5e-8ce70032bb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad4386e-29a3-4f7e-9d8c-a4eec7985caa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5c38fa-bfbc-4409-9eff-64e7f20abbc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afacf431-f248-4970-aeee-94543223e2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6c4cdb-7210-4010-9971-62ec137a6f9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ad25e2-7958-44f1-9161-ae2f7f3a3473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e870e30-0599-4dbb-85b7-4fbfd75dceda",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa09577b-9764-4436-96a1-5ac2b3723ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0416988e-8d2f-4136-97dc-5866854254ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1951e9b0-9dd8-4cc2-aff5-1818cf34a68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7f1318-803f-4ea5-828b-286be248d784"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef5d5b7d-9f25-4041-9c88-18be5820c5bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3174be1f-b295-4e0c-90cf-a2ce184e14d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b600e0cc-181e-43d2-991e-7dc4987f5b44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19835ef3-8762-4b63-acfa-14c9112df1d7"
                    }
                  }
                ]
              },
              {
                "id": "2c2aa4c1-d574-4cab-b0bb-cf3dfc674727",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55b95e81-64da-41e4-939e-a909300521bd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dbe346-e9db-4ec9-b551-8cbb4233db0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c0beae9b-8279-4ed4-92bb-d56abf6a4568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740649ee-7c41-40a2-8589-818e8fbd1c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4b04db7-73e7-4ea0-a61a-c9724c9e4c96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4fd4939-4f4c-48a5-8db7-f942d3b17e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33399843-24c0-42d9-baa3-4a86f34174b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31473c79-3523-41d1-8859-6e67442e4137",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "939a08f7-f435-43b9-acad-c3894440b5c9"
                    }
                  }
                ]
              },
              {
                "id": "4b4895e0-8d5a-423a-a9aa-62743c0491d2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f4f36c8e-e2a2-4180-bad5-1133f354836f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0d646e-46c8-4ca8-9336-254a8abbbdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "83e23792-a76d-4039-8e37-d6f906b36f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1ee952-e3cd-4149-a7ee-db3ff37769e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1dc494-1d78-49b8-8431-fe0f7c636a04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ed0af6e7-c4f5-43fc-ad73-e4cac6725fb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f20e975-094b-4a21-bd14-8b1394875fb7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75c8a759-51f1-4495-b581-4a160967f2ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d3f694b-5ed6-4cb9-821c-f311d609bcda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b04b3ef-39ac-46e6-b21f-72145e9f8395",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7b32c71-2eed-4452-a53d-57bd4c98dbc8"
                    }
                  }
                ]
              },
              {
                "id": "021caf99-6571-4484-a56e-4489ab3410c3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf40335b-b7fd-40a9-8e7f-c5cb86fe5f71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d24fb277-6ec6-45e8-84d8-670dac28a848"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a7bcb0-0eb3-432d-9885-c1397de4b92e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b921637-35dd-4be1-b2a2-a382825601e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e2c7f4f-e238-47bd-b240-df7a4786230b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1caa823c-36a9-49ca-8e05-878b88f1f4fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e46eaccb-6866-4887-a21f-db611a9788e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed38a31e-7fe0-416a-a08b-67e4a7c96ade"
            }
          }
        ]
      },
      {
        "id": "23870d12-d3cf-4cdf-8bbc-11029f03f472",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e2b6db94-8222-4950-9c78-d00ef58f957c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4191275d-502a-495b-a0d1-39a419292c57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59936bea-825d-4f2e-a42b-09665023c819",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3ddc69-4b15-4b02-b838-f4303c70f835",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5b3fc342-0683-4960-b3fb-17e1e31cf33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deec7e9-6054-4849-85a4-9bf8491bc5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7778303-ddfa-4582-9901-1b5c23af4495"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89f61787-4a84-45cc-a17e-3d16613fe9e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "829dbf85-75ea-44fb-aa4c-a2ff5ddb046a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37ff504c-97c2-4610-acdf-77768957d66a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cca4e91-133b-4086-824d-13b2ca670b00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc9abab6-f633-45a5-a3b6-ece6296156d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "315f01ac-b40b-4e19-894f-2dcee3b85261"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a1a1a3f-e01c-411b-beae-34461b0f401f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b1dd7e1-0a97-4d10-8024-6cf3919b3ad3"
            }
          }
        ]
      },
      {
        "id": "8ab883ac-a397-4efb-ba3b-aa897a4b55ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e6381a97-b409-4f25-9671-0a30eb6e2941",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32be1e52-fec5-498f-8854-b61aa6b4160c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d86805b0-1d40-4606-88fb-5c9a3f0ab874",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d4a97c-34eb-418f-bbf9-8b3419fa7571",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "662bb749-43b1-4aff-9223-96c3084d1674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacb5477-c6ad-4a1b-b965-71c1bbb1709a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbc78265-e587-4cd7-8ebd-8ecafa79261f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf22136a-ec99-4c20-b94e-91be6f6e5615",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ab0150c-7726-441e-84a0-14a351920d50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a98c1aa7-d5c0-4a16-b4f2-465eeb854ca1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8603646-9c3b-44c9-b8e0-847997fb1aa7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6092f417-91c6-45b0-90ee-f85fe892c3e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d23fe6c-a704-4527-9fbb-88920e01eeb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0948c821-c5b2-48cc-a78e-058ded337891",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6bbc529-c970-487c-91aa-ccfcedf0320e"
            }
          }
        ]
      },
      {
        "id": "f468f587-5700-4a5b-80d7-06bd93e18726",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6455fd56-2c34-4fa0-98a1-443240bd7169",
            "name": "Negative Testing",
            "item": [
              {
                "id": "576aca48-4d0e-422a-afcf-abb2aa6fd9ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4ee8f35-b9a9-44f9-902d-cd5e130ab6b4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7ec5fe-5378-4be5-8ec8-dd080eee1229",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ce2a521-77b5-49a9-b03e-7b43dcef5fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d012213e-ce73-4be1-b5c1-7a7eab31d990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cee4cf3-7ec2-44fc-ad8d-062fc2cbeba0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df541c33-e8bb-4399-bcd9-a030f5c57141",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "794fce74-f2cc-43cc-bbba-12106771a73e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6ba2a42-864d-4108-973f-0f73dd58c557",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81633ab4-fd94-45a4-b7e7-6b521ff58b2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "885d035a-14a3-46dc-88d9-285e61c64044",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c261a485-c903-4b46-ba94-ab8ca9ab3e3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a100e7c-25e4-4c82-baa9-529506eb61f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7a9d7d8-aaeb-49d2-944d-e2344a424a5a"
            }
          }
        ]
      },
      {
        "id": "a641c814-e359-4088-b284-b4c8e91e5ee2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad964db0-f654-4b3d-bfdc-c030ee252dff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fc1a60e-c4ec-445a-81c8-93b50969258a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a2c06612-83e3-40d5-b611-a7d4746a9301",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1ef53b8-4f1e-48ef-a71c-94fe71cf266c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d49bd258-3bd5-411f-af11-21af57375df7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.33730158730154,
      "responseMin": 7,
      "responseMax": 789,
      "responseSd": 91.20129335803779,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713746206770,
      "completed": 1713746245806
    },
    "executions": [
      {
        "id": "09178423-5894-494c-acaf-b0a2ae7544b7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dcd893f3-989e-4008-b42e-c345ad53f476",
          "httpRequestId": "1459f9f8-b8da-408f-88a5-cc098f57951b"
        },
        "item": {
          "id": "09178423-5894-494c-acaf-b0a2ae7544b7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "80dc0cee-816e-464f-86b5-1bb26c4e68d6",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "62ff6db4-e6f4-4545-b460-f19bd266cc32",
        "cursor": {
          "ref": "fe5d806c-ee40-4135-a5b9-e9623e51079e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "724e0671-80b5-4f41-80ea-c8fa7f009932"
        },
        "item": {
          "id": "62ff6db4-e6f4-4545-b460-f19bd266cc32",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "86ebeda2-c79b-4182-a392-807259011aca",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "a89224c7-1f65-431d-bf99-87c065d554b3",
        "cursor": {
          "ref": "1efe5b86-4b38-4343-a7c5-0f082511543a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5cbd6a33-632d-40f9-8065-f6a0ccb42b9a"
        },
        "item": {
          "id": "a89224c7-1f65-431d-bf99-87c065d554b3",
          "name": "did_json"
        },
        "response": {
          "id": "0b238c0e-bf9e-435c-9ea1-66337a08297b",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1135ed9-35c7-4c76-964c-e13983171a8b",
        "cursor": {
          "ref": "3e9f2926-f4b6-4f6f-82d6-d21279dc254a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82940481-df18-46e5-af09-771e9cf91586"
        },
        "item": {
          "id": "d1135ed9-35c7-4c76-964c-e13983171a8b",
          "name": "did:invalid"
        },
        "response": {
          "id": "6cd09d5c-ed19-455c-8035-3407745b18e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1135ed9-35c7-4c76-964c-e13983171a8b",
        "cursor": {
          "ref": "3e9f2926-f4b6-4f6f-82d6-d21279dc254a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82940481-df18-46e5-af09-771e9cf91586"
        },
        "item": {
          "id": "d1135ed9-35c7-4c76-964c-e13983171a8b",
          "name": "did:invalid"
        },
        "response": {
          "id": "6cd09d5c-ed19-455c-8035-3407745b18e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1625a8-45cf-4c1d-97dd-b7be3d25fe73",
        "cursor": {
          "ref": "2401383c-f5fb-49a0-b15c-a66fe330692f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b9a7df6a-cb6e-49de-a924-e965c69e4f2c"
        },
        "item": {
          "id": "eb1625a8-45cf-4c1d-97dd-b7be3d25fe73",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "612fa6cd-3f10-42d8-9377-6907ef927866",
          "status": "Not Found",
          "code": 404,
          "responseTime": 251,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e2d092-7e1f-41c5-9bfd-bf7edbe85a26",
        "cursor": {
          "ref": "819ad911-a3e6-4208-8dc2-64b04f9a3c18",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c17e0064-f43c-44d1-9e5a-5b74f4d56f5d"
        },
        "item": {
          "id": "71e2d092-7e1f-41c5-9bfd-bf7edbe85a26",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9c4b908-f06f-47ec-9c94-ee0f953f7c04",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7778db67-5690-4a75-8157-0fa908e0d3cf",
        "cursor": {
          "ref": "f33826b3-8f22-4391-b70d-fa9f1b37ef51",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dc2f6df7-2447-43ef-b1ac-7ff88bf635af"
        },
        "item": {
          "id": "7778db67-5690-4a75-8157-0fa908e0d3cf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f4030b48-5c81-4367-94bc-37e6765d44ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d91c67-f875-49ab-90d7-682fd5d1e6c7",
        "cursor": {
          "ref": "7f3aae36-34c0-4731-9f50-671f61b5be23",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "288f852e-a1a2-43f5-b001-e153d7bf90db"
        },
        "item": {
          "id": "18d91c67-f875-49ab-90d7-682fd5d1e6c7",
          "name": "identifiers"
        },
        "response": {
          "id": "4d1e257c-4630-47f6-a953-9edb659a1f5c",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebe4045-a609-4a53-8e66-0711efece29f",
        "cursor": {
          "ref": "5c0702c9-12c3-4716-bd27-32a808dc5b6b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c9f5d892-75f2-47a2-a13e-0282e652f822"
        },
        "item": {
          "id": "bebe4045-a609-4a53-8e66-0711efece29f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1a81d44d-558c-46cd-8ff0-9af0d6bfe32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d40fdc0-298b-4a7e-b4ae-f51e21bcb925",
        "cursor": {
          "ref": "9dec846d-7c62-4c27-b1f2-0cd522fe0a4f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f7ce6518-d7ac-4b2d-ad33-e0b971fe29ee"
        },
        "item": {
          "id": "7d40fdc0-298b-4a7e-b4ae-f51e21bcb925",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "00a2d716-ee6d-4882-9f9a-c785aa22075b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff52cd4-00bf-49bc-b4c1-56c72e32bb29",
        "cursor": {
          "ref": "cbb8ecb4-2548-4d64-b933-51539d4bac90",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d54744cc-2a5a-4ae5-a3dc-feb69bff2141"
        },
        "item": {
          "id": "0ff52cd4-00bf-49bc-b4c1-56c72e32bb29",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a4e6016f-c205-4567-b5cb-ab4f4dc1da64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed018cd-58f2-4a74-a15d-a6fd66f55ace",
        "cursor": {
          "ref": "77a46ffc-79c2-4599-89b0-53e4eef599a5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "218938c2-397d-4b9d-ba73-9866730a4d07"
        },
        "item": {
          "id": "1ed018cd-58f2-4a74-a15d-a6fd66f55ace",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7c7c30a3-2658-4bff-9a90-17b0eda463a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bff5b9-b03e-4042-b450-b59b6dcbfde8",
        "cursor": {
          "ref": "1090fdca-834f-4fe0-a687-bd42e2c826d3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f95fbc76-f1cb-4f40-98ef-067c762f17cd"
        },
        "item": {
          "id": "f7bff5b9-b03e-4042-b450-b59b6dcbfde8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9523b745-8477-40e1-931a-51ed20f3431b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374381b6-21bc-4b0c-a0ce-329a38739d56",
        "cursor": {
          "ref": "462aa209-38b2-4690-9eb2-fabf834237df",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d1350f81-1c92-48fe-b321-d45d06113f12"
        },
        "item": {
          "id": "374381b6-21bc-4b0c-a0ce-329a38739d56",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "07674369-e44c-46f4-a903-de4430bd61e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac96ed8-5c18-4350-851f-f49991d860d1",
        "cursor": {
          "ref": "5fd1f49e-1fde-4a69-9f21-d75c438961aa",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b70dd13b-9a2f-4979-8054-734d35e8ad45"
        },
        "item": {
          "id": "1ac96ed8-5c18-4350-851f-f49991d860d1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3e7f94b3-8282-4f1d-80b0-903919cad566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183a21a7-16fe-476e-b3fa-9ba80c1fc3fe",
        "cursor": {
          "ref": "16f56787-c601-4441-941e-c2161cd2d05c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6cfe9e20-20cf-41f6-b892-c398e7662c73"
        },
        "item": {
          "id": "183a21a7-16fe-476e-b3fa-9ba80c1fc3fe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "057908de-4b65-4ddb-85f5-47c241cefec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999fa068-8a3b-474b-868b-c2b0dd7120cd",
        "cursor": {
          "ref": "7ca42d49-5b91-4f9d-ad43-c97fc18aaa90",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b23cb416-ab16-4a31-8411-b93d803d088e"
        },
        "item": {
          "id": "999fa068-8a3b-474b-868b-c2b0dd7120cd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "614ee271-93ae-49c1-8955-ae62541bcc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6ff2ee-a92b-4727-ace3-36e797f80135",
        "cursor": {
          "ref": "29c9d8e8-a35b-425d-8e1c-53991e5b2311",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "679b93e9-0f99-46ae-a3da-a5a34bda2eb1"
        },
        "item": {
          "id": "ac6ff2ee-a92b-4727-ace3-36e797f80135",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d12a03ab-eaa7-4125-b13d-a2d368628f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12932f01-0f75-46e6-a9f4-b4ec77fe5ccf",
        "cursor": {
          "ref": "00f5365f-2087-4a1e-b711-358ebac37535",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d306f675-71dd-4580-8f2c-65bc04813d9a"
        },
        "item": {
          "id": "12932f01-0f75-46e6-a9f4-b4ec77fe5ccf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "263db835-ddd6-43e3-9799-c4c8f67494bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b614b9-83b9-4a70-90ec-e080f3ce01f4",
        "cursor": {
          "ref": "00501b75-caaa-4623-896e-d400708d844a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4aafc6f4-d441-4e1b-b904-d23016696d90"
        },
        "item": {
          "id": "86b614b9-83b9-4a70-90ec-e080f3ce01f4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9e634ff0-14fc-4f98-9526-c768a8646795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d597cc20-de57-4d31-9b5f-d1884b5efa66",
        "cursor": {
          "ref": "4deb04f5-b078-43a5-bb27-605dcb010b2a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f508a7e5-c61c-4794-97f8-4f46bcc92b3a"
        },
        "item": {
          "id": "d597cc20-de57-4d31-9b5f-d1884b5efa66",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f8558922-30e3-4c18-96ea-9df2844da5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c5ac34-14ee-475e-9869-d9aad7d8665a",
        "cursor": {
          "ref": "39dbd1ad-09fc-4cb9-bfa2-34f666257bac",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94f8a452-4571-4511-bb78-cd6320deb211"
        },
        "item": {
          "id": "97c5ac34-14ee-475e-9869-d9aad7d8665a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "80c306db-ed0d-4085-8009-e6efd13cd287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca721b5-218b-48e3-8e8c-22e972d45ca9",
        "cursor": {
          "ref": "75daca13-2dba-4344-bd5f-03e0f6c760a1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dd55a678-8c80-47ee-bc1a-f841efe0f6c2"
        },
        "item": {
          "id": "1ca721b5-218b-48e3-8e8c-22e972d45ca9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "85dbe90e-04c2-4c8a-9eb6-160998d126d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c2eca-c70f-4364-8343-cc82baa75c7e",
        "cursor": {
          "ref": "00d072a7-2680-4ab5-b0dd-f9a1c1835659",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aa501b0b-38e3-4eb4-bba6-1da272ff0992"
        },
        "item": {
          "id": "da2c2eca-c70f-4364-8343-cc82baa75c7e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "437b1ca8-286c-4ff0-894b-6111ff1785c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cc82e0-bd79-48ed-9393-e66bd1670e95",
        "cursor": {
          "ref": "8d0a3c3c-0aba-48c1-b932-621afa83cae5",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "405ccf08-2afa-4b89-92fd-422d3826e698"
        },
        "item": {
          "id": "d2cc82e0-bd79-48ed-9393-e66bd1670e95",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "50be02d0-dc2c-4af2-9979-2885d7561c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a916bf9-9faf-41ab-a343-f5624a9193cb",
        "cursor": {
          "ref": "927549d4-bbd2-4380-9783-896cb5ca8ff5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cf1e67a5-801a-4efb-9fdf-98898ec7be39"
        },
        "item": {
          "id": "3a916bf9-9faf-41ab-a343-f5624a9193cb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3fc6806a-d798-4986-b800-68d6cd970de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1dfe93-f849-4efc-940b-d4e765c0c1e3",
        "cursor": {
          "ref": "7bcbcd48-f968-463f-a74b-16568a418933",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2137d0e2-713f-47e0-a0a2-e5ead1a9460d"
        },
        "item": {
          "id": "1a1dfe93-f849-4efc-940b-d4e765c0c1e3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "422c9e0b-dbc5-48fc-9660-636ceffb4072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcca304-7fbb-4561-a21f-329d9ac72f1e",
        "cursor": {
          "ref": "017e610e-229a-4536-a2cb-bc743884a9de",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8e77638a-e78e-48df-9ef2-a78381070b79"
        },
        "item": {
          "id": "bbcca304-7fbb-4561-a21f-329d9ac72f1e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c3c29199-38f2-42e1-9c14-8d33599f0f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f7280a-e3e6-4d17-84f2-c8521e1959cd",
        "cursor": {
          "ref": "2431c3d2-cb35-4c7b-b45f-f283291a9e47",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "33e8d953-cd2d-4d42-86c2-e1cb12065068"
        },
        "item": {
          "id": "29f7280a-e3e6-4d17-84f2-c8521e1959cd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "620bcc45-a560-4248-9210-eeb7b5d42168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ada3e0-e259-426b-b430-859c409e4a2f",
        "cursor": {
          "ref": "c8e0d5d4-862c-4678-a324-ad0062ba4db0",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7d86e180-2d35-44cb-8601-da22557ddc54"
        },
        "item": {
          "id": "63ada3e0-e259-426b-b430-859c409e4a2f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d661358f-ca0d-4f34-a025-4ff6e4ae5039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4249001-9c3b-43af-bc9f-820b3df15179",
        "cursor": {
          "ref": "568927d3-b0b1-4cb1-8363-2606558780c0",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a56f7ea1-d777-4f5e-ab1a-d1dd4fef5b60"
        },
        "item": {
          "id": "a4249001-9c3b-43af-bc9f-820b3df15179",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e6990783-c1b3-4c06-af24-fc4a48aa9191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e690d68-3570-460b-b9d7-96c0a9d1d8a6",
        "cursor": {
          "ref": "009d181a-f643-4250-996b-5fb907440aae",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5fdf5144-b9e3-49f9-b13c-7604a32d3c09"
        },
        "item": {
          "id": "7e690d68-3570-460b-b9d7-96c0a9d1d8a6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6f959ea7-3346-4430-8c19-28226cdbb6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deddea2c-9ecd-46dc-829a-d04c368dcb8b",
        "cursor": {
          "ref": "3a5f11e7-dbb9-41f2-8a3d-d42e720e1ae4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "68127c99-0033-4b51-9a52-34b5ad0963ed"
        },
        "item": {
          "id": "deddea2c-9ecd-46dc-829a-d04c368dcb8b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "037f3820-9776-4e9f-90b4-a3a489714109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61633e6-d202-4f70-a3e8-3220aecd22bb",
        "cursor": {
          "ref": "b7923bed-0201-4f9d-bf50-af5750a79fb6",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "48452c49-030a-4145-85da-a3749b85cc64"
        },
        "item": {
          "id": "f61633e6-d202-4f70-a3e8-3220aecd22bb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d40a010e-e9b2-418d-af03-04cc61365064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219bb76a-a49f-406a-a345-f46a39fb0286",
        "cursor": {
          "ref": "192f6b22-c7ac-4487-8c96-e5e70ac7e1f7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eb2175c3-cf0f-4525-93ff-6936a2ff88bc"
        },
        "item": {
          "id": "219bb76a-a49f-406a-a345-f46a39fb0286",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "566b7885-f199-454f-a18e-e6b1471af171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a72a64b-7a07-459d-bcac-855556338df5",
        "cursor": {
          "ref": "64e569a6-fd16-493c-80c6-b5afcce630d0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cd26854c-d1b8-4399-a202-8dca3f3279fd"
        },
        "item": {
          "id": "4a72a64b-7a07-459d-bcac-855556338df5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e6382d4e-f70a-4996-a418-faf401b55831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966999f8-36b2-4ba2-8cba-a2cd6a1f91be",
        "cursor": {
          "ref": "06a7b1e2-1e20-43df-b437-fd5d96d0f75d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9f598a03-abec-4839-ab28-9375d3954470"
        },
        "item": {
          "id": "966999f8-36b2-4ba2-8cba-a2cd6a1f91be",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "40771a3f-7e36-48a3-ace7-2609de80c589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d3e087-30a6-44fa-8d53-ea8e65c53b15",
        "cursor": {
          "ref": "bf7ad0c6-5579-4a94-96b1-6cbdc8fa732c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "08f6f769-bd02-4713-91f3-7d46f4d1dca2"
        },
        "item": {
          "id": "23d3e087-30a6-44fa-8d53-ea8e65c53b15",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b845a0af-12bb-452b-9cac-58c11b630e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f721f1-cc24-48c7-805c-49d13810b479",
        "cursor": {
          "ref": "6c785f47-1516-4ed1-b50d-f1714efdc9cf",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "514955c4-b933-4fd3-a6a1-f7c19eb54620"
        },
        "item": {
          "id": "a7f721f1-cc24-48c7-805c-49d13810b479",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c3baa265-2b4e-4f2f-b32b-4f4b95bcf152",
          "status": "Created",
          "code": 201,
          "responseTime": 789,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "922127d4-84ef-477e-9a69-98c050758599",
        "cursor": {
          "ref": "2f5f703e-ba04-4ffe-b403-5933efe8cb14",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "572d16bb-26ae-44b9-ace7-6d5f4267d78a"
        },
        "item": {
          "id": "922127d4-84ef-477e-9a69-98c050758599",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ac62b257-7d9e-48eb-aa2e-ac076d7e408b",
          "status": "Created",
          "code": 201,
          "responseTime": 458,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "023d58d8-ba01-4743-b885-bd29175fa70d",
        "cursor": {
          "ref": "c64c72f4-86c5-4340-a7b7-4842f8f0df83",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47f15c09-4c81-451e-9934-46822defb76c"
        },
        "item": {
          "id": "023d58d8-ba01-4743-b885-bd29175fa70d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c030e97e-c28e-48bf-afaf-b0889007dd90",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6e01b974-6799-447f-905b-7e3503b9ffe3",
        "cursor": {
          "ref": "096e2ed6-8310-4153-a834-f88b12bba9d2",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "093a9b87-f592-4ae7-b9a2-7cb23219ba9c"
        },
        "item": {
          "id": "6e01b974-6799-447f-905b-7e3503b9ffe3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7e784bcd-64ec-4042-a020-e2c40851352a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f69b7c-2e91-4bbf-ad42-c8f99c4b12f9",
        "cursor": {
          "ref": "317d404b-3fdf-4167-90de-c0083845ef8d",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1945962f-582e-47af-91c1-24bc535aa59e"
        },
        "item": {
          "id": "48f69b7c-2e91-4bbf-ad42-c8f99c4b12f9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ff863b92-a200-4709-b44e-09255e4f6df8",
          "status": "Created",
          "code": 201,
          "responseTime": 394,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7f2fd933-449f-4226-b32c-89f46741a42f",
        "cursor": {
          "ref": "2380b68a-b94d-4b06-b8d9-b52e77a1f574",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1dc05106-eb56-4e25-8ad5-16ea0df0033e"
        },
        "item": {
          "id": "7f2fd933-449f-4226-b32c-89f46741a42f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "63c6cbc0-49fd-4423-952b-79c68ce6a2fe",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "18654652-ff93-4ab9-b399-9873e9a0107a",
        "cursor": {
          "ref": "d63901e5-850a-4d98-a5a7-c7388fc7c992",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "530ca91b-804d-465e-8fb2-05bd13a531c3"
        },
        "item": {
          "id": "18654652-ff93-4ab9-b399-9873e9a0107a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8be2a8bd-7c64-4b9b-a9c3-50905f3f1aab",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c2343074-be81-47b8-a072-06b4f234d4e8",
        "cursor": {
          "ref": "dcd6f1ad-a892-4439-9590-84408370e9bc",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "30388cbf-09c2-4e56-8b80-704b1d7955ef"
        },
        "item": {
          "id": "c2343074-be81-47b8-a072-06b4f234d4e8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7b73fa45-a252-4d5a-9f46-bc21ada714de",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "18c0371f-3332-4413-83fc-e1864ab06530",
        "cursor": {
          "ref": "029e59ce-e728-44d4-963f-4f95cbb13698",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "caef1d4a-6137-4d96-b9ee-b07219e07fff"
        },
        "item": {
          "id": "18c0371f-3332-4413-83fc-e1864ab06530",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d9d441e3-204f-46eb-8187-cb29f05f1466",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fe14b710-5ebc-4fcb-908e-65d7b041a0e7",
        "cursor": {
          "ref": "8dc04285-7916-4d53-9126-87f530c623f6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c9d2abd4-28b6-46aa-a4ef-0185c4549399"
        },
        "item": {
          "id": "fe14b710-5ebc-4fcb-908e-65d7b041a0e7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "10bae3dd-dbf9-4100-b75c-8bbf604f54c4",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7d770560-c531-451c-9010-36fc03007dc3",
        "cursor": {
          "ref": "935b572d-4551-44f4-b57c-0aeef02c8b42",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c43ac33c-d0b5-40ae-b592-61a9190b3fd9"
        },
        "item": {
          "id": "7d770560-c531-451c-9010-36fc03007dc3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ab1abcdc-7a77-42d8-a8be-9bae1d368a90",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1db029ae-500e-41b4-9b95-ffdbe7d37d97",
        "cursor": {
          "ref": "26d867bb-69a4-4ed9-bd41-d61e3f26206c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f2f95c1f-6066-4ca1-a6c0-662efa7625e8"
        },
        "item": {
          "id": "1db029ae-500e-41b4-9b95-ffdbe7d37d97",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "16c9456d-a886-4e84-82a7-d406db5f8acc",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dc07dc8e-d033-4097-851e-36e2117a3f43",
        "cursor": {
          "ref": "91e0032b-fffe-4646-a392-58b82073b259",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cefc9bea-548a-4d2d-a3cb-3a73b1ebfc61"
        },
        "item": {
          "id": "dc07dc8e-d033-4097-851e-36e2117a3f43",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5a21278d-57cb-4915-92fd-29cb1869a2a9",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "230d460a-30d7-440a-a489-80199df1d97b",
        "cursor": {
          "ref": "4d982e16-52d2-497a-8016-d00931ec8f32",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "99a61328-3827-4728-a725-e013b5f13913"
        },
        "item": {
          "id": "230d460a-30d7-440a-a489-80199df1d97b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e6252869-d5b6-4b8d-be9b-cedca6232f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d842f7f-1d42-42f7-b638-40f29b603920",
        "cursor": {
          "ref": "28061ebc-2bd2-4d1c-b715-3d2ffa43ed38",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "48b823ac-c44d-4f6e-ac8a-faccb64ce47f"
        },
        "item": {
          "id": "7d842f7f-1d42-42f7-b638-40f29b603920",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ac16e27a-6cce-4ca0-a8d6-7a2064efd171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306a8658-8b6d-483f-b228-a2bf20b0a99e",
        "cursor": {
          "ref": "88a97672-106f-4e01-b4e4-7f2567345740",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ecb556a4-18d6-47fe-ab66-90ffac2ec7b8"
        },
        "item": {
          "id": "306a8658-8b6d-483f-b228-a2bf20b0a99e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dcf08862-070e-474e-92d1-02b08ecd9ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566a1cee-3b7a-4da7-b0e9-a271da628eff",
        "cursor": {
          "ref": "e77bac08-ae40-407e-bf6a-bfea015ffdb7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f53f8127-bf55-4304-9433-aef7ef1c06cf"
        },
        "item": {
          "id": "566a1cee-3b7a-4da7-b0e9-a271da628eff",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "de28aee4-8fb2-4451-8a06-b49a6d300336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c69054-bdea-4853-bfb9-792478ad2cb5",
        "cursor": {
          "ref": "2dafebb0-3ad3-4723-9fe8-e8e153c182a2",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b8da31a4-9138-4d5b-b939-73f3ced08f51"
        },
        "item": {
          "id": "04c69054-bdea-4853-bfb9-792478ad2cb5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a806fefc-d9d9-4139-9fee-5f8c19fadb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1306761c-0867-413c-8246-0daaf16ba8ce",
        "cursor": {
          "ref": "bb1a5cbc-c267-4c8b-959c-c91f1259743b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "730074cb-70e5-448f-b937-1fae40ae7b70"
        },
        "item": {
          "id": "1306761c-0867-413c-8246-0daaf16ba8ce",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fc713b06-6eec-41a2-adc3-2c414521e603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13632e5-2ca7-4ac0-95e8-b6773af76fcd",
        "cursor": {
          "ref": "069c7dd4-f8ce-4000-a19d-870694345211",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1da0c230-ada1-4b0c-ac29-6e63594fc25b"
        },
        "item": {
          "id": "d13632e5-2ca7-4ac0-95e8-b6773af76fcd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "028cbdcf-4f5e-4092-8d30-d7f5b12a4002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef18ab3-21ee-42dd-ae34-557a1c30f207",
        "cursor": {
          "ref": "40b2b9aa-6297-4e33-9ebf-9a6ff67c6822",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a89d3631-35e5-414d-88d6-a634dee0ce34"
        },
        "item": {
          "id": "eef18ab3-21ee-42dd-ae34-557a1c30f207",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "87cdae6f-e6fb-4a80-8c5e-020ca532fc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89c87df-937c-4375-b0ee-bab080677bc9",
        "cursor": {
          "ref": "f10fca07-8742-46b7-b6bf-7f11bad1dadb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2f474ffa-029a-42f3-af8c-423aac2e52a2"
        },
        "item": {
          "id": "a89c87df-937c-4375-b0ee-bab080677bc9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d8f76be9-d990-4fd9-a02c-4e33cc111839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed14ac8-68dc-4961-980f-4fc1fd4c5a76",
        "cursor": {
          "ref": "6da501c2-c7ad-4e61-b210-ef6c6294b804",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0e6b9d2a-7749-4925-9c65-4c5130840368"
        },
        "item": {
          "id": "3ed14ac8-68dc-4961-980f-4fc1fd4c5a76",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "adb8f9f2-325d-484e-87c4-a5e2c60dd3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fdd3d7-9094-435a-be50-30cf34e50dcf",
        "cursor": {
          "ref": "c9287e6c-5d30-4f5d-aae7-0a2c9899d1cf",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "338952c9-9358-4f8a-b964-fc51e036b556"
        },
        "item": {
          "id": "00fdd3d7-9094-435a-be50-30cf34e50dcf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae03447d-b1c5-4ce6-9a39-eb6ff2ae1a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8846c8-8793-4ac0-8900-e7c9027eb72f",
        "cursor": {
          "ref": "ff3de93b-8480-447d-91f3-f8d1b2d1490b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "454d6045-1ec2-4da8-a98d-bbab66d825c3"
        },
        "item": {
          "id": "2c8846c8-8793-4ac0-8900-e7c9027eb72f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "55aa8efa-23cb-4750-a32d-ab0dac0e3a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838c199b-8e43-477b-82a5-b02388848b77",
        "cursor": {
          "ref": "b1758f0c-516f-4509-a0fd-87e93e1cb34e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "699ec1de-bb6f-4ef7-bf56-b9fea18e3032"
        },
        "item": {
          "id": "838c199b-8e43-477b-82a5-b02388848b77",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6b8ab66c-5779-4490-b0e9-c6353f5c27b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dae3bf9-73e4-4040-8b61-539ce3c5f01d",
        "cursor": {
          "ref": "0416a377-9c58-4738-8158-39797343194c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "11268ec3-54c8-4145-8079-935599360b0e"
        },
        "item": {
          "id": "6dae3bf9-73e4-4040-8b61-539ce3c5f01d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c1bcc14-6e9b-4c92-906c-9a2815bff27d",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "538fa597-4234-465e-be04-d153aa8da00d",
        "cursor": {
          "ref": "c324b83c-1755-4b2e-b699-531840cc827e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "88a0e5e7-fe9d-4513-9f75-f557a8c27e3f"
        },
        "item": {
          "id": "538fa597-4234-465e-be04-d153aa8da00d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f2128a80-3be4-4631-a167-ccc71a6dee03",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "297b608c-30fc-410b-b248-caf3ef9972d8",
        "cursor": {
          "ref": "87d992d9-219c-4443-99bd-f6330d91a0ae",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "09b9ea06-3808-472a-b288-5b7fd9305427"
        },
        "item": {
          "id": "297b608c-30fc-410b-b248-caf3ef9972d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "79761fdb-6f8d-4930-885d-4da8cc3bc8bc",
          "status": "Created",
          "code": 201,
          "responseTime": 415,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d52b400e-641d-43d0-ab1c-269aec3f6c84",
        "cursor": {
          "ref": "3fc3bacb-5a42-4b29-9ad7-2114a70dcba1",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "00599d3b-e0df-411c-ba90-4699576014ba"
        },
        "item": {
          "id": "d52b400e-641d-43d0-ab1c-269aec3f6c84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8d4604cc-4476-491e-9f54-51761e8510a9",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9eac8189-ff98-49c0-8ed5-6f4ff8772f1d",
        "cursor": {
          "ref": "0948ceed-97fd-49b4-8aa7-d5561714bbae",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3c807c97-bdfa-4985-b90d-b2bffc71ef83"
        },
        "item": {
          "id": "9eac8189-ff98-49c0-8ed5-6f4ff8772f1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e911049b-cdf7-41e4-888d-757991604ebf",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f3de71c0-7c92-4622-ab96-4d143efea315",
        "cursor": {
          "ref": "01a793b1-11c8-4e8c-ba08-e4a4bf2f5924",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f2853a11-eaa2-48b2-818e-3b1dc7c267dc"
        },
        "item": {
          "id": "f3de71c0-7c92-4622-ab96-4d143efea315",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3154995-e93a-4060-b777-e561e707425b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7274cfa1-c8be-483e-9dd5-243bb393c364",
        "cursor": {
          "ref": "42b779c1-eb99-4606-b11c-af178ca8f7fc",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eae32450-ebff-4a45-a151-0712af6dc660"
        },
        "item": {
          "id": "7274cfa1-c8be-483e-9dd5-243bb393c364",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "86ec3488-b661-4030-986e-02c4447a94f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550d03b7-57da-4f1c-9b1a-12927cedf8c6",
        "cursor": {
          "ref": "aadf7d01-40b9-47cf-a61a-6969d18da397",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "44a0e359-9076-42fa-80c1-e0253946418d"
        },
        "item": {
          "id": "550d03b7-57da-4f1c-9b1a-12927cedf8c6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "936f9f3f-f592-40d2-9372-99c008d75973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce3c00f-22b4-4f4a-a6b3-cdb7c9b6b9aa",
        "cursor": {
          "ref": "b72f76a2-ecb6-4928-b7a9-933e0f06f7c4",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e696c000-1867-4b34-9286-c9857e8358c2"
        },
        "item": {
          "id": "fce3c00f-22b4-4f4a-a6b3-cdb7c9b6b9aa",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b116e28c-c815-417f-8d18-f0989870c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43179f99-5ce2-46d4-a886-6f4e18752a5a",
        "cursor": {
          "ref": "221e5100-af1d-47c4-a29b-fe1fec37f5a1",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "99b54c77-e156-4a5d-8537-680dcfe62b49"
        },
        "item": {
          "id": "43179f99-5ce2-46d4-a886-6f4e18752a5a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cef8d70a-69ad-41b2-b2be-0a2fe898eb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a99d66-54e7-4fd7-a659-e44e23ebea08",
        "cursor": {
          "ref": "f38f5d06-1c2f-4a68-aeca-2b9d01b663ea",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "06aec5b9-4ba5-4a9e-b878-4331ea2a4254"
        },
        "item": {
          "id": "05a99d66-54e7-4fd7-a659-e44e23ebea08",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f5928752-0ce4-404b-bf72-8cee876223bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f87c079-f452-40ca-b2b1-b5ef77353f24",
        "cursor": {
          "ref": "6a3fc62f-bb1d-4567-bd9c-f7bd5ed52df7",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3a14d512-8252-41a1-907f-ab64bf3034c6"
        },
        "item": {
          "id": "5f87c079-f452-40ca-b2b1-b5ef77353f24",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1849eceb-c86d-48f5-8afe-ca6755aee076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ddb1f5-4e50-455a-8e49-5f94d2276116",
        "cursor": {
          "ref": "7353358f-b4e6-4ed7-9cb7-6a5787ee5cdb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cb9afeec-2b50-403a-bcb5-6a251b238800"
        },
        "item": {
          "id": "a1ddb1f5-4e50-455a-8e49-5f94d2276116",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "130f8401-0ab2-48c2-a1db-93117d79add0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca51ed6-5d7f-45eb-9bf7-07bfb7378ba9",
        "cursor": {
          "ref": "47d07dbd-9fe0-40ad-8256-75780b1374e6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5fa53672-6568-41d6-90a6-762dd41f6340"
        },
        "item": {
          "id": "7ca51ed6-5d7f-45eb-9bf7-07bfb7378ba9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "96e35045-6d43-4e80-9d10-f469b7cde38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d654b29-a716-4952-9a07-9a5eea215a75",
        "cursor": {
          "ref": "7c7d24f5-9a8b-4acb-b82d-26d6bc27b141",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d47cbba2-115c-4014-87b4-cbb31450a5b9"
        },
        "item": {
          "id": "1d654b29-a716-4952-9a07-9a5eea215a75",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dce3e5d0-d096-4ce6-bc3a-dc505e565566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4476d751-369b-4169-8f26-f2cfea64efd9",
        "cursor": {
          "ref": "1d4215d9-b52a-4470-8462-92f43d09cffd",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ae24e7bc-1575-4afe-9147-5c05cdf5fd53"
        },
        "item": {
          "id": "4476d751-369b-4169-8f26-f2cfea64efd9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "72e4478d-c2a8-4c26-b2b0-570968d8444e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc659ae8-c84f-417e-9e57-98d439d7b551",
        "cursor": {
          "ref": "3f738c3e-c919-4fc6-9163-85dab7515ed4",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7ae841c9-0a06-4672-8df2-66ed64ccbdb1"
        },
        "item": {
          "id": "cc659ae8-c84f-417e-9e57-98d439d7b551",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8682ec17-1c88-49a7-9c61-a4015cc17ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee2e490-6a16-47d0-aebc-87ad0aad278c",
        "cursor": {
          "ref": "75b1d56a-0d2d-4fc5-81b6-a5067c02f446",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9110c1f1-5ab0-4089-8aad-41cb820f543d"
        },
        "item": {
          "id": "aee2e490-6a16-47d0-aebc-87ad0aad278c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4c44f790-38bc-4cbc-b370-b1980561fcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7830fc42-1ff2-4978-85d4-7398c20d886b",
        "cursor": {
          "ref": "3471f30b-d233-417e-9264-294bb59032a6",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b8212469-2f72-4942-923f-839ea3cc9982"
        },
        "item": {
          "id": "7830fc42-1ff2-4978-85d4-7398c20d886b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a982e8a6-6ac4-4ecc-b2ea-f7e4f390dac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c127210-7700-4f86-a613-d714edbb1d57",
        "cursor": {
          "ref": "d7822256-749a-4d81-bc72-7426e18a6ca4",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad25a67c-f487-480b-8c63-2c2241b84583"
        },
        "item": {
          "id": "3c127210-7700-4f86-a613-d714edbb1d57",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1e3d89f9-6aba-4791-9699-0c50c1193d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff65e1f-3d33-4b9d-bfb1-ba23e2225090",
        "cursor": {
          "ref": "a6fcfa99-36b8-4d2f-a2ee-c7138c0562f7",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f83a0ece-0ac8-40d0-8805-8d256adfee2d"
        },
        "item": {
          "id": "7ff65e1f-3d33-4b9d-bfb1-ba23e2225090",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "75a7963c-c0c7-4e44-b632-3220aebdde66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f0849d-6e3d-4430-88c5-2aae7a49a6d2",
        "cursor": {
          "ref": "08c6c1a5-9694-47e2-b5f0-6b1525c5a30e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "67409cc0-81bc-4090-8190-8c6317ee37af"
        },
        "item": {
          "id": "79f0849d-6e3d-4430-88c5-2aae7a49a6d2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "af080926-b182-43ad-984b-4a1d3a967c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3c2e9e-7585-465c-9c6e-acac1662a86b",
        "cursor": {
          "ref": "6e350465-3d0b-4786-b5a5-c700e715db3d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ad04d13d-d273-4425-a60d-93a918626fed"
        },
        "item": {
          "id": "9c3c2e9e-7585-465c-9c6e-acac1662a86b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f930c476-415d-493b-a85d-06aa231c5ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99345d0a-93df-4895-b809-41fb788b48ae",
        "cursor": {
          "ref": "c9755d75-5d61-4230-9186-41b34fda735d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "425b42bd-8710-414e-9b38-36c8169232e5"
        },
        "item": {
          "id": "99345d0a-93df-4895-b809-41fb788b48ae",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "60b221a2-694d-4f80-856e-e54ddf3632d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ce135d-3ba3-45cf-a7fe-5e9bce76c106",
        "cursor": {
          "ref": "55bdd695-d819-49eb-a04c-5510e95cfb58",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4d1c9200-699c-4a21-97d7-cb12c42878f0"
        },
        "item": {
          "id": "12ce135d-3ba3-45cf-a7fe-5e9bce76c106",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "50869215-7f64-4057-bb85-1c9f525631e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fadedb-3901-41ce-9c87-af2317f7d428",
        "cursor": {
          "ref": "af476759-64d5-4df6-9b23-54cedc57ca74",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2bb01afa-d090-497c-941c-a4674c0e98fb"
        },
        "item": {
          "id": "07fadedb-3901-41ce-9c87-af2317f7d428",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "88c673c1-a715-4103-b063-ffb3f235a56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242a590b-3352-4af5-b36a-64d02b4dd58d",
        "cursor": {
          "ref": "af7a8017-2ebb-4900-906c-1d4b1edcc84b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cb575a93-f66d-4dde-ab39-5c89ed68b7d1"
        },
        "item": {
          "id": "242a590b-3352-4af5-b36a-64d02b4dd58d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0cec8b6-bfcb-4490-bf9e-1e73f857320f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10005359-afbf-4ee7-8fdd-1385676f5694",
        "cursor": {
          "ref": "960fe1f7-96f5-4ef2-93aa-b06c7e125666",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e6391dfb-7f26-44d7-896b-b07ff7322c1a"
        },
        "item": {
          "id": "10005359-afbf-4ee7-8fdd-1385676f5694",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8235f5d9-adad-4d9b-b168-a5a35c05dcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2fef7e-88da-448c-9baf-d4dffef92b06",
        "cursor": {
          "ref": "77d6ddb4-e436-48bb-9656-ffc71cfa7fb5",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "61ee9f9c-e97a-4733-953a-8d1dcc203ef6"
        },
        "item": {
          "id": "cd2fef7e-88da-448c-9baf-d4dffef92b06",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f67e2347-cab3-403a-a895-0adba6f105bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f6c870-cd65-4811-bf20-3b7a63343c6a",
        "cursor": {
          "ref": "b74a3ae5-96a8-42e7-ae07-d99858defb20",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3ca6e5ea-f66d-445c-acde-9adc82923723"
        },
        "item": {
          "id": "94f6c870-cd65-4811-bf20-3b7a63343c6a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d51cbb8a-66a5-448d-8ac5-137dd935ee13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9439a6-c29e-4bbd-99d3-42ecf54ab4bd",
        "cursor": {
          "ref": "9f0a995a-4d52-4071-a653-2fd85df993ce",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "07ae51ec-5be8-452b-8fc2-b89ffdc3f53f"
        },
        "item": {
          "id": "1c9439a6-c29e-4bbd-99d3-42ecf54ab4bd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5754fa64-59a0-403a-bbd3-119752e99913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01d81bb-a228-4a3d-a3b1-2c5c1fe620d7",
        "cursor": {
          "ref": "fb842399-2f45-4603-8ef2-6357b9f13243",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "da4e51a5-e7a7-4b9a-9ade-b836e879c7b7"
        },
        "item": {
          "id": "e01d81bb-a228-4a3d-a3b1-2c5c1fe620d7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "607fee18-aa61-4bdc-b4b9-e45426e9cd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f2ea3c-8685-4cc3-bbbe-8f2614795368",
        "cursor": {
          "ref": "16247905-1ad9-489d-92f3-9bc389799805",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a3cb06f5-92cd-4a97-be99-685cecec58a5"
        },
        "item": {
          "id": "e8f2ea3c-8685-4cc3-bbbe-8f2614795368",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c579a4e4-51bc-4e0d-b9c0-a7b21a62f190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cc642b-db24-4a1b-b4c8-fef4a0a6b064",
        "cursor": {
          "ref": "821efcaf-bd0a-444d-8ed9-7632fd2d019a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "37f26a64-eb4f-4b7c-8241-284cd6c152a5"
        },
        "item": {
          "id": "27cc642b-db24-4a1b-b4c8-fef4a0a6b064",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "023e2850-06ec-4c12-a823-43d58e86e2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe20afa-34f4-402e-88c7-72c58d9f3809",
        "cursor": {
          "ref": "14c15af9-6a9d-4243-89a2-fc9f6134e04f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a1e7abd9-6a4d-4c64-ac32-b80a32919f44"
        },
        "item": {
          "id": "abe20afa-34f4-402e-88c7-72c58d9f3809",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "99577965-c341-4e4e-a7c2-d23ea17cd251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d565611-930b-4ced-b3d3-2ddb220911aa",
        "cursor": {
          "ref": "9211e219-c614-4a6c-9eb6-35c74f7a137b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9330279a-c039-44dd-9af4-6bc0b2229c87"
        },
        "item": {
          "id": "4d565611-930b-4ced-b3d3-2ddb220911aa",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0e731bea-2757-4cad-89ec-53c71d54a292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fba16ad-c2d9-4d50-8c76-fb7d19f4efd0",
        "cursor": {
          "ref": "6c89979d-b2be-4421-a93a-4412138a0940",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "25f098e0-b526-4893-9bfa-8c9321c7a597"
        },
        "item": {
          "id": "4fba16ad-c2d9-4d50-8c76-fb7d19f4efd0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6b3aa38c-e204-40e8-b854-20b9ac09a631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e31b1b-782b-419c-82ec-ef98b4610c82",
        "cursor": {
          "ref": "da28d294-7751-4ce7-ab6f-145a810dfdf3",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "674e7ae4-de0d-4e0c-b875-b09bac1a45de"
        },
        "item": {
          "id": "21e31b1b-782b-419c-82ec-ef98b4610c82",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e3561c5f-1e5c-4b41-9883-47b3794190a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7f1f61b0-7e86-4d68-b876-139fcd959e77",
        "cursor": {
          "ref": "c2878462-14ef-4b26-a9a8-6bb7b1cfcd72",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a501fd8d-c7cc-47cd-897b-66c2ef718f48"
        },
        "item": {
          "id": "7f1f61b0-7e86-4d68-b876-139fcd959e77",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6d596b76-337a-41ca-a082-d89558aa4f22",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafede07-fbaa-4300-a621-0dd023c5bdce",
        "cursor": {
          "ref": "67b6b3d2-3fd2-45d8-978f-730b42c11cd0",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "eaa667b6-a663-4c11-88e4-60b8b74290ba"
        },
        "item": {
          "id": "eafede07-fbaa-4300-a621-0dd023c5bdce",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f08da989-6fd8-4587-845d-212301a0eb45",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7e8712-5168-4d0b-855c-7278e816b037",
        "cursor": {
          "ref": "444655e5-a07a-4cfa-a43e-3a5ce5678d4b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f29d16d5-a026-44a3-9ea2-6eed2eec256c"
        },
        "item": {
          "id": "8c7e8712-5168-4d0b-855c-7278e816b037",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ade1f260-892b-4074-8fb6-123ad3979dd3",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a96c6f-b77b-4d39-a797-b4c09a309bbf",
        "cursor": {
          "ref": "21fd08dd-1a04-44e1-9ab1-4a7f515ce173",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7fad943b-e779-4b08-8d39-f724a1c8a878"
        },
        "item": {
          "id": "f1a96c6f-b77b-4d39-a797-b4c09a309bbf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2d2ed999-fff0-4a22-b53c-7f588196e74b",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "76911f49-4bee-4121-a6d6-9f9fb23be529",
        "cursor": {
          "ref": "ccba4efc-d783-4c06-b041-5dad2a5ed5a6",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "83122123-26f1-4f57-a459-619307df17af"
        },
        "item": {
          "id": "76911f49-4bee-4121-a6d6-9f9fb23be529",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c67cead6-4f50-4960-bc52-e05bebf8c7b6",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-22T00:37:06.883Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-22T00:37:06.883Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e2994753-44ea-41d9-a929-335dd4277b92",
        "cursor": {
          "ref": "4cd83919-7dd0-4bdb-9c57-c1f2a946666e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9fa40e86-7c0e-4864-9417-392ae4a0ea6d"
        },
        "item": {
          "id": "e2994753-44ea-41d9-a929-335dd4277b92",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "120b9b33-0d21-42db-8999-2ac5a5f2a4cd",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de03a6f5-006c-4071-8402-830f40a43aae",
        "cursor": {
          "ref": "16905105-984d-4666-95b4-830dfe410c10",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "87c5a59b-880b-41b8-adb7-4f4e629c2213"
        },
        "item": {
          "id": "de03a6f5-006c-4071-8402-830f40a43aae",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d9ff676-5742-4f8f-a034-2a81a6dee7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b50aa8-a247-4a3c-a6ab-29a1fe1a15df",
        "cursor": {
          "ref": "fb079ee5-0a97-43ef-9e26-c883ef160302",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cb8250d5-6274-4c55-af8e-c3cb5ce81c9d"
        },
        "item": {
          "id": "07b50aa8-a247-4a3c-a6ab-29a1fe1a15df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "15f32f69-da7d-48ad-b548-1fc71255b3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ed6b97-2608-4fd2-a216-087b82e08de9",
        "cursor": {
          "ref": "66766ed6-4a08-4da7-a3d9-fdcfee827257",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5add9de4-edd0-4368-aedd-4e553a84a8d3"
        },
        "item": {
          "id": "08ed6b97-2608-4fd2-a216-087b82e08de9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "142c4bb3-22cb-45d1-9267-f98f507dfa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdb5d12-4a69-4838-a3ff-0b30d3e0ce14",
        "cursor": {
          "ref": "19f482b8-7492-44b8-a384-d9f2cab7206d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2492ed5e-9372-40a2-b38b-a71d70bf93c3"
        },
        "item": {
          "id": "bbdb5d12-4a69-4838-a3ff-0b30d3e0ce14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d8fae5e7-cd33-44cd-9b8e-c3eac9665faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceef4f2-7f96-4a43-bc3e-79e9edb54728",
        "cursor": {
          "ref": "fce5cc70-6720-460c-b722-0e62a9aad5f6",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "900deac2-4fac-49a0-a8ee-6383227aabf2"
        },
        "item": {
          "id": "cceef4f2-7f96-4a43-bc3e-79e9edb54728",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b0fabc1a-c279-49ed-9049-c9345aa5eb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8a6562-4e42-40a5-8c4d-3b6ea6df0886",
        "cursor": {
          "ref": "e4a89675-0b9f-400f-9f59-ad9990f91572",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40ccc66d-69bf-4208-a09b-823dcac1c25c"
        },
        "item": {
          "id": "bb8a6562-4e42-40a5-8c4d-3b6ea6df0886",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "070c090f-977d-4291-8ef1-3fcbb3acbfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f496805-178c-449d-8b5d-afd33790cd61",
        "cursor": {
          "ref": "5b5ba3f2-c6ba-4088-9b15-1c7c5c03953b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "18c06f65-433b-4b84-a6be-24c15f1ac301"
        },
        "item": {
          "id": "2f496805-178c-449d-8b5d-afd33790cd61",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f7e3d93-cb32-4cb9-84d5-63768ac74c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97bf5f7-0e30-4f94-9866-aa2cf99a258d",
        "cursor": {
          "ref": "cd45fad5-b1db-47b4-ac6b-a71577a1f7f5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "412d602f-3176-432e-9463-f42688c0a02a"
        },
        "item": {
          "id": "a97bf5f7-0e30-4f94-9866-aa2cf99a258d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8c02e6d2-5495-420d-b675-0834d2610b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c04e08c-15c7-4761-a5a2-c6d9f0d40f8d",
        "cursor": {
          "ref": "e9cda96d-b9b1-46e4-ad4a-86f09dc7078a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "985c6c92-a2e5-4f29-9e9a-c96eef853f71"
        },
        "item": {
          "id": "6c04e08c-15c7-4761-a5a2-c6d9f0d40f8d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "da8a4286-10f4-4c58-aeb9-9e40460f4fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f724be5-44f4-418b-b252-476ad4164434",
        "cursor": {
          "ref": "22b1797e-75a4-4371-a9a8-1c250622ef7f",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e832df5c-ea44-49ec-964a-fef2be5d8eb7"
        },
        "item": {
          "id": "8f724be5-44f4-418b-b252-476ad4164434",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d101bc3-3cce-43cd-9326-0fa4ca38bf41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaec3857-a179-4206-89fd-404c2a45e8e9",
        "cursor": {
          "ref": "493bbc5d-e3dd-42d0-9810-6e1eb0af3612",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "acb57243-df4c-476f-b41b-cad13448f7ad"
        },
        "item": {
          "id": "aaec3857-a179-4206-89fd-404c2a45e8e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1ac9251d-8284-43ac-9e2e-c58df45d3e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52512b5-27b3-4364-b8ae-6c91ebe84d2f",
        "cursor": {
          "ref": "681ff2a5-30d2-4ae3-a40a-07fc7ed96896",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ec57800b-c201-49ba-89b8-cc1603446fb5"
        },
        "item": {
          "id": "e52512b5-27b3-4364-b8ae-6c91ebe84d2f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "20d11622-1b10-406e-b7f3-eff4fa8d1b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4e0120-7c58-4e6d-81e3-0d4635c0e636",
        "cursor": {
          "ref": "02be795e-fd10-401b-94c1-79804ffe9132",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "735e3be2-7d2f-4280-a6d0-4b52e64a4696"
        },
        "item": {
          "id": "8c4e0120-7c58-4e6d-81e3-0d4635c0e636",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dfbb7a58-ec1e-4eae-a9d8-062624d8f07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1b7ec8-5eca-4e6f-a1b1-ef91a811e887",
        "cursor": {
          "ref": "7d758773-2eff-4987-bad4-e132b518dd4f",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1f59a084-5964-4853-9c5b-2273d1e3a64a"
        },
        "item": {
          "id": "8d1b7ec8-5eca-4e6f-a1b1-ef91a811e887",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8d6441f9-79eb-4f2a-8095-2cf4bdcc569f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ee5d3ca8-f23f-4ce4-bd29-2209a6b80a10",
        "cursor": {
          "ref": "2dfec02d-8683-44ca-ba90-ec545df00e69",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f47d5e08-3442-4e9b-aaf5-df6dfe6bc660"
        },
        "item": {
          "id": "ee5d3ca8-f23f-4ce4-bd29-2209a6b80a10",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c6a6e544-f319-4b72-880d-2d60227baf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8980d0a-e778-48a2-b2d6-a0c848245cbd",
        "cursor": {
          "ref": "be860d05-4792-4acf-9f63-f67e01cff28e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2b2e30f4-cc64-40b9-b649-8ee33aa67470"
        },
        "item": {
          "id": "c8980d0a-e778-48a2-b2d6-a0c848245cbd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c488fea-8da7-4ef7-9407-f1820cc768d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edba30b-6e3b-49de-bdc3-a5fa9844999a",
        "cursor": {
          "ref": "2c90d7c3-1a74-4c81-bce8-cf5aba7e7b91",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "32ac5789-2652-46be-8cc7-1a2122325163"
        },
        "item": {
          "id": "0edba30b-6e3b-49de-bdc3-a5fa9844999a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "efc28851-511b-4f89-9b4f-dc84037ff327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9475994-4a91-4104-a393-94f401650a80",
        "cursor": {
          "ref": "9b4dcc5e-4411-4fce-9e38-c1127111e9c7",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8c06b08b-6dc0-4ecb-ba59-88d01a62be6e"
        },
        "item": {
          "id": "d9475994-4a91-4104-a393-94f401650a80",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "133067aa-569b-41b4-a9a6-f2fa51f2c5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd306ece-cc96-403d-acfb-eb654a461c51",
        "cursor": {
          "ref": "0b2d261d-7a66-408a-ba17-a7cf42bd1715",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0073dac6-8848-4e96-bbce-6db8a21731d5"
        },
        "item": {
          "id": "fd306ece-cc96-403d-acfb-eb654a461c51",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5fb59d0b-7d3f-450b-b6d0-82573f4dda58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e67add6-d1c1-4620-a8a0-8c50bd2d4063",
        "cursor": {
          "ref": "61e9b6af-1590-446a-bc2e-a2cf5460f269",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9e7c9059-1117-46a5-bfca-ebcfe3d56778"
        },
        "item": {
          "id": "8e67add6-d1c1-4620-a8a0-8c50bd2d4063",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3a21a3a1-d6eb-46a6-9001-a8b400cb8f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9e6df9-a4b9-405c-8ec3-f6f6c78f7ff1",
        "cursor": {
          "ref": "c10f3a50-7e7a-4d3d-ba66-9d85faef89b3",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "718c36ef-7f09-4f75-b225-535cf89950ca"
        },
        "item": {
          "id": "ed9e6df9-a4b9-405c-8ec3-f6f6c78f7ff1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "695cb6f7-b9ed-42db-9351-aa2e158a9994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2161e43-e3f5-4aa1-b75f-6837d052a98a",
        "cursor": {
          "ref": "1371e7e4-8f54-4082-b272-b85162afcd4c",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c4f8c906-89c1-44df-9cf3-8285b6064d13"
        },
        "item": {
          "id": "b2161e43-e3f5-4aa1-b75f-6837d052a98a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cd2f8017-1478-443b-8622-dadcf69d8a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827d02af-365d-4109-b585-343a13522f4e",
        "cursor": {
          "ref": "8e92d8ac-c7ad-467a-91bc-02bd7d223b7c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cd045137-685f-4775-8a07-c378c589ed91"
        },
        "item": {
          "id": "827d02af-365d-4109-b585-343a13522f4e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ed71366b-f44b-4da4-9a22-62f70e208dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2011c3-8b53-4eed-a5cd-49a6f495ded4",
        "cursor": {
          "ref": "53afdafb-1cc8-4cd0-969d-5d1251e63e39",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e532f25b-4800-44a7-b561-e57cf7e884c9"
        },
        "item": {
          "id": "ec2011c3-8b53-4eed-a5cd-49a6f495ded4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "382924e3-2641-4c43-a319-2033cf88470c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51815b6c-55d7-403b-9ad0-7117d5915c85",
        "cursor": {
          "ref": "55a5b437-b690-4691-b6ec-acc8c1a9ab59",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8d6b0aa3-130f-4067-9739-94fb4441a960"
        },
        "item": {
          "id": "51815b6c-55d7-403b-9ad0-7117d5915c85",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e7af677c-0ae0-4a4b-971f-5bdf7828984a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f952b0-5e79-4467-af61-1bb812ed0a44",
        "cursor": {
          "ref": "e0d1c31f-dd47-4d43-9a5e-a00be76d39f4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0ef0b449-cf5f-49b4-86a1-e049f36693bf"
        },
        "item": {
          "id": "99f952b0-5e79-4467-af61-1bb812ed0a44",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "26c4565e-ecc9-4e02-a727-b372d275e655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f9bdac-1f47-4a30-9b17-7933b12ecaa9",
        "cursor": {
          "ref": "af8f7f1d-059d-4087-8cbb-08c3523ef12f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "92f04124-cd46-4820-8446-c975f68b4258"
        },
        "item": {
          "id": "c1f9bdac-1f47-4a30-9b17-7933b12ecaa9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1f0de080-e0db-435c-b931-9b174e73e7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627dc137-92cc-4ef2-b232-9d1221684474",
        "cursor": {
          "ref": "2037165a-9389-4d44-8cca-afad3255d179",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "44373d55-38bf-4086-a271-dedac05a4eba"
        },
        "item": {
          "id": "627dc137-92cc-4ef2-b232-9d1221684474",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "35e3dd22-221d-430d-8573-2db299ff4be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ad2a95-04e4-411a-82e1-c86909444174",
        "cursor": {
          "ref": "697e5b17-b85c-4022-829b-7316df7910d9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d6cf70f7-24a8-4c5a-b5a8-c648a0abf2bb"
        },
        "item": {
          "id": "67ad2a95-04e4-411a-82e1-c86909444174",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "232ef769-122b-4878-9e8b-29b9dac95541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac61d5d-430a-40fd-9bee-875ac3c88a13",
        "cursor": {
          "ref": "9add24cf-4e98-40f2-8cd3-d62c405cc3dc",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7283355a-26cf-4b47-9c49-58251d884253"
        },
        "item": {
          "id": "bac61d5d-430a-40fd-9bee-875ac3c88a13",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57ca3d2a-465d-41c7-9712-041f76229821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2072c99b-f766-47bd-9fd6-1b518a8a58ec",
        "cursor": {
          "ref": "4c76f0e1-9df8-409a-b19b-f6b3ff444b7f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4923e32d-3dd1-4498-b008-6822ce726266"
        },
        "item": {
          "id": "2072c99b-f766-47bd-9fd6-1b518a8a58ec",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "36fc523e-ba1f-431d-9925-5d38a0773ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b300c55-b487-4418-80db-82f8d45dad95",
        "cursor": {
          "ref": "7a8ba865-28b4-4a38-b776-430237bceef9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "33128887-2a7e-4a57-b694-61035b49ba3e"
        },
        "item": {
          "id": "6b300c55-b487-4418-80db-82f8d45dad95",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b3c5009f-91ea-4caf-99d6-701238266a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29caef4e-0d89-4586-b5c4-c0ab553ffc97",
        "cursor": {
          "ref": "05f98b63-cd97-4d86-84f2-2d50516fd1c7",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2e4abe99-d124-4873-8ed8-68ce4aeeb678"
        },
        "item": {
          "id": "29caef4e-0d89-4586-b5c4-c0ab553ffc97",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f0f0e564-352a-4475-9a83-0317f54bb701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eacb638-337b-4087-b4eb-93d28da757b0",
        "cursor": {
          "ref": "8108371f-dff6-4332-91d7-3d194274d09d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c5b78abd-a4ba-4b20-8e93-c872440d343a"
        },
        "item": {
          "id": "6eacb638-337b-4087-b4eb-93d28da757b0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d57a3207-a14b-433d-999c-320a47886dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b22026-faa7-4b26-b28a-7a936e1e5f96",
        "cursor": {
          "ref": "33181737-90c7-47d6-b211-2719e4986432",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2d9a3af2-2cc3-4cc2-9105-c7a34574e7df"
        },
        "item": {
          "id": "c6b22026-faa7-4b26-b28a-7a936e1e5f96",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9994d254-99f3-42d6-ad9b-dd2f97821e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e22743-1260-44ea-8907-59cc4f8d966d",
        "cursor": {
          "ref": "972fa330-b400-4bee-aaaf-ed3645f0f30c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0fd59d9-8121-485e-b361-e5b6ac55ccda"
        },
        "item": {
          "id": "41e22743-1260-44ea-8907-59cc4f8d966d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e20d954b-2533-4c9d-8240-932f466eda86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb7d672-607f-4e9e-8176-65dd54acebaf",
        "cursor": {
          "ref": "8f8dd4e8-0ca8-4b57-bea2-35447305929d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "436ea11e-9af2-46da-bd35-1a8cea159a81"
        },
        "item": {
          "id": "7eb7d672-607f-4e9e-8176-65dd54acebaf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "40791ea8-05bc-4d6a-b2b2-dadf470b8841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a62ed3-12c3-4eec-8612-3be1808de10e",
        "cursor": {
          "ref": "fb25bea1-a15e-4006-aa88-28ec5f720fe8",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6f5233d2-40d8-46d7-8ca9-0d0203e62780"
        },
        "item": {
          "id": "f3a62ed3-12c3-4eec-8612-3be1808de10e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "848aaf4f-2d26-443c-98b0-50f5e83e6ceb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de49f88-92b3-41e0-b5d1-71c7a9a9fd11",
        "cursor": {
          "ref": "4db0c0e8-a893-4a33-bafe-bd189f044568",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "965e883b-337a-40b9-b940-fa9ee80b981a"
        },
        "item": {
          "id": "2de49f88-92b3-41e0-b5d1-71c7a9a9fd11",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6fe0ed9b-b693-468a-bc08-90692bc7fe8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca8ab80-8078-4e02-853e-ed2e77248680",
        "cursor": {
          "ref": "6d6a295e-074d-4dd3-8e59-d39822ee24e4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d3547bf5-6dcb-415b-82e1-90fd1be0b535"
        },
        "item": {
          "id": "2ca8ab80-8078-4e02-853e-ed2e77248680",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "503e7ca4-f6f1-40d3-bc8a-8d73bbbd2ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1184e076-e80b-4aad-9a18-8f9f4d4bb913",
        "cursor": {
          "ref": "8e027aa7-d249-487a-896d-213817ac3da6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "31789c0c-c80f-4a5a-b5c3-5e5cad8e1c1c"
        },
        "item": {
          "id": "1184e076-e80b-4aad-9a18-8f9f4d4bb913",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d4f70097-fbe6-42c6-9a86-27cbfd5fb662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b965fc-5c11-4d61-898a-75ffb5415418",
        "cursor": {
          "ref": "e2e21587-ce5e-49f2-9335-33a076c47b27",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6a5b536b-0c82-4e31-86b7-820e1e1c291e"
        },
        "item": {
          "id": "d4b965fc-5c11-4d61-898a-75ffb5415418",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "368ac1de-7e9f-48d2-aed7-003f1c3fe659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f66b252-5c9a-4ee4-91d4-4fabb3d0d05c",
        "cursor": {
          "ref": "4ff71828-2473-4166-a3fc-bd8d6afbb033",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6cc0f7db-624d-47a2-b4e2-c189a475916a"
        },
        "item": {
          "id": "2f66b252-5c9a-4ee4-91d4-4fabb3d0d05c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "526a1072-88e0-44d8-89ad-d642d26159a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1fc6a5-048e-4853-a7d8-740ef45f7b00",
        "cursor": {
          "ref": "23a8bd40-7f3c-46b6-a1bf-77f298d312f2",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "28a083ef-5b4d-4d11-8c8f-434d50ae6381"
        },
        "item": {
          "id": "6b1fc6a5-048e-4853-a7d8-740ef45f7b00",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3d7381fb-1de6-4090-a069-00ca3f4b9984",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6c05d6ed-3851-4d16-9636-0de0c41d4acd",
        "cursor": {
          "ref": "04352346-6cab-4496-b2bb-ba8eea2612c6",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b4d1d3a9-3529-484f-b3fd-9110ffd8f683"
        },
        "item": {
          "id": "6c05d6ed-3851-4d16-9636-0de0c41d4acd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "96e4764c-217a-4848-b429-a6655fca5e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81f982f-f6eb-46e9-ba2a-7fee14d5e21b",
        "cursor": {
          "ref": "4b5a0d89-1116-4391-8af6-15b383b0646f",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b510a185-1bd6-44d9-88c5-6418bf5792da"
        },
        "item": {
          "id": "b81f982f-f6eb-46e9-ba2a-7fee14d5e21b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f8a28d5b-ea65-4346-9868-df46f45a917c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf62ae9-1995-421f-ba20-1f4dc8b68d13",
        "cursor": {
          "ref": "0c67732b-4e7c-4146-863d-16490f67c2a0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fa9fb74d-5396-4f3a-b636-f575a6cd4e1f"
        },
        "item": {
          "id": "bcf62ae9-1995-421f-ba20-1f4dc8b68d13",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "729acc5a-a68f-49d4-a65d-0be85310e3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115eaa71-1b7f-4351-b0dc-9bed716de391",
        "cursor": {
          "ref": "0c6108cf-2d66-49de-9ce6-9390ea08bd7a",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9b64d9a5-f176-4b3d-8fdc-260292f5bfd0"
        },
        "item": {
          "id": "115eaa71-1b7f-4351-b0dc-9bed716de391",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d0bbb289-d68b-4c11-afcf-2b3d08817f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead9b87b-84d7-4146-b232-c8c013434637",
        "cursor": {
          "ref": "3d3ee717-1760-42d1-baab-3a779c8e33b7",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "acff5328-c66c-4c1a-882e-962925b44f7f"
        },
        "item": {
          "id": "ead9b87b-84d7-4146-b232-c8c013434637",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e63306ec-e1aa-4d22-993b-b25b9660a9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dad305f-d7c4-45b8-8761-b6e0f256ca17",
        "cursor": {
          "ref": "6ebc7ea4-452b-40b7-a8ea-ed1d19b61a65",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d9eb3e90-3162-45b7-b90e-2687773c85f3"
        },
        "item": {
          "id": "4dad305f-d7c4-45b8-8761-b6e0f256ca17",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f8da3670-e89a-4355-af66-b2f91db80837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dea8ca-acaf-49fb-af5a-0e148527ca22",
        "cursor": {
          "ref": "db6a8b1c-40c2-485e-bc0d-ea63bcc51ed7",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4bca1cd0-39a0-4668-8917-df04b48beb39"
        },
        "item": {
          "id": "40dea8ca-acaf-49fb-af5a-0e148527ca22",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4c98667a-0a5d-46a5-83a8-8b96e036989a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488c9fbf-13a3-45c2-91b1-2dc61f372345",
        "cursor": {
          "ref": "16d0fa37-39fa-4944-8406-24b588954315",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3f121b0f-0d0f-41a2-9050-da33580919a6"
        },
        "item": {
          "id": "488c9fbf-13a3-45c2-91b1-2dc61f372345",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e3076fe2-778e-4c65-9a22-d20db3ce9751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ba105a-907e-46a9-a978-e12558425bbe",
        "cursor": {
          "ref": "7d3cf6cd-9c60-4005-9ba2-4e3b63e98e49",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e76f06d3-0b62-4de0-a629-a82dfb035c47"
        },
        "item": {
          "id": "70ba105a-907e-46a9-a978-e12558425bbe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "505a3db9-5b92-426d-8ee5-6f6b6531d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8403bd86-743e-47bc-8c3a-223365764f12",
        "cursor": {
          "ref": "1c11083f-929c-4775-a1cf-0e5041f6b50f",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "03e3f0e5-7f2c-45d7-bb7c-d194ae404d69"
        },
        "item": {
          "id": "8403bd86-743e-47bc-8c3a-223365764f12",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "66731bd9-b573-4c82-8f20-6f6946d2790e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041154b8-af75-4497-8f48-817d5d39dde9",
        "cursor": {
          "ref": "c3889136-ebd8-4e16-b5f5-0b308fefd97d",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c4dcdc68-9026-47f3-95de-38dc126294ad"
        },
        "item": {
          "id": "041154b8-af75-4497-8f48-817d5d39dde9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8455df93-0218-475b-a596-b020c5ba5583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747723c7-5680-43d7-8cd7-32720a213502",
        "cursor": {
          "ref": "e3681dc8-fa57-44e0-bb30-2c0cf54ebb2e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d14c7800-e731-4d64-a17a-a03a38df59c2"
        },
        "item": {
          "id": "747723c7-5680-43d7-8cd7-32720a213502",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cecce7fb-9936-4c74-9a25-1e383021f91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e145c0d0-06c4-4b28-ad53-1c3073786bd6",
        "cursor": {
          "ref": "4b6419be-a5a6-479c-b179-896296e23a5e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5dce3c0a-8fb5-4ac6-93fa-de35b7e1bb3b"
        },
        "item": {
          "id": "e145c0d0-06c4-4b28-ad53-1c3073786bd6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "66fdad73-8fce-4600-8f0b-427b58917d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c19770-fab4-4c6f-bdc3-ab50e0daef0c",
        "cursor": {
          "ref": "868fbb3c-4b11-4365-9cca-76d23fdc9ec2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fea86fda-2cf8-439e-8ca7-2ba08d5dfdf1"
        },
        "item": {
          "id": "c5c19770-fab4-4c6f-bdc3-ab50e0daef0c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "346a3236-5bb7-4bfb-8c90-7e8f1a5c3281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15876a13-5b34-4594-a021-82b9166f5dd5",
        "cursor": {
          "ref": "97552a5a-59c8-4911-90f1-5f7b04b9f9d7",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "99793868-9fb8-4f35-980d-b6fe8461f172"
        },
        "item": {
          "id": "15876a13-5b34-4594-a021-82b9166f5dd5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bf505499-5404-4fda-928a-133772172013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32741690-73c6-4c5d-8b31-51d986fdd275",
        "cursor": {
          "ref": "ab788cb8-202c-4470-babb-beaf021eadb1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "14160dcb-501c-46bc-a30d-2d0b5c2c72d0"
        },
        "item": {
          "id": "32741690-73c6-4c5d-8b31-51d986fdd275",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cafaea5c-a006-4859-8fe0-63591ae4c46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234a01ea-bd17-4110-99c4-f28c6677d8e5",
        "cursor": {
          "ref": "11f3846a-8f75-4849-a6e8-332d7aa7c794",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "404f9fa3-4ea7-4a4c-a643-5db536eaed06"
        },
        "item": {
          "id": "234a01ea-bd17-4110-99c4-f28c6677d8e5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d41743fa-7168-4fdc-91bc-1df3e0bb5503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb1e2de-5495-47a6-8bbe-53403e3c572f",
        "cursor": {
          "ref": "d7cccef7-9adb-45e1-999e-153379e62283",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "390c8e7b-1bd1-484e-9955-cc06d3f49186"
        },
        "item": {
          "id": "deb1e2de-5495-47a6-8bbe-53403e3c572f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a9a3a288-af74-4d26-85eb-a87cc23b3c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a91de48-c1df-4027-a0b4-dad747ae263b",
        "cursor": {
          "ref": "f3df3f3f-b32c-4e7d-9e33-1524dfb61818",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "45890ab4-07cb-43ab-8a4f-6fb207105e88"
        },
        "item": {
          "id": "9a91de48-c1df-4027-a0b4-dad747ae263b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "235195df-e627-47d7-bd7d-a28d0ccfdc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f713e9f-6e38-419a-95af-6c8236ac539e",
        "cursor": {
          "ref": "5289db8c-4603-4de8-b64d-34626f92fb9e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0d5372e4-2c9c-4975-8158-3b4a10222390"
        },
        "item": {
          "id": "6f713e9f-6e38-419a-95af-6c8236ac539e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b69b047b-0b4f-498a-8a3d-a53e82a6e59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80a29a6-5ca9-489a-b9ff-49240dd7050e",
        "cursor": {
          "ref": "1bb99af8-29e1-4595-b786-dd64582ff588",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ab18b750-d96d-4933-bdb4-75387a1136f4"
        },
        "item": {
          "id": "b80a29a6-5ca9-489a-b9ff-49240dd7050e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0527a3be-8c6b-4155-a406-1e30d70a9386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08233c7-762f-4719-9025-dda114479387",
        "cursor": {
          "ref": "2e66b81c-3a8f-4829-8e67-384363fa0e09",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1eb7c1e9-f928-4095-91ef-9fa9195be2a9"
        },
        "item": {
          "id": "f08233c7-762f-4719-9025-dda114479387",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b0a6524d-ba7f-48b0-9d23-8fa0876c01fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913436d6-ac20-4d02-a2a4-d307b5422738",
        "cursor": {
          "ref": "0b4b1493-3ea7-4c53-98ca-442aa26d691f",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "26e57cb1-ff6d-4fb9-8399-fedbf26f8666"
        },
        "item": {
          "id": "913436d6-ac20-4d02-a2a4-d307b5422738",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7d384265-7e4c-43cd-8686-ca718c1f99b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491a8930-5d40-4830-a57b-5e4b3619b2a9",
        "cursor": {
          "ref": "5e7e5918-483b-4ed3-8380-12369496999d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "51c905da-d0fe-4969-9e3d-cf72b80ff125"
        },
        "item": {
          "id": "491a8930-5d40-4830-a57b-5e4b3619b2a9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1b78c1e2-778c-478c-978c-3d3849d4c7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1723ad6d-f8b7-464a-8a59-a9da2eb5992b",
        "cursor": {
          "ref": "db966d0f-0aed-4752-bdcd-4f95e88e0b7f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2a3d48cf-ec0b-4c89-ac55-a4d6038f2cd8"
        },
        "item": {
          "id": "1723ad6d-f8b7-464a-8a59-a9da2eb5992b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cfce96f7-8d5e-40c3-b069-a4b866008d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6097a9-bd3a-4c10-a60b-79d1bfb0b512",
        "cursor": {
          "ref": "c292b00d-a144-4e26-88a6-81d0d5b934d5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "04480461-6aac-4001-a69b-07d4a6f35dad"
        },
        "item": {
          "id": "0d6097a9-bd3a-4c10-a60b-79d1bfb0b512",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a0ab4f94-a476-40d1-a804-9fb607b9390f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118db703-6619-4cd7-b863-997d9db7ea18",
        "cursor": {
          "ref": "becff5d6-cad4-41b3-903f-331704dc299f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cf4849d8-5437-4b28-a44f-6b85b612855f"
        },
        "item": {
          "id": "118db703-6619-4cd7-b863-997d9db7ea18",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4bf6fce4-09f5-4d1d-b51b-fb5304c68728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d655bc21-23a6-4414-a0bf-5f71388fdba0",
        "cursor": {
          "ref": "d88ae00a-d1f7-49b2-9d26-892cecde545b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d74c2205-ffe6-457c-a380-a14407e440b6"
        },
        "item": {
          "id": "d655bc21-23a6-4414-a0bf-5f71388fdba0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d1514014-dcb9-4e62-b320-48971cc73d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc99b57-e571-4a65-b7c9-459850a77d70",
        "cursor": {
          "ref": "ac183f11-2801-4cb4-9a4d-52c48986becb",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1f31088b-799b-4196-9fd1-098b7575c15d"
        },
        "item": {
          "id": "bfc99b57-e571-4a65-b7c9-459850a77d70",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d40f7581-c151-4446-92e0-38289a1d7876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac3f981-1684-4fa3-a693-0f57e1218c61",
        "cursor": {
          "ref": "2286bcf3-85a1-49ba-ad7c-f27a966cc68f",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5e59b4c2-d0b6-4d27-a1b8-17af9eb3934c"
        },
        "item": {
          "id": "bac3f981-1684-4fa3-a693-0f57e1218c61",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6b0c10f1-4b6b-4aad-9afb-ea47c4aba85d",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e2c61e76-073c-4639-824b-95a92c44af8f",
        "cursor": {
          "ref": "7d40d316-ec77-4689-ae63-dc4e491b87f7",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fba0301e-c26a-4470-839f-676b0bafb585"
        },
        "item": {
          "id": "e2c61e76-073c-4639-824b-95a92c44af8f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3b1886e0-cb42-4de6-8408-17b16650279e",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "884ff842-b60b-4b92-b934-8eda386eedca",
        "cursor": {
          "ref": "54d204b8-05ba-4d5c-b0d1-917a2751b884",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8404aedb-8bef-41d4-9679-03e0657ad4cd"
        },
        "item": {
          "id": "884ff842-b60b-4b92-b934-8eda386eedca",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "73d4cdf5-8846-4500-ab88-0c1694b6106c",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3365eee1-0cc3-4319-b779-a1d68dfd401b",
        "cursor": {
          "ref": "ab30d5d2-1c68-4c9d-adf0-a8976baf7670",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "971e837d-d615-49ed-b565-cdadd21a2ae1"
        },
        "item": {
          "id": "3365eee1-0cc3-4319-b779-a1d68dfd401b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10a0ce42-04a2-4fbc-b51d-358f46c9800a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a26c2a-d7fa-4372-82c9-689bb5132902",
        "cursor": {
          "ref": "160d3bd7-93e6-4ddb-919d-1bb4894d4192",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2494d61c-32e8-4cd4-8705-6551085e5534"
        },
        "item": {
          "id": "24a26c2a-d7fa-4372-82c9-689bb5132902",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4e3e8106-fff3-42cb-8685-5ae0c15068d5",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "bd52cd9c-f7cd-453a-b296-f187ac072155",
        "cursor": {
          "ref": "01c63ea1-9d28-47a6-9156-6fae3eecd618",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "eb8f284e-0acd-4fb1-a7fb-7cb9dff357a8"
        },
        "item": {
          "id": "bd52cd9c-f7cd-453a-b296-f187ac072155",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b7039e35-85bf-4b1e-914a-0a05be7e6b30",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cd99b4ea-b880-4b60-b550-324e0e7f4985",
        "cursor": {
          "ref": "46dbf972-1ef5-4fc4-9051-0e28e675c1a4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "027a266b-22de-46e9-a557-c031bcea9ca5"
        },
        "item": {
          "id": "cd99b4ea-b880-4b60-b550-324e0e7f4985",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fa898c31-2f00-4385-bf31-533ff9681ee1",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "32e17dfc-e19b-4f75-af9f-7bb987e39858",
        "cursor": {
          "ref": "e3118d0e-010d-4ab7-923c-93ca7f124f5b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "75ba124d-3f72-43fc-96f0-0a9d6490a0cf"
        },
        "item": {
          "id": "32e17dfc-e19b-4f75-af9f-7bb987e39858",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b97ae8ff-b93a-4673-bb1a-69f63ddd94c1",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0ce17a3f-07ce-4c8d-9e3f-9e21ed5a8670",
        "cursor": {
          "ref": "4d2062c7-2419-40ee-85f4-ee32c1290818",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "820bc47b-5a3d-4316-9d1e-125684130c56"
        },
        "item": {
          "id": "0ce17a3f-07ce-4c8d-9e3f-9e21ed5a8670",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c0abd107-0862-49b1-b3fd-ad90a0d9c166",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a6b4ff39-0bc6-4d36-89d3-7a35748f5cdf",
        "cursor": {
          "ref": "064c18f1-68a7-4364-bf68-28626cfcc3dd",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dd5591f7-5251-450c-bf14-846d23cf4ff2"
        },
        "item": {
          "id": "a6b4ff39-0bc6-4d36-89d3-7a35748f5cdf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "36c58558-0573-48e4-9ba6-5e99deafbbc1",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "91a826d0-eb76-43b6-8c17-5a2ea6fe3aa3",
        "cursor": {
          "ref": "c744bc18-4a23-48cd-bcff-574f46b63480",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "99f6d61b-ceaf-4057-8d49-e6a5ad2aa663"
        },
        "item": {
          "id": "91a826d0-eb76-43b6-8c17-5a2ea6fe3aa3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "25e83ea0-8f7b-40fe-bf56-240ee48cf0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e058674b-f83c-4779-9ce9-c16a54583188",
        "cursor": {
          "ref": "d577dcdc-4272-4c3b-aa9a-da710ed7d375",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7b45f6e3-9262-43cc-8d4c-7dde6d8d85e2"
        },
        "item": {
          "id": "e058674b-f83c-4779-9ce9-c16a54583188",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a036694e-6d26-4e94-b6dc-799142cde672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d706d39a-3bb3-4c67-9864-593b917b51ef",
        "cursor": {
          "ref": "b18743de-0d62-4761-9067-261be10959a2",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d3290c77-7f3e-44fc-94f8-9c7b94c6f89e"
        },
        "item": {
          "id": "d706d39a-3bb3-4c67-9864-593b917b51ef",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8ca1eb03-e016-434d-81df-889e98b99d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843eb014-cdbd-418f-9532-33077011074e",
        "cursor": {
          "ref": "a8fb049f-c357-48f7-bb01-a001e0bcbc25",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "69ac8344-fced-4f0a-a797-492458e39d86"
        },
        "item": {
          "id": "843eb014-cdbd-418f-9532-33077011074e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d772040c-0188-4605-b66c-a05d57d9d2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8657878a-0d36-42e0-a1c4-93ba1e8664dc",
        "cursor": {
          "ref": "6e5b7d88-11b1-42d6-9b39-78dc01c033a7",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "845ef1ae-b4e5-4de4-8337-a601042c5a5e"
        },
        "item": {
          "id": "8657878a-0d36-42e0-a1c4-93ba1e8664dc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dc5af2f5-a0c5-4b09-b47a-d8e63b2323b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67e8eb-0353-40a2-add6-e8c090e2b555",
        "cursor": {
          "ref": "dae0d127-7c35-4137-b6e1-5beadcc15db5",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ed718ccf-c011-4674-a952-9447965d9e10"
        },
        "item": {
          "id": "6f67e8eb-0353-40a2-add6-e8c090e2b555",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21ed4536-e532-4ccf-acce-9ab2d3a4f5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288b5400-4ac7-4391-a981-cd4bffed608a",
        "cursor": {
          "ref": "7cacacda-2988-4d1d-b5fe-e336b6dc0b87",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1b34e4db-0c13-4fc6-bccc-a9f07aa84117"
        },
        "item": {
          "id": "288b5400-4ac7-4391-a981-cd4bffed608a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7b2f1fdd-e7ad-4849-a606-f1da7e135592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f8f1d5-ae9c-4adf-9774-58649cd22883",
        "cursor": {
          "ref": "cee8cede-23dc-4ba6-af5e-06822a34081d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0bf0d979-4394-46b0-9092-1d77140bd4af"
        },
        "item": {
          "id": "15f8f1d5-ae9c-4adf-9774-58649cd22883",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "01d0dfde-2b3e-4334-ad57-5d78bbe2fdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bc445f-f6f0-46da-b87c-a40755309794",
        "cursor": {
          "ref": "a0dc6725-dbc9-4490-8562-266a979c6e14",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "829efc17-25c1-44a8-9dd6-80c757b996d2"
        },
        "item": {
          "id": "89bc445f-f6f0-46da-b87c-a40755309794",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6b5890c5-50da-401f-a6d8-eeb2d3711572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf21f65a-ca30-4456-b9fb-6f1303c32eea",
        "cursor": {
          "ref": "1a78cb88-4372-4cec-b8df-8482c4c5599f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2f90cd99-b93c-4f5f-bf21-f7a279c869bc"
        },
        "item": {
          "id": "cf21f65a-ca30-4456-b9fb-6f1303c32eea",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e6730fed-c35e-4efe-8952-a0921e038cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03fb1f7-ff07-4a9f-8488-a4422b07599d",
        "cursor": {
          "ref": "20da2672-b10b-4a21-a70a-3ef6ba5fafb6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c72c10ac-fe04-44cd-89b8-322e0227dfd0"
        },
        "item": {
          "id": "f03fb1f7-ff07-4a9f-8488-a4422b07599d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b23f0769-b31c-46f0-bc18-7200bb45577f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47eff0dc-1364-46e1-ada5-cbae45f85f6a",
        "cursor": {
          "ref": "5802a84e-c076-452c-9548-471b4e430de7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "952fe964-1a2c-4373-8e20-2aa915d6dca7"
        },
        "item": {
          "id": "47eff0dc-1364-46e1-ada5-cbae45f85f6a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5a76727a-6b82-476f-8c06-ee872425aa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416137d2-95d3-4134-ad78-57f96cdab28e",
        "cursor": {
          "ref": "b2036c2c-0b0d-4ff4-9a9d-890818e86540",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1d42f3ac-2e71-491f-afe9-ab41c9ffbfbd"
        },
        "item": {
          "id": "416137d2-95d3-4134-ad78-57f96cdab28e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "92e9dc94-2ccf-49e9-8d9c-7a72975ecb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842442c9-7d2d-48f3-9992-88d895ae9c1a",
        "cursor": {
          "ref": "4a9a32e0-727a-4df8-8e1c-e043d47445e8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f0c591ee-126d-45a5-8994-cc78d5e70c8a"
        },
        "item": {
          "id": "842442c9-7d2d-48f3-9992-88d895ae9c1a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "94580b5b-6fa0-4175-85fa-d5c1eb9b3565",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "8a2a8e3a-a370-4fba-8a30-f138907dbf34",
        "cursor": {
          "ref": "d780649f-c010-4b65-b067-11b95c1905af",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3a23528a-4c43-451a-9401-4a5badd102a3"
        },
        "item": {
          "id": "8a2a8e3a-a370-4fba-8a30-f138907dbf34",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "34f61635-8d3f-4751-b7ed-2deef666d00a",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "76e44c53-438c-4cd0-bb33-8f874361af3f",
        "cursor": {
          "ref": "c056ce5b-d714-4f10-b5b2-6503a98e3f44",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "37903bf4-76b0-4c25-b78e-a9f1249e4739"
        },
        "item": {
          "id": "76e44c53-438c-4cd0-bb33-8f874361af3f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "503661bf-13e7-4854-b827-1d718345743d",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "544bd28c-1302-413c-bd62-c2052c0aaddb",
        "cursor": {
          "ref": "3ad59414-b707-4996-8b24-5e54f22e24d3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "20d6c98c-71d8-4df7-911f-a382b902ed62"
        },
        "item": {
          "id": "544bd28c-1302-413c-bd62-c2052c0aaddb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "77d7004c-f577-4043-91a9-ab37f7ea16cc",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "df7b190b-0f1e-4d8f-a142-9b0dc3eba7b3",
        "cursor": {
          "ref": "688fa557-100f-4896-8f53-ea56c223b03b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "46f6294e-a2ad-4f12-b567-9562e7086885"
        },
        "item": {
          "id": "df7b190b-0f1e-4d8f-a142-9b0dc3eba7b3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6b6e999b-ac94-450f-befa-51bcc9cbfcd8",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f5b24090-1b71-4325-a820-c5df95e671b9",
        "cursor": {
          "ref": "f1d33b72-6855-4ad8-b8e0-a63aae2c93e8",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4acf0f30-432b-4a87-be6a-c1f7a2bf55d7"
        },
        "item": {
          "id": "f5b24090-1b71-4325-a820-c5df95e671b9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3b1a99e3-d4fe-4e66-9bf5-03c8f421a6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67179f4-582f-4ec2-92e9-1e473cdfb3e0",
        "cursor": {
          "ref": "fdf54ca9-3023-4d0b-98bf-02c7abc719e3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4b88b783-9c77-4b65-afc7-fe251983a09e"
        },
        "item": {
          "id": "a67179f4-582f-4ec2-92e9-1e473cdfb3e0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "673b8417-2e55-46f4-9047-cf3ae8bf3dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da68205a-4fb5-4f6e-a3d5-72e8774420d4",
        "cursor": {
          "ref": "34260c65-736f-49d0-9ea2-4824496ee50b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f2acd2bb-c926-4e9d-accc-6b2871d180d0"
        },
        "item": {
          "id": "da68205a-4fb5-4f6e-a3d5-72e8774420d4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "058ee7bd-dfa5-4baa-b940-c97a16b08d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011274ca-8177-42a5-a551-58696aeda1ce",
        "cursor": {
          "ref": "d452838f-de7c-4410-bff5-45b27a27b527",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "932fbbdd-6174-45d4-afcc-2be91bc4be1a"
        },
        "item": {
          "id": "011274ca-8177-42a5-a551-58696aeda1ce",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7735b1cd-e5ee-4631-91af-235bbe20299e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efcab96-e2da-4f4b-9628-620659926f59",
        "cursor": {
          "ref": "496ade93-6e1a-4702-838e-08696d923dca",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6a316540-28a3-435a-b531-6d23e442e428"
        },
        "item": {
          "id": "8efcab96-e2da-4f4b-9628-620659926f59",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a16ef2dc-ad33-45a1-bff4-af0209aaf997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ca45e-664e-4dee-889f-d5a96d0a71a8",
        "cursor": {
          "ref": "412505ba-dd52-42a3-9cd3-65bf0e476bd1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4fc8273f-ade9-41b1-96b7-59b8b5c69b86"
        },
        "item": {
          "id": "d10ca45e-664e-4dee-889f-d5a96d0a71a8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f9a21db7-003d-4208-9af9-8f3fd0a6c479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943f7a84-e7b2-4216-9d93-dd2739c42684",
        "cursor": {
          "ref": "94c8d1bb-6e41-4562-afad-24b493725d05",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d169cba-fa0e-45b7-9667-5e84d7a8ebbf"
        },
        "item": {
          "id": "943f7a84-e7b2-4216-9d93-dd2739c42684",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2de7f7fa-f8aa-4003-8dce-6f8640dfa484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8aab2c7-a208-48db-94b0-ab995150aee5",
        "cursor": {
          "ref": "614c3acd-a26f-4fd4-85c6-c2afc378112c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c31d292b-05ef-44a6-9377-08b93928198c"
        },
        "item": {
          "id": "c8aab2c7-a208-48db-94b0-ab995150aee5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "66ba09b3-fff0-4f77-92a0-ab0d760a9b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580f5c7f-e3d6-4d28-adeb-359ea93ad8bc",
        "cursor": {
          "ref": "1e116df9-6799-4b5c-9f5f-56114c2392c7",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "14b5ecf9-d2e8-47cc-97cd-969e86521fbd"
        },
        "item": {
          "id": "580f5c7f-e3d6-4d28-adeb-359ea93ad8bc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e7f45888-d364-4609-9926-c5c314e530dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3580c5-7e4e-4d76-8f5a-f8a58a52b672",
        "cursor": {
          "ref": "7964e2c7-dfee-4b0c-84fe-73286efa53af",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dd7bb9b0-41a7-4d3f-88f2-a2cc0dea221e"
        },
        "item": {
          "id": "ff3580c5-7e4e-4d76-8f5a-f8a58a52b672",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bc37d342-2282-4aec-9f03-d9d41006db78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2ef3a6-a545-48e1-89ec-032443f5adb1",
        "cursor": {
          "ref": "2491383e-2323-4ba9-9a7b-befb1c460064",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3f6ebf28-f9ec-4312-9a41-e359a5f9822a"
        },
        "item": {
          "id": "6a2ef3a6-a545-48e1-89ec-032443f5adb1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0bd9bc3c-e76c-408c-a221-8f32b3e88a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc4487d-ee11-4a34-b716-2d1d6086647c",
        "cursor": {
          "ref": "0ab9062b-a4fa-4fa5-9382-efc116d20a26",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b62d27b0-8b03-489b-92ee-0d5afaa652c1"
        },
        "item": {
          "id": "cfc4487d-ee11-4a34-b716-2d1d6086647c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b4267ff7-d7a0-4fea-be86-499f30c18ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac6c0fc-4f47-47f6-b537-02830520d778",
        "cursor": {
          "ref": "c1eac5cf-4f66-4282-8ffc-3ec57d31edfa",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e9fd4de2-4b29-4a48-8a80-d35b2df8be47"
        },
        "item": {
          "id": "fac6c0fc-4f47-47f6-b537-02830520d778",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b44e2d82-a286-4294-801b-568ec1396a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e000b0-231d-4123-b49c-b38fe9a64808",
        "cursor": {
          "ref": "3171ca78-32bc-4661-8db7-bf55875bf43a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a576cba9-ac63-4507-8923-736022da9f60"
        },
        "item": {
          "id": "31e000b0-231d-4123-b49c-b38fe9a64808",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f70a0668-7063-4693-9e16-d1f06c022c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb42bdee-5fcc-416e-bdca-dcce8102a8f7",
        "cursor": {
          "ref": "21f4ac91-5789-4797-aee0-db82bb2cd64d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b53a5120-b1ae-45de-a5d9-cea39b5ed2b4"
        },
        "item": {
          "id": "fb42bdee-5fcc-416e-bdca-dcce8102a8f7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b0a25c5d-eaac-4383-b1f9-b41e29be56cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b59454-c431-494e-9871-f9f5617b5609",
        "cursor": {
          "ref": "fbdf373e-0940-4a2b-94e1-f977b46a867a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7152a200-5d97-4343-b499-60b1c38b047f"
        },
        "item": {
          "id": "43b59454-c431-494e-9871-f9f5617b5609",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c26138d5-fbcd-44bb-9be0-9509026b7612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7201c0-da66-4874-84db-446f9f2ebd25",
        "cursor": {
          "ref": "bdb0c9d5-5638-4f72-a32c-74cf55fc765e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d2012736-8a38-4cba-bf1a-5cdb4ec0eb4e"
        },
        "item": {
          "id": "ad7201c0-da66-4874-84db-446f9f2ebd25",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fb115c40-0794-4c74-b7bf-8a56db335ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c902fa9c-1c2e-4659-ab23-678c12ec7f21",
        "cursor": {
          "ref": "1a156a61-f938-4a35-b4f0-a08baf41a622",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "320d842a-b278-4d18-9eeb-afeb83812c63"
        },
        "item": {
          "id": "c902fa9c-1c2e-4659-ab23-678c12ec7f21",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1582f321-1111-49ab-98e5-b0c4224f51e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62998b5f-46ea-44cb-a905-c3a8a3f7db80",
        "cursor": {
          "ref": "9ff4e63f-051e-41d5-baab-a6aef786b782",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "82896303-07e3-44f3-8482-55314a29633a"
        },
        "item": {
          "id": "62998b5f-46ea-44cb-a905-c3a8a3f7db80",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d36a1a81-3ea1-49f0-b1dc-6e5df4a09f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e86fb2-cac0-4cb9-bb2d-5cd606d9a7e3",
        "cursor": {
          "ref": "5189b03f-5306-478a-ba77-13de446601f1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bb0eb540-959e-4207-80c3-e05f199b9377"
        },
        "item": {
          "id": "84e86fb2-cac0-4cb9-bb2d-5cd606d9a7e3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8be54043-0504-490b-b8fc-fab3ca17cd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28106cd-84a8-4882-9b90-f12177227514",
        "cursor": {
          "ref": "3e7cf9e6-ec26-4f61-9889-5f03c77531a9",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d4d170fe-1a8a-405f-9dab-e74ff20ffcd8"
        },
        "item": {
          "id": "a28106cd-84a8-4882-9b90-f12177227514",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ee6fcd53-caab-49d2-86ab-831f23433d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c59ec9-0792-4b5e-be57-e1263e105aa8",
        "cursor": {
          "ref": "495c6da1-c3a8-4c22-8e4f-5370d41dba5e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "06d27b77-ebb3-4ac1-9e06-7dec0ed2e53b"
        },
        "item": {
          "id": "b1c59ec9-0792-4b5e-be57-e1263e105aa8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e83fa930-7f12-453d-9f92-4f48a22d5113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d64771-2524-451a-a286-162fa8c17438",
        "cursor": {
          "ref": "49c8f165-9634-45fa-ae3a-86e2d73ee7b2",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "37840c4c-02a0-490d-be66-554e84741d32"
        },
        "item": {
          "id": "e2d64771-2524-451a-a286-162fa8c17438",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "64566a57-efa9-4e23-a0ea-d58edfbcead2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951dc129-56f1-4b81-b0a5-c277b247b9e8",
        "cursor": {
          "ref": "b80297e4-6fdd-4607-b01e-17f73ab222d3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "13474d3b-6835-46e9-b914-ad32ab2e79c5"
        },
        "item": {
          "id": "951dc129-56f1-4b81-b0a5-c277b247b9e8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7085c1a1-198d-4988-b94f-d9aa256dc879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cfb2dd-0d68-4c3b-bd5c-857d8cc1b8a3",
        "cursor": {
          "ref": "6659788a-5314-4675-9b44-3dfed4b8e6b1",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e57a3d65-ef5a-49e3-9c1d-5c96ed79f9ff"
        },
        "item": {
          "id": "a7cfb2dd-0d68-4c3b-bd5c-857d8cc1b8a3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a96bc9fd-eaad-4f68-a7f9-628ee7bdb0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d933960-1681-4e76-b556-2e43713554cf",
        "cursor": {
          "ref": "d8491202-cec0-4812-91aa-d751ed04fe01",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cd4bad11-66a1-4371-8008-61431c3b9b90"
        },
        "item": {
          "id": "0d933960-1681-4e76-b556-2e43713554cf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7be5c77-94a1-42cc-a020-2764d2527c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaecfa4-c8f3-43f4-b2bf-8594bbdb4c09",
        "cursor": {
          "ref": "ffd05008-8870-492e-aacb-e2441aa5d5f2",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a39f52f9-8f8e-45d0-83f4-3c714540ae96"
        },
        "item": {
          "id": "5aaecfa4-c8f3-43f4-b2bf-8594bbdb4c09",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "61740b5b-8102-4953-b725-30852fab79da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1380b4dc-85e0-4285-90b0-f12d4579d335",
        "cursor": {
          "ref": "d59af4cc-f023-405b-9533-7e2a7c11d336",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e3aaddd4-4e90-47d2-b7bc-e15205c069df"
        },
        "item": {
          "id": "1380b4dc-85e0-4285-90b0-f12d4579d335",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f6bb74f7-dc01-4ae7-bc5f-14f3296bce25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc844d1e-8b28-4e0b-8967-3544759708fe",
        "cursor": {
          "ref": "6c377ebb-5824-45b9-924f-27678f360d38",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "edc08eee-ebfe-44f2-b8f0-3a8332e884d8"
        },
        "item": {
          "id": "cc844d1e-8b28-4e0b-8967-3544759708fe",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ba3f3059-6fb9-453c-99f6-e7b49c576d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db6b464-e287-4d83-8536-85d75f919dfd",
        "cursor": {
          "ref": "35f4f17a-8171-4a2e-bcc4-dacd5aba0507",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "beaa6e3d-e0fa-4a74-8dfb-d2ffb5a7ad4b"
        },
        "item": {
          "id": "2db6b464-e287-4d83-8536-85d75f919dfd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "66eddcf0-0450-44a3-a1a5-5ab6474187a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d30cd4-9eaf-43ee-b200-599ac3c893fc",
        "cursor": {
          "ref": "787f24fd-869c-4579-b059-39e742b71d50",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4705d824-5d77-4abe-b8b2-b2839d2cfd3d"
        },
        "item": {
          "id": "05d30cd4-9eaf-43ee-b200-599ac3c893fc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4007c579-e30a-42dd-88ac-d8639081d243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348fb604-6cc0-46ad-922a-b1e7885fbe12",
        "cursor": {
          "ref": "471fe729-227c-466c-adc7-007a610961a9",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6271d57a-ffcd-40a6-90e7-7e61a60b8728"
        },
        "item": {
          "id": "348fb604-6cc0-46ad-922a-b1e7885fbe12",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5e3b6ba8-e263-4a04-a828-cf9ad04f489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad4386e-29a3-4f7e-9d8c-a4eec7985caa",
        "cursor": {
          "ref": "f7f025ff-cf8b-463e-95fe-2acb04f71416",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3985fcd1-f775-47dd-8de2-c119e8afdfa4"
        },
        "item": {
          "id": "dad4386e-29a3-4f7e-9d8c-a4eec7985caa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6f5e6850-288f-48e7-bad2-a1bdf6a31e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e870e30-0599-4dbb-85b7-4fbfd75dceda",
        "cursor": {
          "ref": "e3ff1858-2662-4efb-ae93-897be459f6b7",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "282aebda-2ff9-4421-bbc4-85a45d0a9c69"
        },
        "item": {
          "id": "0e870e30-0599-4dbb-85b7-4fbfd75dceda",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "92a8d0aa-93b0-4baf-94c2-e96323e2e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b95e81-64da-41e4-939e-a909300521bd",
        "cursor": {
          "ref": "ff9ab594-df25-4680-8b67-b64106f8bf87",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b711d11e-4bf0-4c9f-a73e-34cbb0e966e3"
        },
        "item": {
          "id": "55b95e81-64da-41e4-939e-a909300521bd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a29cc132-1183-476f-9ea7-0601de4b0f31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f36c8e-e2a2-4180-bad5-1133f354836f",
        "cursor": {
          "ref": "93b34c81-f458-4ec0-b3cb-d23776dad45d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3014a377-2e02-48e1-8577-b0cf3890d97a"
        },
        "item": {
          "id": "f4f36c8e-e2a2-4180-bad5-1133f354836f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c2e92236-28f1-43fe-91b7-338925863e4a",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2f20e975-094b-4a21-bd14-8b1394875fb7",
        "cursor": {
          "ref": "087db9d1-3211-4cc4-92ff-929508b978f5",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8dcb329b-f584-405c-a751-f6fbdc43f79b"
        },
        "item": {
          "id": "2f20e975-094b-4a21-bd14-8b1394875fb7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "448dfa5b-a09d-48a3-a38a-01d8d2d655e5",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "021caf99-6571-4484-a56e-4489ab3410c3",
        "cursor": {
          "ref": "a83f6472-7915-4148-828e-14317cd39c0e",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0e3e3479-e2df-4752-aec6-ecf741dde9ee"
        },
        "item": {
          "id": "021caf99-6571-4484-a56e-4489ab3410c3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "80233773-9aaf-42b6-8f5f-28bf53e654db",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "59936bea-825d-4f2e-a42b-09665023c819",
        "cursor": {
          "ref": "48224e05-9413-45bf-a5d9-5f386d29b550",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ddc75215-9303-4594-9c4e-786a10f76a68"
        },
        "item": {
          "id": "59936bea-825d-4f2e-a42b-09665023c819",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8508352e-9b6e-4ed9-998f-e5bce299644c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59936bea-825d-4f2e-a42b-09665023c819",
        "cursor": {
          "ref": "48224e05-9413-45bf-a5d9-5f386d29b550",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ddc75215-9303-4594-9c4e-786a10f76a68"
        },
        "item": {
          "id": "59936bea-825d-4f2e-a42b-09665023c819",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8508352e-9b6e-4ed9-998f-e5bce299644c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86805b0-1d40-4606-88fb-5c9a3f0ab874",
        "cursor": {
          "ref": "43008d93-6f7b-406a-904f-580a895c202f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c0f3386e-5f9a-4fa8-9574-0c0bdee03da1"
        },
        "item": {
          "id": "d86805b0-1d40-4606-88fb-5c9a3f0ab874",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "af5503fd-7a4e-492d-84b2-829a234e25c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ee8f35-b9a9-44f9-902d-cd5e130ab6b4",
        "cursor": {
          "ref": "0351ec2b-bc1e-4e7a-a5bd-1e8aadcbd234",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c706d515-a352-4a49-9318-0d5e1aab9dad"
        },
        "item": {
          "id": "d4ee8f35-b9a9-44f9-902d-cd5e130ab6b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9be40b49-cb74-4f36-97f6-19ea6905dfbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}